
&НаКлиенте
Функция сбисСоздатьМенеджерКриптографии(Кэш, Алгоритм = Неопределено) Экспорт
	
	Перем Менеджер;
	
	ОписанияПрограмм = сбисОписанияПрограмм(Кэш);
	Если Кэш.Свойство("МенеджерКриптографии") Тогда
		Возврат Кэш.МенеджерКриптографии
	КонецЕсли;
	
	Для Каждого СвойстваПрограммы Из ОписанияПрограмм Цикл
		
		Попытка
			ИнформацияМодуля = СредстваКриптографии.ПолучитьИнформациюМодуляКриптографии(
				СвойстваПрограммы.ИмяПрограммы,
				СвойстваПрограммы.ПутьКПрограмме,
				СвойстваПрограммы.ТипПрограммы);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ИнформацияМодуля = Неопределено Тогда
			Менеджер = Неопределено;
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.ПараметрыСистемы.Клиент.ВерсияПриложения, "8.3.13.0") Тогда
				Менеджер = Вычислить("Новый МенеджерКриптографии(СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы,ИспользованиеИнтерактивногоРежимаКриптографииИспользовать())");
			Иначе
				Менеджер = Вычислить("Новый МенеджерКриптографии(СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы)");
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;

		Если Алгоритм<>Неопределено Тогда
			Если Алгоритм.Найти(Менеджер.АлгоритмПодписи) = Неопределено Тогда
				Менеджер = Неопределено;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Прервать; // Требуемый менеджер криптографии получен.
	КонецЦикла;
	Если Менеджер = Неопределено Тогда
		ВызватьИсключение("Не удалось создать менеджер криптографии. Возможно в настройках неверно указана программа электронной подписи.");		
	КонецЕсли;
	Кэш.Вставить("МенеджерКриптографии", Менеджер);
	Возврат Менеджер;
	
КонецФункции
&НаКлиенте
Функция сбисОписанияПрограмм(Кэш) Экспорт
	
	Если Кэш.Ини.Свойство("Конфигурация") и Кэш.Ини.Конфигурация.Свойство("мПрограммыЭП") и Не ЗначениеЗаполнено(Кэш.Парам.НастройкиКриптографии.ИмяПрограммы) Тогда
		ОписанияПрограмм = сбисПолучитьНастройкиКриптографии(Кэш);
	Иначе
		ОписанияПрограмм = Новый Массив;
		СвойстваПрограммы = Новый Структура("ИмяПрограммы,ПутьКПрограмме,ТипПрограммы", Кэш.Парам.НастройкиКриптографии.ИмяПрограммы,Кэш.Парам.НастройкиКриптографии.ПутьКПрограмме,Кэш.Парам.НастройкиКриптографии.ТипПрограммы);
		ОписанияПрограмм.Добавить(СвойстваПрограммы);
	КонецЕсли;
	Возврат ОписанияПрограмм;
КонецФункции

&НаКлиенте
Функция сбисПолучитьНастройкиКриптографии(Кэш) Экспорт
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.Ини, Кэш.Ини.Конфигурация.мПрограммыЭП);
	
	НастройкиЭП = Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(Кэш.Ини.Конфигурация.мПрограммыЭП, Неопределено, Новый Структура, Кэш.Парам);
    Возврат НастройкиЭП.ПрограммыЭП;
КонецФункции
&НаКлиенте
Функция ИспользованиеИнтерактивногоРежимаКриптографииИспользовать()
	
	Возврат Вычислить("ИспользованиеИнтерактивногоРежимаКриптографии.Использовать");
	
КонецФункции  
     
&НаКлиенте
Функция сбисСписокСертификатовДляАвторизации(Кэш, ТекстОшибки) Экспорт
	СертификатыДляАвторизации = Новый Массив();
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш);
		Исключение    
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			Возврат СертификатыДляАвторизации;
		КонецПопытки;
	КонецЕсли;
	Попытка
		ХранилищеСертификатовКриптографии = Кэш.МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		Сертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе(); 
		Для Каждого Серт из Сертификаты Цикл
			Попытка
				СертДвоичныеДанные = СтрЗаменить(СтрЗаменить(Base64Строка(Серт.Выгрузить()),Символы.ПС,""),Символы.ВК,"");
				СертОтпечаток = СтрЗаменить(Строка(Серт.Отпечаток), " ", "");
				СертификатыДляАвторизации.Добавить(Новый Структура("ДвоичныеДанные,Отпечаток,Название,ФИО,Должность,ДействителенПо",СертДвоичныеДанные, СертОтпечаток,Серт.Субъект.CN, Серт.Субъект.SN+" "+Серт.Субъект.GN,?(Серт.Субъект.Свойство("T"),Серт.Субъект.T,""),Серт.ДатаОкончания));
			Исключение
			КонецПопытки;
		КонецЦикла;
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		Возврат СертификатыДляАвторизации;
	КонецПопытки;
	Возврат СертификатыДляАвторизации;

КонецФункции      

&НаКлиенте
Функция сбисСписокЛокальныхСертификатов(Кэш, ТекстОшибки) Экспорт
	ЛокальныеСертификаты = Новый СписокЗначений;
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш);
		Исключение    
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			Возврат ЛокальныеСертификаты;
		КонецПопытки;
	КонецЕсли;
	Попытка
		ХранилищеСертификатовКриптографии = Кэш.МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		Сертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе(); 
		Для Каждого Серт из Сертификаты Цикл
			Попытка
				СертДвоичныеДанные = СтрЗаменить(СтрЗаменить(Base64Строка(Серт.Выгрузить()),Символы.ПС,""),Символы.ВК,"");
				СертОтпечаток = СтрЗаменить(Строка(Серт.Отпечаток), " ", "");
				Сертификат = Новый Структура;
				Сертификат.Вставить("ДвоичныеДанные",СертДвоичныеДанные);
				Сертификат.Вставить("Отпечаток",СертОтпечаток);
				Сертификат.Вставить("Название",Серт.Субъект.CN);
				Сертификат.Вставить("ФИО",Серт.Субъект.SN+" "+Серт.Субъект.GN);
				Сертификат.Вставить("Должность",?(Серт.Субъект.Свойство("T"),Серт.Субъект.T,""));
				Сертификат.Вставить("ДействителенПо",Серт.ДатаОкончания);
				ЛокальныеСертификаты.Добавить(Сертификат);
			Исключение
			КонецПопытки;
		КонецЦикла;
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		Возврат ЛокальныеСертификаты;
	КонецПопытки;
	Возврат ЛокальныеСертификаты;

КонецФункции

&НаКлиенте
Функция сбисДвоичныеДанныеСертификатаПоОтпечатку(Кэш, Отпечаток) Экспорт
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш);
		Исключение    
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Попытка
		ХранилищеСертификатовКриптографии = Кэш.МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		Сертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе(); 
		Для Каждого Серт из Сертификаты Цикл
			Если СтрЗаменить(Строка(Серт.Отпечаток), " ", "") = Отпечаток Тогда
				Возврат СтрЗаменить(СтрЗаменить(Base64Строка(Серт.Выгрузить()),Символы.ПС,""),Символы.ВК,"");
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Ложь;
КонецФункции  

// Функция выбрает подходящий сертификат
//
// Параметры:
//  Кэш				 - Структура	 - Кэш внешней обработки
//  СертификатыДок	 - Массив	 - Список сертификатов, которыми возможно подписание
//  ТекстОшибки		 - Строка	 - Текст ошибки при подборе сертификата
//  ДопПараметры	 - Стркутура	 - Дополнительные параметры подбора
// 
// Возвращаемое значение:
//  Структура - Описание сертификата
//
&НаКлиенте
Функция сбисВыбратьПодходящийСертификат(Кэш, СертификатыДок, ТекстОшибки, ДопПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш);
		Исключение    
			ТекстОшибки = ИнформацияОбОшибке().Описание;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТекстОшибки = "" Тогда
		
		Попытка 
			
			ХранилищеСертификатовКриптографии = Кэш.МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
			Сертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе();
			
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
		КонецПопытки;
		
	КонецЕсли;
	
	Алгоритм = Неопределено; 
	
	Для Каждого СертДок Из СертификатыДок Цикл
		
		Если СертДок.Ключ.Тип = "Отложенный"
			Или СертДок.Ключ.Тип = "ОтложенныйСПодтверждением"
			Или СертДок.Ключ.Тип = "Серверный" Тогда
			
			Результат.Вставить("СертификатДляПодписания", Неопределено);
			Результат.Вставить("СертификатДок", СертДок);
			Результат.Вставить("Алгоритм", Алгоритм);
			Возврат Результат;  
			
		ИначеЕсли СертДок.Ключ.Тип = "Клиентский"
			И ТекстОшибки = "" Тогда
			
			Для Каждого Серт из Сертификаты Цикл
				
				СертОтпечаток = СтрЗаменить(Строка(Серт.Отпечаток), " ", "");
				
				Если  СертОтпечаток = СертДок.Отпечаток Тогда
					
					СертДД = Серт.Выгрузить();
					
					Если Не ЗначениеЗаполнено(Кэш.Парам.НастройкиКриптографии.ИмяПрограммы) Тогда  // используются штатные настройки 1С, надо выбрать подходящую по алгоритму подписи
						
						Попытка
							Алгоритм = сбисВыбратьНаборАлгоритмовДляСозданияПодписи(СертДок.Алгоритм);
							
							Если Алгоритм.Найти(Кэш.МенеджерКриптографии.АлгоритмПодписи) = Неопределено Тогда
								
								Попытка
									сбисСоздатьМенеджерКриптографии(Кэш, Алгоритм);
								Исключение
									// если не удалось создать менеджер криптографии с нужным алгоритмом, то продолжим поиск подходящего серта   
									ТекстОшибки = ИнформацияОбОшибке().Описание;
									Продолжить;
								КонецПопытки; 
								
							КонецЕсли;
							
						Исключение
						КонецПопытки;
						
					КонецЕсли;
					
					Если ДопПараметры = Неопределено 
						Или ДопПараметры.Свойство("ИНННашейОрганизаци")
							И (ДопПараметры.ИНННашейОрганизаци = СертДок.ИНН
								Или СтрДлина(СертДок.ИНН) > СтрДлина(ДопПараметры.ИНННашейОрганизаци)) Тогда
								
						Результат.Вставить("СертификатДляПодписания", Base64Строка(СертДД));    
						Результат.Вставить("СертификатДок", СертДок); 
						Результат.Вставить("Алгоритм", Алгоритм);
						Возврат Результат;
						
					ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
						
						Результат.Вставить("СертификатДляПодписания", Base64Строка(СертДД));    
						Результат.Вставить("СертификатДок", СертДок); 
						Результат.Вставить("Алгоритм", Алгоритм);
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;  
		
	КонецЦикла;
	
	Возврат ?(ЗначениеЗаполнено(Результат), Результат, Ложь);

КонецФункции

&НаКлиенте
Функция сбисПодписатьФайл(Кэш, ПолноеИмяФайла, Сертификат, Алгоритм, ТекстОшибки) Экспорт
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш, Алгоритм);
		Исключение    
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Попытка
		Серт = Новый СертификатКриптографии(Base64Значение(Сертификат));
		Подпись = Кэш.МенеджерКриптографии.Подписать(ПолноеИмяФайла, Серт);
	Исключение 
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	Возврат СтрЗаменить(СтрЗаменить(Base64Строка(Подпись),Символы.ПС,""),Символы.ВК,"");
КонецФункции

&НаКлиенте
Функция сбисПодписатьДвоичныеДанные(Кэш, ДвоичныеДанные, Сертификат, Алгоритм, ТекстОшибки) Экспорт
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Попытка
			сбисСоздатьМенеджерКриптографии(Кэш, Алгоритм);
		Исключение    
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Попытка
		Серт = Новый СертификатКриптографии(Base64Значение(Сертификат));
		Подпись = Кэш.МенеджерКриптографии.Подписать(Base64Значение(ДвоичныеДанные), Серт);
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	Возврат СтрЗаменить(СтрЗаменить(Base64Строка(Подпись),Символы.ПС,""),Символы.ВК,"");
КонецФункции

&НаКлиенте
Функция сбисРасшифровать(Кэш, ДвоичныеДанные, ПолноеИмяФайла) Экспорт
	Если Не Кэш.Свойство("МенеджерКриптографии") Тогда
		Менеджер = сбисСоздатьМенеджерКриптографии(Кэш);
	КонецЕсли;
	Кэш.МенеджерКриптографии.Расшифровать(ДвоичныеДанные, ПолноеИмяФайла);
КонецФункции 

&НаКлиенте
Функция сбисВыбратьНаборАлгоритмовДляСозданияПодписи(Алгоритм) Экспорт
	
	Алгоритмы = сбисИменаАлгоритмовПодписиГОСТ_34_10_2012_256();
	Если Алгоритмы.Найти(Алгоритм)<>Неопределено Тогда
		Возврат Алгоритмы;
	КонецЕсли; 
	Алгоритмы = сбисИменаАлгоритмовПодписиГОСТ_34_10_2012_512();
	Если Алгоритмы.Найти(Алгоритм)<>Неопределено Тогда
		Возврат Алгоритмы;
	КонецЕсли;
	Алгоритмы = сбисИменаАлгоритмовПодписиГОСТ_34_10_2001();
	Если Алгоритмы.Найти(Алгоритм)<>Неопределено Тогда
		Возврат Алгоритмы;
	КонецЕсли;
	Алгоритмы = сбисИменаАлгоритмовПодписиГОСТ_34_10_94();
	Если Алгоритмы.Найти(Алгоритм)<>Неопределено Тогда
		Возврат Алгоритмы;
	КонецЕсли;
	Алгоритмы = Новый Массив;
	Алгоритмы.Добавить("RSA_SIGN");
	Алгоритмы.Добавить("SHA1RSA");     // приходит от СБИС
	Алгоритмы.Добавить("SHA1WithRSASignature");    // приходит от СБИС
	Алгоритмы.Добавить("SHA256RS");   // приходит от СБИС
	Если Алгоритмы.Найти(Алгоритм)<>Неопределено Тогда
		Возврат Алгоритмы;
	КонецЕсли;
	
	Возврат сбисИменаАлгоритмовПодписиГОСТ_34_10_2012_256();
	
КонецФункции

&НаКлиенте
Функция сбисИменаАлгоритмовПодписиГОСТ_34_10_94()
	
	Имена = Новый Массив;
	Имена.Добавить("ГОСТ 34.10-94"); // Представление.
	Имена.Добавить("GOST R 34.10-94");
	
	Возврат Имена;
	
КонецФункции
&НаКлиенте
Функция сбисИменаАлгоритмовПодписиГОСТ_34_10_2001()
	
	Имена = Новый Массив;
	Имена.Добавить("ГОСТ 34.10-2001"); // Представление.
	Имена.Добавить("ГОСТ Р 34.10-2001");  // приходит от СБИС
	Имена.Добавить("GOST R 34.10-2001");
	Имена.Добавить("ECR3410-CP");
	
	Возврат Имена;
	
КонецФункции
&НаКлиенте
Функция сбисИменаАлгоритмовПодписиГОСТ_34_10_2012_256()
	
	Имена = Новый Массив;
	Имена.Добавить("ГОСТ 34.10-2012 256"); // Представление.
	Имена.Добавить("ГОСТ Р 34.10-2012 256");   // приходит от СБИС
	Имена.Добавить("GR 34.10-2012 256");
	Имена.Добавить("GOST 34.10-2012 256");
	Имена.Добавить("GOST R 34.10-12 256");
	Имена.Добавить("GOST3410-12-256");
	
	Возврат Имена;
	
КонецФункции
&НаКлиенте
Функция сбисИменаАлгоритмовПодписиГОСТ_34_10_2012_512()
	
	Имена = Новый Массив;
	Имена.Добавить("ГОСТ 34.10-2012 512"); // Представление. 
	Имена.Добавить("ГОСТ Р 34.10-2012 512");   // приходит от СБИС
	Имена.Добавить("GR 34.10-2012 512");
	Имена.Добавить("GOST 34.10-2012 512");
	
	Возврат Имена;
	
КонецФункции