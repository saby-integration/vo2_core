
//функция заполняет значения в Контрагенте 1С
&НаСервере
Функция ЗаполнитьКонтрагента1С(Ини, НовыеОбъектыКЗаписи)
	Переменные = Новый Структура;
	Для Каждого Элемент Из Ини Цикл
		Если 	Не	Элемент.Значение.Свойство("Значение")
			И	Не	Элемент.Значение.Свойство("Данные")
			И	Не	Элемент.Значение.Свойство("Вычислить")
			Или		(	Лев(Элемент.Ключ, 8) = "БанкРекв" И Не ЕстьБанкРекв) Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаполнитьЗначениеРеквизита(Элемент.Ключ, Новый Структура("Ини, НовыеОбъекты", Ини, НовыеОбъектыКЗаписи));		
		//Если Элемент.Значение.Свойство("ВычислитьНаСервере") Тогда
		//	ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Элемент.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, Переменные", Ини, ДокОбъект, Переменные));
		//	ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Элемент.Значение.Значение, ДокОбъект, Переменные);	
		//КонецЕсли;
	КонецЦикла;
КонецФункции

//Функция заполняет реквизит объекта 1С из реквизита данной формы	
&НаСервере
Процедура ЗаполнитьЗначениеРеквизитаИзФормы(ЭлементИни, Объект1С)
	ЗнПер=ЭлементИни.Значение;
	Попытка
		ЗначениеРеквизита = ЭтаФорма[ЭлементИни.Данные];
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита = сред(ЗнПер,Найти(ЗнПер,".")+1);
		Если ЭлементИни.Свойство("Тип") Тогда
			Если ЭлементИни.Тип="Дата" Тогда
				ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4),Сред(ЗначениеРеквизита,4,2),Лев(ЗначениеРеквизита,2));
			КонецЕсли;
		КонецЕсли;
		Попытка
			Объект1С[ИмяРеквизита] = ЗначениеРеквизита;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//Функция заполняет реквизит объекта 1С	
&НаСервере
Функция ЗаполнитьЗначениеРеквизита(Параметр, Контекст)
	Перем ЗнПер;
	Попытка
		Если Не  Контекст.Ини.Свойство(Параметр, ЗнПер) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЗнПер = ЗнПер.Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит

		СтрОбъекта	= Сред(ЗнПер, 2, Найти(ЗнПер, "]") - 2);
		ИмяРек		= Сред(ЗнПер, Найти(ЗнПер, ".") + 1);	
		
		//Новое Контрагенты
		Если Контекст.НовыеОбъекты.Свойство(СтрОбъекта) Тогда
			Объект1С = Контекст.НовыеОбъекты[СтрОбъекта];
		Иначе
			Объект1С = ЗаполнитьЗначениеРеквизита(СтрОбъекта, Контекст);
		КонецЕсли;
		
		Если Объект1С = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		Попытка
			ЭтоТЧ = МодульОбъектаСервер().СбисЭтоТипСтрокой(Объект1С[ИмяРек], "ТабличнаяЧасть");
		Исключение
			ЭтоТЧ = Ложь;//Пока с костылищем
		КонецПопытки;
		
		Если ЭтоТЧ Тогда //это сама табличная часть
			Объект1С = Объект1С[ИмяРек];
			Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
				Если СтрокиТЧ.Количество()=0 Тогда
					НоваяСтрока = Объект1С.Добавить();	
					Для Каждого Элемент Из Отбор Цикл
						НоваяСтрока[Элемент.Ключ] = Элемент.Значение;
					КонецЦикла;
					Возврат НоваяСтрока;
				Иначе
					Возврат СтрокиТЧ[0];	
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Попытка   // если Объект1С - ссылка, то для его редактирования надо получить объект
				Объект1С = Объект1С.ПолучитьОбъект();
			Исключение
				
			КонецПопытки;
			
			Попытка
				ОбъектДляЗаписиПоля = Объект1С.Получить(0);  // в случае регистра сведений берем первую запись набора
			Исключение
				ОбъектДляЗаписиПоля = Объект1С;
			КонецПопытки;
			
			Если Контекст.Ини[Параметр].Свойство("Данные") Тогда
				ЗаполнитьЗначениеРеквизитаИзФормы(Контекст.Ини[Параметр], ОбъектДляЗаписиПоля);
				Если Не МодульОбъектаСервер().СбисЭтоТипСтрокой(Объект1С, "ТабличнаяЧасть") Тогда
					Контекст.НовыеОбъекты.Вставить(СтрОбъекта, Объект1С);
				КонецЕсли;
			КонецЕсли;
			Если Контекст.Ини[Параметр].Свойство("Вычислить") Тогда
				
				//ОбъектДляЗаписиПоля[ИмяРек] = РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].Вычислить,Новый Структура("Ини, Элемент1С", Контекст.Ини, Объект1С));	
				ОбъектДляЗаписиПоля[ИмяРек] = РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].Вычислить, Контекст);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"Справочник")=1 Тогда	// ссылка на справочник
		ИмяРек=сред(ЗнПер,12);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Отбор = Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|Спр.Ссылка
			|ИЗ
			|   Справочник."+ИмяРек+" КАК Спр
			|ГДЕ
			| ";
			Для Каждого Элемент Из Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
				Запрос.Текст=Запрос.Текст+"Спр."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество()>0 Тогда
				Пока Выборка.Следующий() Цикл
					Возврат Выборка.Ссылка;
				КонецЦикла;
			Иначе
				НовыйЭлемент = Справочники[ИмяРек].СоздатьЭлемент();
				Для Каждого Элемент Из Отбор Цикл
					НовыйЭлемент[Элемент.Ключ] = Элемент.Значение;
				КонецЦикла;
				
				Контекст.НовыеОбъекты.Вставить(Параметр, НовыйЭлемент);

				Возврат НовыйЭлемент;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"РегистрыСведений")=1 Тогда	// ссылка на регистр сведений
		ИмяРек = сред(ЗнПер,18);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда // Надо установить отбор
			НаборЗаписей	= РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
			Отбор			= Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				ЗначениеОтбора = РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст);
				Отбор.Вставить(Элемент.Ключ, ЗначениеОтбора);
				НаборЗаписей.Отбор[Элемент.Ключ].Установить(ЗначениеОтбора);
			КонецЦикла;
			НаборЗаписей.Прочитать();
			Если Не НаборЗаписей.Количество() Тогда
				НоваяЗаписьНабора = НаборЗаписей.Добавить();
				Для Каждого Элемент Из Отбор Цикл
					НоваяЗаписьНабора[Элемент.Ключ] = Элемент.Значение;
				КонецЦикла;
				
				Контекст.НовыеОбъекты.Вставить(Параметр, НаборЗаписей);

			КонецЕсли;
			Возврат НаборЗаписей;
		КонецЕсли;
	ИначеЕсли Контекст.Ини[Параметр].Свойство("Вычислить") Тогда   // в случае, если просто надо выполнить функцию и ни в какой реквизит ничего не записывать
		РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].Вычислить,Контекст);	
	КонецЕсли;
КонецФункции

//процедура создает нового контрагента в справочнике 1С и заполняет его данные		
&НаСервере
Функция СоздатьКонтрагентаНаСервере()
	ТипСправочника	= Сред(ИниКонтрагента.Сторона.Тип, Найти(ИниКонтрагента.Сторона.Тип, ".")+1);
	Контрагент1С	= Справочники[ТипСправочника].СоздатьЭлемент();
	
	СсылкаНового = Справочники[ТипСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор());
	Контрагент1С.УстановитьСсылкуНового(СсылкаНового);
	ИниКонтрагента.Сторона.Вставить("РассчитанноеЗначение", СсылкаНового);
	
	НовыеОбъектыКЗаписи = Новый Структура;
	НовыеОбъектыКЗаписи.Вставить("Сторона", Контрагент1С);
	
	ЗаполнитьКонтрагента1С(ИниКонтрагента, НовыеОбъектыКЗаписи);
	
	НачатьТранзакцию();
	Попытка
		Для Каждого КлючИЗначениеОбъектНаЗапись Из НовыеОбъектыКЗаписи Цикл
			КлючИЗначениеОбъектНаЗапись.Значение.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "ФормаСозданияКонтрагента.СоздатьКонтрагентаНаСервере");
	КонецПопытки;
	
	Возврат СсылкаНового;
	
КонецФункции

// Использовать исключительно от Кэш.ОбщиеФункции. Тут только для внутреннего расчета.
// TODO Вынести РассчитатьЗначениеНаСервере в Модуль объекта на сервере.
// Функция рассчитывает значение параметра из файла настроек.
&НаСервере
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст)
	Если Найти(Параметр,"[")>0 или Найти(Параметр,"'")>0 или Найти(Параметр,"{")>0 Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Попытка
			ПараметрИни = Контекст.Ини[Параметр]; 
			ЗнПер		= ПараметрИни.Значение;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		Если ПараметрИни.Свойство("РассчитанноеЗначение") Тогда
			Возврат ПараметрИни.РассчитанноеЗначение;
		КонецЕсли;

	КонецЕсли;
	
	Если Найти(ЗнПер,"{")=1 Тогда 
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Попытка
			Результат = вычислить(ИмяФункции+"(Контекст)");
			Возврат Результат;
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить(Ошибка+ "(ошибка при вычислении функции """+Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2)+""")");
		КонецПопытки;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на объект (другую переменную)
		//Если ЗнПер = "[Сторона]" Тогда
		//	СтрОбъекта = Сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		//	//возврат Контекст.Элемент1С.Ссылка;	
		//КонецЕсли;
		СтрОбъекта	= Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Объект1С 	= РассчитатьЗначениеНаСервере(СтрОбъекта, Контекст);
		Если Найти(ЗнПер,".")>0 Тогда 
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек="";
		КонецЕсли;
		
		Попытка
			Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это строка табличной части
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
					Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Возврат СтруктураСтрокиТЧ;
						КонецЦикла;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Формат") Тогда // Надо установить отбор
				Объект1С = Формат(Объект1С,	Контекст.Ини[Параметр].Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли Найти(ЗнПер,"Справочник")=1 Тогда	// ссылка на справочник
		ИмяРек=сред(ЗнПер,12);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Возврат РасчитатьОтборСервере(Контекст, Контекст.Ини[Параметр], Новый Структура("Тип, Объект", Лев(ЗнПер, 10), ИмяРек));				
		Иначе
			возврат Справочники[ИмяРек];
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"Документ")=1 Тогда // ссылка на документ	
		ИмяРек = сред(ЗнПер,10);
		Возврат Контекст.Элемент1С;
	ИначеЕсли Найти(ЗнПер,"Константа")=1 Тогда	// константа
		ИмяРек=сред(ЗнПер,11);
		возврат Константы[ИмяРек].Получить();
	ИначеЕсли Найти(ЗнПер,"Перечисление")=1 Тогда	// значение перечисления
		ИмяРек=сред(ЗнПер,14);
		возврат Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗнПер,"ПланыСчетов")=1 Тогда	// бух. счет
		ИмяРек=сред(ЗнПер,13);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Отбор = Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			Выборка = ПланыСчетов[ИмяРек].Выбрать(,Отбор);
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			возврат ПланыСчетов[ИмяРек];
		КонецЕсли;	
	ИначеЕсли Найти(ЗнПер,"РегистрыСведений")=1 Тогда	// ссылка на регистр сведений
		ИмяРек=сред(ЗнПер,18);
		Если Не Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Возврат Неопределено;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
		Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
			НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запись = НаборЗаписей.Получить(0);
		Результат = Новый Структура();
		Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
		Для Каждого Ресурс Из Ресурсы Цикл 
			Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
		КонецЦикла;
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"'")>0 Тогда	 // строка
		возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
	Иначе
		возврат Неопределено;
	КонецЕсли	
КонецФункции

//Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
&НаСервере
функция РазбитьСтрокуВМассив(знач Строка, Разделитель)
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции

//Функция заполняет адрес, хранящийся в табличной части справочника Контрагенты	
&НаСервере
Функция ЗаполнитьАдресУП(Контекст)
	ЗначенияПолей = "";
	ЗначенияПолей = ЗначенияПолей+"Индекс="+Индекс+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"КодРегиона="+КодРегион+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Район="+Район+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Город="+Город+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"НаселенныйПункт="+НаселПункт+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Улица="+Улица+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Дом="+Дом+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Корпус="+Корпус+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Квартира="+Кварт+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипДома=дом"+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипКорпуса=корпус"+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипКвартиры=кв.";
	Возврат ЗначенияПолей;
КонецФункции

//Функция возвращает банк по БИК
&НаСервере
Функция ЗаполнитьБанкУП(Контекст)
	Если Контекст.Ини.Свойство("Банки") и Контекст.Ини.Банки.Свойство("Значение") Тогда
		СправочникБанков = сред(Контекст.Ини.Банки.Значение,Найти(Контекст.Ини.Банки.Значение,".")+1);
	Иначе
		СправочникБанков = "Банки";
	КонецЕсли;
	Банк = Справочники[СправочникБанков].НайтиПоКоду(БИК);
	Возврат Банк;
КонецФункции

//Функция создает и заполняет банковский счет контрагента	
&НаСервере
Функция ЗаполнитьБанковскийСчет(Контекст)
	
	БанковскийСчет	= Справочники.БанковскиеСчета.СоздатьЭлемент();
	Банк			= Справочники.Банки.НайтиПоКоду(БИК);
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БанковскийСчет.Банк						= Банк;
	БанковскийСчет.НомерСчета				= РСчет;
	БанковскийСчет.ВидСчета					= "Расчетный";
	БанковскийСчет.ВалютаДенежныхСредств	= Справочники.Валюты.НайтиПоКоду("643");
	БанковскийСчет.Владелец					= РассчитатьЗначениеНаСервере("Сторона", Контекст);
	БанковскийСчет.Наименование				= Банк.Наименование + " (" + БанковскийСчет.ВидСчета + ")";
	
	СсылкаНового = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор());
	БанковскийСчет.УстановитьСсылкуНового(СсылкаНового);
	Контекст.НовыеОбъекты.Вставить("БанковскийСчет", БанковскийСчет);
	
	Возврат СсылкаНового;

	//Попытка
	//	БанковскийСчет.Записать();
	//Исключение
	//	Ошибка = ОписаниеОшибки();
	//КонецПопытки;
	//
	//Возврат БанковскийСчет.ссылка;
КонецФункции

//Функция создает и заполняет банковский счет контрагента (для бух. гос. уч.)	
&НаСервере
Функция ЗаполнитьБанковскийСчетБГУ(Контекст)
	БанковскийСчет = Справочники.БанковскиеИКазначейскиеСчета.СоздатьЭлемент();
	Банк = Справочники.Банки.НайтиПоКоду(БИК);
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БанковскийСчет.КассовыйОрган	= Банк;
	БанковскийСчет.Код				= РСчет;
	БанковскийСчет.Владелец			= РассчитатьЗначениеНаСервере("Сторона", Контекст);
	БанковскийСчет.Наименование		= Банк.Наименование;
	БанковскийСчет.ТипЛицевогоСчета	= Перечисления.ТипыЛицевыхСчетов.Банковский;
	
	СсылкаНового = Справочники.БанковскиеИКазначейскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор());
	БанковскийСчет.УстановитьСсылкуНового(СсылкаНового);
	Контекст.НовыеОбъекты.Вставить("БанковскийСчет", БанковскийСчет);
	
	Возврат СсылкаНового;
	
КонецФункции

//Функция возвращает ссылку на валюту - рубль	(нужна для банковских реквизитов, иначе не сохраняется запись)	
&НаСервере
Функция ЗаполнитьВалютуУП(Контекст)
	Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
	Возврат Валюта;
КонецФункции

//Создает элемент справочника, соответствующего типу контрагента (для БГУ2)	
&НаСервере
Функция ЗаполнитьСправочникЮридическоеФизическоеЛицо(Контекст)
	Если СтрДлина(ИНН) = 12 Тогда
		СбисТипСправочника = "ФизическиеЛица";
		ФизЛицо = Справочники[СбисТипСправочника].СоздатьЭлемент(); 
		ФизЛицо.Наименование = Наименование;
		ФизЛицо.ИНН = ИНН;  
		ФизЛицо.СтранаРегистрации = Справочники.СтраныМира.Россия;
		
		АдресФизЛица = ФизЛицо.КонтактнаяИнформация.Добавить();
		АдресФизЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		АдресФизЛица.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагенты;
		АдресФизЛица.ЗначенияПолей = ЗаполнитьАдресУП(Контекст);
		АдресФизЛица.Представление = АдресПредставление;
		
		ТелефонФизЛица = ФизЛицо.КонтактнаяИнформация.Добавить(); 
		ТелефонФизЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ТелефонФизЛица.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагенты;
		ТелефонФизЛица.Представление = Телефон; 
		
		НовыйОбъектЮрФизЛицо = ФизЛицо;
	Иначе
		СбисТипСправочника = "ЮридическиеЛица";
		ЮрЛицо = Справочники[СбисТипСправочника].СоздатьЭлемент();
		ЮрЛицо.ИНН = ИНН;
		ЮрЛицо.КПП = КПП;
		ЮрЛицо.Наименование = Наименование;      
		ЮрЛицо.НаименованиеПолное = Наименование; 
		ЮрЛицо.СтранаРегистрации = Справочники.СтраныМира.Россия; 
		
		АдресЮрЛица = ЮрЛицо.КонтактнаяИнформация.Добавить();
		АдресЮрЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		АдресЮрЛица.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагенты;
		АдресЮрЛица.ЗначенияПолей = ЗаполнитьАдресУП(Контекст);
		АдресЮрЛица.Представление = АдресПредставление;
		
		ТелефонЮрЛица = ЮрЛицо.КонтактнаяИнформация.Добавить(); 
		ТелефонЮрЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ТелефонЮрЛица.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагенты;
		ТелефонЮрЛица.Представление = Телефон; 
		
		НовыйОбъектЮрФизЛицо = ЮрЛицо;        
	КонецЕсли;
	
	СсылкаНового = Справочники[СбисТипСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор());
	НовыйОбъектЮрФизЛицо.УстановитьСсылкуНового(СсылкаНового);
	Контекст.НовыеОбъекты.Вставить(СбисТипСправочника, НовыйОбъектЮрФизЛицо);
	
	Возврат СсылкаНового;
	
КонецФункции     

//Функция заполняет тип контрагента	
&НаСервере
Функция ЗаполнитьЮрФизЛицо(Контекст)
	
	Если ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") = Неопределено
		И СтрДлина(ИНН) = 12 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	ИначеЕсли СтрДлина(ИНН) = 12 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
	
КонецФункции

//Функция заполняет тип контрагента (для конфигураций с перечислениями ЮридическоеФизическоеЛицо)	
&НаСервере
Функция ЗаполнитьЮридическоеФизическоеЛицоУП(Контекст) 
	Если СтрДлина(ИНН)=12 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
КонецФункции

//Функция заполняет вид контрагента	
&НаСервере
Функция ЗаполнитьВидКонтрагента(Контекст)  
	
	ДопПараметры = Новый Структура("КлассМетаданных", "Перечисления");

	Если СтрДлина(ИНН) = 12 Тогда 
		Если МодульОбъектаСервер().СбисСуществуетОбъектКонфигурацииСервер("ВидыКонтрагентов.ИндивидуальныйПредприниматель", ДопПараметры) Тогда
			ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		Иначе
			ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизЛицо;  
		КонецЕсли;
		Возврат ВидКонтрагента;
	Иначе 
		Если МодульОбъектаСервер().СбисСуществуетОбъектКонфигурацииСервер("ВидыКонтрагентов.Организация", ДопПараметры) Тогда
			ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация;
		Иначе
			ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		КонецЕсли;
		
		Возврат ВидКонтрагента;
	КонецЕсли;
КонецФункции

//Функция заполняет название региона по его коду	
&НаСервере
Функция ЗаполнитьРегионПоКоду(Контекст)
	Попытка
		НазваниеКода = ?(Метаданные.РегистрыСведений.АдресныйКлассификатор.Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|И  АдресныйКлассификатор."+НазваниеКода+" = &КодРегиона";
		Запрос.УстановитьПараметр("КодРегиона", Число(КодРегион));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат СокрЛП(Выборка.Наименование)+" "+СокрЛП(Выборка.Сокращение);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат КодРегион;	
КонецФункции

//Функция создает партнера (для конфигураций УТ11, КА2, ERP и т.п.)	
&НаСервере
Функция ЗаполнитьПартнера(Контекст)
	Попытка
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.Наименование = Наименование;
		Партнер.НаименованиеПолное = Наименование;
		Попытка
			Если СтрДлина(ИНН)=12 Тогда
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			Иначе
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Контекст.НовыеОбъекты.Вставить("Партнер", Партнер);
		
		СсылкаНового = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор());
		Партнер.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат СсылкаНового;
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		
	КонецПопытки;
КонецФункции 

// Функция заполняет тип контрагента (для конфигураций с перечислениями ФормыСобственности)  
//
// Параметры:
//  Контекст - Структура - Контекста для рассчета узла
// 
// Возвращаемое значение:
//  Перечисление - Значение перечисления  
// 
&НаСервере
Функция ЗаполнитьЮридическоеФизическоеЛицоАА(Контекст)
	Если СтрДлина(ИНН)=12 Тогда
		Возврат Перечисления.ФормыСобственности.ЧастныйПредприниматель;
	Иначе
		Возврат Перечисления.ФормыСобственности.ЮридическоеЛицо;
	КонецЕсли;
КонецФункции  

//Универсальная функция для расчета отбора запросом
&НаСервере
Функция РасчитатьОтборСервере(Контекст, ПараметрИни, ОписаниеОбъектаОтбора)
	Отбор = Новый Структура;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектОтбора.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	{0}.{1} КАК ОбъектОтбора
	                      |ГДЕ
						  |	");
	Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст,"{0}",ОписаниеОбъектаОтбора.Тип),"{1}",ОписаниеОбъектаОтбора.Объект);					  
	Для Каждого Элемент Из ПараметрИни.Отбор Цикл
		РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	КонецЦикла;
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-4);
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если Не РезультатЗапроса.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат РезультатЗапроса.Ссылка;
КонецФункции

//Заполняет отбор в запросе
&НаСервере
Процедура РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	Запрос.Параметры.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
	Запрос.Текст = Запрос.Текст + СтрЗаменить(	"ОбъектОтбора.{0} = &{0}
												|	И	", "{0}", Элемент.Ключ);
КонецПроцедуры

