
&НаКлиенте
Процедура Показать(ДополнительныеПараметры) Экспорт
	КэшСовместимостьМетодов = ДополнительныеПараметры.КэшСовместимостьМетодов;
	КэшПарам = ДополнительныеПараметры.КэшПарам;
	РезервныйДомен = ДополнительныеПараметры.РезервныйДомен;
	АдресСервера = ДополнительныеПараметры.АдресСервера;
	ЭтаФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("СбисОжиданиеОбновитьТаблицуАдресов",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе()
// отмечает все записи в таблице	
	Для Каждого Строка Из ТабАдрес Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Кнопка)
// Бежим по отмеченным и там где возможно, меняем адреса на КЛАДРовские
	СтрокаОтмечена = Ложь;
	
	ОтмеченныеСтроки = ТабАдрес.НайтиСтроки(Новый Структура("Отмечен", Истина));
	Если ОтмеченныеСтроки.Количество()>0 Тогда
		СтрокаОтмечена = Истина;
	КонецЕсли;
		
	Если СтрокаОтмечена = Ложь и ТабАдрес.Количество()<>0 Тогда
		Текст = "Необходимо отметить хотя бы одну строку!";
		Предупреждение(Текст);
	ИначеЕсли СтрокаОтмечена = Истина  Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Исправить адреса контрагентов по формату КЛАДР?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.ДА Тогда
			Попытка	
				СбисИзменитьАдресКонтрагента();
				СбисОбновитьТаблицуАдресов();
			Исключение
				Ошибка = ОписаниеОшибки();
				Сообщить(Ошибка);
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Заполняет структуру адреса и вызывает функцию, записывающую новый адрес в регистры или в табличную часть	
Процедура СбисИзменитьАдресКонтрагента()
	Для Каждого Стр из ТабАдрес Цикл                                              
		Если Стр.Отмечен=ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.АдресКЛАДРСписок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		АдресКЛАДР = Стр.АдресКЛАДРСписок[0].Значение;
		Если Стр.ВозможноНесколькоВариантов Тогда
			Продолжить;
		КонецЕсли;	
				
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Индекс","");
		СтруктураАдреса.Вставить("Регион","");
		СтруктураАдреса.Вставить("КодРегион","");
		СтруктураАдреса.Вставить("Район","");
		СтруктураАдреса.Вставить("Город","");
		СтруктураАдреса.Вставить("НаселПункт","");
		СтруктураАдреса.Вставить("Улица","");
		СтруктураАдреса.Вставить("Дом","");
		СтруктураАдреса.Вставить("Корпус","");
		СтруктураАдреса.Вставить("Квартира","");
		СтруктураАдреса.Вставить("Представление","");
		СтруктураАдреса.Вставить("ТипКорпуса","");
		СтруктураАдреса.Вставить("ТипКвартиры","");
		СтруктураАдреса.Вставить("ТипДома","");
		
		СтрутураТиповДомКорпусКвартира = СбисВернутьТипДомаКорпусаКвартиры(АдресКЛАДР);
        СтруктураАдреса.ТипКорпуса  = СтрутураТиповДомКорпусКвартира.ТипКорпуса;
		СтруктураАдреса.ТипКвартиры = СтрутураТиповДомКорпусКвартира.ТипКвартиры;
		СтруктураАдреса.ТипДома     = СтрутураТиповДомКорпусКвартира.Типдома;
		СтруктураАдреса.Дом         = СтрутураТиповДомКорпусКвартира.Дом;
		СтруктураАдреса.Корпус      = СтрутураТиповДомКорпусКвартира.Корпус;
		СтруктураАдреса.Квартира    = СтрутураТиповДомКорпусКвартира.Квартира;
		
		СтруктураАдреса.Индекс = ?(АдресКЛАДР.idx<>NULL,АдресКЛАДР.idx,"");
		
		Если АдресКЛАДР.objs.Количество()<>0 Тогда
			Для Ид=0 по АдресКЛАДР.objs.Количество()-1 Цикл
				Если      стрДлина(АдресКЛАДР.objs[ид].code) = 2 Тогда
					СтруктураАдреса.Регион   = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
					СтруктураАдреса.КодРегион   = АдресКЛАДР.objs[ид].code;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 5 Тогда
					СтруктураАдреса.Район    = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 8 Тогда
					СтруктураАдреса.Город    = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 11 Тогда
					СтруктураАдреса.НаселПункт = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 15 Тогда
					СтруктураАдреса.Улица    = АдресКЛАДР.objs[ид].name + " "+АдресКЛАДР.objs[ид].abbr;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		сбисЗаписатьИзменения(Стр, СтруктураАдреса);
		Стр.Отмечен=ложь;
	КонецЦикла;
КонецПроцедуры	

// обновляет таблицу адресов	
Процедура СбисОбновитьТаблицуАдресов()
	ТабАдрес.Очистить();
			
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураАдреса = Новый Структура;
		Ошибка = СбисВернутьТекстОшибкиПоАдресу(Выборка.Ссылка, СтруктураАдреса);
		Если Ошибка<>"" Тогда
			НоваяСтр = ТабАдрес.Добавить();
			новаяСтр.Контрагент = Выборка.Ссылка;
			новаяСтр.ТекАдрес = СбиСПолучитьПредставлениеАдрес(СтруктураАдреса);
			АдресКЛАДР =СбисСформироватьСтруктуруАдресаПоКЛАДР(новаяСтр.ТекАдрес);
			новаяСтр.АдресКЛАДРСписок.Добавить(АдресКЛАДР);
			новаяСтр.ВозможноНесколькоВариантов = СбисПроверитьКолВариантовАдреса(АдресКЛАДР);
			Если новаяСтр.ВозможноНесколькоВариантов Тогда
				НоваяСтр.АдресКЛАДР = "Возможно несколько вариантов адреса! Измените адрес вручную в карточке контрагента .";
			Иначе	
				НоваяСтр.АдресКладр = АдресКЛАДР.norm;
			КонецЕсли;
			новаяСтр.Ошибка = Ошибка;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СбисОжиданиеОбновитьТаблицуАдресов()
// Обновляет таблицу адресов после открытия формы	
	Попытка
		СбисОбновитьТаблицуАдресов();
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка);
	КонецПопытки;		
КонецПроцедуры	

// Проверяет возможность однозначно заполнить адрес по КЛАДР	
Функция СбисПроверитьКолВариантовАдреса(АдресКЛАДР)
	ЕстьРегион   = Ложь;
	ЕстьГород    = Ложь;
	ЕстьНасПункт = Ложь;
	ЕстьУлица    = Ложь;
	
	Для Ид=0 по АдресКЛАДР.objs.Количество()-1 Цикл
		Если СтрДлина(АдресКЛАДР.objs[ид].Code)=15 Тогда
			ЕстьУлица    = Истина;
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=11 Тогда
			ЕстьНасПункт = Истина;
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=8 Тогда
			ЕстьГород    = Истина;						
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=2 Тогда
			ЕстьРегион   = Истина;	
		КонецЕсли;	
	КонецЦикла;
	
	
	Если (НЕ ЕстьНасПункт и НЕ ЕстьУлица) или (НЕ ЕстьГород и НЕ ЕстьНасПункт) или НЕ ЕстьРегион Тогда
		Возврат	Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

// формирует структуру с типами дома, корпуса, квартиры	
Функция СбисВернутьТипДомаКорпусаКвартиры(АдресКЛАДР)
	СтруктураТипов= Новый Структура();
		Если АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"к")>0 и Найти(АдресКЛАДР.hs,"влд")=0 Тогда  // дом и корпус 12к2
			Корпус = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"к")+1);
			Дом    = Сред(АдресКЛАДР.hs,1,СтрДлина(АдресКЛАДР.hs)-СтрДлина(Корпус)-1);
			
		    СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"влд")>0 и Найти(АдресКЛАДР.hs,"стр")>0 тогда //владение и строение (влд12стр32)
			темпСтр    = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"влд")+3); //отсекаем префикс "влд"  = 12стр32
					
			Корпус = Сред(ТемпСтр,Найти(темпСтр,"стр")+3);
			Дом    = Сред(ТемпСтр,1,СтрДлина(ТемпСтр)-Стрдлина(Корпус)-3);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","строение");
			СтруктураТипов.Вставить("ТипДома","владение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"влд")>0 и Найти(АдресКЛАДР.hs,"к")>0 тогда //владение и корпус (влд2к13)
			темпСтр    = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"влд")+3); // 2к13
			
			Корпус = Сред(темпСтр,найти(темпСтр,"к")+1);
			Дом    = Сред(ТемпСтр,1,СтрДлина(ТемпСтр)-Стрдлина(Корпус)-1);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","владение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"стр")>0 и Найти(АдресКЛАДР.hs,"влд")=0 Тогда //дом и строение   (12стр3)
			Корпус = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"стр")+3);
			Дом    = Сред(АдресКЛАДР.hs,1,СтрДлина(АдресКЛАДР.hs)-Стрдлина(Корпус)-3);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипДома","дом");
			СтруктураТипов.Вставить("ТипКорпуса","строение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"стр")=0 и Найти(АдресКЛАДР.hs,"влд")=0 и Найти(АдресКЛАДР.hs,"к")=0 Тогда //дом   12
			СтруктураТипов.Вставить("Дом",АдресКЛАДР.hs);
			СтруктураТипов.Вставить("Корпус","");
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		Иначе
			СтруктураТипов.Вставить("Дом","");
			СтруктураТипов.Вставить("Корпус","");
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		КонецЕсли;

		Если АдресКЛАДР.fl<>NULL и Найти(АдресКЛАДР.fl,"кв.")>0 тогда
			Квартира = Сред(АдресКЛАДР.fl,Найти(АдресКЛАДР.fl,"кв.")+3);
			СтруктураТипов.Вставить("ТипКвартиры","кв.");
			СтруктураТипов.Вставить("Квартира",Квартира);
		ИначеЕсли АдресКЛАДР.fl<>NULL и Найти(АдресКЛАДР.fl,"оф.")>0 тогда
			Квартира = Сред(АдресКЛАДР.fl,Найти(АдресКЛАДР.fl,"оф.")+3);
			СтруктураТипов.Вставить("ТипКвартиры","оф.");
			СтруктураТипов.Вставить("Квартира",Квартира);
		Иначе
			СтруктураТипов.Вставить("ТипКвартиры","кв.");
			СтруктураТипов.Вставить("Квартира","");
		КонецЕсли;
		
Возврат СтруктураТипов;
КонецФункции	
	
// Формирует тип ошибки по адресу контрагента	
Функция СбисВернутьТекстОшибкиПоАдресу(Контрагент, СтруктураАдреса)
	СтруктураАдреса.Вставить("Индекс","");
	СтруктураАдреса.Вставить("КодРегион","");
	СтруктураАдреса.Вставить("Регион","");
	СтруктураАдреса.Вставить("Район","");
	СтруктураАдреса.Вставить("Город","");
	СтруктураАдреса.Вставить("НаселПункт","");
	СтруктураАдреса.Вставить("Улица","");
	СтруктураАдреса.Вставить("Дом","");
	СтруктураАдреса.Вставить("Корпус","");
	СтруктураАдреса.Вставить("Квартира","");
	СтруктураАдреса.Вставить("КодСтраны","");
	СтруктураАдреса.Вставить("Представление","");
	
	сбисЗаполнитьСтруктуруАдреса(Контрагент, СтруктураАдреса);
	
	Если СтруктураАдреса.КодРегион = "" и СтруктураАдреса.Регион <> "" Тогда
		СтруктураАдреса.КодРегион = МодульОбъектаСервер().ПолучитьКодРегионаПоНазваниюНаСервере(СтруктураАдреса.Регион);
	КонецЕсли;
	
	Если СтруктураАдреса.Индекс="" и СтруктураАдреса.КодРегион="" и СтруктураАдреса.Район="" и СтруктураАдреса.Город="" 
		и СтруктураАдреса.НаселПункт="" и СтруктураАдреса.Улица="" и СтруктураАдреса.Дом="" и СтруктураАдреса.Корпус="" и СтруктураАдреса.Квартира="" Тогда
		Возврат "Адрес заполнен произвольной строкой.";
	ИначеЕсли СтруктураАдреса.Улица="" и СтруктураАдреса.НаселПункт="" Тогда
		Возврат "Не заполнено одно из полей: ""Улица"" или ""Населенный пункт"".";
	ИначеЕсли СтруктураАдреса.Город="" и СтруктураАдреса.НаселПункт="" и (Найти(Нрег(СтруктураАдреса.Регион),"москва")=0) и (Найти(Нрег(СтруктураАдреса.Регион),"байконур")=0) И (Найти(Нрег(СтруктураАдреса.Регион),"санкт-петербург")=0) Тогда
		Возврат "Не заполнено одно из полей: ""Город"" или ""Населенный пункт"".";	
	Иначе
		Попытка
			Возврат ?(СтруктураАдреса.КодРегион<>"","","Не заполнено поле ""Регион"".");
		Исключение	
			Возврат "Не заполнено поле ""Регион"".";
		КонецПопытки;	
	КонецЕсли;
	Возврат "";
КонецФункции	

// формирует текстовое представление адреса
Функция СбиСПолучитьПредставлениеАдрес(СтруктураАдреса)
	ТекПредставление = "";

	Если СокрЛП(СтруктураАдреса.Индекс) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Индекс);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Регион) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Регион);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Район) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Район);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Город) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Город);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.НаселПункт) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.НаселПункт);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Улица) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Улица);
	КонецЕсли;
	
	ТипДома = Неопределено;
	ТипКорпуса = Неопределено;
	ТипКвартиры = Неопределено;
	СтруктураАдреса.Свойство("ТипДома",     ТипДома);
	СтруктураАдреса.Свойство("ТипКорпуса",  ТипКорпуса);
	СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);

	
	Если СокрЛП(СтруктураАдреса.Дом) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипДома), ТипДома, "дом") + " № " + СокрЛП(СтруктураАдреса.Дом);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Корпус) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКорпуса), ТипКорпуса, "корпус") + " " + СокрЛП(СтруктураАдреса.Корпус);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Квартира) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв.") + СокрЛП(СтруктураАдреса.Квартира);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекПредставление) Тогда
		Возврат СтруктураАдреса.Представление;
	иначе	
		Возврат ТекПредставление;
	КонецЕсли;	

КонецФункции

//группа функций по работе с сервисом кладр
// Формирует структуру адреса, полученного с kladr.sbis.ru	
Функция СбисСформироватьСтруктуруАдресаПоКЛАДР(АдресСтрокой)
	ФайлСРезультатомКЛАДР = АдресПоКладрJSON(АдресСтрокой);
	Текст = Новый ЧтениеТекста(ФайлСРезультатомКЛАДР,КодировкаТекста.UTF8);
	СтрокаJSON = Текст.ПрочитатьСтроку();
	Текст.Закрыть();
	УдалитьФайлы(ФайлСРезультатомКЛАДР);
	МассивJSON = МодульОбъектаСервер().СбисПрочитатьJSON_НаСервере(СтрокаJSON);

	Возврат МассивJSON; 
КонецФункции	

// Получает адрес с kladr.sbis.ru, записывает во временный файл	
Функция АдресПоКладрJSON(Адрес)
	Результат = ПолучитьИмяВременногоФайла();
	Сервис="postal-service/service/code?addr="+Адрес;
	сбисСервер	= "online.sbis.ru";
	сбисПротокол= "https";
	Если РезервныйДомен Тогда
		сбисСервер = СтрЗаменить(сбисСервер, ".sbis.ru", ".saby.ru");
	КонецЕсли;
	сбисПрефикс	= СтрПолучитьСтроку(СтрЗаменить(Сред(АдресСервера, 9), "online", Символы.ПС), 1);
	Если Не Лев(сбисПрефикс, 2) = ".s" Тогда
		сбисСервер = сбисПрефикс + сбисСервер;
	КонецЕсли;
	сбисПрокси			= Новый ИнтернетПрокси;
	сбисПрокси.Пользователь	= КэшПарам.ПроксиЛогин;
	сбисПрокси.Пароль		= КэшПарам.ПроксиПароль;
	Если КэшПарам.ТипПрокси = "Вручную" Тогда
		Попытка
			сбисПорт = Число(КэшПарам.ПроксиПорт);
		Исключение
			Сообщить("Указан некорректный порт прокси-сервера");
			Возврат Ложь;
		КонецПопытки;
		Попытка
			сбисПрокси.Установить(сбисПротокол,КэшПарам.ПроксиСервер,сбисПорт,КэшПарам.ПроксиЛогин,КэшПарам.ПроксиПароль);
		Исключение
			сбисПрокси.Установить(сбисПротокол,КэшПарам.ПроксиСервер,сбисПорт);
		КонецПопытки;
	КонецЕсли;
	Если КэшСовместимостьМетодов.HTTPСоединение.OpenSSL Тогда
		СтрокаСоединения = "Новый HTTPСоединение(сбисСервер,,,,сбисПрокси,,Новый ЗащищенноеСоединениеOpenSSL())";
	Иначе
		СтрокаСоединения = "Новый HTTPСоединение(сбисСервер,,,,сбисПрокси,Истина)";
	КонецЕсли;
	сбисСоединение = Вычислить(СтрокаСоединения);
	сбисСоединение.Получить(Сервис, Результат); 
	сбисСоединение = Неопределено;
	Возврат Результат;
КонецФункции
 
