
&НаКлиенте
Функция ПослеВопросаОЗакрытии(Результат, ДопПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДопПараметры.ЗакрытьБезСохранения = Истина;
	Иначе
		ДопПараметры.ЗакрытьБезСохранения = Ложь;
	КонецЕсли;	                      
	
	Возврат ДопПараметры.ЗакрытьБезСохранения;
	
КонецФункции

// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.

// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.

// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.

// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.

// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.

//Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
//	
//	Возврат Новый Структура;
//	   ОбработанныйМассив = Новый Массив();
//	СтруктураСтрокой = "";
//	НужнаЗапятая = Ложь;
//	
//	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
//		
//		Если НужнаЗапятая Тогда
//	        СтруктураСтрокой = СтруктураСтрокой + ",";
//	    КонецЕсли;
//		
//		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
//	    НужнаЗапятая = Истина;
//		
//	КонецЦикла;
//	
//	Для Каждого Строка Из ТаблицаЗначений Цикл
//		
//		НоваяСтрока = Новый Структура(СтруктураСтрокой);
//	    ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
//	    ОбработанныйМассив.Добавить(НоваяСтрока);
//		
//	КонецЦикла;
//	
//	Возврат ОбработанныйМассив;

//КонецФункции


// Функция - Проверить наличие критических ошибок
// Проверяет наличие ошибок, при которых запрещено сохранять внесённые вручную изменения сопоставлений 
//
// Возвращаемое значение:
// Булево  - Наличие или отсутствие ошибок, при которых будем запрещать запись данных по сопоставлению
//
&НаКлиенте
Функция ПроверитьНаличиеКритическихОшибок()
	
	// Написать проход по массиву структур с ошибками на отбор по ключу "Критическая"
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПодборЕдиницИзмерения()
	
	ИмяСправочникаЕдиницаИзмерения = СтрЗаменить(ТипСправочникаЕдиницаИзмерения, "СправочникСсылка.", "");
	ИмяФормыВыбора = "Справочник." + ИмяСправочникаЕдиницаИзмерения + ".ФормаВыбора";
	ПараметрыПодбора = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор");
	 
    ПараметрыПодбора.МножественныйВыбор = Истина;    
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПослеВыбораЕдиницИзмерения", ЭтотОбъект, Новый Структура);
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыПодбора, ЭтаФорма, , , , ОбработкаВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОткрытьФорму(ФормаПодбора
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораЕдиницИзмерения(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТабЧастьТекДанные = МестныйКэш.ГлавноеОкно.сбисЭлементФормы(ЭтаФорма, "ТабличнаяЧасть").ТекущиеДанные; 
	
	Если ТабЧастьтекДанные.Единицы = Неопределено Тогда
		ТабЧастьТекДанные.Единицы = Новый Структура("Единицы", Новый Соответствие);
	Иначе
		ТабЧастьТекДанные.Единицы.Единицы.Очистить();  
	КонецЕсли;
	
	ТабЧастьТекДанные.ЕдиницыПредставление = "";
	Для Каждого ЕдиницаСсылка Из Результат Цикл 
		
		Единица = ПолучитьДанныеИзСправочникаЕдиниц(ЕдиницаСсылка);
		
		Если ЗначениеЗаполнено(ТабЧастьТекДанные.Коэффициент) Тогда
			КоэффициентЕдиницы = ТабЧастьТекДанные.Коэффициент;
		Иначе
			КоэффициентЕдиницы = 1;
		КонецЕсли;
		
		СтруктураЕдиницы = Новый Структура("_класс, Коэффициент, ОКЕИ, Название, Ссылка, Владелец", "СопоставлениеДляЕдиницы", КоэффициентЕдиницы, Единица.Код, Единица.Наименование, ЕдиницаСсылка, Единица.Владелец);
		ТабЧастьТекДанные.Единицы.Единицы.Вставить(ЕдиницаСсылка, СтруктураЕдиницы);
		ТабЧастьТекДанные.ЕдиницыПредставление = ТабЧастьТекДанные.ЕдиницыПредставление + Единица.Наименование + "; ";
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИзСправочникаЕдиниц(Ссылка);

	СпрОбъект = Ссылка.ПолучитьОбъект();
	Единица = Новый Структура;
	
	Единица.Вставить("Код", СпрОбъект.Код);
	Единица.Вставить("Наименование", СпрОбъект.Наименование);
	Единица.Вставить("Владелец", СпрОбъект.Владелец);

	Возврат Единица;
	
КонецФункции
// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПеречистатьСуммыПоСтрокам()
	
	СуммаВсего 	  = 0;
	СуммаНДСВсего = 0;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		СуммаВсего = СуммаВсего + Строка.Сумма;
		СуммаНДСВсего = СуммаНДСВсего + Строка.СуммаНДС;
	КонецЦикла;
	
	Если НЕ СуммаВсего = СуммаПоДокументу Тогда
		Сообщить("Не сходится сумма по документу(" + СуммаПоДокументу + ") и сумма по строкам сопоставления(" + СуммаВсего + ")");
	КонецЕсли;
	
		Если НЕ СуммаНДСВсего = СуммаНДСПоДокументу Тогда
		Сообщить("Не сходится сумма НДС по документу(" + СуммаНДСПоДокументу + ") и сумма НДС по строкам сопоставления(" + СуммаНДСВсего + ")");
	КонецЕсли;
			
КонецПроцедуры

// Процедура - Заполнить результат ручного сопоставления
// Внесение в класс сопоставления всех данных (изменённых и уже существовавших) номенклатур 1С из табличной части формы ручного сопоставления
//
// Параметры:
//  ДанныеРучногоСопоставления	 - Структура - Содержит массив данных класса сопоставления номенклатур по проекту расширенных проверок сопоставления номенклатур
//
&НаСервере
Процедура ЗаполнитьРезультатРучногоСопоставления(ДанныеРучногоСопоставления)
	
	ТаблицаНоменклатур1С = ТабличнаяЧасть.Выгрузить(); 
	ДанныеНоменклатуры1С = Новый Структура; 
	
	Для Каждого Номенклатура1С Из ТаблицаНоменклатур1С Цикл 	
		
		ДанныеНоменклатуры1С = СтрокаТаблицыЗначенийВСтруктуру(Номенклатура1С);
		ДанныеНоменклатуры1С.Вставить("_класс", "ОписаниеНоменклатуры1С");
		ДанныеРучногоСопоставления.Номенклатура1С.Вставить(Номенклатура1С.Номенклатура, ДанныеНоменклатуры1С);
		
		// Финт ушами. Даже не спрашивай, Андрей, не хочу о грустном (с) Сыч
		ИзменяемаяСтрокаКласса = ДанныеРучногоСопоставления.Номенклатура1С.Получить(Номенклатура1С.Номенклатура); 
		ЕдиницыВрем = ДанныеНоменклатуры1С.Единицы.Единицы;
		ИзменяемаяСтрокаКласса.Удалить("Единицы");
		ИзменяемаяСтрокаКласса.Вставить("Единицы", ЕдиницыВрем);
		
	КонецЦикла;  

КонецПроцедуры

Функция ПолучитьБезопасноеНаименование(ИсходнаяСтрока) Экспорт
	
	Результат = "";
	
	Латиница = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";
	Кириллица = "абвгдеёзжийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	Цифры = "0123456789";                                                            
	ДопустимыеСимволы = Латиница + Кириллица + Цифры;
	
	Для ПозицияСимвола = 1 по СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимв = Сред(ИсходнаяСтрока, ПозицияСимвола, 1);
		Если Найти(ДопустимыеСимволы, ТекСимв) > 0 Тогда
			Результат = Результат + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВРЕГ(Результат);
	
КонецФункции

