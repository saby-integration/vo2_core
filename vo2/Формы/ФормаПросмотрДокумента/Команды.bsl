
&НаКлиенте
Процедура КонтактыТП(Команда)
	ЗапуститьПриложение("https://sbis.ru/support");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВ1С(Команда) Экспорт

	ЗагрузкаВ1С_Начало();

КонецПроцедуры

&НаКлиенте
Процедура ОбращениеТП(Команда)
	ЗапуститьПриложение("https://online.sbis.ru/page/my-claims");
КонецПроцедуры

// Процедура отправляет текущий пакет документов 	
&НаКлиенте
Процедура ОтправитьНажатие(Команда)
	
	Перем Идентификатор, БлокировкаОтправки, СтатусЭД;
	
	СоставПакета.Вставить("Примечание", ПакетКомментарий);
	
	ОбновитьДанныеДокументаСБИС(СоставПакета);
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "Записать").Видимость = Ложь;
	
	Если	СоставПакета.Вложение.Количество()
		И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СбисПрочитатьЗначениеСвойстваДокумента",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		ДокументСсылка = СоставПакета.Вложение[0].Документы1С[0].Значение;   
		ПараметрыЧтенияСвойства    = Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Статус", ДокументСсылка);
	    ПредставлениеСтатуса = фрм.СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства,Кэш); 
		СтатусЭД = Кэш.ОбщиеФункции.СбисИндексКартинкиПоСтатусуЭД(ПредставлениеСтатуса); 
	КонецЕсли;
	
	Если СоставПакета.Свойство("Идентификатор") Тогда
		Идентификатор = СоставПакета.Идентификатор;
	КонецЕсли; 
	
	Если НЕ Идентификатор = Неопределено Тогда     
		Попытка
			БлокировкаОтправки = МодульОбъектаКлиент().ПроверитьБлокировкуОтправкиПакетаВСБИС(СоставПакета);
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОтправитьНажатие");
		КонецПопытки; 
	КонецЕсли; 
	
	Если НЕ БлокировкаОтправки = Неопределено И БлокировкаОтправки.БлокироватьОтправку Тогда
		МодульОбъектаКлиент().СбисСообщить(БлокировкаОтправки.ПричинаБлокировки);
		Возврат;
	КонецЕсли;

	МассивПодготовленныхПакетов = Новый Массив;
	МассивПодготовленныхПакетов.Добавить(СоставПакета);
	СписокКОтправке = Новый Массив;
	СписокКОтправке.Добавить(Новый Структура("МассивПодготовленныхПакетов,ИдПакета,Статус", МассивПодготовленныхПакетов,Идентификатор,СтатусЭД));
	
	ПараметрыЗавершить			= Новый Структура("Кэш", Кэш);
	ОбработчикРезультатОтправки	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ОтправитьДокументы_Завершение", ЭтаФорма, ПараметрыЗавершить);

	ДопПараметрыОтправки = Новый Структура("ИмяРеестра, ОбработчикРезультата", Кэш.Текущий.ТипДок, ОбработчикРезультатОтправки);
	
	МодульОбъектаКлиент().ЗапуститьМассовуюОтправкуДокументов(СписокКОтправке, ДопПараметрыОтправки)

КонецПроцедуры

// Вставить содержимое обработчика.
&НаКлиенте
Процедура ПодготовитьКЗагрузке(Команда)
	
	СбисВыполнитьРазбор();
	
	Если Вложение.Свойство("КлассыСопоставленияНоменклатур")
		И Вложение.КлассыСопоставленияНоменклатур.Количество() Тогда 
		ОперацииПодготовкиКЗагрузкеРасширенноеСопоставление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РуководствоПользователя(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/docs");
КонецПроцедуры

&НаКлиенте
Процедура АбонентскийЯщикНажатие(Команда, СтандартнаяОбработка=Истина)
	Элемент = сбисЭлементФормы(ЭтаФорма, "АбонентскийЯщик");
	СтандартнаяОбработка = Ложь;
	СбисВыбратьПочтовыйЯщик(МестныйКэш, Элемент, Новый Структура);
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы основной панели  
//
&НаКлиенте
Процедура ГлавнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	РасширениеСостава = Неопределено; 
	Маркировка = Неопределено;
	лПрослеживаемость = Неопределено;
	
	ИмяСтраницы = Элемент.ТекущаяСтраница.Имя;
	
	ВкладкаМаркировки = ИмяСтраницы = "Маркировка"
		И (СоставПакета.Свойство("Расширение", РасширениеСостава)
			И	РасширениеСостава.Свойство("Маркировка", Маркировка)
			И	Маркировка = "Да"
				ИЛИ МодульОбъектаКлиент().РаботаСГосКонтрактами(СоставПакета))
		И НЕ ПараметрыРаботы.МаркировкаЗаполнена;
	
	ВкладкаПрослеживаемости = ИмяСтраницы = "Прослеживаемость"
		И СоставПакета.Свойство("Расширение", РасширениеСостава)
		И	РасширениеСостава.Свойство("Прослеживаемость", лПрослеживаемость)
		И	лПрослеживаемость = "Да" 
		И НЕ ПараметрыРаботы.ПрослеживаемостьЗаполнена;
	
	Если ВкладкаМаркировки Тогда // Запретил повторное перечитываение
		ЗаполнитьМаркировку(СоставПакета); 
	ИначеЕсли ВкладкаПрослеживаемости Тогда // Запретил повторное перечитываение
		ЗаполнитьПрослеживаемость(СоставПакета);  
	Иначе
		//
	КонецЕсли;

КонецПроцедуры

// Процедура - устанавливает выбранный параметр причины выбытия кодов маркировки
// 
&НаКлиенте
Процедура ПричинаВыводаПриИзменении()
	Перем КодПричиныВывода, лИностраннаяОрганизация, лКонтрагент;  
	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел]; 
	
	СкладскиеПараметрыДокумента = МодульОбъектаКлиент().ПолучитьСкладскиеПараметрыДокумента(СоставПакета); 
	
	//ПричинаВывода = СкладскиеПараметрыДокумента.ПричинаВывода; 
	 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ПричинаВывода").СписокВыбора.ЗагрузитьЗначения(СкладскиеПараметрыДокумента.ПричиныВыводаИзОборота); 
	
	Если СоставПакета.Свойство("Контрагент", лКонтрагент) Тогда 
		лИностраннаяОрганизация = МодульОбъектаКлиент().ПрочитатьДополнительныйПараметрСтороны(лКонтрагент, "ИностраннаяОрганизация");
	КонецЕсли; 
	
	ДопПараметрыСтороны = Новый Структура; 
	ДопПараметрыСтороны.Вставить("ИностраннаяОрганизация",лИностраннаяОрганизация);
	
	МассивПричинВыводаИзОборота = МодульОбъектаКлиент().ПричиныВыводаИзОборота(, ДопПараметрыСтороны);  
	
	Если СкладскиеПараметрыДокумента.ПричиныВыводаИзОборота.Найти(ПричинаВывода) = Неопределено Тогда 
		//Причина нам не подходит, т.к. не применима к текущему параметру участника оборота ГИС МТ 
		ПричинаВывода = МассивПричинВыводаИзОборота[0].Причина;
	КонецЕсли;
	
	Индекс = Кэш.ОбщиеФункции.ВыбратьДанныеСертификата(МассивПричинВыводаИзОборота,ПричинаВывода,"Причина");
	
	//Здесь, возможно, необходимо будет поменять на причину вывода по умолчанию.
	Если Индекс = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	КодПричиныВывода = МассивПричинВыводаИзОборота[Индекс].КодПричины;
	
	Если КодПричиныВывода = Неопределено Тогда
		Возврат; 
	ИначеЕсли (КодПричиныВывода = "1"
		Или КодПричиныВывода = "16"
		Или КодПричиныВывода = "17")
		И ТекущийРаздел = "Продажа" Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта").Видимость = Истина;
		Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта.Надпись").Видимость = Истина;
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта").Видимость = Ложь;
		Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта.Надпись").Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("КодПричины", КодПричиныВывода); 
	
	Попытка
		МодульОбъектаКлиент().ИзменитьСкладскойПараметрДокумента(СоставПакета, ПараметрыДокумента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПричинаВыводаПриИзменении");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - устанавливает выбранный параметр участника оборота маркируемой продукции 
//
&НаКлиенте
Процедура УчастникОборотаПриИзменении(Элемент)
	Перем КодУчастикаОборота;
	
	МассивУчастниковОборота = МодульОбъектаКлиент().ПараметрыУчастиковОборота();  
	Для Каждого ЭлМасс ИЗ МассивУчастниковОборота Цикл
		Если ЭлМасс.Причина = УчастникОборота Тогда 
			КодУчастикаОборота = ЭлМасс.КодПричины;
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Если КодУчастикаОборота = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("КодУчастикаОборота", КодУчастикаОборота); 
	
	Попытка
		МодульОбъектаКлиент().ИзменитьСкладскойПараметрДокумента(СоставПакета, ПараметрыДокумента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "УчастникОборотаПриИзменении");
	КонецПопытки;
	
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма,"ОтправитьКодыМаркировки").Видимость = КодУчастикаОборота;  
	
	ПричинаВыводаПриИзменении();

КонецПроцедуры

// Процедура - запускает проверку наличия токена ГИС МТ и инициирует проверку кодов маркировки 
//
&НаКлиенте
Процедура ЗапуститьПроверкуКодовМаркировки(Элемент)  
	
	Перем РезультатПроверкиТокена;
	
	Попытка
		РезультатПроверкиТокена = МодульОбъектаКлиент().ПроверитьНаличиеТокена(СоставПакета);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ЗапуститьПроверкуКодовМаркировки");
	КонецПопытки; 
	
	Если РезультатПроверкиТокена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	  
	ОбработатьРезультатПроверкиТокена(РезультатПроверкиТокена); 
	
КонецПроцедуры 

// Процедура - инициирует проверку кодов маркировки или вызывает создание токена ГИС МТ 
//
// Параметры:
//  РезультатПроверкиТокена	 - Структура - результат проверки токена и описание ошибки
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиТокена(РезультатПроверкиТокена)  
	
	Перем РезультатНаличияТокена;
	
	Если РезультатПроверкиТокена.Свойство("Result",РезультатНаличияТокена)
		И НЕ РезультатНаличияТокена = Неопределено
		И ВРЕГ(РезультатНаличияТокена) = "OK" Тогда   	
		Попытка
			МодульОбъектаКлиент().ИнициироватьПроверкуКодовМаркировки(СоставПакета); 
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОбработатьРезультатПроверкиТокена");
		КонецПопытки; 	
		ЗаполнитьМаркировку(СоставПакета); 
	Иначе
		ОбработчикДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СоздатьТокенГИСМТ", ЭтаФорма);
		ТекстВопроса = "Токен, для проверки сведений ГИС МТ, не найден. Создать новый?";
		МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - получает список сертификатов и запускает окно выбора сертификата для создания токена 
//
&НаКлиенте
Процедура СоздатьТокенГИСМТ(РезультатДиалога,ДопПараметры = Неопределено) Экспорт  
	ТекстОшибки = "";
	
	Если Не РезультатДиалога = КодВозвратаДиалога.Да Тогда	
		Возврат;
	КонецЕсли;
	
	Если Не МестныйКэш.СБИС.ОбменВключен Тогда
		Ошибка = Новый Структура("code, message, details", 100, "Не включен обмен со СБИС", "Сертификаты не найдены. Выберите способ обмена в настройках соединения.");
		МестныйКэш.ГлавноеОкно.сбисСообщитьОбОшибке(МестныйКэш, Ошибка, Новый Структура("ФормаВладелец, Отправлять", ЭтаФорма, Ложь));
		ТекстОшибки = Ошибка.message;
	КонецЕсли;
	
	//Получим список
	Если ТекстОшибки = "" Тогда
		СписокСертификатовСырой = МестныйКэш.Интеграция.ПолучитьСписокСертификатовДляАвторизации(МестныйКэш,ТекстОшибки);
	КонецЕсли;
	Если	ТекстОшибки = ""
		И	Не	ЗначениеЗаполнено(СписокСертификатовСырой) Тогда
		ТекстОшибки = "Сертификаты не найдены";
	КонецЕсли;  
	
	ОбработчикВыбора = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("РезультатВыбораСертификата", ЭтаФорма);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаВыборИзСписка = сбисПолучитьФорму("Форма_ВыборИзСписка");
		ФормаВыборИзСписка.СписокДляВыбора = СписокСертификатовСырой;
		ФормаВыборИзСписка.Заголовок ="Выберите сертификат для создания токена ГИС МТ";
		Ответ = ФормаВыборИзСписка.ОткрытьМодально();
		РезультатВыбораСертификата(Ответ);
	#Иначе
		ОткрытьФорму(МестныйКэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокСертификатовСырой, "Выберите сертификат для создания токена ГИС МТ"),,,,,ОбработчикВыбора);
    #КонецЕсли
КонецПроцедуры   

// Функция - обрабатывает результат выбора сертификата для создания токена  
//
&НаКлиенте
Функция РезультатВыбораСертификата(Результат, ДопПараметры = Неопределено) Экспорт   
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Сертификат",Результат);
	ФормаВводаПинкода = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");   
	Если НЕ Результат = Неопределено Тогда
		ПараметрыВвода = Новый Структура("СертификатИмя", Результат.Название);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
			Если Не	ЗначениеЗаполнено(КодАктивации)	Или КодАктивации.ПинКод = "" Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Неопределено;	
			КонецЕсли;		
			Возврат РезультатВводаПинКода(Новый Структура("ПинКод",КодАктивации.ПинКод),ДопПараметры);		
		#Иначе
			ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("РезультатВводаПинКода",ЭтаФорма,ДопПараметры);
			ФормаВводаПинкода.Показать(ПараметрыВвода);
		#КонецЕсли 
	КонецЕсли;
КонецФункции

// Функция - обрабатывает результат ввода пин кода сертификата для создания токена  
//  
&НаКлиенте
Функция РезультатВводаПинКода(Результат, ДопПараметры = Неопределено) Экспорт    
	ПинКод = Неопределено;
	Отпечаток = Неопределено;
	
	Если Результат = Неопределено Тогда  
		МодульОбъектаКлиент().СбисСообщить("Не активирован сертификат для подписания документов.");
		Возврат Ложь; 
	КонецЕсли;
		
	Если Результат.Свойство("ПинКод",ПинКод) 
		И НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Сертификат")
		И ДопПараметры.Сертификат.Свойство("Отпечаток",Отпечаток) Тогда  
		Попытка
			ДанныеСертификатаСбис = МодульОбъектаКлиент().ПолучитьДанныеСертификатаСбис(Отпечаток); 
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "РезультатВводаПинКода");
		КонецПопытки; 
		Если НЕ ЗначениеЗаполнено(ДанныеСертификатаСбис) Тогда 
			МодульОбъектаКлиент().СбисСообщить("Сертификат, по отпечатку, не найден в СБИС");
			Возврат Ложь;
		КонецЕсли;
		ИндексСтрокиХэшаАлгоритма = МестныйКэш.ОбщиеФункции.ВыбратьДанныеСертификата(ДанныеСертификатаСбис.s,"HashAlgOID","n"); 
		ИндексСтрокиДвоичныхДанных = МестныйКэш.ОбщиеФункции.ВыбратьДанныеСертификата(ДанныеСертификатаСбис.s,"Файл","n"); 
		Если ИндексСтрокиХэшаАлгоритма = Неопределено
			И ИндексСтрокиДвоичныхДанных = Неопределено Тогда
			МодульОбъектаКлиент().СбисСообщить("Сертификат, по отпечатку, не найден в СБИС");
			Возврат Ложь; 
		КонецЕсли;
		ХэшАлгоритмаШифрования = ДанныеСертификатаСбис.d[ИндексСтрокиХэшаАлгоритма];
		ДвоичныеДанныеСертификата = ДанныеСертификатаСбис.d[ИндексСтрокиДвоичныхДанных];
		ПараметрыСертификата = Новый Структура();   
		ПараметрыСертификата.Вставить("thumbprint",ДопПараметры.Сертификат.Отпечаток);
		ПараметрыСертификата.Вставить("hashOID",ХэшАлгоритмаШифрования);
		ПараметрыСертификата.Вставить("pin",Результат.ПинКод);  
		ПараметрыСертификата.Вставить("validFrom",ДопПараметры.Сертификат.ДействителенС);
		ПараметрыСертификата.Вставить("validTo",ДопПараметры.Сертификат.ДействителенПо);  
		ПараметрыСертификата.Вставить("certData",ДвоичныеДанныеСертификата); 
		Попытка
			МодульОбъектаКлиент().СоздатьТокенСбис(СоставПакета,ПараметрыСертификата);  
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "РезультатВводаПинКода");
		КонецПопытки;
		ОбработатьРезультатСозданияТокена();
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции 

// Процедура - обрабатывает результат создания токена в ГИС МТ  
//  
&НаКлиенте
Процедура ОбработатьРезультатСозданияТокена()   
	Результат = Неопределено;
	ТокенСоздан = Ложь;
	ВремяВызова = ТекущаяДата();
	Пока Истина Цикл
		Попытка
			Результат = МодульОбъектаКлиент().ПолучитьРезультатСозданияТокена(СоставПакета);   
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОбработатьРезультатСозданияТокена");
		КонецПопытки;

		Если Не Результат = Неопределено 
			И Результат.Свойство("Result") 
			И ВРЕГ(Результат.Result) = "OK" Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	  
			ТокенСоздан = Истина;
			Прервать;
		ИначеЕсли ТекущаяДата() - ВремяВызова > 10 Тогда
			//Установленный на команде таймаут
			Отказ = Истина;
			МодульОбъектаКлиент().СообщитьСбисИсключение("ExtSysMarking.CheckGisTask() не вернул ответ за разумное время", "ОбработатьРезультатСозданияТокена");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТокенСоздан Тогда
    	ЗаполнитьМаркировку(СоставПакета);
	КонецЕсли;
КонецПроцедуры   

// Функция - возвращает значение типа цвет, в зависимости результата кода состояния проверки документа 
//
&НаКлиенте
Функция ВернутьЦветСтатуса(КодСостоянияОперации) 
	МассивОшибок = Новый Массив; 
	МассивОшибок.Добавить("10");  
	МассивОшибок.Добавить("13");
	МассивОшибок.Добавить("20");
	МассивОшибок.Добавить("23");
	МассивОшибок.Добавить("30");
	
	МассивУспех = Новый Массив; 
	МассивУспех.Добавить("3"); 
	МассивУспех.Добавить("22");
	
	ИндексОшибок = МассивОшибок.Найти(КодСостоянияОперации);
	ИндексУспех = МассивУспех.Найти(КодСостоянияОперации);
	
	Если НЕ ИндексОшибок = Неопределено Тогда 
		Возврат Новый Цвет(255,0,0);   
	ИначеЕсли НЕ ИндексУспех = Неопределено Тогда
		Возврат Новый Цвет(0,128,0); 
	Иначе 
		Возврат Новый Цвет(0,0,0);;
	КонецЕсли;
	
КонецФункции

// Процедура - запускает проверку статуса документа в ГИС МТ. 
//
&НаКлиенте
Процедура СтатусДокументаГИСМТ(Элемент)  
	
	Попытка
		Результат = МодульОбъектаКлиент().ПроверитьСтатусПроверкиГИСМТ(СоставПакета);    
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "СтатусДокументаГИСМТ");
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСообщения = Новый Структура;  
	ПараметрыСообщения.Вставить("АдресСсылка",);  
	ПараметрыСообщения.Вставить("ТекстСсылка",);
	Если Результат.Messages.Количество() Тогда
		ПараметрыСообщения.Вставить("Текст", Результат.Messages[0][0]);
		сбисПолучитьФорму("ФормаПредупреждения").ПоказатьПоверх(ПараметрыСообщения); 
	КонецЕсли;
		
КонецПроцедуры

// Процедура - запускает отправку кодов документа в ГИС МТ. 
//  
&НаКлиенте
Процедура ОтправитьКодыМаркировки(Элемент)  
	
	Перем Идентификатор, БлокировкаОтправки; 
	
	Если СоставПакета.Свойство("Идентификатор") Тогда
		Идентификатор = СоставПакета.Идентификатор;
	КонецЕсли; 
	
	Если НЕ Идентификатор = Неопределено Тогда     
		Попытка
			БлокировкаОтправки = МодульОбъектаКлиент().ПроверитьБлокировкуОтправкиПакетаВСБИС(СоставПакета);
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОтправитьНажатие");
		КонецПопытки; 
	КонецЕсли; 
	
	Если НЕ БлокировкаОтправки = Неопределено И БлокировкаОтправки.БлокироватьОтправку Тогда
		МодульОбъектаКлиент().СбисСообщить(БлокировкаОтправки.ПричинаБлокировки);
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = МодульОбъектаКлиент().ОтправитьКодыМаркировкиВГИС(СоставПакета);    
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОтправитьКодыМаркировки");   
		Возврат;
	КонецПопытки;    
	
	Если Результат Тогда  
		сбисЭлементФормы(ЭтаФорма,"СтатусДокументаГИСМТ").ЦветТекста = Новый Цвет(28,85,174);
		сбисЭлементФормы(ЭтаФорма,"СтатусДокументаГИСМТ").Заголовок = "Регистрация в ГИС МТ"; 
		ЗаполнитьМаркировку(СоставПакета); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура запускает проверку кодов РНПТ
// 
&НаКлиенте
Процедура ПроверитьРНПТ(Команда)
	
	Попытка
		Результат = МодульОбъектаКлиент().ПроверитьПрослеживаемыеПозиции(СоставПакета);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПроверитьРНПТ");
	КонецПопытки; 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РасшифровкаСостояния = МестныйКэш.ОбщиеФункции.СостояниеПрослеживаемостиПоКоду(Строка(Результат));
	сбисЭлементФормы(ЭтаФорма,"СтатусДокументаГИСМТ").Заголовок = РасшифровкаСостояния;  
	ЦветСтатуса = ВернутьЦветСтатуса(Строка(Результат)); 
	сбисЭлементФормы(ЭтаФорма,"СтатусДокументаГИСМТ").ЦветТекста = ЦветСтатуса;  
	
	ЗаполнитьПрослеживаемость(СоставПакета);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ОбновитьДанныеДокументаСБИС(СоставПакета);
	МодульОбъектаКлиент().СоставПакета_Записать(СоставПакета, Новый Структура("ЗапуститьВДокументооборот", Ложь));
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "Записать").Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ОтметитьВсе = Не ОтметитьВсе;
	НоменклатураОтметитьВсеОбработчик();
	
КонецПроцедуры

