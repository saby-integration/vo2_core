
&НаКлиенте
Процедура КонтактыТП(Команда)
	ЗапуститьПриложение("https://sbis.ru/support");
КонецПроцедуры

&НаКлиенте
Процедура ОбращениеТП(Команда)
	ЗапуститьПриложение("https://online.sbis.ru/page/my-claims");
КонецПроцедуры

&НаКлиенте
Процедура РуководствоПользователя(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/docs");
КонецПроцедуры

&НаКлиенте
Процедура АбонентскийЯщикНажатие(Команда, СтандартнаяОбработка=Истина)
	Элемент = сбисЭлементФормы(ЭтаФорма, "АбонентскийЯщик");
	СтандартнаяОбработка = Ложь;
	СбисВыбратьПочтовыйЯщик(МестныйКэш, Элемент, Новый Структура);
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы основной панели  
//
&НаКлиенте
Процедура ГлавнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	РасширениеСостава = Неопределено; 
	Маркировка = Неопределено;  
	
	ИмяСтраницы = Элемент.ТекущаяСтраница.Имя;
	
	Если ИмяСтраницы = "Маркировка"
		И СоставПакета.Свойство("Расширение",РасширениеСостава)
		И	РасширениеСостава.Свойство("Маркировка", Маркировка)
		И	Маркировка = "Да" 
		И НЕ ПараметрыРаботы.МаркировкаЗаполнена Тогда //Запретил повторное перечитываение
		ЗаполнитьМаркировку(СоставПакета);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик разворачивания строки списка маркируемых позиций 
//
&НаКлиенте
Процедура ТаблицаМаркировкаПередРазворачиванием(Элемент, Строка, Отказ)  
	
	Если НЕ ПараметрыРаботы.Свойство("МаркировкаЗаполнена") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		Строка = ТаблицаМаркировка.НайтиПоИдентификатору(Строка); 
	#КонецЕсли
	Если НЕ Строка = Неопределено Тогда  
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(Строка, "Строки").Очистить();
		
		ТаблицаФормы = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ТаблицаМаркировка");
		
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "КодМаркировки").Видимость = Истина;
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "ИндикаторКодаМаркировки").Видимость = Истина; 
		
		ПараметрыНоменклатуры = МодульОбъектаКлиент().ВернутьПараметрыНоменклатуры(СоставПакета,Новый Структура("НоменклатураСбис",Строка.НоменклатураСбис));  //Если поэкземплярный учет, то вычитываем НДР
						
		Если ПараметрыНоменклатуры = Неопределено ИЛИ НЕ ПараметрыНоменклатуры.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлСтр ИЗ ПараметрыНоменклатуры Цикл
			НоваяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(Строка, "Строки").Добавить();   
			НоваяСтрока.КодМаркировки = ЭлСтр.Number;
			Если ЭлСтр.Свойство("IndicatorData") 
				И ТипЗнч(ЭлСтр.IndicatorData) = Тип("Массив")
				И ЗначениеЗаполнено(ЭлСтр.IndicatorData) Тогда
				НоваяСтрока.ИндикаторКодаМаркировки = ЭлСтр.IndicatorData[0].Error;    
				НоваяСтрока.ИндексКартинкиКод = 1;
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли;
КонецПроцедуры


// Процедура - устанавливает выбранный параметр причины выбытия кодов маркировки
// 
&НаКлиенте
Процедура ПричинаВыводаПриИзменении(Элемент)
	Перем КодПричиныВывода;
	
	МассивПричинВыводаИзОборота = ПричиныВыводаИзОборота();  
	Для Каждого ЭлМасс ИЗ МассивПричинВыводаИзОборота Цикл
		Если ЭлМасс.Причина = ПричинаВывода Тогда 
			КодПричиныВывода = ЭлМасс.КодПричины;
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Если КодПричиныВывода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("КодПричины", КодПричиныВывода); 
	
	Попытка
		МодульОбъектаКлиент().ИзменитьСкладскойПараметрДокумента(СоставПакета, ПараметрыДокумента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ПричинаВыводаПриИзменении");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - устанавливает выбранный параметр участника оборота маркируемой продукции 
//
&НаКлиенте
Процедура УчастникОборотаПриИзменении(Элемент)
	Перем КодУчастикаОборота;
	
	МассивУчастниковОборота = ПараметрыУчастиковОборота();  
	Для Каждого ЭлМасс ИЗ МассивУчастниковОборота Цикл
		Если ЭлМасс.Причина = УчастникОборота Тогда 
			КодУчастикаОборота = ЭлМасс.КодПричины;
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Если КодУчастикаОборота = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("КодУчастикаОборота", КодУчастикаОборота); 
	
	Попытка
		МодульОбъектаКлиент().ИзменитьСкладскойПараметрДокумента(СоставПакета, ПараметрыДокумента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "УчастникОборотаПриИзменении");
	КонецПопытки;
	
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма,"ОтправитьКодыМаркировки").Видимость = КодУчастикаОборота; 

КонецПроцедуры

// Процедура - запускает проверку наличия токена ГИС МТ и инициирует проверку кодов маркировки 
//
&НаКлиенте
Процедура ЗапуститьПроверкуКодовМаркировки(Элемент)  
	
	Перем РезультатПроверкиТокена;
	
	Попытка
		РезультатПроверкиТокена = МодульОбъектаКлиент().ПроверитьНаличиеТокена(СоставПакета);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ЗапуститьПроверкуКодовМаркировки");
	КонецПопытки; 
	
	Если РезультатПроверкиТокена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	  
	ОбработатьРезультатПроверкиТокена(РезультатПроверкиТокена); 
	
КонецПроцедуры 

// Процедура - инициирует проверку кодов маркировки или вызывает создание токена ГИС МТ 
//
// Параметры:
//  РезультатПроверкиТокена	 - Структура - результат проверки токена и описание ошибки
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиТокена(РезультатПроверкиТокена)  
	
	Перем РезультатНаличияТокена;
	
	Если РезультатПроверкиТокена.Свойство("Result",РезультатНаличияТокена)
		И НЕ РезультатНаличияТокена = Неопределено
		И ВРЕГ(РезультатНаличияТокена) = "OK" Тогда   	
		Попытка
			МодульОбъектаКлиент().ИнициироватьПроверкуКодовМаркировки(СоставПакета); 
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОбработатьРезультатПроверкиТокена");
		КонецПопытки; 	
		ЗаполнитьМаркировку(СоставПакета); 
	Иначе
		ОбработчикДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СоздатьТокенГИСМТ", ЭтаФорма);
		ТекстВопроса = "Токен, для проверки сведений ГИС МТ, не найден. Создать новый?";
		МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - получает список сертификатов и запускает окно выбора сертификата для создания токена 
//
&НаКлиенте
Процедура СоздатьТокенГИСМТ(РезультатДиалога,ДопПараметры = Неопределено) Экспорт  
	ТекстОшибки = "";
	
	Если Не РезультатДиалога = КодВозвратаДиалога.Да Тогда	
		Возврат;
	КонецЕсли;
	
	Если Не МестныйКэш.СБИС.ОбменВключен Тогда
		Ошибка = Новый Структура("code, message, details", 100, "Не включен обмен со СБИС", "Сертификаты не найдены. Выберите способ обмена в настройках соединения.");
		МестныйКэш.ГлавноеОкно.сбисСообщитьОбОшибке(МестныйКэш, Ошибка, Новый Структура("ФормаВладелец, Отправлять", ЭтаФорма, Ложь));
		ТекстОшибки = Ошибка.message;
	КонецЕсли;
	
	//Получим список
	Если ТекстОшибки = "" Тогда
		СписокСертификатовСырой = МестныйКэш.Интеграция.ПолучитьСписокСертификатовДляАвторизации(МестныйКэш,ТекстОшибки);
	КонецЕсли;
	Если	ТекстОшибки = ""
		И	Не	ЗначениеЗаполнено(СписокСертификатовСырой) Тогда
		ТекстОшибки = "Сертификаты не найдены";
	КонецЕсли;  
	
	ОбработчикВыбора = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("РезультатВыбораСертификата", ЭтаФорма);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаВыборИзСписка = сбисПолучитьФорму("Форма_ВыборИзСписка");
		ФормаВыборИзСписка.СписокДляВыбора = СписокСертификатовСырой;
		ФормаВыборИзСписка.Заголовок ="Выберите сертификат для создания токена ГИС МТ";
		Ответ = ФормаВыборИзСписка.ОткрытьМодально();
		РезультатВыбораСертификата(Ответ);
	#Иначе
		ОткрытьФорму(МестныйКэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокСертификатовСырой, "Выберите сертификат для создания токена ГИС МТ"),,,,,ОбработчикВыбора);
    #КонецЕсли
КонецПроцедуры   

// Функция - обрабатывает результат выбора сертификата для создания токена  
//
&НаКлиенте
Функция РезультатВыбораСертификата(Результат, ДопПараметры = Неопределено) Экспорт   
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Сертификат",Результат);
	ФормаВводаПинкода = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");   
	Если НЕ Результат = Неопределено Тогда
		ПараметрыВвода = Новый Структура("СертификатИмя", Результат.Название);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
			Если Не	ЗначениеЗаполнено(КодАктивации)	Или КодАктивации.ПинКод = "" Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Неопределено;	
			КонецЕсли;		
			Возврат РезультатВводаПинКода(Новый Структура("ПинКод",КодАктивации.ПинКод),ДопПараметры);		
		#Иначе
			ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("РезультатВводаПинКода",ЭтаФорма,ДопПараметры);
			ФормаВводаПинкода.Показать(ПараметрыВвода);
		#КонецЕсли 
	КонецЕсли;
КонецФункции

// Функция - обрабатывает результат ввода пин кода сертификата для создания токена  
//  
&НаКлиенте
Функция РезультатВводаПинКода(Результат, ДопПараметры = Неопределено) Экспорт    
	ПинКод = Неопределено;
	Отпечаток = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Результат.Свойство("ПинКод",ПинКод) 
		И НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Сертификат")
		И ДопПараметры.Сертификат.Свойство("Отпечаток",Отпечаток) Тогда  
		Попытка
			ДанныеСертификатаСбис = МодульОбъектаКлиент().ПолучитьДанныеСертификатаСбис(Отпечаток); 
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "РезультатВводаПинКода");
		КонецПопытки; 
		Если ДанныеСертификатаСбис = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ИндексСтрокиХэшаАлгоритма = МестныйКэш.ОбщиеФункции.ВыбратьДанныеСертификата(ДанныеСертификатаСбис.s,"HashAlgOID","n"); 
		ИндексСтрокиДвоичныхДанных = МестныйКэш.ОбщиеФункции.ВыбратьДанныеСертификата(ДанныеСертификатаСбис.s,"Файл","n"); 
		Если ИндексСтрокиХэшаАлгоритма = Неопределено
			И ИндексСтрокиДвоичныхДанных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ХэшАлгоритмаШифрования = ДанныеСертификатаСбис.d[ИндексСтрокиХэшаАлгоритма];
		ДвоичныеДанныеСертификата = ДанныеСертификатаСбис.d[ИндексСтрокиДвоичныхДанных];
		ПараметрыСертификата = Новый Структура();   
		ПараметрыСертификата.Вставить("thumbprint",ДопПараметры.Сертификат.Отпечаток);
		ПараметрыСертификата.Вставить("hashOID",ХэшАлгоритмаШифрования);
		ПараметрыСертификата.Вставить("pin",Результат.ПинКод);  
		ПараметрыСертификата.Вставить("validFrom",ДопПараметры.Сертификат.ДействителенС);
		ПараметрыСертификата.Вставить("validTo",ДопПараметры.Сертификат.ДействителенПо);  
		ПараметрыСертификата.Вставить("certData",ДвоичныеДанныеСертификата); 
		Попытка
			МодульОбъектаКлиент().СоздатьТокенСбис(СоставПакета,ПараметрыСертификата);  
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "РезультатВводаПинКода");
		КонецПопытки;
		ОбработатьРезультатСозданияТокена();
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции 

// Процедура - обрабатывает результат создания токена в ГИС МТ  
//  
&НаКлиенте
Процедура ОбработатьРезультатСозданияТокена()   
	Результат = Неопределено;
	ТокенСоздан = Ложь;
	ВремяВызова = ТекущаяДата();
	Пока Истина Цикл
		Попытка
			Результат = МодульОбъектаКлиент().ПолучитьРезультатСозданияТокена(СоставПакета);   
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОбработатьРезультатСозданияТокена");
		КонецПопытки;

		Если Не Результат = Неопределено 
			И Результат.Свойство("Result") 
			И ВРЕГ(Результат.Result) = "OK" Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	  
			ТокенСоздан = Истина;
			Прервать;
		ИначеЕсли ТекущаяДата() - ВремяВызова > 10 Тогда
			//Установленный на команде таймаут
			Отказ = Истина;
			МодульОбъектаКлиент().СообщитьСбисИсключение("ExtSysMarking.CheckGisTask() не вернул ответ за разумное время", "ОбработатьРезультатСозданияТокена");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТокенСоздан Тогда
    	ЗаполнитьМаркировку(СоставПакета);
	КонецЕсли;
КонецПроцедуры   

// Функция - возвращает значение типа цвет, в зависимости результата кода состояния проверки документа 
//
&НаКлиенте
Функция ВернутьЦветСтатуса(КодСостоянияОперации) 
	МассивОшибок = Новый Массив; 
	МассивОшибок.Добавить("10");
	МассивОшибок.Добавить("20"); 
	МассивОшибок.Добавить("30");
	
	МассивУспех = Новый Массив; 
	МассивУспех.Добавить("3");   
	
	ИндексОшибок = МассивОшибок.Найти(КодСостоянияОперации);
	ИндексУспех = МассивУспех.Найти(КодСостоянияОперации);
	
	Если НЕ ИндексОшибок = Неопределено Тогда 
		Возврат Новый Цвет(255,0,0);   
	ИначеЕсли НЕ ИндексУспех = Неопределено Тогда
		Возврат Новый Цвет(0,128,0); 
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура - запускает проверку статуса документа в ГИС МТ. 
//
&НаКлиенте
Процедура СтатусДокументаГИСМТ(Элемент)  
	
	Попытка
		Результат = МодульОбъектаКлиент().ПроверитьСтатусПроверкиГИСМТ(СоставПакета);    
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "СтатусДокументаГИСМТ");
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСообщения = Новый Структура;  
	ПараметрыСообщения.Вставить("АдресСсылка",);  
	ПараметрыСообщения.Вставить("ТекстСсылка",);
	Если Результат.Messages.Количество() Тогда
		ПараметрыСообщения.Вставить("Текст", Результат.Messages[0][0]);
		сбисПолучитьФорму("ФормаПредупреждения").Показать(МестныйКэш, ПараметрыСообщения); 
	КонецЕсли;
		
КонецПроцедуры

// Процедура - запускает отправку кодов документа в ГИС МТ. 
//  
&НаКлиенте
Процедура ОтправитьКодыМаркировки(Элемент)
		
	Попытка
		МодульОбъектаКлиент().ОтправитьКодыМаркировкиВГИС(СоставПакета);    
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ОтправитьКодыМаркировки");
	КонецПопытки;
	
КонецПроцедуры

