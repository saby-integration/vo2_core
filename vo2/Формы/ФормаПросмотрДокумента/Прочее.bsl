
&НаКлиенте
Процедура сбисУстановитьHTML(сбисТекстHTML)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(сбисТекстHTML);
	#Иначе
		ПолеHTMLДокумента = сбисТекстHTML;
	#КонецЕсли
КонецПроцедуры
&НаКлиенте
Процедура СохранитьНаДискНажатие(Элемент) Экспорт
	// Процедура сохраняет текущий пакет на диск в zip-архив	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог; 
		Если СоставПакета.Свойство("Вложение") Тогда
			ИмяZIP= СтрЗаменить(ЗаголовокПакета,":",".");
			ИмяZIP= СтрЗаменить(ИмяZIP,"\","_");
			ИмяZIP= СокрЛП(СтрЗаменить(ИмяZIP,"/","_"));
			//ЗаписьZIP =  Новый ЗаписьZipФайла(ПутьККаталогу+"\"+ИмяZip+".zip");
			СоздатьКаталог(ПутьККаталогу+"\"+ИмяZip);
			
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("XMLДокумента") и Вложение.XMLДокумента <> "" Тогда
					ТД = Новый ТекстовыйДокумент;
					ТД.УстановитьТекст(Вложение.XMLДокумента);
					Если Вложение.Свойство("Файл") Тогда
						Если ТипЗнч(Вложение.Файл)=Тип("Структура") Тогда   // в SDK 1.1 файл стал не массивом, а объектом
							ИмяФайла = Вложение.Файл.Имя;
						Иначе
							ИмяФайла = Вложение.Файл[0].Имя;
						КонецЕсли;
					ИначеЕсли Вложение.Свойство("СтруктураФайла") и Вложение.СтруктураФайла.Свойство("Файл") Тогда
						ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					КонецЕсли;
					ТД.Записать(ПутьККаталогу+"\"+ИмяZip+"\"+ИмяФайла, "windows-1251");
					//ЗаписьZIP.Добавить(ВремКаталог+"\"+ИмяФайла);
				ИначеЕсли Вложение.Свойство("ПолноеИмяФайла") Тогда
					//ЗаписьZIP.Добавить(Вложение.ПолноеИмяФайла);
					КопироватьФайл(Вложение.ПолноеИмяФайла, ПутьККаталогу+"\"+ИмяZip+"\"+Вложение.ИмяФайла);
				ИначеЕсли Вложение.Свойство("Файл") и ТипЗнч(Вложение.Файл)=Тип("Структура") и Вложение.Файл.Свойство("Ссылка") и Вложение.Файл.Свойство("Имя") Тогда
					МестныйКэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(МестныйКэш,Вложение.Файл.Ссылка,ПутьККаталогу+"\"+ИмяZip+"\"+Вложение.Файл.Имя);
				КонецЕсли;
			КонецЦикла;
			//ЗаписьZIP.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//&НаКлиенте
//Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	НомерПП = Элемент.ТекущиеДанные.НомерПП;
//	Номенклатура = Элемент.ТекущиеДанные.Номенклатура;
//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
//		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура",Элемент.ТекущиеДанные.Название,Элемент.ТекущиеДанные.Идентификатор,Элемент.ТекущиеДанные.Номенклатура);
//		УстановитьСоответствиеНоменклатуры(ДанныеНоменклатуры);
//	КонецЕсли;
//	Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл[НомерПП].Вставить("Номенклатура", Номенклатура);
//	ЗаполнитьТаблицуДокументов(СоставПакета);
//КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьПрохождение(СоставПакета) Экспорт
	// Процедура заполняет вкладку Прохождение	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьПрохождение","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
	Если фрм<>Ложь Тогда
		СтруктураСобытий = фрм.ЗаполнитьПрохождение(СоставПакета);
		СБИССобытия.Очистить();
		Для Каждого Элемент Из СтруктураСобытий Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Если Элемент.Значение.Свойство("Название") Тогда
				Элемент.Значение.Название = МестныйКэш.ОбщиеФункции.ИзвлечьТекстИзHTML(Элемент.Значение.Название);
			КонецЕсли;
			НоваяСтр = СБИССобытия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура СинонимДокументаПриИзменении(Элемент)
	// Процедура устанавливает тип документа 1С, который будет загружен	
	ТипДокумента = СписокТиповДокументов.НайтиПоЗначению(СинонимДокумента).Представление;
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	СтруктураИниФайла = Ини.мДокумент[ТипДокумента];
	СтрокаТаблДок.Вложение[0].Значение.Вставить("СтруктураИниФайла", СтруктураИниФайла);
	СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете].Вставить("СтруктураИниФайла", СтруктураИниФайла);
	Если СоставПакета.Свойство("Направление") Тогда // Исходящие пока не загружаем
		ЗаполнитьДокументДаннымиЭД(СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете]);
	КонецЕсли;
	ЗаполнитьТаблицуДокументов(СоставПакета);
КонецПроцедуры
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	// Процедура вызывает форму создания контрагента	
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,МестныйКэш);
	фрм.ЗаполнитьИзФайла(СтрокаТаблДок, СоставПакета, МестныйКэш);// alo загрузка из 3,03	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьДокумент1СВСоставеПакета(ИдентификаторВложения, Документ1С, СтруктураДокумента1С)
	// Процедура проставляет документы 1С на вложениях текущего пакета при загрузке документов
	сч = 0;
	Для Каждого Вложение Из СоставПакета[ИмяРеквизитаВложений] Цикл
		Если Вложение.Свойство("Идентификатор") и Вложение.Идентификатор = ИдентификаторВложения Тогда
			Если СоставПакета[ИмяРеквизитаВложений][сч].Документы1С.НайтиПоЗначению(Документ1С) = Неопределено Тогда
				СоставПакета[ИмяРеквизитаВложений][сч].Документы1С.Добавить(Документ1С); 
			КонецЕсли;
			сбисЗаполнитьДанныеВложения(СоставПакета[ИмяРеквизитаВложений][сч], СтруктураДокумента1С);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;		
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьВложение(Команда)
	// Процедура добавляет внешний файл в состав пакета
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Шифровать = Ложь;
		Если (	МестныйКэш.Парам.СпособОбмена = 5 Или МестныйКэш.Парам.СпособОбмена = 7)
			И 	МестныйКэш.Парам.ШифроватьВыборочно = Истина и МестныйКэш.Свойство("КаталогЗашифрованных") и Лев(ДиалогОткрытияФайла.Каталог, СтрДлина(МестныйКэш.КаталогЗашифрованных)) = МестныйКэш.КаталогЗашифрованных Тогда
			Шифровать = Истина;	
		КонецЕсли;
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			Файл = Новый Файл(ИмяФайла);
			СоставПакета.Вложение.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла,Название,Шифрование",Файл.ПолноеИмя, Файл.Имя, Файл.Имя, ?(Шифровать, Истина, Ложь)));
		КонецЦикла;	
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьВложение(Команда)
	// Процедура удаляет вложение из пакета
	Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено Тогда
		СоставПакета.Вложение.Удалить(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете);
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВкладкуЗагрузка()
	ТабличнаяЧасть.Очистить();
	сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Очистить();
	СинонимДокумента = "";
	Договор1С = "";
	Дата1С = "";
	Контрагент1С = "";	
	УстановитьОграничениеТипаРеквизитов();
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДокументДаннымиЭД(Вложение) Экспорт
	// Заполняется вкладка Загрузка (тип документа, табличная часть) по данным из файла
	СтруктураФайла = Вложение.СтруктураФайла;
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	Если Не Вложение.Свойство("СтруктураИниФайла") Тогда
		//сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Ложь;
		//Предупреждение("Отсутствует настройка для загрузки файла "+СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".", "_"));
		Возврат Ложь;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Истина;
	КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
	
	//НГС Проверяем Контрагента только если есть такая роль
	Если КонтрагентРоль <> Неопределено Тогда
		Попытка
			ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
			СтрКонтрагента = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Исключение
			СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
		КонецПопытки;
		Если СтрКонтрагента = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		//ИНН = ?(СтрКонтрагента.Свойство("СвЮЛ"), СтрКонтрагента.СвЮЛ.ИНН, СтрКонтрагента.СвФЛ.ИНН);
	КонецЕсли;
	//КНГС
	
	ТабличнаяЧасть.Очистить();
	Если Найти(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Статус, "Сопоставление не требуется")=0 Тогда
		
		Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
			Для Каждого Элемент Из Вложение.СтруктураИниФайла.мТаблДок Цикл
				Если Элемент.Значение.Свойство("ТаблДок") и Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
					ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// << alo загрузка 3.03
		Если не ЗначениеЗаполнено(ПутьТаблДок) Тогда
			попытка
				ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
			исключение
			конецпопытки;
		конецесли;
		// alo загрузка 3.03 >>
		
		сч = 1;
		//фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		//НашаНоменклатура = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, МестныйКэш);
		Если ЗначениеЗаполнено(ПутьТаблДок) Тогда
			ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		Иначе
			ТаблДок = СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблДок) Тогда 
			// 1189546150
			УстановитьОграничениеТипаНоменклатуры(Вложение.СтруктураИниФайла);
			
			Для Каждого СтрТабл Из ТаблДок Цикл
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.НомерПП = сч;
				СтрТабл.Свойство("Название", НоваяСтрока.Название);
				Если СтрТабл.Свойство("Характеристика") Тогда
					Если ТипЗнч(СтрТабл.Характеристика) = Тип("Структура") Тогда
						СтрТабл.Характеристика.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
					ИначеЕсли ТипЗнч(СтрТабл.Характеристика) = Тип("Массив") Тогда
						Для Каждого Элемент Из СтрТабл.Характеристика Цикл
							Элемент.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				СтрТабл.Свойство("Код",		НоваяСтрока.Код);
				СтрТабл.Свойство("ЕдИзм",	НоваяСтрока.ЕдИзм);
				СтрТабл.Свойство("ОКЕИ",	НоваяСтрока.ОКЕИ);
				Сумма		= Неопределено;
				Количество	= Неопределено;
				Если	(	СтрТабл.Свойство("СуммаБезНал", Сумма)
						Или	СтрТабл.Свойство("Сумма", Сумма))
					И	СтрТабл.Свойство("Кол_во", Количество)Тогда	
				//Сумма = ?(СтрТабл.Свойство("СуммаБезНал"), Число(СтрТабл.СуммаБезНал), Число(СтрТабл.Сумма));
					Количество = ?(ЗначениеЗаполнено(Количество), Число(Количество), 0);
					Цена = Неопределено;
					Коэф = Неопределено;
					Если	СтрТабл.Свойство("Цена", Цена)
						И	СтрТабл.Свойство("Коэффициент", Коэф)
						И	ЗначениеЗаполнено(Коэф)
						И	Не Коэф = "1" Тогда
						Попытка
							Если	Коэф = "0" Или Коэф = "-0" Тогда
								Количество = 0;
								Цена = 0;
							ИначеЕсли Найти(СтрТабл.Коэффициент, "-") Тогда
							Иначе
								Коэф = Число(Коэф);
								Количество = Число(Количество * Коэф);
								Если ЗначениеЗаполнено(Сумма) И Не Количество = 0 Тогда
									Цена = Сумма/Количество;
								КонецЕсли;
							КонецЕсли
						Исключение
							Сообщить("Коэффициент не является числом");
						КонецПопытки;	
					КонецЕсли;
					НоваяСтрока.Количество = Формат(Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
					НоваяСтрока.Цена = Формат(Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				Иначе
					СтрТабл.Свойство("Кол_во", НоваяСтрока.Количество);
					СтрТабл.Свойство("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				СтрТабл.Свойство("СуммаБезНал", НоваяСтрока.СуммаБезНал);
				Если СтрТабл.Свойство("НДС") Тогда
					СтрТабл.НДС.Свойство("Сумма", НоваяСтрока.СуммаНДС);
					СтрТабл.НДС.Свойство("Ставка", НоваяСтрока.СтавкаНДС);
				КонецЕсли;
				СтрТабл.Свойство("Сумма", НоваяСтрока.Сумма);
				СтрТабл.Свойство("Идентификатор", НоваяСтрока.Идентификатор);
				СтрТабл.Свойство("КодПокупателя", НоваяСтрока.КодПокупателя);
				СтрТабл.Свойство("Номенклатура", НоваяСтрока.Номенклатура);
				СтрТабл.Свойство("ХарактеристикаНоменклатуры", НоваяСтрока.Характеристика); 
				СтрТабл.Свойство("GTIN", НоваяСтрока.GTIN);
				СтрТабл.Свойство("ЕдИзмОрг", НоваяСтрока.ЕдИзмОрг);
				СтрТабл.Свойство("Коэффициент", НоваяСтрока.Коэффициент);
				Если СтрТабл.Свойство("НеЗагружать") Тогда
					НоваяСтрока.Отмечен = Ложь;
				Иначе
					НоваяСтрока.Отмечен = Истина;
				КонецЕсли;
				сч = сч+1;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбиЗаполнитьТаблицуНоменклатуры(Вложение) Экспорт
	// Заполняется таблица сопоставления номенклатуры по данным из файла
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисЗаполнитьДанныеНоменклатурыНаСервере","РаботаСДокументами1С","", МестныйКэш);
	
	ТабличнаяЧасть.Очистить();
	сч = 1;
	ТаблДок = Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
	Для Каждого СтрТабл Из ТаблДок Цикл
		ДанныеНоменклатуры = фрм.сбисЗаполнитьДанныеНоменклатурыНаСервере(?(СтрТабл.Свойство("КодПокупателя") И ЗначениеЗаполнено(СтрТабл.КодПокупателя), СтрТабл.КодПокупателя, СтрТабл.Идентификатор));
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.НомерПП = сч;
			
			НоваяСтрока.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
				НоваяСтрока.Характеристика = ДанныеНоменклатуры.Характеристика;
			КонецЕсли;
			НоваяСтрока.Идентификатор = СтрТабл[Вложение.НоменклатураКодКонтрагента];
			НоваяСтрока.КодПокупателя = СтрТабл[Вложение.НоменклатураКодКонтрагента];
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;	
КонецФункции

&НаКлиенте
Процедура СформироватьРасхождениеНажатие(Элемент) Экспорт
	Перем ИниДокумента, ОшибкаФормирования;
	// Процедура формирует файл расхождения по полученному документу от контрагента и фактически поступившему/заказанному товару
	// Расхождение строится по вложению с минимальным весом
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	СписокВесов = Новый СписокЗначений;
	ЕстьДокументы1С = Ложь;
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество()>0 Тогда
			ЕстьДокументы1С = Истина;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Вложение.Свойство("СтруктураФайла") и Вложение.Свойство("СтруктураИниФайла") Тогда
				СтруктураФайлаКонтрагента = Вложение.СтруктураФайла;
				
				Документ1С = СтрокаТаблДок.Документы1С[0].Значение;
				ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
				Если Вложение.СтруктураИниФайла.Свойство("ФайлНастроекРасхождения") Тогда
					Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Вложение.СтруктураИниФайла, Документ1С, Новый Структура, СтруктураФайлаКонтрагента,СоставПакета,МестныйКэш.Ини.Конфигурация);
					ИмяДокумента = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение("ФайлНастроекРасхождения",Контекст,МестныйКэш);
					//ИмяДокумента = СтрЗаменить(Вложение.СтруктураИниФайла.ФайлНастроекРасхождения.Значение,"'","");
				КонецЕсли;
				Если НЕ МестныйКэш.ини.Свойство(ИмяДокумента) Тогда
					Продолжить;
				КонецЕсли;
				ИниДокумента = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента);
				ДокументОтклонения = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", ИниДокумента, МестныйКэш);
				Если ЗначениеЗаполнено(ДокументОтклонения) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
// << alo Меркурий
	Если НЕ ЕстьДокументы1С Тогда	// нет сопоставление с вложениями - проверим сопоставление с пакетом
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ДокументыПоИдПакета",МестныйКэш.ФормаРаботыСоСтатусами,"",МестныйКэш);
		если фрм <> ложь тогда
			списокДокументы1С= фрм.ДокументыПоИдПакета(СоставПакета.Идентификатор, МестныйКэш.Ини.Конфигурация);
			Если списокДокументы1С.Количество()>0 Тогда
				ЕстьДокументы1С = Истина;
				для каждого Документ1С из списокДокументы1С цикл
					ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
					Если МестныйКэш.ини.Свойство(ИмяДокумента) Тогда
						ДокументОтклонения = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента), МестныйКэш);
						СтруктураФайлаКонтрагента = новый структура("Файл", Новый структура("ВерсияФормата","3.01")); // пустая структура документа в формате 3.01
						СтруктураФайлаКонтрагента.Файл.Вставить("Документ", новый структура("Дата,Номер,ТаблДок",СоставПакета.Дата,СоставПакета.Номер,новый Структура));
						СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Вставить("СтрТабл", новый Массив);
					КонецЕсли;
				конеццикла;
			конецесли;
		конецесли;
	конецесли;	// alo Меркурий >>
	Если НЕ ЕстьДокументы1С Тогда
		Сообщить("Для формирования расхождения необходимо сначала загрузить документы в 1С и внести в них необходимые изменения по фактически принятым/заказанным позициям.");
	КонецЕсли;
	Если		Не ЗначениеЗаполнено(ИниДокумента) Тогда
		Сообщить("Нет настройки " + ИмяДокумента + " для формирования расхождения.");
		Возврат;
	ИначеЕсли	НЕ ЗначениеЗаполнено(ДокументОтклонения) Тогда
		Сообщить("В настройке " + ИмяДокумента + " не задана опция ""ДокументОтклонения"" формирования документа расхождения.");
		Возврат;
	КонецЕсли;
		
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьКонтекст_Расхождение","Файл_"+ДокументОтклонения,"Файл_Шаблон", МестныйКэш);
	ЗначениеИни = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента); 
	ОписаниеРасхождения = Новый Структура("СоставПакета, Документ1С, ЗначениеИни", СоставПакета, Документ1С, ЗначениеИни); 
	ДопПараметры = Новый Структура("Кэш", МестныйКэш);
	Контекст = фрм.ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, ДопПараметры);
		
	Если Не Контекст.ДокументДанные.Свойство("мФайл") Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;		
	КонецЕсли;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", МестныйКэш);
	Если Не фрм.ПрочитатьДокумент(МестныйКэш,Контекст) Тогда
		Возврат;
	КонецЕсли;
	Если Контекст.СоставПакета.Вложение.Количество() = 0 Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;	
	КонецЕсли;
	СтруктураФайлаНаша = Контекст.СоставПакета.Вложение[0].СтруктураДокумента;
	
	// Формируем расхождение
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СформироватьРасхождение","Файл_"+ДокументОтклонения,"Файл_Шаблон", МестныйКэш);
	Попытка
		ВложениеРасхождение = фрм.СформироватьРасхождение(Новый Структура("СтруктураФайлаКонтрагента, ВложениеНаше, Пакет", СтруктураФайлаКонтрагента, Контекст.СоставПакета.Вложение[0],  Контекст.СоставПакета), МестныйКэш);
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаФормирования = МестныйКэш.ОбщиеФункции.СбисИсключение(ИнформацияОбОшибке, "СформироватьРасхождениеНажатие");
	КонецПопытки;
	Если Не ОшибкаФормирования = Неопределено Тогда
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		Попытка
			ВложениеРасхождение = фрм.СформироватьРасхождение(СтруктураФайлаКонтрагента, СтруктураФайлаНаша, МестныйКэш);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если Не Найти(ИнформацияОбОшибке.Описание, "Слишком много фактических параметров") Тогда
				//Вызов был, перегенерируем ошибку, если свалилось
				ОшибкаФормирования = МестныйКэш.ОбщиеФункции.СбисИсключение(ИнформацияОбОшибке, "СформироватьРасхождениеНажатие");
			КонецЕсли;
			МестныйКэш.ГлавноеОкно.СбисСообщитьОбОшибке(МестныйКэш, ОшибкаФормирования);
		КонецПопытки;
	КонецЕсли;
	Если ВложениеРасхождение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВложениеРасхождение.Свойство("ЕстьРасхождения") и ВложениеРасхождение.ЕстьРасхождения Тогда
		СоставПакета.Вставить("ЕстьРасхождения", Истина);
	КонецЕсли;
	СоставПакета.Вложение.Добавить(ВложениеРасхождение);
	ЗаполнитьТаблицуДокументов(СоставПакета);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если МестныйКэш.Разделы.Свойство("Текущий") Тогда
		МестныйКэш.Разделы.Текущий.Удалить("ФормаПросмотрДокумента");
	КонецЕсли;
	// Обновляет контент на главном окне.
	ФормаГлавногоОкна = МестныйКэш.ГлавноеОкно;
	Если ФормаГлавногоОкна.Открыта() и ОбновлятьГлавноеОкно = Истина Тогда
		ФормаГлавногоОкна.ОбновитьКонтент();
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Ложь;
	
	фрм = ФормаГлавногоОкна.сбисНайтиФормуФункции("сбисПослеЗакрытияФормыПросмотра","РаботаСДокументами1С","", МестныйКэш);
	Если фрм<>Ложь Тогда
		фрм.сбисПослеЗакрытияФормыПросмотра(МестныйКэш); 
	КонецЕсли;
	
	Если ФормаГлавногоОкна.РежимЗапускаГлавногоОкна = "ПечатнаяФорма" Тогда
		ФормаГлавногоОкна.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Истина, МестныйКэш.Парам));
	КонецЕсли;   
	Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ВосстановитьПоложениеЭлементов();
	КонецЕсли;
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "СтатусДокументаГИСМТ").Заголовок = "";
КонецПроцедуры                              

&НаКлиенте
Процедура сбисЗаполнитьДанныеВложения(Вложение, СтруктураДокОбъект)
	Попытка
		Если Вложение.СтруктураИниФайла.Свойство("Договор") и Вложение.СтруктураИниФайла.Договор.Свойство("Значение") Тогда
			ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Договор.Значение, Найти(Вложение.СтруктураИниФайла.Договор.Значение,".")+1);
			Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
				Вложение.Вставить("Договор1С",СтруктураДокОбъект[ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		Если Вложение.СтруктураИниФайла.Свойство("Документ_Дата") и Вложение.СтруктураИниФайла.Документ_Дата.Свойство("Значение") Тогда
			ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Документ_Дата.Значение, Найти(Вложение.СтруктураИниФайла.Документ_Дата.Значение,".")+1);
			Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
				Вложение.Вставить("Дата1С",СтруктураДокОбъект[ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		Если Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль") и Вложение.СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") Тогда
			КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
			Если Вложение.СтруктураИниФайла.мСторона.Свойство(КонтрагентРоль) Тогда
				ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, Найти(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
				Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
					Вложение.Вставить("Контрагент1С",СтруктураДокОбъект[ИмяРеквизита]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Договор1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Договор1С",Договор1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры

&НаКлиенте
Процедура Контрагент1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Контрагент1С",Контрагент1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры

&НаКлиенте
Процедура Дата1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Дата1С",Дата1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры


&НаКлиенте
// <Описание процедуры>
//
Процедура УстановитьТипыРеквизитовСторон()
	
	ТипыСторон = МодульОбъектаКлиент().ТипыСторонСопоставления();
	
	УчетОрганизация = ТипыСторон.ДанныеОрганизации;
	УчетКонтрагент = ТипыСторон.ДанныеКонтрагента;
	УчетГрузополучатель = ТипыСторон.ДанныеГрузополучателя;
	
КонецПроцедуры // УстановитьТипыРеквизитовСторон()

// Процедура заполняет вкладку Маркировка
&НаКлиенте  
Процедура ЗаполнитьМаркировку(СоставПакета)
	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	
	СкладскиеПараметрыДокумента = МодульОбъектаКлиент().ПолучитьСкладскиеПараметрыДокумента(СоставПакета);     
	 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ПричинаВывода").СписокВыбора.ЗагрузитьЗначения(СкладскиеПараметрыДокумента.ПричиныВыводаИзОборота); 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "УчастникОборота").СписокВыбора.ЗагрузитьЗначения(СкладскиеПараметрыДокумента.ПараметрыУчастниковОборота); 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ОтправитьКодыМаркировки").Видимость = СкладскиеПараметрыДокумента.ОтправитьКодыМаркировки; 
	
	Если ТекущийРаздел = "Продажа" Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта").Видимость = СкладскиеПараметрыДокумента.ПоказатьГосконтракт; 
		Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"НадписьНомерКонтракта").Видимость = СкладскиеПараметрыДокумента.ПоказатьГосконтракт;
		КонецЕсли;  
	КонецЕсли;

	ИдентификаторГосконтракта = СкладскиеПараметрыДокумента.ИдентификаторГосконтракта; 
	УчастникОборота = СкладскиеПараметрыДокумента.УчастникОборота; 
	ПричинаВывода = СкладскиеПараметрыДокумента.ПричинаВывода; 
	
	СостояниеПроверки = МодульОбъектаКлиент().ЗапроситьСостояниеПроверки(СоставПакета);  
	Если ТипЗнч(СостояниеПроверки) = Тип("Строка")
		И ЗначениеЗаполнено(СостояниеПроверки) Тогда
		РезультатПроверки = МестныйКэш.РаботаСJSON.СбисПрочитатьJSON(СостояниеПроверки); 
		ЗначениеПроверки = Неопределено;
		Если ТипЗнч(РезультатПроверки) = Тип("Структура")
			И РезультатПроверки.Свойство("StateValue",ЗначениеПроверки) Тогда 
			ОтобразитьСостояниеПроверки(ЗначениеПроверки); 
		КонецЕсли;
	КонецЕсли; 
	
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ТаблицаМаркировка, "Строки").Очистить();
	
	ТаблицаФормы = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ТаблицаМаркировка");
	
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ТаблицаФормы, "КодМаркировки").Видимость = Ложь;  
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ТаблицаФормы, "ИндикаторКодаМаркировки").Видимость = Ложь;
	
	МассивМаркируемыхПозиций = МодульОбъектаКлиент().СоставМаркируемыхПозиций(СоставПакета); //Проверяем есть ли маркированная номенклатура в документе 
	ЗаполнитьТаблицуМаркировки(МассивМаркируемыхПозиций);
    	
	ПараметрыРаботы.МаркировкаЗаполнена = Истина; //Устанавливаем значение переменной, что бы повторно не вычитывать вкладку Маркировка
	
КонецПроцедуры  
 

// Процедура - устанавливает оформление шапки таблицы маркируемых позиций 
//
// Параметры:
//  ЗначениеПроверки - Строка - результат проверки параметра документа CrptState 
//
&НаКлиенте
Процедура ОтобразитьСостояниеПроверки(ЗначениеПроверки)
	
	СписокЭлементовОформления = ПолучитьСостояниеПроверки(ЗначениеПроверки);
	
	ТаблицаФормы = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ТаблицаМаркировка");
	
	Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда	
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "КоличествоКодов").КартинкаШапки = СписокЭлементовОформления.Картинка;  
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "КоличествоКодов").Подсказка = СписокЭлементовОформления.Подсказка; 
	Иначе
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "КоличествоКодов").КартинкаШапки = СписокЭлементовОформления.Картинка;  
		МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "КоличествоКодов").ПодсказкаВШапке = СписокЭлементовОформления.Подсказка; 
	КонецЕсли;
	
КонецПроцедуры 

// Функция - возвращает картинку и подсказку шапки таблицы маркируемых позиций 
//  
// Параметры:
//  ЗначениеПроверки - Строка - результат проверки параметра документа CrptState  
// 
// Возвращаемое значение:
//  Структура - результат подбора картинки и подсказки по значению проверки документа
// 
&НаКлиенте
Функция ПолучитьСостояниеПроверки(ЗначениеПроверки)
	
	СписокЭлементовОформления = Новый Структура;
	
	Если ЗначениеПроверки = "HasNotToken" Тогда	 
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertОранжевый").Картинка;
		Подсказка = "Не запускалась. Проверьте подпись и подключение к сети";
	ИначеЕсли ЗначениеПроверки = "GtinError" Тогда
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertКрасный").Картинка;
		Подсказка = "Есть ошибки в данных маркировки";
	ИначеЕсли ЗначениеПроверки = "StatusError" Тогда   
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertКрасный").Картинка;
		Подсказка = "Ошибки в кодах";
	ИначеЕсли ЗначениеПроверки = "GtinSuccess" Тогда
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаSuccessЗеленый").Картинка;
		Подсказка = "Успешно"; 
	ИначеЕсли ЗначениеПроверки = "Success" Тогда
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаSuccessЗеленый").Картинка;
		Подсказка = "Успешно";
	ИначеЕсли ЗначениеПроверки = "NotValidContract" Тогда	
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertОранжевый").Картинка;
		Подсказка = "Не запускалась. Нет договора по товарной группе";
	ИначеЕсли ЗначениеПроверки = "Processing" Тогда	 
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertОранжевый").Картинка;
		Подсказка = "ГИС МТ не доступен";
	ИначеЕсли ЗначениеПроверки = "Unknown" Тогда	 
		Картинка = сбисЭлементФормы(ЭтаФорма,"КартинкаAlertОранжевый").Картинка;
		Подсказка = "Сервис проверки кодов недоступен";
	Иначе
		Картинка = Новый Картинка;
		Подсказка = "";
	КонецЕсли;
	
	СписокЭлементовОформления.Вставить("Картинка",Картинка);
	СписокЭлементовОформления.Вставить("Подсказка",Подсказка);

	Возврат СписокЭлементовОформления;

КонецФункции

// Процедура - заполняет таблицу значений ТаблицаМаркировка с подчиненными строками
//
// Параметры:
//  СписокМаркируемыхПозиций - Массив - список позиций для заполнения, полученный методом чтения документа СБИС Онлайн 
//
&НаКлиенте
Процедура ЗаполнитьТаблицуМаркировки(СписокМаркируемыхПозиций) 
	
	Если НЕ ЗначениеЗаполнено(СписокМаркируемыхПозиций) Тогда
		Возврат;
	КонецЕсли; 
	
	НомерПП = 1;
	Для Каждого СтрМасс из СписокМаркируемыхПозиций Цикл
		Если НЕ ЗначениеЗаполнено(СтрМасс.GisMarkData.nom_type) И НЕ СтрМасс.GisMarkData.is_gis_mark = "True" Тогда
			Продолжить; //Метод возвращает всю номенклатуру
		КонецЕсли; 
		НоваяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаМаркировка, "Строки").Добавить(); 
		Если ЗначениеЗаполнено(СтрМасс.Номенклатура_Наименование) Тогда
			НоваяСтрока.Номенклатура = СтрМасс.Номенклатура_Наименование;
		Иначе
			НоваяСтрока.Номенклатура = СтрМасс.ВходящееНаименование_Наименование;
		КонецЕсли;
		НоваяСтрока.Количество = СтрМасс.Количество;  
		НоваяСтрока.НоменклатураСбис = СтрМасс.Номенклатура;
		Если ТипЗнч(СтрМасс) = Тип("Структура") //Если ОСУ, то базовая информация по КМ есть
			И СтрМасс.Свойство("VaData") 
			И ТипЗнч(СтрМасс.VaData) = Тип("Структура") 
			И СтрМасс.VaData.Свойство("va_count") Тогда
			НоваяСтрока.КоличествоКодов = СтрМасс.VaData.va_count; 
		ИначеЕсли ТипЗнч(СтрМасс) = Тип("Структура")
			И СтрМасс.Свойство("SerialNumberSnCount")
			И СтрМасс.Свойство("SerialNumberPack") 
			И СтрМасс.SerialNumberPack = 0 Тогда //Если есть и коробки и штуки, то приоритет отдаем коробкам
			НоваяСтрока.КоличествоКодов = СтрМасс.SerialNumberSnCount; 
			Если НЕ НоваяСтрока.КоличествоКодов = "" И Число(НоваяСтрока.КоличествоКодов) > 0 Тогда
				ПодчиненнаяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(НоваяСтрока, "Строки").Добавить(); //Чтобы отобразить плюс
			КонецЕсли;     
		ИначеЕсли ТипЗнч(СтрМасс) = Тип("Структура")
			И СтрМасс.Свойство("SerialNumberPack") Тогда  //Количество упаковок
			НоваяСтрока.КоличествоКодов = СтрМасс.SerialNumberPack; 
			Если НЕ НоваяСтрока.КоличествоКодов = "" И Число(НоваяСтрока.КоличествоКодов) > 0 Тогда
				ПодчиненнаяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(НоваяСтрока, "Строки").Добавить(); //Чтобы отобразить плюс 
			КонецЕсли; 
		КонецЕсли;
		НоваяСтрока.Цена = ?(НЕ ЗначениеЗаполнено(СтрМасс.Цена), СтрМасс.Себест, СтрМасс.Цена);
		НоваяСтрока.НомерПП = НомерПП;
		Если СтрМасс.Свойство("Номенклатура_НДС") И ТипЗнч(СтрМасс.Номенклатура_НДС) = Тип("Число") Тогда
			НоваяСтрока.СтавкаНДС = СтавкаНДСПоПараметруМаркировки(СтрМасс.Номенклатура_НДС); 
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрМасс.SerialNumberFlag) Тогда
			НоваяСтрока.ИндексКартинкиКод = 1;
		КонецЕсли;
		НомерПП = НомерПП + 1;  
	КонецЦикла;
	
КонецПроцедуры

// Функция - возвращает представление ставки НДС по её значению
//
// Параметры:
//  Значение - Число - значение атрибута структуры номенклатуры документа СБИС Онлайн 
// 
// Возвращаемое значение:
//  Строка - представление ставки НДС по её значению
//
&НаКлиенте
Функция СтавкаНДСПоПараметруМаркировки(Значение)
	СтавкаНДС = "";
	Если Значение = 2 Тогда
		СтавкаНДС = "20%"; 
	ИначеЕсли Значение = 1 Тогда
		СтавкаНДС = "10%";
	Иначе
		СтавкаНДС = "БезНДС";
	КонецЕсли;

	Возврат СтавкаНДС;

КонецФункции   

// Процедура устанавливает видимость элементов формы на вкладке Маркировка
&НаКлиенте
Процедура УстановитьВидимостьЭлементовВкладкиМаркировка() 
	
	СбисРасширение = Неопределено;   
	СтатусГос = Неопределено;  
	СостояниеОперации = Неопределено; 
	КодСостоянияОперации = Неопределено;
	лМаркировка = Неопределено; 
	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];    
	
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"Маркировка").Видимость = Ложь;   
	
	Если НЕ СоставПакета.Свойство("Расширение", СбисРасширение) Тогда
		Возврат;
	КонецЕсли;  
	
	Если НЕ (СбисРасширение.Свойство("Маркировка", лМаркировка)
		И	лМаркировка = "Да") Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ТаблицаМаркировка, "Строки").Очистить();  
				
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"Маркировка").Видимость = Истина; 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ОтправитьКодыМаркировки").Видимость = Ложь; 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ЗапуститьПроверкуКодовМаркировки").Видимость = Истина; 
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ПричинаВывода").Видимость = Истина; 
	Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"НадписьПричинаВывода").Видимость = Истина;
	КонецЕсли;  
		
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ИдентификаторГосконтракта").Видимость = Ложь;
	Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"НадписьНомерКонтракта").Видимость = Ложь;
	КонецЕсли;	
		
	Если НЕ ТекущийРаздел = "Продажа" Тогда  
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"УчастникОборота").Видимость = Ложь;		
		Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"НадписьУчастникОборота").Видимость = Ложь;
		КонецЕсли; 
	Иначе
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"УчастникОборота").Видимость = Истина;
		Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"НадписьУчастникОборота").Видимость = Истина;  
		КонецЕсли; 
	КонецЕсли;
	
	Если СбисРасширение.Свойство("СостояниеМарк",СтатусГос)  
		И СтатусГос.Свойство("СостояниеОперации", СостояниеОперации)
		И СтатусГос.Свойство("КодСостоянияОперации", КодСостоянияОперации)
		И НЕ КодСостоянияОперации = "0" Тогда 
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"СтатусДокументаГИСМТ").Заголовок = СостояниеОперации;
		ЦветСтатуса = ВернутьЦветСтатуса(КодСостоянияОперации); 
		Если НЕ ЦветСтатуса = Неопределено Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"СтатусДокументаГИСМТ").ЦветТекста = ЦветСтатуса; 
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"СтатусДокументаГИСМТ").Гиперссылка = Истина; 
		КонецЕсли;
		Если КодСостоянияОперации = "3" Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ЗапуститьПроверкуКодовМаркировки").Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры   

// Процедура устанавливает видимость кнопки "Отправить коды". Если коды зарегистрированы, кнопку скрываем
//
// Параметры:
//  ЗначениеПроверки - Строка - результат проверки кодов маркировки
//
&НаКлиенте
Процедура УстановитьВидимостьОтправитьКодыМаркировки(ЗначениеПроверки)

	Если ЗначениеПроверки = "GtinSuccess" 
 		ИЛИ ЗначениеПроверки = "Success" Тогда
		сбисЭлементФормы(ЭтаФорма,"ОтправитьКодыМаркировки").Видимость = Ложь; 	 
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет положением кнопок перехода по закладкам
//
// Параметры:
//  НаименованиеЭлемента - Строка - Наименование элемента, который собираемся сдвигать
&НаКлиенте
Процедура УстановитьПоложениеЭлемента(НаименованиеЭлемента) 
	
	ПоложениеЭлементов = Новый Структура;
	НачальноеПоложение = сбисЭлементФормы(ЭтаФорма,НаименованиеЭлемента).Лево;
	ПоложениеЭлементов.Вставить(НаименованиеЭлемента,НачальноеПоложение);
	ПараметрыРаботы.Вставить("ПоложениеЭлементов",ПоложениеЭлементов);
	
	МассивВкладок = ВернутьМассивВкладок();
	МассивСоответсвий = Новый Массив;
	
	Для Каждого СтрМасс Из МассивВкладок Цикл
		КнопкаФормы = сбисЭлементФормы(ЭтаФорма,СтрМасс); 
		Если КнопкаФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементТаблицы = Новый Структура;
		ЭлементТаблицы.Вставить("Видимость",КнопкаФормы.Видимость);
		ЭлементТаблицы.Вставить("Лево",КнопкаФормы.Лево);
		ЭлементТаблицы.Вставить("Имя",КнопкаФормы.Имя); 
		МассивСоответсвий.Добавить(ЭлементТаблицы);
	КонецЦикла; 
	
	ПараметрыСортировки = Новый Структура("ПоляСортировки", Новый Массив);
	ПараметрыСортировки.ПоляСортировки.Добавить(Новый Структура("Поле,Направление", "Лево",	"Убыв"));
	МассивСоответсвий = МестныйКэш.ОбщиеФункции.сбисОтсортироватьОбъект(МассивСоответсвий,ПараметрыСортировки, Ложь); 
	
	ТаблицаСоответствияЭлементов = МассивСтруктурВТаблицуЗначений(МассивСоответсвий);  	
	
	Для Каждого СтрТЗ Из ТаблицаСоответствияЭлементов Цикл
		Если СтрТЗ.Имя = НаименованиеЭлемента Тогда
			Прервать;
		КонецЕсли; 
		Если СтрТЗ.Видимость = Ложь Тогда
			сбисЭлементФормы(ЭтаФорма,НаименованиеЭлемента).Лево = СтрТЗ.Лево;
			сбисЭлементФормы(ЭтаФорма,"Закладка" + НаименованиеЭлемента).Лево = СтрТЗ.Лево;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

&НаСервере
Функция ВернутьМассивВкладок()
	Возврат МассивЗакладок;
КонецФункции

// Процедура восстанавливает положение элементов, сдвинутых в процедуре УстановитьПоложениеЭлемента() 
//   
&НаКлиенте
Процедура ВосстановитьПоложениеЭлементов() 
	
	Перем ПоложениеЭлементов;
	
	Если ПараметрыРаботы.Свойство("ПоложениеЭлементов",ПоложениеЭлементов) Тогда
		Для Каждого Элемент Из ПоложениеЭлементов Цикл 
			сбисЭлементФормы(ЭтаФорма,Элемент.Ключ).Лево = Элемент.Значение;
			сбисЭлементФормы(ЭтаФорма,"Закладка" + Элемент.Ключ).Лево = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
		
	Возврат Результат;
КонецФункции 

// Процедура получает список прослеживаемых позиций, с документа СБИС
//
// Параметры:
//  СоставПакета - Структура - обрабатываемый пакет (документ) 
//
&НаКлиенте
Процедура ЗаполнитьПрослеживаемость(СоставПакета)  
	
    СписокПараметровВызова = Новый Структура("Фильтр",ПараметрыФильтраПрослеживаемыхПозиций());   
	Попытка
		СписокПрослеживаемыхПозиций = МодульОбъектаКлиент().СоставПрослеживаемыхПозиций(СоставПакета,СписокПараметровВызова); //Проверяем есть ли прослеживаемая номенклатура в документе 
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ЗаполнитьПрослеживаемость");
	КонецПопытки;

	ЗаполнитьТаблицуПрослеживаемости(СписокПрослеживаемыхПозиций);
	ПараметрыРаботы.ПрослеживаемостьЗаполнена = Истина;
	
КонецПроцедуры  

// Функция возвращает параметры фильтра, для запроса прослеживаемых позиций
// 
// Возвращаемое значение:
//   СписокПараметров - Структура - параметры фильтра 
//
&НаКлиенте 
Функция ПараметрыФильтраПрослеживаемыхПозиций()
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("only_traceability_nom",Истина);   
	СписокПараметров.Вставить("add_rnpt_data",Истина);
	Возврат СписокПараметров; 
	
КонецФункции 

// Процедура заполняет таблицу прослеживаемости, позициями документа СБИС
//
// Параметры:
//  СписокПрослеживаемыхПозиций	 - Структура - прослеживаемые позиции документа СБИС
//
&НаКлиенте
Процедура ЗаполнитьТаблицуПрослеживаемости(СписокПрослеживаемыхПозиций) 
	
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаПрослеживаемость, "Строки").Очистить();
	
	Если НЕ ЗначениеЗаполнено(СписокПрослеживаемыхПозиций) Тогда
		Возврат;
	КонецЕсли;  
		
	ТаблицаФормы = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ТаблицаПрослеживаемость");	 
	МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "ТаблицаПрослеживаемостьИндикаторПроверки").Видимость = Ложь;	
	
	НомерПП = 1;
	Для Каждого СтрМасс из СписокПрослеживаемыхПозиций Цикл
		НомерПП = НомерПП + 1;
		
		НоваяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаПрослеживаемость, "Строки").Добавить(); 
		
		Если СтрМасс.Номенклатура_Наименование = Неопределено Тогда
			НоваяСтрока.ТаблицаПрослеживаемостьНоменклатура = СтрМасс.ВходящееНаименование_Наименование; 
		Иначе 
			НоваяСтрока.ТаблицаПрослеживаемостьНоменклатура = СтрМасс.Номенклатура_Наименование;
		КонецЕсли;
		
		НоваяСтрока.ТаблицаПрослеживаемостьКоличество = СтрМасс.Количество;  
		НоваяСтрока.ТаблицаПрослеживаемостьКоличествоКодов = СтрМасс.Количество; 
		
		Если НЕ ЗначениеЗаполнено(СтрМасс.RnptData) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрВложМасс из СтрМасс.RnptData Цикл
			ПодчиненнаяСтрока = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(НоваяСтрока, "Строки").Добавить();
			ПодчиненнаяСтрока.ТаблицаПрослеживаемостьКодРНПТ = СтрВложМасс.Rnpt; 
			ПодчиненнаяСтрока.ТаблицаПрослеживаемостьКоличество = СтрВложМасс.IncQty; 
			ПодчиненнаяСтрока.ТаблицаПрослеживаемостьКоличествоКодов = СтрВложМасс.RnptQty; 
			РезультатПроверки = Неопределено;
			КодОшибки = Неопределено;
			Если СтрВложМасс.Свойство("Check", РезультатПроверки)
				И (РезультатПроверки = Неопределено
				ИЛИ (РезультатПроверки.Свойство("КодОшибки",КодОшибки)
					И (КодОшибки = Неопределено ИЛИ КодОшибки = 0))) Тогда
					Продолжить;
			КонецЕсли;
			ПодчиненнаяСтрока.ТаблицаПрослеживаемостьИндикаторПроверки = ИндикаторПроверкиПоКодуОшибки(КодОшибки); 
			МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТаблицаФормы, "ТаблицаПрослеживаемостьИндикаторПроверки").Видимость = Истина;
			НоваяСтрока.ТаблицаПрослеживаемостьИндексКартинкиКод = 1; 
			ПодчиненнаяСтрока.ТаблицаПрослеживаемостьИндексКартинкиКод = 1; 
		КонецЦикла;
			  
	КонецЦикла;
	
КонецПроцедуры  

// Функция возвращает расшифровку ошибки проверки прослеживаемых позиций
//
// Параметры:
//  КодОшибки - Число - числовое код ошибки
// 
// Возвращаемое значение:
//  Строка - расшифровка ошибки по её коду
//
&НаКлиенте
Функция ИндикаторПроверкиПоКодуОшибки(КодОшибки)  
	
	Если КодОшибки = 1 Тогда
		ИндикаторПроверки = "На прослеживаемой позиции нет РНПТ";
	ИначеЕсли КодОшибки = 2 Тогда 
		ИндикаторПроверки = "Количество по прослеживаемости превышает объем партии в обороте";  
	ИначеЕсли КодОшибки = 4 Тогда 
		ИндикаторПроверки = "ЕИ по данным каталога не совпадает с ЕИ прослеживаемости"; 
	ИначеЕсли КодОшибки = 8 Тогда 
		ИндикаторПроверки = "ТНВЭД по данным каталога не совпадает с ТНВЭД прослеживаемости";  
	ИначеЕсли КодОшибки = 32 Тогда 
		ИндикаторПроверки = "Дата регистрации документа не совпадает с датой регистрации в ФНС";  
	ИначеЕсли КодОшибки = 16 Тогда 
		ИндикаторПроверки = "Не хватает остатка для списания на партии";  
	ИначеЕсли КодОшибки = 17 Тогда 
		ИндикаторПроверки = "РНПТ отсутствует";
	Иначе 
		ИндикаторПроверки = "";
	КонецЕсли;   
	
	Возврат ИндикаторПроверки;

КонецФункции

// Процедура устанавливает ограничение типа справочников для сопоставления номенклатуры
//
// Параметры:
//  СтруктураИниФайла - Структура - ини файл, разложенный в структуру значений 
//
&НаКлиенте
Процедура УстановитьОграничениеТипаНоменклатуры(СтруктураИниФайла)  
	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");  
	Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда 
		ТабНоменклатура = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТабЧасть, "ТабличнаяЧастьНоменклатура");
	Иначе
		ТабНоменклатура = МестныйКэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ТабЧасть, "Номенклатура").ЭлементУправления;  
	КонецЕсли; 
	
	СоставОграниченийТипов = МестныйКэш.ОбщиеФункции.ТипыСправочниковНоменклатуры(СтруктураИниФайла);
 
	ТабНоменклатура.ОграничениеТипа = Новый ОписаниеТипов(СоставОграниченийТипов);

КонецПроцедуры  

// Процедура устанавливает ограничение типа, для реквизитов формы документа
//
&НаКлиенте
Процедура УстановитьОграничениеТипаРеквизитов()
	
	ИниКонфигурация = МодульОбъектаКлиент().ИниПоПараметрам("Конфигурация"); 
	
	Если ИниКонфигурация.Свойство("Договоры") Тогда
		СправочникДоговоры = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Договоры",ИниКонфигурация, МестныйКэш);  
		ИмяСправочника = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(СправочникДоговоры);
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
		ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
		 
		НайденныйРеквизит = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "Договор1С"); 
		НайденныйРеквизит.ОграничениеТипа = ОписаниеТипа; 
		Договор1С = ОписаниеТипа.ПривестиЗначение();
		НайденныйРеквизит.ВыбиратьТип = Ложь;   
	КонецЕсли;
		
КонецПроцедуры

/////////////////////////////////////////
//AU Переделано для совместимости ОФ УФ//

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, ПараметрыВыбора) Экспорт
	Кэш = ПараметрыВыбора.Кэш;
	// Обработка выбранного элемента
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДокРазобран = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение");
	Если Не ДокРазобран Тогда
		СбисВыполнитьРазбор(ПараметрыВыбора);
	КонецЕсли;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Разделы.Текущий.ФормаПросмотрДокумента.Раздел];
	ИмяФункции = ВыбранныйЭлемент.Значение;
	ИмяФункцииСПараметрами = ВыбранныйЭлемент.Значение; 
	Поз = Найти(ИмяФункции, "(");
	Если Поз>0 Тогда
		ИмяФункции = Лев(ИмяФункции, Поз-1);
	Иначе
		ИмяФункцииСПараметрами = ВыбранныйЭлемент.Значение+"(Кэш,ЭтаФорма)";
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",Кэш);	
	// << alo доп операции из инишки Сервис
	Если фрм = Ложь Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С");	
	КонецЕсли;
	// alo доп операции из инишки Сервис >>
	Результат = Вычислить("фрм."+ИмяФункцииСПараметрами);
КонецПроцедуры

&НаКлиенте
Процедура СбисВыполнитьРазбор(ПараметрыРазбора)
	Кэш = ПараметрыРазбора.Кэш;
	СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(СоставПакета, Кэш, ИмяРеквизитаВложений);
	Если ИмяРеквизитаВложений = "Вложение" Тогда
		ДокументРазобран = Истина;
	Иначе
		ДокументУчетаРазобран = Истина;
	КонецЕсли;
	сбисУстановитьВидимостьЭлементов(Кэш);
	ЗаполнитьТаблицуДокументов(СоставПакета);
	
КонецПроцедуры
&НаКлиенте
Процедура сбисУстановитьВидимостьЭлементов(ВходящийКэш)  
	Если Кэш = Неопределено Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;

	ВидимостьЭлементов = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение"); 
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		//Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "Контент.Загрузка").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.ТаблицаДокументовСтатус").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.ТаблицаДокументовСтатусКартинка").Видимость = ВидимостьЭлементов;
	Иначе
		//Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "Загрузка").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.Статус").Видимость = ВидимостьЭлементов;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Не ВидимостьЭлементов;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = ВидимостьЭлементов;
	
	//+++ 1186694647 TODO Спилить и сделать видимым всегда - после завершения проекта по сопоставлению номенклатуры.
	//						(Нижеописанные способы хранения сопоставлений будут недоступны.)
	Если НЕ (Кэш.ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Регистры"
			ИЛИ Кэш.ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Справочники"
			ИЛИ Кэш.ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_СуммовойУчет") Тогда
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧастьЕдИзмОрг").Видимость = Истина;
			сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧастьКоэффициент").Видимость = Истина;
		Иначе
			сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть").Колонки.Коэффициент.Видимость = Истина;
			сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть").Колонки.ЕдИзмОрг.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	//--- 1186694647
КонецПроцедуры

&НаКлиенте
Процедура СбисПечатьСоставаПакета(СбисПакет, ПараметрыПечати) Экспорт
	Кэш = ПараметрыПечати.Кэш;
	СписокПакетов = Новый СписокЗначений;
	СписокПакетов.Добавить(Новый Структура("СоставПакета", СбисПакет));
	СписокДляВыбора = Кэш.ОбщиеФункции.ПолучитьВложенияПакетовНаПечать(СписокПакетов, ПараметрыПечати);
	Если Не СписокДляВыбора.Количество() Тогда
		Сообщить("В пакете отсутствуют файлы, для которых возможна печать");
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если СписокДляВыбора.ОтметитьЭлементы("Выберите файлы на печать") Тогда
			СбисПечатьСоставаПакета_ПослеВыбора(СписокДляВыбора, ПараметрыПечати);
		КонецЕсли;
	#Иначе
		СписокДляВыбора.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СбисПечатьСоставаПакета_ПослеВыбора", ЭтаФорма, ПараметрыПечати), "Выберите файлы на печать");
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СбисПечатьСоставаПакета_ПослеВыбора(СписокРезультат, ДополнительныеПараметры) Экспорт
	Если СписокРезультат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Кэш = ДополнительныеПараметры.Кэш;
	ОбъектыПечати = Новый Массив;
	Для Каждого СтрокаРезультат Из СписокРезультат Цикл
		Если Не СтрокаРезультат.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ФайлВложения = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("pdf");
		РезультатЗаписи = Кэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(Кэш, СтрокаРезультат.Значение.СсылкаНаPDF, ФайлВложения);
		Если РезультатЗаписи = Ложь Тогда
			Возврат;
			//СбисОшибка = Кэш.ОбщиеФункции.сбисИсключение(, сбисИмяКоманды="СбисПечатьСоставаПакета", 100, "Неизвестная ошибка системы", "Не удалось сохранить pdf для печати", Новый Структура("Ссылка", ВложениеПакета.СсылкаНаPDF)); 
		КонецЕсли;
		ОбъектПечати = Новый Структура("Тип,Путь", "Файл", ФайлВложения);
		ОбъектыПечати.Добавить(ОбъектПечати);
	КонецЦикла;
	
	Кэш.ОбщиеФункции.СбисПечатьДокументов(ОбъектыПечати, ДополнительныеПараметры);	
КонецПроцедуры

//Команды

&НаКлиенте
Процедура СбисПечать(Команда) Экспорт
	СбисПечатьСоставаПакета(СоставПакета, Новый Структура("Кэш,ВФоне", МестныйКэш, Истина));
КонецПроцедуры

&НаКлиенте
Процедура сбисРазобратьДокумент(Команда) Экспорт
	СбисВыполнитьРазбор(Новый Структура("Кэш", МестныйКэш));
КонецПроцедуры

&НаКлиенте
Процедура ДопОперации(Команда)
	СбисПараметрыВызова = Новый Структура("Кэш", МестныйКэш);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаДопОперации = сбисПолучитьФорму("ФормаДопОперации");
		ВыбранныйЭлемент = ФормаДопОперации.Показать(МестныйКэш, СписокДопОпераций);
		ПослеВыбораИзМеню(ВыбранныйЭлемент, СбисПараметрыВызова);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтаФорма, СбисПараметрыВызова);
		ПоказатьВыборИзМеню(Оповещение, СписокДопОпераций, Элементы.ДопОперации);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрагентаОнлайнПоСсылке(Команда) Экспорт
	Перем сбисДополнительныеПараметры;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		сбисДополнительныеПараметры = Новый Структура("ФормаВладелец", ЭтаФорма);
	#КонецЕсли
	МестныйКэш.ОбщиеФункции.сбисОткрытьКонтрагентаОнлайнПоСсылке(МестныйКэш, Контрагент1С, сбисДополнительныеПараметры);
КонецПроцедуры

// Процедура открывает документ на онлайне	
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда) Экспорт
	МестныйКэш.ГлавноеОкно.ОткрытьДокументОнлайнПоПакету(СоставПакета, МестныйКэш);
КонецПроцедуры

//Загрузка

&НаКлиенте
Процедура ДокументооборотПерейти(Команда)
	
	ВыбратьДействиеСПакетом();
	
КонецПроцедуры

//Открывает форму для определения действия с пакетом.
&НаКлиенте
Процедура ВыбратьДействиеСПакетом(ВыбранноеДействие=Неопределено)
	ПараметрыПереходов = Новый Структура("СоставПакета, Конфигурация, ЕстьАннулирование, ВыбранноеДействие", СоставПакета, МестныйКэш.Ини.Конфигурация, (Не МестныйКэш.Парам.СпособОбмена = 1));
	ФормаПереходов = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПереходы",,,ЭтаФорма);
	Если ФормаПереходов = Ложь Тогда
		Возврат;
	КонецЕсли;
	ФормаПереходов.МестныйКэш = МестныйКэш;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПрехода = ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
		сбисПослеВыбораПерехода(РезультатПрехода, Новый Структура);
	#Иначе
		ФормаПереходов.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеВыбораПерехода",ЭтаФорма);
		ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВ1С(Команда) Экспорт
	МестныйКэш.ОбщиеФункции.РезультатДействия_Получить(МестныйКэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "ЗагрузкаДокумента", "ФормаПросмотрДокумента"), Истина);
	ДокументРазобранДоЗагрузки = Истина;
	ДокРазобран = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение");
	Если Не ДокРазобран Тогда
		ДокументРазобранДоЗагрузки = Ложь;
		сбисРазобратьДокумент("");
		ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
	КонецЕсли;
	СоставПакета = МестныйКэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(СоставПакета, МестныйКэш); // пока SDK не возвращает дату, номер док. основания
	Если СоставПакета.НоменклатураСопоставлена Тогда //Если номенклатура сопоставлена
		ЗагрузитьВложения(0);  						 //Загружаем  в обычном режиме	
	Иначе                     						 //Иначе справшиваем хотим ли загружать автоматически 
		Если МестныйКэш.Парам.СпособЗагрузки = 1 Тогда // Мусихина: убрала форму выбора, если в настройках заранее выбрали способ загрузки 1 (создавать карточки номенклатуры для несопоставленных позиций)
			ЗагрузитьВ1СВыбраннымСпособом(1);
		ИначеЕсли ДокументРазобранДоЗагрузки Тогда // Если документ разобрали только что, то ничего не спрашиваем, сразу показываем вкладку с сопоставлением
			МассивОтмеченных = ТаблицаДокументов.НайтиСтроки(Новый Структура("Отмечен", Истина));
			Если МассивОтмеченных.Количество() = 0 Тогда
				Сообщить("Не отмечны документы для загрузки!");
				Возврат;
			КонецЕсли;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаВариантЗагрузки = сбисПолучитьФорму("ФормаВариантЗагрузки");
				сбисЭлементФормы(ФормаВариантЗагрузки,"СпособЗагрузки").Заголовок = "Отменить загрузку. Перейти к сопоставлению номенклатуры";
				Ответ = ФормаВариантЗагрузки.ОткрытьМодально();
				ЗагрузитьВ1СВыбраннымСпособом(Ответ);
			#Иначе
				Режим = Новый СписокЗначений();
				Режим.Добавить(0,"Отменить загрузку. Перейти к сопоставлению номенклатуры");
				Режим.Добавить(1,"Продолжить загрузку. Для несопоставленных позиций создавать карточки номенклатуры.");
				Режим.Добавить(2,"Загружать все документы, при этом в табличную часть загружать только сопоставленную номенклатуру.");                             
				ОткрытьФорму(МестныйКэш.ГлавноеОкно.СбисПутьКФормамОбработки() + "ФормаВариантЗагрузки",Новый Структура("Режим",Режим),,"ФормаВариантЗагрузки",,,Новый ОписаниеОповещения("ЗагрузитьВ1СВыбраннымСпособом",ЭтаФорма));  
			#КонецЕсли
		КонецЕсли;	
	КонецЕсли;
	ОбновлятьГлавноеОкно = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВ1СВыбраннымСпособом(Ответ, Параметры=Неопределено) Экспорт
	Если Ответ = 0 или Ответ = Неопределено Тогда
		ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
	Иначе
		ЗагрузитьВложения(Ответ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложения(РежимНоменклатуры)
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество() И СтрокаТаблДок.МожемЗагрузитьВ1С>0 И СтрокаТаблДок.Отмечен Тогда
			Режим = Новый СписокЗначений();
			Режим.Добавить(0,"Перезаполнить");
			Режим.Добавить(1,"Создать новые");
			Режим.Добавить(2,"Отменить");
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ЗагрузитьВложенияСоздатьПерезаполнить(Вопрос("Есть сопоставленная номенклатура. Выберите вариант создания карточки.", Режим, 0), РежимНоменклатуры);
			#Иначе
				ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьВложенияСоздатьПерезаполнить",ЭтаФорма, РежимНоменклатуры),"Есть сопоставленные документы. Выберите вариант загрузки.", Режим, 0);
			#КонецЕсли
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	ЗагрузитьВложенияСоздатьПерезаполнить(1, РежимНоменклатуры);	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложенияСоздатьПерезаполнить(РежимДокументов, РежимНоменклатуры) Экспорт
	
	ПараметрыОбработки = Новый Структура("Кэш", МестныйКэш);
	ПараметрыЗагрузки = Новый Структура("РежимДокументов, РежимНоменклатуры", РежимДокументов, РежимНоменклатуры);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СтрокаПоУмолчанию", сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные);
	//Делаем для диалога в процессе загрузки: должны попасть в обработку результата даже в случае показа форм, вопросов и пр. 
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ДополнительныеПараметры.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("СозданиеДокуметов_ОбработатьРезультат", ЭтаФорма, ПараметрыОбработки));
	#КонецЕсли
	МассивОтмеченных = ТаблицаДокументов.НайтиСтроки(Новый Структура("Отмечен", Истина));
	Если МассивОтмеченных.Количество() = 0 Тогда
		Сообщить("Не отмечны документы для загрузки!");
		Возврат;
	КонецЕсли; 
	
	Если	МодульОбъектаКлиент().ПолучитьЗначениеФичи(Новый Структура("НазваниеФичи", "НовыеКонтрагенты")) Тогда
		
		ПодготовленныеПараметрыКонтекста = ПараметрыДляФормированияКонтекста(МестныйКэш);

		ПараметрыФормированияКонтекста = Новый Структура;
		ПараметрыФормированияКонтекста.Вставить("СоставПакета", СоставПакета); 
		ПараметрыФормированияКонтекста.Вставить("ПодготовленныеПараметрыКонтекста", ПодготовленныеПараметрыКонтекста); 
		ПараметрыФормированияКонтекста.Вставить("Вложение", Неопределено);  
		ПараметрыФормированияКонтекста.Вставить("ЗаменятьЗаполненныеПараметры", Истина);  
		
		МодульОбъектаКлиент().СФормироватьВходящийКонтекстНаВложении(ПараметрыФормированияКонтекста);
		
	КонецЕсли;

	РезультатЗагрузки = МестныйКэш.ОбщиеФункции.СоздатьПерезаполнитьДокументы(МестныйКэш, СоставПакета, ТаблицаДокументов, ПараметрыЗагрузки, ДополнительныеПараметры);
	СозданиеДокуметов_ОбработатьРезультат(РезультатЗагрузки, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Функция  ПараметрыДляФормированияКонтекста(ВходящийКэш)
	
	Если Кэш = Неопределено Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;

	
	ПодготовленныеПараметры = Новый Структура;
	
	ДанныеСторонСБИС = Новый Структура("ДанныеГрузополучателя, ДанныеКонтрагента");
	ДанныеСторонСБИС.ДанныеКонтрагента		= Новый Структура("Ссылка", УчетКонтрагент);
	ДанныеСторонСБИС.ДанныеГрузополучателя	= Новый Структура("Ссылка", УчетГрузополучатель);
	
	ДанныеСторон1С = Новый Структура;                                                                             
	ПараметрыПодготовки = Новый Структура("ДанныеСторонСБИС, ДанныеСторон1С", ДанныеСторонСБИС, ДанныеСторон1С);
	МодульОбъектаКлиент().ПодготовитьСтороныКЗагррузкеДокумента(ПараметрыПодготовки, Новый Структура("ЕстьПартнеры", Кэш.ини.Конфигурация.Свойство("Партнеры")));
	
	ПодготовленныеПараметры.Вставить("Организация", 	 УчетОрганизация);
	ПодготовленныеПараметры.Вставить("Контрагент", 		 ДанныеСторон1С.ДанныеКонтрагента);
	ПодготовленныеПараметры.Вставить("Грузополучатель",  ДанныеСторон1С.ДанныеГрузополучателя);
	ПодготовленныеПараметры.Вставить("Партнер", 		 ДанныеСторон1С.ДанныеПартнера);
	
	Возврат ПодготовленныеПараметры;
	
КонецФункции 

// Процедура заполняет таблицу вложений пакета 	
&НаКлиенте
Процедура ЗаполнитьТаблицуДокументов(СоставПакета) Экспорт

	ГлавноеОкно		= МестныйКэш.ГлавноеОкно;
	ЗначениеПоиска	= ?(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено,сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете, Неопределено);
	ТаблицаДокументов.Очистить();
	СоставПакета.Вставить("НоменклатураСопоставлена",Истина);
	Если СоставПакета.Свойство("ДобавочныеСтроки") Тогда
		Для Каждого ДобавочнаяСтрока Из СоставПакета.ДобавочныеСтроки Цикл
			НоваяСтр = ТаблицаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, ДобавочнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	сч = 0;
	ЕстьХарактеристики = Ложь;
	Для Каждого Вложение Из СоставПакета[ИмяРеквизитаВложений] Цикл
		НоваяСтр = ТаблицаДокументов.Добавить();
		НоваяСтр.НомерВложенияВПакете = сч;
		сч = сч+1;
		Если Вложение.Свойство("Название") Тогда
			НоваяСтр.Название = Вложение.Название;
		КонецЕсли;
		Если Вложение.Свойство("Идентификатор") Тогда
			НоваяСтр.Идентификатор = Вложение.Идентификатор;
		КонецЕсли;
		Если Вложение.Свойство("Шифрование") Тогда
			НоваяСтр.Шифрование = Вложение.Шифрование;
		КонецЕсли;
		Если Вложение.Свойство("Документы1С") Тогда
			НоваяСтр.Документы1С = Вложение.Документы1С;
			НоваяСтр.Документы1СНазвания = "";
			Для Каждого Документ1С Из Вложение.Документы1С Цикл
				НоваяСтр.Документы1СНазвания = НоваяСтр.Документы1СНазвания + строка(Документ1С.Значение)+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("Подпись") Тогда
			Для Каждого Подпись Из Вложение.Подпись Цикл
				НоваяСтр.Подпись = НоваяСтр.Подпись + МестныйКэш.ОбщиеФункции.ПолучитьПредставлениеСертификата(Подпись.Сертификат, "[ФИО]., [Должность]., [Название]") + Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("ТекстHTML") и ЗначениеЗаполнено(Вложение.ТекстHTML) Тогда
			НоваяСтр.ТекстHTML = Вложение.ТекстHTML;
		Иначе
			НоваяСтр.ТекстHTML = "<HTML><BODY scroll=no><table cellspacing=0 cellpadding=0 WIDTH=100%><tr><td id=Открыть><ins id=Открыть>Открыть в другой программе</ins></td></tr></table></BODY></HTML>";
		КонецЕсли;
		НоваяСтр.Вложение.Добавить(Вложение);
				
		Если НЕ СоставПакета.Свойство("ДопПараметрыСопоставления") Тогда
			ДанныеДляЗагрузки = МестныйКэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(МестныйКэш, СоставПакета, Вложение);
		Иначе
			ДопПараметры = Новый Структура("ДанныеНоменклатурДляРасширенногоСопоставления", ДанныеНоменклатурДляРасширенногоСопоставления); 
			ДанныеДляЗагрузки = МестныйКэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(МестныйКэш, СоставПакета, Вложение, ДопПараметры);
		КонецЕсли;
		
		Если ДанныеДляЗагрузки.Свойство("ОбогащенныеДанныеНоменклатурыДляСопоставления") Тогда
			ЗаполнитьДанныеНоменклатурДляРасширенногоСопоставления(ДанныеДляЗагрузки.ОбогащенныеДанныеНоменклатурыДляСопоставления);
		КонецЕсли;
		
		НоваяСтр.МожемЗагрузитьВ1С	= Число(ДанныеДляЗагрузки.МожемЗагрузитьВ1С);
		НоваяСтр.Статус				= ДанныеДляЗагрузки.Статус;
		НоваяСтр.СтатусКартинка		= ДанныеДляЗагрузки.СтатусКартинка;
		Если Вложение.Свойство("Отмечен")  Тогда
			НоваяСтр.Отмечен = Вложение.Отмечен;
		Иначе
			НоваяСтр.Отмечен = Истина;
		КонецЕсли;
		Если ДанныеДляЗагрузки.Свойство("ТекстОшибки") Тогда
			Сообщить(ДанныеДляЗагрузки.ТекстОшибки);
		КонецЕсли;
		ДанныеДляЗагрузки.Свойство("ПутьТаблДок",		НоваяСтр.ПутьТаблДок);
		ДанныеДляЗагрузки.Свойство("ПутьКонтрагента",	НоваяСтр.ПутьКонтрагента);
		
		Если Не ЕстьХарактеристики
			И	ДанныеДляЗагрузки.Свойство("ПараметрыНоменклатуры") Тогда
			ЕстьХарактеристики = ДанныеДляЗагрузки.ПараметрыНоменклатуры.ЕстьХарактеристики;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормыХарактеристика = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧастьХарактеристика");
	Если Не МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ЭлементФормыХарактеристика = ЭтаФорма.ЭлементыФормы.ТабличнаяЧасть.Колонки.Характеристика;
	КонецЕсли; 
	ЭлементФормыХарактеристика.Видимость = ЕстьХарактеристики;
	
	Если ЗначениеПоиска <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("НомерВложенияВПакете", ЗначениеПоиска);
		Строка = ТаблицаДокументов.НайтиСтроки(ПараметрыОтбора);
		//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
		Если Строка.Количество() Тогда
			НомерСтроки = Строка[0];
			Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
				НомерСтроки = НомерСтроки.ПолучитьИдентификатор();
			КонецЕсли;
			сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущаяСтрока = НомерСтроки;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьУтвердитьНажатие(Элемент)
	// Процедура отклоняет/утверждает текущий пакет	
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	Если Элемент.Имя = "Утвердить" Тогда
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[0];
	Иначе
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[1];
	КонецЕсли;
	
	Если	ВыбранноеДействие.ТребуетКомментария = "Да"
		Или	(	ВыбранноеДействие.Свойство("ТребуетИсполнителя")
			И	ВыбранноеДействие.ТребуетИсполнителя = "Да")	Тогда                                             //aa.uferov При выполнении действия с исполнителем, требуется ини конфигурации
		ВыбратьДействиеСПакетом(ВыбранноеДействие);
	Иначе
		сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",ВыбранноеДействие, ""), "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СозданиеДокуметов_ОбработатьРезультат(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
		
	Если РезультатЗагрузки = Неопределено Тогда
		//В процессе был диалог, а значит для УФ с результатом попадём уже после выбора и последующей обработки. Для ОФ уже попадали
		Возврат Неопределено;
	КонецЕсли;
	
	//Заполняем данные формы в зависимости от результата.
	Для Каждого КлючИЗначение Из РезультатЗагрузки.Ошибки.ДетализацияОшибок Цикл
		Для Каждого СтрокаДетализации Из КлючИЗначение.Значение Цикл
			Если Найти(СтрокаДетализации.Сообщение, "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации") Тогда
				ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого КлючИЗначение Из РезультатЗагрузки.Действие.ДетализацияВыполнено Цикл
		Для Каждого СтрокаДетализации Из КлючИЗначение.Значение Цикл
			Для Каждого СтрокаРасшифровки Из СтрокаДетализации.ОбработаныОбъекты1С Цикл
				Если Не СтрокаРасшифровки.Свойство("СтруктураДокумента1С") Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьДокумент1СВСоставеПакета(СтрокаДетализации.ИдентификаторВложения, СтрокаРасшифровки.Ссылка, СтрокаРасшифровки.СтруктураДокумента1С);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
	МестныйКэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
	
	ЗаполнитьТаблицуДокументов(СоставПакета);	
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Ложь;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = Истина;
	
КонецФункции

&НаКлиенте
Функция сбисПослеВыбораПерехода(Результат, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыЗавершенияПерехода = Новый Структура("Кэш, РезультатВыбораПерехода, СчСерт, СписокСертификатов", МестныйКэш, Результат, 0);

	Если Результат.Действие.ТребуетПодписания = "Да" Тогда
		СписокИНН = Новый СписокЗначений;
		ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвФЛ"),СоставПакета.НашаОрганизация.СвФЛ.ИНН,СоставПакета.НашаОрганизация.СвЮЛ.ИНН);
		СписокИНН.Добавить(ИННОрг);
		
		ПараметрыЗавершенияПерехода.СписокСертификатов = МестныйКэш.Интеграция.ПолучитьСертификатыДляАктивации(МестныйКэш, СписокИНН);
		Для Каждого Элемент Из ПараметрыЗавершенияПерехода.СписокСертификатов Цикл
			Сертификат		= Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				МестныйКэш.Интеграция.ПолучитьКодАктивацииСертификата(МестныйКэш, Сертификат);				
			КонецЕсли;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", МестныйКэш.ОбщиеФункции.СформироватьЗаголовокСертификатаДляФормыВвода(МестныйКэш, Сертификат));
			//Всегда активируется первый сертификат списка готовых для активации
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				сбисРезультатВвода = ФормаВводаПинкода.Показать(ПараметрыВвода);
				Если Не ЗначениеЗаполнено(сбисРезультатВвода)
					Или сбисРезультатВвода.ПинКод = "" Тогда
					Сообщить("Не активирован сертификат для подписания документов.");
					Возврат Ложь;	
				КонецЕсли;
				Возврат сбисВыполнитьПереходЗавершение(сбисРезультатВвода, ПараметрыЗавершенияПерехода);
			#Иначе
				ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисВыполнитьПереходЗавершение",ЭтаФорма,ПараметрыЗавершенияПерехода);
				ФормаВводаПинкода.Показать(ПараметрыВвода);
				Возврат Неопределено;
			#КонецЕсли
		КонецЦикла;	
	Иначе
		ПараметрыЗавершенияПерехода.СписокСертификатов = Новый СписокЗначений;
	КонецЕсли;
	Возврат сбисВыполнитьПереходЗавершение(Истина, ПараметрыЗавершенияПерехода);
КонецФункции

&НаКлиенте
Функция сбисВыполнитьПереходЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Кэш = ДополнительныеПараметры.Кэш;
	Если Результат = Неопределено Тогда   // не ввели пин-код
		Возврат Ложь;
	КонецЕсли;
	
	// ввели пин-код или не требуется активация
	РезультатВыбораПерехода	= ДополнительныеПараметры.РезультатВыбораПерехода;
	СписокСертификатов		= ДополнительныеПараметры.СписокСертификатов;
	СчСерт					= ДополнительныеПараметры.СчСерт;
	ДействиеВыполнить		= РезультатВыбораПерехода.Действие;
	Если СписокСертификатов.Количество() Тогда
		СертификатДляДействия = СписокСертификатов[СчСерт].Значение;
		СертификатДляДействия.Вставить("КодАктивации", Результат.ПинКод);
	КонецЕсли;
	РезультатАктивации = Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов);			
	
	Если РезультатВыбораПерехода.Свойство("Исполнитель") Тогда
		СоставПакета.Этап[0].Вставить("Исполнитель", РезультатВыбораПерехода.Исполнитель);
	КонецЕсли;
	ЭтапВыполнить = Неопределено;
	Если Не РезультатВыбораПерехода.Свойство("Этап", ЭтапВыполнить) Тогда 
		ЭтапВыполнить = СоставПакета.Этап[0];
	КонецЕсли;
	ДействиеВыполнено = МестныйКэш.Интеграция.сбисВыполнитьДействие(МестныйКэш, СоставПакета, ЭтапВыполнить, ДействиеВыполнить, РезультатВыбораПерехода.Комментарий, "");
	Если ДействиеВыполнено = Истина Тогда
		ОбновлятьГлавноеОкно = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецФункции


// << alo Меркурий
&НаКлиенте
Процедура СБИСЗаписатьВложение(Кнопка)
	ТабДок = сбисЭлементФормы(ЭтаФорма, "ТаблицаДокументов");
	Если ТабДок.ТекущиеДанные = неопределено тогда
		Сообщить("Нет вложения для записи.");
	Иначе
		Вложение = СоставПакета.Вложение[ТабДок.ТекущиеДанные.НомерВложенияВПакете];
		МестныйКэш.Интеграция.СБИСЗаписатьВложения(МестныйКэш,СоставПакета, Вложение);
	КонецЕсли;
КонецПроцедуры// alo Меркурий >>
// << alo EDI_ДозаписьЮЗДО

&НаКлиенте
Функция СервисДопОперацияПросмотра(СписокДопОпераций) Экспорт 
	Перем ИниСервис;
	Если Не МестныйКэш.Ини.Свойство("Сервис" ,ИниСервис) Тогда
		Возврат Неопределено;
	ИначеЕсли ИниСервис = Неопределено Тогда
		ИниСервис = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, "Сервис");
	КонецЕсли;
	Если Не (	ИниСервис.Свойство("ДопОперацияПросмотра")
			И	СоставПакета.Свойство("Регламент")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекРегламент = СоставПакета.Регламент;
	Если СоставПакета.Свойство("Этап") И СоставПакета.Этап.Количество() Тогда
		ТекЭтап = СоставПакета.Этап[0].Название;
	Иначе
		ТекЭтап = "";
	КонецЕсли;
	Для Каждого ДопОперация Из ИниСервис.ДопОперацияПросмотра Цикл
		Если Не	(	ДопОперация.Значение.Свойство("Регламент")
				И	ДопОперация.Значение.Свойство("Операция")
				И	ДопОперация.Значение.Операция.Свойство("Функция1С")) Тогда
				Продолжить;
		КонецЕсли;
		Если ДопОперация.Значение.Регламент.Свойство("Идентификатор") И ТекРегламент.Свойство("Идентификатор") Тогда
			РегламентСовпал = (ДопОперация.Значение.Регламент.Идентификатор = ТекРегламент.Идентификатор) ;
		ИначеЕсли ТекРегламент.Свойство("Название") Тогда
			РегламентСовпал = (ДопОперация.Значение.Регламент.Значение = ТекРегламент.Название) ;
		Иначе
			РегламентСовпал = Ложь ;
		КонецЕсли;
		Если Не РегламентСовпал Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ДопОперация.Значение.Свойство("ТребуетсяИдентификатор")
			И НЕ СоставПакета.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтапСовпал =(	ДопОперация.Значение.Свойство("Этап")
					И	ЗначениеЗаполнено(ТекЭтап)
					И	ДопОперация.Значение.Этап.Значение = ТекЭтап);
		ВложениеСовпало = Ложь;
		Если Не ЭтапСовпал И ДопОперация.Значение.Свойство("Вложение") Тогда
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если    Вложение.Свойство("Тип")
					И	Вложение.Тип = ДопОперация.Значение.Вложение.Значение Тогда
					ВложениеСовпало = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЭтапСовпал Или ВложениеСовпало или (НЕ ДопОперация.Значение.Свойство("Этап") И НЕ ДопОперация.Значение.Свойство("Вложение")) Тогда
			СписокДопОпераций.Добавить(ДопОперация.Значение.Операция.Функция1С+?(ДопОперация.Значение.Операция.Свойство("Параметры"), "("+ДопОперация.Значение.Операция.Параметры+")", ""), ДопОперация.Значение.Операция.Значение);
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура Договор1СУстановитьОтбор(ИмяРеквизитаКонтрагента)
	// Вставить содержимое обработчика.
	ПараметрыОтбора =Новый массив;
	ПараметрыОтбора.Добавить(Новый СвязьПараметраВыбора("Отбор."+ИмяРеквизитаКонтрагента, "Контрагент1С"));
	ЭтаФорма.Элементы.Договор1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыОтбора);
КонецПроцедуры

&НаКлиенте
Процедура сбисИнформацияДляТП(Команда)
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Сохранить информации для техподдержки в:"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = МестныйКэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, МестныйКэш.ПараметрыСистемы.Клиент);
		Разделитель = МестныйКэш.ОбщиеФункции.СбисФорматРазделителя(МестныйКэш.ПараметрыСистемы.Клиент);
		ПутьККаталогу = ПутьККаталогу+Формат(ТекущаяДата(), "ДФ =гггг_ММ_дд_ЧЧ_мм_сс")+Разделитель;
		СоздатьКаталог(ПутьККаталогу);
		
		Документы1С = Новый СписокЗначений;
		Для Каждого СтрДок Из ТаблицаДокументов	Цикл
			Для Каждого Док1С Из СтрДок.Документы1С Цикл  
				Документы1С.Добавить(Док1С.Значение); 
			КонецЦикла;
		КонецЦикла;
		МестныйКэш.ОбщиеФункции.СбисСформироватьИнформациюПоДокументам1С(МестныйКэш, ПутьККаталогу, Разделитель, Документы1С);
				
		ТекстДок = Новый ТекстовыйДокумент; 
		МестныйКэш.ОбщиеФункции.сбисЗаписатьСтруктуруВТекстовыйДокумент(СоставПакета, ТекстДок, "   ", Новый Массив); 
		ТекстДок.Записать(ПутьККаталогу + "СоставПакета.txt"); 
		
		МестныйКэш.ОбщиеФункции.СбисСформироватьДанныеОтладкиПоПакету(МестныйКэш, ПутьККаталогу, СоставПакета, ИмяРеквизитаВложений);   
		
		МестныйКэш.ОбщиеФункции.СбисСформироватьОбщуюИнформациюДляТП(МестныйКэш, ПутьККаталогу);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДанныеСторонИзВложения()
	Если	ЗначениеЗаполнено(СоставПакета)
		И	СоставПакета.Вложение[0].Свойство("ВходящийКонтекст")
		И	СоставПакета.Вложение[0].ВходящийКонтекст.Свойство("ДанныеСторон") Тогда
		
		ДанныеСторон = СоставПакета.Вложение[0].ВходящийКонтекст.ДанныеСторон;
		
		Если ДанныеСторон.Свойство("ДанныеОрганизации")
			И Не ДанныеСторон.ДанныеОрганизации.Ссылка = Неопределено Тогда 
			
			УчетОрганизация = ДанныеСторон.ДанныеОрганизации.Ссылка;
		КонецЕсли;
		Если ДанныеСторон.Свойство("ДанныеКонтрагента")
			И Не ДанныеСторон.ДанныеКонтрагента.Ссылка = Неопределено Тогда
			
			УчетКонтрагент = ДанныеСторон.ДанныеКонтрагента.Ссылка;
		КонецЕсли;
		Если ДанныеСторон.Свойство("ДанныеГрузополучателя")
			И Не ДанныеСторон.ДанныеГрузополучателя.Ссылка = Неопределено Тогда
			
			УчетГрузополучатель = ДанныеСторон.ДанныеГрузополучателя.Ссылка;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// Процедура устанавливает видимость элементов формы на вкладке Прослеживаемость
//
&НаКлиенте
Процедура УстановитьВидимостьЭлементовВкладкиПрослеживаемость()  
	
	СбисРасширение = Неопределено;   
	КодСостоянияОперации = Неопределено;
	лПрослеживаемость = Неопределено;  
	СостояниеПрослеживаемости = Неопределено;
	СостояниеДокумента = Неопределено;
	
	МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ТаблицаПрослеживаемость, "Строки").Очистить();     
	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	
	Если СоставПакета.Свойство("Расширение", СбисРасширение) Тогда
		Если СбисРасширение.Свойство("Прослеживаемость", лПрослеживаемость)
			И	лПрослеживаемость = "Да" Тогда
			МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"Прослеживаемость").Видимость = Истина;  
		Иначе
            МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"Прослеживаемость").Видимость = Ложь;
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"Прослеживаемость").Видимость = Ложь;
	КонецЕсли; 
	
	Если СоставПакета.Свойство("Расширение",СбисРасширение) 
		И СбисРасширение.Свойство("СостояниеПросл",СостояниеПрослеживаемости) Тогда
		РасшифровкаСостояния = МестныйКэш.ОбщиеФункции.СостояниеПрослеживаемостиПоКоду(СостояниеПрослеживаемости.КодСостоянияОперации);
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"СтатусДокументаГИСМТ").Заголовок = РасшифровкаСостояния;  
		ЦветСтатуса = ВернутьЦветСтатуса(СостояниеПрослеживаемости.КодСостоянияОперации); 
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"СтатусДокументаГИСМТ").ЦветТекста = ЦветСтатуса;  
	КонецЕсли;  
	
	Если СоставПакета.Свойство("Состояние", СостояниеДокумента)
		И СостояниеДокумента.Свойство("Код")
		И СостояниеДокумента.Код = "7" Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ПроверитьРНПТ").Видимость = Ложь; 
	ИначеЕсли СоставПакета.Свойство("Расширение",СбисРасширение) 
		И СбисРасширение.Свойство("СостояниеПросл",СостояниеПрослеживаемости)
		И СостояниеПрослеживаемости.КодСостоянияОперации = "22" Тогда
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ПроверитьРНПТ").Видимость = Ложь;
	Иначе
		МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма,"ПроверитьРНПТ").Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры


