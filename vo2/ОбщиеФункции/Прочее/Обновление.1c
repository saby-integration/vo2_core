
///////////////////////Обновление///////////////////

//Процедура скачивает файл обновления и меняет обработку в каталоге и в справочнике при наличии
&НаКлиенте
Процедура ОбновитьОбработкуНаНовуюВерсию(Ответ, ПараметрыОбновления) Экспорт
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Отказ                           = Ложь;
	Кэш                             = ПараметрыОбновления.Кэш;
	сбисИмяОбработки                = "Sbis1C.epf";
	сбисПолноеИмяОбработки          = Кэш.ПараметрыСистемы.Обработка.ПолноеИмяОбработки;
	сбисРежимИспользованияОбработки = Кэш.ПараметрыСистемы.Обработка.РежимИспользования;
	сбисВерсияНаСервере				= СокрЛП(ПараметрыОбновления.ВерсияНаСервере);
	//Сперва получим актуальную версию во временный файл
	ИмяВременногоФайлаНовойВерсии = СбисПолучитьИмяВременногоФайлаКлиент("tmp");
	ПараметрыОбновления.Вставить("ИмяФайла", ИмяВременногоФайлаНовойВерсии);
	РезультатОбновления = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатОбновления);
		Возврат;
	КонецЕсли;
	СообщитьОбУспехе = Ложь;
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		СообщениеОПерезапускеВСправочнике		= "Обработка успешно обновлена в справочнике внешних обработок. Перезапустите обработку для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
		СообщениеОПерезапускеВКаталогеНаДиске	= "Обработка успешно обновлена по пути %ПолноеИмяОбработкиВКаталоге%. Перезапустите обработку для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
	Иначе
		СообщениеОПерезапускеВСправочнике		= "Обработка успешно обновлена в справочнике внешних обработок. Перезапустите 1С:Предприятие (не обработку!) для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
		СообщениеОПерезапускеВКаталогеНаДиске	= "Обработка успешно обновлена по пути %ПолноеИмяОбработкиВКаталоге%. Перезапустите 1С:Предприятие (не обработку!) для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
	КонецЕсли;
	Если сбисРежимИспользованияОбработки = "Обработка в справочнике внешних обработок" Тогда
		//Обновим справочник
		Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			НаименованиеОбработки = "Отправить документ через online.sbis.ru";
		Иначе
			НаименованиеОбработки = "Электронный обмен документами в СБиС";
		КонецЕсли;
		ОбработкаСБИССсылка = ПолучитьОбработкуСБИСНаСервере(НаименованиеОбработки);
		Если ЗначениеЗаполнено(ОбработкаСБИССсылка) Тогда
			РезультатОбновления = ЗаписатьОбработкуВСправочник(ПараметрыОбновления.Версия, ОбработкаСБИССсылка, Новый ДвоичныеДанные(ИмяВременногоФайлаНовойВерсии), Отказ);
			Если Отказ Тогда
				Сообщить(РезультатОбновления.message + "(" + РезультатОбновления.details + ")");
				//Отказ = Ложь; Раньше устанавливалось в ложь. Непонятно зачем.
			Иначе
				СообщениеОПерезапускеВСправочнике = СтрЗаменить(СообщениеОПерезапускеВСправочнике, "%НомерНовойВерсии%", ПараметрыОбновления.Версия);
				Сообщить(СообщениеОПерезапускеВСправочнике);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли сбисРежимИспользованияОбработки = "Файл внешней обработки" Тогда
		//Обновим файл
		Файл = Новый Файл(сбисПолноеИмяОбработки);
		Если Файл.Существует() Тогда
			Попытка                           	
				ПереместитьФайл(сбисПолноеИмяОбработки, сбисПолноеИмяОбработки + ".bak");
			Исключение 
				Сообщить("Ошибка при замене файла обработки " + сбисПолноеИмяОбработки + ". Возможно он заблокирован. Подробно: " + ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
			Если Не Отказ Тогда
				Попытка                           	
					ПереместитьФайл(ИмяВременногоФайлаНовойВерсии, сбисПолноеИмяОбработки);
					СообщитьОбУспехе = Истина;
					СообщениеОПерезапускеВКаталогеНаДиске = СтрЗаменить(СообщениеОПерезапускеВКаталогеНаДиске, "%ПолноеИмяОбработкиВКаталоге%", сбисПолноеИмяОбработки);
					СообщениеОПерезапускеВКаталогеНаДиске = СтрЗаменить(СообщениеОПерезапускеВКаталогеНаДиске, "%НомерНовойВерсии%", ПараметрыОбновления.Версия);
					Сообщить(СообщениеОПерезапускеВКаталогеНаДиске);
				Исключение
					//Восстановим исходный файл обратно.
					ПереместитьФайл(сбисПолноеИмяОбработки + ".bak", сбисПолноеИмяОбработки);
					Сообщить("Ошибка при переносе файла обработки новой версии " + сбисПолноеИмяОбработки + ". Подробно: " + ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СбисОчиститьВременныйФайлКлиент(ИмяВременногоФайлаНовойВерсии);
	
	Кэш.ГлавноеОкно.ОбновитьАккордеон(Новый Структура("ОбновитьИнформациюОВерсии", Истина), Кэш);
	
	Если НЕ Отказ Тогда
		Кэш.ГлавноеОкно.сбисУстановитьОформлениеГиперссылокОбновления("Предложить перезапуск");
		Кэш.Парам.Вставить("ОжидаемаяВерсия", сбисВерсияНаСервере);
		Кэш.ГлавноеОкно.сбисЗадатьВопросПослеОбновления();
	КонецЕсли;
	
КонецПроцедуры

//Функция получает обработку из справочника
&НаСервереБезКонтекста
Функция ПолучитьОбработкуСБИСНаСервере(НаименованиеВнешнейОбработкиСбис)
	Если		Не Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда 
		Возврат Справочники.ВнешниеОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	ИначеЕсли	Не Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Функция обновляет обработку в спроавчнике
&НаСервереБезКонтекста
Функция ЗаписатьОбработкуВСправочник(Версия, ОбработкаСБИССсылка, Знач ДД, Отказ)
	Попытка
		сбисОбработкаОбъект = ОбработкаСБИССсылка.ПолучитьОбъект();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
	Если Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	ИначеЕсли Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	Иначе
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", "Не найден реквизит хранилища обработки");
	КонецЕсли;	
	Попытка
		сбисОбработкаОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 611, "Ошибка создания объекта в ИС", ОписаниеОшибки());
	КонецПопытки;	 
	Возврат Истина;
КонецФункции

//Функция возвращает параметры сервиса update для вызова
&НаКлиенте
Функция сбисПараметрыСервисаОбновления(Кэш) Экспорт
	
	// Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	АдресСервисаОбновлений = Неопределено;
	Если Кэш.СБИС.ПараметрыИнтеграции.Свойство("АдресСервисаОбновлений", АдресСервисаОбновлений) Тогда
		сбисСервер	= АдресСервисаОбновлений;
	Иначе
		сбисСервер	= "update.sbis.ru";	
	КонецЕсли;
	
	//сбисПрефикс	= СтрПолучитьСтроку(СтрЗаменить(Сред(Кэш.СБИС.АдресСервера, 9), "online", Символы.ПС), 1);
	//Если Не Лев(сбисПрефикс, 2) = ".s" Тогда
	//	сбисСервер = сбисПрефикс + сбисСервер;
	//КонецЕсли;
	сбисПараметрыОбновления = Новый Структура;
	сбисПараметрыОбновления.Вставить("Сервер",			сбисСервер);
	сбисПараметрыОбновления.Вставить("Протокол",		"https");
	//сбисПараметрыОбновления.Вставить("DefaultURL",		"/1C/8.2-3/");
	сбисПараметрыОбновления.Вставить("URL",				"");
	сбисПараметрыОбновления.Вставить("URL_General",		"/vo2_1c/");
	сбисПараметрыОбновления.Вставить("URL_Settings",	"/vo2_1c_settings/"); // новый url	
	сбисПараметрыОбновления.Вставить("URL_Old_Settings","/1C/8.2-3/"); // старый url, оставлено для совместимости и если новый недоступен
	сбисПараметрыОбновления.Вставить("URL_83_uf",		"/vo2_1c_83_uf/");
	сбисПараметрыОбновления.Вставить("URL_82_of",		"/vo2_1c_82_of/");
	
	Возврат сбисПараметрыОбновления;
КонецФункции

//Процедура выполняет проверку обновления на сервисе и предлагает скачать его. Доступно только если обработка лежит в каталоге и запускается оттуда же.
&НаКлиенте
Процедура СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыОбновления) Экспорт
	Отказ = Ложь;
	РезультатОбновления = СбисПроверитьНаличиеОбновленияОбработки(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатОбновления, Новый Структура("ФормаВладелец", Кэш.ГлавноеОкно));
	ИначеЕсли РезультатОбновления = Неопределено Тогда
		//TODO: Сообщить причину по которой обновление не успешно - согласовать с Андреем и хэлп-деском (с)Сычев
	Иначе 
		Сообщить(РезультатОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисПроверитьНаличиеОбновленияОбработки(Кэш, ПараметрыОбновления, Отказ)
	Если Не Сред(Кэш.Парам.АдресСервера, 9, 6) = "online" И Не Кэш.Парам.РежимОтладки Тогда    //Не обновляем с тестовых стендов не в режиме отладки
		Кэш.ГлавноеОкно.ОбновитьАккордеон(Новый Структура("ОбновитьИнформациюОВерсии", Истина), Кэш);
		Возврат Неопределено;
	КонецЕсли;
	 
	сбисПараметрыОбновления = сбисПараметрыСервисаОбновления(Кэш);
	сбисПараметрыОбновления.Вставить("ИмяФайла", КаталогВременныхФайлов() + "version.tmp");
	
	ИнформацияОТекущейВерсии = Новый Структура();   
	Если Лев(Кэш.ПараметрыСистемы.Обработка.КраткаяВерсия, 6)="VO83UF" Тогда
		ИнформацияОТекущейВерсии.Вставить("product", "vo2_1c_83_uf"); 
	Иначе //Если Лев(Кэш.ПараметрыСистемы.Обработка.КраткаяВерсия, 6)="VO82OF" Тогда
		ИнформацияОТекущейВерсии.Вставить("product", "vo2_1c_82_of");
	КонецЕсли;	
	ИнформацияОТекущейВерсии.Вставить("client_version", Кэш.ПараметрыСистемы.Обработка.Версия);
	ИнформацияОбАктуальнойВерсии = Кэш.Интеграция.СбисПроверкаОбновления(Кэш, ИнформацияОТекущейВерсии, Ложь); 
	Если ТипЗнч(ИнформацияОбАктуальнойВерсии)=Тип("Структура") И ИнформацияОбАктуальнойВерсии.Свойство("client_version_status") И ЗначениеЗаполнено(ИнформацияОбАктуальнойВерсии.client_version_status) Тогда
		СтатусВерсииПользователя = ИнформацияОбАктуальнойВерсии.client_version_status; 
		Кэш.ПараметрыСистемы.Обработка.Вставить("СтатусВерсии", СтатусВерсииПользователя);	
	Иначе
		Возврат Неопределено;
	КонецЕсли;    
	Если ИнформацияОбАктуальнойВерсии.Свойство("current_version_number") Тогда
		сбисВерсияНаСервере = ИнформацияОбАктуальнойВерсии.current_version_number; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если ИнформацияОбАктуальнойВерсии.Свойство("current_version_link") Тогда  
		Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			URL = ИнформацияОбАктуальнойВерсии.current_version_link + "/Sbis1C_UF.epf";
		Иначе
			URL = ИнформацияОбАктуальнойВерсии.current_version_link + "/Sbis1C.epf";	
		КонецЕсли;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	 
	РучнойРежимЗапуска = Ложь;
	Если	ПараметрыОбновления.Свойство("Режим")
		И	ПараметрыОбновления.Режим = "Ручной" Тогда
		РучнойРежимЗапуска = Истина;	
	КонецЕсли;
	УстанавливатьОбновленияАвтоматически = Кэш.Парам.УстанавливатьОбновленияАвтоматически;
	  
	Если СтатусВерсииПользователя = 0 // Версия актуальна
			ИЛИ (СтатусВерсииПользователя = -1 И ЭтоНоваяВерсия(ИнформацияОТекущейВерсии.client_version, сбисВерсияНаСервере)) Тогда  // Статус версии не смогли определить, и версия выше актуальной			
		Кэш.ГлавноеОкно.ОбновитьАккордеон(Новый Структура("ОбновитьИнформациюОВерсии", Истина), Кэш);	
		Если РучнойРежимЗапуска Тогда
			Возврат "Обновление не требуется.";
		КонецЕсли;
		Возврат Неопределено; 
	КонецЕсли;
	
	НоваяВерсияБезБилда = Лев(сбисВерсияНаСервере, НайтиСимволСКонца(сбисВерсияНаСервере, ".")-1);
	
	сбисПараметрыОбновления.Вставить("Кэш",	Кэш);  
	сбисПараметрыОбновления.Вставить("Версия", НоваяВерсияБезБилда);    
	сбисПараметрыОбновления.Вставить("URL", URL);
	
	Кэш.ГлавноеОкно.сбисУстановитьОформлениеГиперссылокОбновления("Предложить обновление", СтатусВерсииПользователя);
	Кэш.ГлавноеОкно.ОтключитьОбработчикОжидания("сбисПроверитьНаличиеОбновленийАвто");
	
	сбисПараметрыОбновления.Вставить("ВерсияНаСервере", НоваяВерсияБезБилда);        
	
	Если	РучнойРежимЗапуска
		ИЛИ	УстанавливатьОбновленияАвтоматически Тогда
		ОбновитьОбработкуНаНовуюВерсию(КодВозвратаДиалога.Да, сбисПараметрыОбновления);
	Иначе
		Кэш.ГлавноеОкно.ОбновитьАккордеон(Новый Структура("ОбновитьИнформациюОВерсии", Истина), Кэш);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции    

Функция НайтиСимволСКонца(Знач Строка, Знач Символ) Экспорт
    Для Позиция = -СтрДлина(Строка) По -1 Цикл
        Если Сред(Строка, -Позиция, СтрДлина(Символ)) = Символ Тогда
            Возврат -Позиция;
        КонецЕсли;
    КонецЦикла;
    Возврат 0;     
КонецФункции

//Получает номер актуальной версии обработки на сервере
&НаКлиенте
Функция сбисПолучитьНомерВерсииОбработкиПоПараметрам(Кэш, Отказ, сбисПараметрыОбновления = Неопределено) Экспорт
	Если сбисПараметрыОбновления = Неопределено Тогда
		сбисПараметрыОбновления = сбисПараметрыСервисаОбновления(Кэш);
		сбисПараметрыОбновления.Вставить("ИмяФайла", КаталогВременныхФайлов() + "version.tmp");
		сбисПараметрыОбновления.URL = сбисПараметрыОбновления.URL_General + "version.txt";	
	КонецЕсли;
	сбисПараметрыОбновления.Вставить("Таймаут", 3);
	
	РезультатЧтения = Кэш.Интеграция.сбисПолучитьПараметрыАктуальнойВерсии(Кэш, сбисПараметрыОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат РезультатЧтения;
	КонецЕсли;
	
	//Читаем информацию о обновлении
	Попытка
		сбисВерсияНаСервере = Новый ЧтениеТекста(сбисПараметрыОбновления.ИмяФайла);
		сбисВерсияНаСервере = сбисВерсияНаСервере.ПрочитатьСтроку();
		Если Не ЗначениеЗаполнено(сбисВерсияНаСервере) Тогда
			сбисВерсияНаСервере = "0";
		КонецЕсли;
	Исключение
		//Не удалось прочитать версию на сервере
		сбисВерсияНаСервере = "0";
	КонецПопытки;
	Возврат сбисВерсияНаСервере;
КонецФункции

