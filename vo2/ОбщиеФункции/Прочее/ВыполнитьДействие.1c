//Область описывает выполнение действия над пакетом (переезд, рефактор с ExtSDK)

//Функция выполняет выбранное действие с пакетом
//Возвращает Истина при успехе, структуру ошибки при неудаче.
//Кэш - структура глобального кэша
//ПараметрыДействия:
// СоставПакета			- обрабатываемый пакет
// Этап					- активный этап
// Действие				- действие, которое требуется выполнить
// Сертификат			- сертификат, с которым выполняется действие
// Комментарий(необяз)	- коммментарий этапа
//Отказ - флаг того, что что-то пошло не так
&НаКлиенте
Функция СбисВыполнитьДействие(Кэш, ПараметрыДействия, Отказ) Экспорт 
	Перем ИмяФайла, ПакетВложения;
	СоставПакета= ПараметрыДействия.СоставПакета;
	Этап		= ПараметрыДействия.Этап;
	Действие	= ПараметрыДействия.Действие;
	Сертификат	= ПараметрыДействия.Сертификат;
	
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("СообщитьОбОшибке, ВернутьОшибку", Ложь, Истина);
	
	// Назначение действие на этап
	action = Новый Структура("Название", Действие.Название);
	Если Не Сертификат = Неопределено Тогда
		action.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если Не Сертификат = Неопределено И Не Действие.Свойство("Сертификат") Тогда
		Действие.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если ПараметрыДействия.Свойство("Комментарий") И Не ПараметрыДействия.Комментарий = "" Тогда
		action.Вставить("Комментарий", ПараметрыДействия.Комментарий);
	КонецЕсли;	
		
	// Назначение этапа
	stage		= Новый Структура("Название, Идентификатор, Действие", Этап.Название, Этап.Идентификатор, action);
	document_in	= Новый Структура("Этап, Идентификатор", stage, СоставПакета.Идентификатор);
	
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Не (Вложение.Свойство("ТребуетПодписания") И Вложение.ТребуетПодписания) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				МодульОбъектаКлиент().ЗаписатьВложенияСБИС(СоставПакета, Вложение, Новый Структура, Новый Структура("Кэш", Кэш));
			Исключение
				Отказ = Истина;
				Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "РаботаСДокументами.СбисВыполнитьДействие");	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка этапа
	prepared_document = Кэш.Интеграция.СБИС_ПодготовитьДействие(Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат СбисИсключение(prepared_document, "ОбщиеФункции.СбисВыполнитьДействие");
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	РезультатФормирования = СбисСформироватьТитулы(Кэш, СоставПакета, Действие, СбисПараметрыТитулов, Отказ);
	Если Отказ Тогда
		Возврат СбисИсключение(РезультатФормирования, "ОбщиеФункции.СбисВыполнитьДействие");
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование	= сбисПараметрыТитулов.Шифрование;
	Размер		= attachmentListPrepared.Количество();
	// если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
	ТребуетсяПередачаВложений =	Сертификат <> Неопределено
							И	Сертификат.Ключ.Тип = "Клиентский"
							И	Действие.ТребуетПодписания = "Да";
	
	Если ТребуетсяПередачаВложений Тогда  
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить("Идентификатор", Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить("Имя", Запись.Файл.Имя);
			file.Вставить("Хеш", Запись.Файл.Хеш);
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			Если Запись.Свойство("Зашифрован") И Запись.Зашифрован = "Да" Тогда
				//Для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				//Для SDK должно отвалиться на стадии подготовки.
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить("Ссылка", Запись.Файл.Ссылка);
			КонецЕсли;
			attachment.Вставить("Файл", file);
			attachmentList.Добавить(attachment);
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип = СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Вложение.Свойство("Идентификатор") Тогда
				//Если есть ИД, то вложение уже готово
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("ИмяФайла", ИмяФайла) Тогда
				//Генерируем имя файла, если не указано
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + Строка(Новый УникальныйИдентификатор()) + ".xml";
			КонецЕсли;
			ДвоичныеДанныеXMLДокумента = Кэш.Интеграция.СБИС_СериализоватьСтрокуВBase64(Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат СбисИсключение(ДвоичныеДанныеXMLДокумента, "ОбщиеФункции.СбисВыполнитьДействие");
			КонецЕсли;
				
			file		= Новый Структура("Имя, ДвоичныеДанные", ИмяФайла, ДвоичныеДанныеXMLДокумента);
			attachment	= Новый Структура("Файл", file);
			Если Вложение.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдПодтвЗаказа) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Удалить(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				Попытка
					// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
					ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип+Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
					Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
						ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
						Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
							attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
						КонецЕсли;
					Иначе
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецЕсли;
				Исключение
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецПопытки;
			КонецЕсли;
			attachment.Вставить( "Идентификатор",  ИдВложения);
			Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
				attachment.Вставить( "ТребуетШифрования",  "Да");
				Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
					attachment.Вставить( "Тип",  Вложение.Тип);
					attachment.Вставить( "Подтип",  Вложение.ПодТип);
					attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				КонецЕсли;
				Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
					attachment.Вставить( "Дата",  Вложение.Дата);
				КонецЕсли;
				Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
					attachment.Вставить( "Название",  Вложение.Название);
				КонецЕсли;
			КонецЕсли;
			
			attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
			attachmentList.Добавить( attachment );
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("СертификатДляПодписания") и ЗначениеЗаполнено(ПараметрыДействия.СертификатДляПодписания) Тогда
		РезультатПодписания = Кэш.Интеграция.сбисПодписатьВложения(Кэш, attachmentList, ПараметрыДействия.СертификатДляПодписания, ПараметрыДействия.Алгоритм, Отказ);
		Если Отказ Тогда 
			Возврат СбисИсключение(РезультатПодписания, "ОбщиеФункции.СбисВыполнитьДействие");
		КонецЕсли;
    КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура("Комментарий, Название, Идентификатор", prepared_action.Комментарий, prepared_action.Название, "");
	Если prepared_action.Свойство("Идентификатор") Тогда
		action.Идентификатор = prepared_action.Идентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура("Действие, Вложение, Идентификатор, Название", action, attachmentList, prepared_stage.Идентификатор, prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч = 0 По КолРедакций - 1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	
	document_in = Новый Структура("Идентификатор, Редакция, Этап", prepared_document.Идентификатор, redactions, stage);
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент );
	КонецЕсли;
	
	// Завершение этапа
	РезультатДействия = Кэш.Интеграция.СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат СбисИсключение(РезультатДействия, "ОбщиеФункции.СбисВыполнитьДействие");
	КонецЕсли;      
	Кэш.ГлавноеОкно.ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Массовые операции по отмеченным документам
&НаКлиенте
Функция СбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, ИмяКоманды) Экспорт
	//При попытке отклонения нескольких документов ничего не делаем
	Если СписокОтмеченныхДокументов.Количество()>1 и ИмяКоманды = "Отклонить" Тогда
		Сообщить("Отклонять документы можно только по одному.");
		Возврат Ложь;
	КонецЕсли;
	
	СписокИНН = Новый СписокЗначений;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		оОрганизация = Строка.Значение.СоставПакета[0].Значение.НашаОрганизация;
		Если оОрганизация.Свойство("СвФЛ") Тогда
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
				СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
			КонецЕсли;
		Иначе
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
				СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	ПараметрыПереходЗавершение = Новый Структура("СчСерт, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды", 0, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды);
	Если СписокСертификатов.Количество()>0 Тогда    
		Сертификат = СписокСертификатов[0].Значение;
		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
		КонецЕсли;
		СертификатИмя = "Введите код активации сертификата " + ПолучитьПредставлениеСертификата(Сертификат, "[ФИО].([Должность])., [Название].(ИНН [ИНН])", Истина);
		
		ФормаВводаПинкода = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");
		ПараметрыВвода = Новый Структура("СертификатИмя", СертификатИмя);
		#Если ТолстыйКлиентОбычноеПриложение Тогда 
			сбисУтвердитьОтклонитьЗавершение(ФормаВводаПинкода.Показать(ПараметрыВвода), ПараметрыПереходЗавершение);		
		#Иначе
			ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисУтвердитьОтклонитьЗавершение",ЭтаФорма,ПараметрыПереходЗавершение);
			ФормаВводаПинкода.Показать(ПараметрыВвода);
		#КонецЕсли
	Иначе
		сбисУтвердитьОтклонитьЗавершение(Истина, ПараметрыПереходЗавершение);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СбисУтвердитьОтклонитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//При попытке отклонения нескольких документов ничего не делаем
	Кэш = ДополнительныеПараметры.Кэш;
	Если Результат = Неопределено Тогда   // не ввели пин-код
		ТекстОшибки = "Не активирован сертификат для подписания документов.";
		сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;	
	Иначе  // ввели пин-код или не требуется активация
		СчСерт = ДополнительныеПараметры.СчСерт;
		СписокСертификатов = ДополнительныеПараметры.СписокСертификатов;
		СписокОтмеченныхДокументов = ДополнительныеПараметры.СписокОтмеченныхДокументов;
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
		Если СписокСертификатов.Количество()>0 Тогда
			Серт = СписокСертификатов[СчСерт].Значение;
			Серт.Вставить("КодАктивации", Результат.ПинКод);
		КонецЕсли;
		Если СчСерт<СписокСертификатов.Количество()-1 Тогда    // еще не все пин-коды ввели
			Сертификат = СписокСертификатов[СчСерт+1].Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			СертификатИмя = "Введите код активации сертификата "+СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			ФормаВводаПинкода = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", СертификатИмя);			
			ПараметрыПереходЗавершение = Новый Структура("СчСерт, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды", СчСерт+1, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды);
			#Если ТолстыйКлиентОбычноеПриложение Тогда 
				сбисУтвердитьОтклонитьЗавершение(ФормаВводаПинкода.Показать(ПараметрыВвода), ПараметрыПереходЗавершение);		
			#Иначе
				ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисУтвердитьОтклонитьЗавершение",ЭтаФорма,ПараметрыПереходЗавершение);
				ФормаВводаПинкода.Показать(ПараметрыВвода);
			#КонецЕсли
		Иначе  // ввели пин-коды для всех сертов
			Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов);
			Если ИмяКоманды = "Утвердить" Тогда
				ТекстСообщения = "утверждение";
			Иначе
				ТекстСообщения = "отклонение";
			КонецЕсли;
			ГлавноеОкно = Кэш.ГлавноеОкно;	
			фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);	
			Всего = СписокОтмеченныхДокументов.Количество();
			сч = 0;
			Для Каждого Строка из СписокОтмеченныхДокументов Цикл        
				
				сч = сч + 1;
				ГлавноеОкно.сбисПоказатьСостояние("Идет "+ТекстСообщения+" документов",ГлавноеОкно, Мин(100,Окр(сч*100/Всего)));
				Если Строка.Значение.Статус = 5 Тогда //Если документ уже отклонен
					Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Отклонить", "уже отклонен", "нельзя утвердить") + ".");			
					Продолжить;
				ИначеЕсли Строка.Значение.Статус = 6 Тогда //Если уже утвержден
					Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Утвердить", "уже утвержден", "нельзя отклонить") + ".");			
					Продолжить;
				КонецЕсли;	
				//Если Строка.Значение.СоставПакета[0].Значение.Свойство("Комплект") Тогда
				//	Кэш.ВИ.ВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Комплект.Идентификатор,Кнопка.Имя, ПолучитьПредставлениеПакетаДляОшибки(Строка));
				//Иначе
				фрм.сбисВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Идентификатор,ИмяКоманды, ПолучитьПредставлениеПакетаДляОшибки(Строка));	
				//КонецЕсли;
				
			КонецЦикла;
			ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
			ГлавноеОкно.ОбновитьКонтент();
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Срабатывает после ввода пин-кода сертификата перед действием
//
// Параметры:
//  Результат  - Структура - Результат ввода пин-кода сертификата
//  ДополнительныеПараметры  - Произвольный - Дополнительные параметры
//							для обработки результата
//
&НаКлиенте
Процедура СбисПослеВводаПинКода(Результат, ДополнительныеПараметры) Экспорт 

	Кэш = ДополнительныеПараметры.Кэш;
	Если Результат = Неопределено Тогда   // не ввели пин-код 
		
		ТекстОшибки = "Не активирован сертификат для подписания документов.";
		сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат;
		
	Иначе  // ввели пин-код или не требуется активация
		
		СчСерт = ДополнительныеПараметры.СчСерт;
		СписокСертификатов = ДополнительныеПараметры.СписокСертификатов;
		СписокОтмеченныхДокументов = ДополнительныеПараметры.СписокОтмеченныхДокументов;
		ИмяКоманды = ДополнительныеПараметры.Команда.Название;
		
		Если СписокСертификатов.Количество() Тогда
			
			Серт = СписокСертификатов[СчСерт].Значение;
			Серт.Вставить("КодАктивации", Результат.ПинКод);
			
		КонецЕсли;
		
		Если СчСерт < СписокСертификатов.Количество() - 1 Тогда    // еще не все пин-коды ввели           
			                                                  
			ДополнительныеПараметры.СчСерт = ДополнительныеПараметры.СчСерт + 1;
    		СбисПередВыполнитьДействие(ДополнительныеПараметры);
			
		Иначе  // ввели пин-коды для всех сертов                                    
			
			ПараметрыПереходЗавершение = Новый Структура("Команда, СписокСертификатов, Кэш"); 
			ЗаполнитьЗначенияСвойств(ПараметрыПереходЗавершение, ДополнительныеПараметры);
			Обработчик = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения(ДополнительныеПараметры.ИмяМетодаДляПродолжения, ЭтаФорма, ПараметрыПереходЗавершение);  
			МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СписокОтмеченныхДокументов, Обработчик);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СбисВыполнитьДействиеДляДокументовЗавершить()

// Пытается выполнить указанное действие над списоком документов
//
// Параметры:
//	Параметры - Структура - Структура со следкющим параметрами:
//				 СчСерт (Строка)
//				 СписокСертификатов (СписокЗначений)
//				 Кэш (Структура)
//				 СписокОтмеченныхДокументов (СписокЗначений, Неопределено)
//				 Команды (Структура)
//				 ИмяМетодаДляПродолжения (Строка)
// 
&НаКлиенте
Процедура СбисПередВыполнитьДействие(ПараметрыМетода) Экспорт

	Кэш = ПараметрыМетода.Кэш;
	МодульОбъектаКлиент = МодульОбъектаКлиент();
	
	Если НРег(ПараметрыМетода.Команда.ТребуетПодписания) = "нет" Тогда       
		
		ПараметрыМетода.Вставить("СписокСертификатов", Новый СписокЗначений);  
		
	ИначеЕсли Не (ПараметрыМетода.Свойство("СписокСертификатов")
		И ЗначениеЗаполнено(ПараметрыМетода.СписокСертификатов)) Тогда 
		
		СписокИНН = Новый СписокЗначений;
		
		Для Каждого Строка из ПараметрыМетода.СписокОтмеченныхДокументов Цикл
			
			оОрганизация = Неопределено;
			Если Строка.Значение.СоставПакета[0].Значение.Свойство("НашаОрганизация", оОрганизация) Тогда 
			ИначеЕсли Строка.Значение.СоставПакета[0].Значение.Свойство("Организация", оОрганизация) Тогда
			Иначе 
				Продолжить;
			КонецЕсли;
			
			Если оОрганизация.Свойство("СвФЛ") Тогда
				
				Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН) = Неопределено Тогда 
					СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
				КонецЕсли; 
				
			Иначе
				
				Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН) = Неопределено Тогда
					СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
		ПараметрыМетода.Вставить("СписокСертификатов", СписокСертификатов);
		
	КонецЕсли;
	
	Обработчк = МодульОбъектаКлиент.НовыйСбисОписаниеОповещения("СбисПослеВводаПинКода", ЭтаФорма, ПараметрыМетода);
	
	Если Не ПараметрыМетода.СписокСертификатов.Количество() Тогда
		МодульОбъектаКлиент.ВыполнитьСбисОписаниеОповещения(0, Обработчк);
		Возврат;
	КонецЕсли;               
		
	Сертификат = ПараметрыМетода.СписокСертификатов[ПараметрыМетода.СчСерт].Значение; 
	
	Если Сертификат.Ключ.СпособАктивации <> "СтатическийКод" Тогда
		МодульОбъектаКлиент.ВыполнитьСбисОписаниеОповещения(0, Обработчк);
		Возврат;
	КонецЕсли;    
	
	СертификатИмя = "Введите код активации сертификата " + ПолучитьПредставлениеСертификата(Сертификат, "[ФИО].([Должность])., [Название].(ИНН [ИНН])", Истина);
	
	ФормаВводаПинкода = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");
	ПараметрыВвода = Новый Структура("СертификатИмя", СертификатИмя);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		МодульОбъектаКлиент.ВыполнитьСбисОписаниеОповещения(ФормаВводаПинкода.Показать(ПараметрыВвода), Обработчк);
	#Иначе
		ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Обработчк;
		ФормаВводаПинкода.Показать(ПараметрыВвода);
	#КонецЕсли

КонецПроцедуры // СбисПередВыполнитьДействие()

// Пытается выполнить указанное действие над списоком документов
//
// Параметры:
//	СписокДокументов - СписокЗначений - Список строк из таблицы значений на ГО
//	ПараметрыДействия - Структура - Структура со следкющим параметрами:
//				 СчСерт (Строка)
//				 СписокСертификатов (СписокЗначений)
//				 Кэш (Структура)
//				 СписокОтмеченныхДокументов (СписокЗначений, Неопределено)
//				 Команды (Структура)
//				 ИмяМетодаДляПродолжения (Строка)
// 
&НаКлиенте
Процедура СбисВыполнитьДействиеДляДокументовЗавершить(СписокОтмеченныхДокументов, ПараметрыДействия) Экспорт 
	
	Кэш = ПараметрыДействия.Кэш;
	Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, ПараметрыДействия.СписокСертификатов);
	ГлавноеОкно = Кэш.ГлавноеОкно;	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);	
	Всего = СписокОтмеченныхДокументов.Количество();
	сч = 0;     
	ИмяКоманды = ПараметрыДействия.Команда.Название;
	
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл        
		
		сч = сч + 1;
		ГлавноеОкно.сбисПоказатьСостояние("Выполнение действия """+ ИмяКоманды +""" для документов", ГлавноеОкно, Мин(100, Окр(сч * 100 / Всего)));                       
		НазваниеДокумента = ПолучитьПредставлениеПакетаДляОшибки(Строка);
		Результат = фрм.сбисВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Идентификатор, ИмяКоманды, НазваниеДокумента);
		
		Если Результат = Ложь Тогда
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("Текст", "Не возможно выполнить действие """ + ИмяКоманды + """ для " + НазваниеДокумента);
			ПараметрыСообщения.Вставить("СтатусСообщения", СтатусСообщения.Внимание);
			ПараметрыСообщения.Вставить("ЭлементНазначения", Неопределено);
			ПараметрыСообщения.Вставить("ФормаВладелец", ГлавноеОкно);
			МодульОбъектаКлиент().СбисСообщить(ПараметрыСообщения, Кэш);

		КонецЕсли;
		
	КонецЦикла;
	ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	ГлавноеОкно.ОбновитьКонтент();

КонецПроцедуры


