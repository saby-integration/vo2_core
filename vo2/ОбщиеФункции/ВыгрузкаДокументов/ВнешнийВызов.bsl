
// Функция готовит структуру пакета электронных документов по комплекту документов 1С для просмотра и отправки контрагентам.
// Т.к. по одной строке документов 1С может быть сформировано несколько комплектов (оказание услуги), то структуры пакетов добавляются в массив.
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, Кэш) Экспорт
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно; 
	МассивПакетов = Новый Массив;
	Контекст = Новый Структура("МассивПакетов", Новый Массив);
	Попытка
		Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Исключение
		//Убрать в .50
	КонецПопытки;
	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	ТипПакета = "ДокОтгрИсх";
	ПодтипПакета = "";
	ВнешниеФайлы = Новый Массив;
	НеЗапускатьВДокументооборот = Ложь;
	МассивСтатусРегламент = Новый Массив;
	
	Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
		ЗначениеИниТекущегоРеестра = Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра);
		МассивТипов = РазбитьСтрокуВМассивНаКлиенте(РассчитатьЗначение("РеестрСБИС_Тип", ЗначениеИниТекущегоРеестра, Кэш),",");
		Если МассивТипов.Количество()>0 Тогда
			ТипПакета = МассивТипов[0];
		КонецЕсли;
		ПодтипПакета = РассчитатьЗначение("РеестрСБИС_Подтип", ЗначениеИниТекущегоРеестра, Кэш);
		НеЗапускатьВДокументооборот = РассчитатьЗначение("НеЗапускатьВДокументооборот", ЗначениеИниТекущегоРеестра, Кэш);
		//Костылище с переопределением каталога обмена от реестра
		Если Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра).Свойство("КаталогОбмена") Тогда
			Кэш.ФормаОтправки = Кэш.ГлавноеОкно.сбисПолучитьФорму("ИнтеграцияКаталог");
			Кэш.Парам.КаталогОбмена = Кэш.ОбщиеФункции.РассчитатьЗначение("КаталогОбмена", ЗначениеИниТекущегоРеестра, Кэш)
		Иначе
			Кэш.ФормаОтправки = Кэш.Интеграция;
		КонецЕсли;
	КонецЕсли;
	// выбираем нужные файлы настроек для выгрузки пакета
	СоответствиеДокументДанные = Новый Соответствие;
	Для Каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда
			//Ссылка на внешний файл
			ВнешниеФайлы.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		
		// Определяем ини для выгрузки текущего вложения			
		ИниДокумента = Кэш.ФормаНастроек.Ини_Выгрузка(Кэш, Документ, Элемент.Представление, Кэш.Текущий);
		Если Кэш.ини.Свойство(ИниДокумента) Тогда
			ВходящийКонтекстРасчета = Новый Структура;
			ВходящийКонтекстРасчета.Вставить("ИспользоватьНовыйФорматАктаСверки", Кэш.Парам.ИспользоватьНовыйФорматАктаСверки);
			ЗначениеИниДокумента = Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента);
			ЗначениеИниДокумента.Вставить("Формат2016",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("Формат2019",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ФорматУКД2020",	Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ВходящийКонтекст", Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
			ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
			СоответствиеДокументДанные.Вставить(Документ, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента));
		Иначе // Если нет инишки для одного из документов пакета, то весь пакет не формируем
			СтруктураОшибки	= МодульОбъектаКлиент().НовыйСбисИсключение(,"РаботаСДокументами1С.ПодготовитьСтруктуруДокумента1С",610,, 
																		"Отсутствует настройка " + ИниДокумента + " для формирования документа " + Документ);
			//Если отправка, то вернуть как ответ
			Если Кэш.Свойство("РезультатОтправки") Тогда
				СоставПакета = МодульОбъектаКлиент().НовыйСоставПакета(Новый Структура("ОснованиеПакета, Ошибка", Документ, СтруктураОшибки));
				МассивПакетов.Добавить(СоставПакета);
			Иначе
				МодульОбъектаКлиент().СообщитьСбисИсключение(СтруктураОшибки, Новый Структура("Отправлять", Ложь));
			КонецЕсли;
			Возврат МассивПакетов;
		КонецЕсли;		
	КонецЦикла;
	
	// получаем на сервере все данные по документам пакета по файлам настроек
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаНач = СбисТекущаяДатаВМиллисекундах(Кэш);	
	КонецЕсли;
	ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, СтрокаСпискаДокументов.СоставПакета, Кэш.Парам, Кэш);  // передаем СоставПакета, так как в нем нужный порядок документов	// alo Меркурий
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаКнц = СбисТекущаяДатаВМиллисекундах(Кэш);
		Кэш.РезультатОтправки.ВремяПолученияДанных = Кэш.РезультатОтправки.ВремяПолученияДанных+(ДатаКнц-ДатаНач)/1000;	
	КонецЕсли;
	Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	Если Не ОбработатьДанныеДокументов1С(Кэш, Контекст, СтрокаСпискаДокументов.СоставПакета, СоответствиеДокументДанные) Тогда
		СтруктураОшибки = Неопределено;
		Если Не Контекст.СоставПакета.Свойство("Ошибка", СтруктураОшибки) Тогда 
			СтруктураОшибки = МодульОбъектаКлиент().НовыйСбисИсключение(,	"РаботаСДокументами1С.ПодготовитьСтруктуруДокумента1С", 611, "Ошибка создания документа.", 
																		"Документ " + СтрокаСпискаДокументов.СоставПакета[0].Значение + " не сформирован.");
		КонецЕсли;
		Если Кэш.Свойство("РезультатОтправки") Тогда
			//При отправке, требуется прокинуть ошибку до вызова отправки чтобы получить номрмальное исключение
			СоставПакета = МодульОбъектаКлиент().НовыйСоставПакета(Новый Структура("ОснованиеПакета, Ошибка", СтрокаСпискаДокументов.СоставПакета[0].Значение, СтруктураОшибки));
			МассивПакетов.Добавить(СоставПакета);
		Иначе
			МодульОбъектаКлиент().СообщитьСбисИсключение(СтруктураОшибки);
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЕсли;
	
	// добавляем в первый пакет внешние файлы
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Для Каждого ВнешнийФайлПуть из ВнешниеФайлы Цикл
			ВнешнийФайл = Новый Файл(ВнешнийФайлПуть);
			Если ВнешнийФайл.Существует() Тогда
				Вложение = Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",ВнешнийФайлПуть,ВнешнийФайл.Имя,ВнешнийФайл.Имя);
				Контекст.МассивПакетов[0].Вложение.Добавить(Вложение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)--> 1 +
	Если Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент  = РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;	   
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)
	
	ПараметрыГенерацииПакетов = Новый Структура("Кэш", Кэш);
	ПараметрыГенерацииПакетов.Вставить("ОснованиеПакета",				СтрокаСпискаДокументов.СоставПакета[0].Значение);
	ПараметрыГенерацииПакетов.Вставить("СтатусыРегламентов",			МассивСтатусРегламент);
	ПараметрыГенерацииПакетов.Вставить("Тип",							ТипПакета);
	ПараметрыГенерацииПакетов.Вставить("НеЗапускатьВДокументооборот",	НеЗапускатьВДокументооборот);
	ПараметрыГенерацииПакетов.Вставить("ГрязныеИни",					СоответствиеДокументДанные);
	Если ЗначениеЗаполнено(ПодтипПакета) Тогда
		ПараметрыГенерацииПакетов.Вставить("ПодТип", ПодтипПакета);
	КонецЕсли;
	Для Каждого Пакет Из Контекст.МассивПакетов Цикл
		РезультатГенерации = СгенерироватьИсходящийПакет(Пакет, ПараметрыГенерацииПакетов);
		Если РезультатГенерации.Ошибки.Количество() Тогда
			//В пакете ошибки. Дальнейшее выполнение не имеет смысла
			Если Кэш.Свойство("РезультатОтправки") Тогда
				//Идёт отправка, добавить в пакет первую ошибку, с ней и упадём в отправке. При необходимости сделать в разрезе конкретного документа 1С, сделать нормальный проброс ошибок
				Для Каждого КлючИЗначение Из РезультатГенерации.Ошибки Цикл
					РезультатГенерации.ПолныйСоставПакета.Вставить("Ошибка", КлючИЗначение.Значение);
					Прервать;
				КонецЦикла;
			Иначе
				Для Каждого КлючИЗначение Из РезультатГенерации.Ошибки Цикл
					//Показываем первое сообщение, старая логика
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, КлючИЗначение.Значение, Новый Структура("Отправлять", Ложь));
					Прервать;
				КонецЦикла;
				Продолжить;//Просто сообщить, этого вполне достаточно.
			КонецЕсли;
		КонецЕсли;
		МассивПакетов.Добавить(РезультатГенерации.ПолныйСоставПакета);
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

// Функция - генерирует состав пакета с заголовками на основании подготовленных данных
//
// Параметры:
//  ПакетВходящий	 - Структура	 - Пакет-основание для формирования
//	ПараметрыГенерацииПакета	- Структура -
//		НеЗапускатьВДокументооборот - Булево         - признак проведения документа в СБИС после записи
//		Тип                         - Строка         - Тип в заголовок формируемого пакета. Если на входящем пакете указан Конверт, то игнорируется.
//		ПодТип                      - Строка         - ПодТип в заголовок формируемого пакета. Если на входящем пакете указан Конверт, то игнорируется.
//		ОснованиеПакета             - ДокументСсылка - основной документ пакета
//		Кэш                         - Структура      - кэш обработки
//
// Возвращаемое значение:
//  Структура - 
//		Ошибки				- Соответствие	- ошибки в процессе, где ключ - ссылка на документ 1С
//		ПолныйСоставПакета	- Структура - готовый состав пакета с данными.
//
&НаКлиенте
Функция СгенерироватьИсходящийПакет(ПакетВходящий, ПараметрыГенерацииПакета)
	Перем РегламентНазвание, ПолныйСоставПакета, СвЮлФлСтороны;
	
	Кэш				= ПараметрыГенерацииПакета.Кэш;
	ОснованиеПакета	= ПараметрыГенерацииПакета.ОснованиеПакета;
	Результат		= Новый Структура("Ошибки, ПолныйСоставПакета", Новый Соответствие);
	
	Если ПакетВходящий.Свойство("Конверт", Результат.ПолныйСоставПакета) Тогда
		Если	Не	Результат.ПолныйСоставПакета.Свойство("НеЗапускатьВДокументооборот")
			Или		Результат.ПолныйСоставПакета.НеЗапускатьВДокументооборот = Неопределено Тогда
			Результат.ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",	ПараметрыГенерацииПакета.НеЗапускатьВДокументооборот);
		КонецЕсли;
	Иначе
		Результат.ПолныйСоставПакета = Новый Структура;
	КонецЕсли;
	
	//Сгенерировать XML вложений
	ПараметрыГенерацииВложений	= Новый Структура("ОснованиеПакета, СоставПакета, Результат, ГрязныеИни", ОснованиеПакета, ПакетВходящий, Результат, ПараметрыГенерацииПакета.ГрязныеИни);
	РезультатГенерации			= СгенерироватьВложенияВПакет(ПараметрыГенерацииВложений, Кэш);

	//Если явно задана ошибка, то заменим последнюю по основанию, если такая была.
	Если ПакетВходящий.Свойство("Ошибка") Тогда
		Результат.Ошибки.Вставить(ОснованиеПакета, МодульОбъектаКлиент().НовыйСбисИсключение(ПакетВходящий.Ошибка, "РаботаСДокументами1С.СгенерироватьПакет"));
	КонецЕсли;
	Результат.ПолныйСоставПакета.Вставить("Вложение", РезультатГенерации);
	
	Если	ПакетВходящий.Свойство("Конверт")
		Или	Результат.Ошибки.Количество() Тогда
		//Есть конверт, либо были ошибки, генерировать конверт не надо. Выходим.
		Возврат Результат;
	КонецЕсли;
	
	// если нет структуры конверта, то берем все с первого вложения	
	ОснованиеДляПакета	= РезультатГенерации[0];

	Результат.ПолныйСоставПакета.Вставить("НашаОрганизация", 			МодульОбъектаКлиент().ВложениеСБИС_Получить(ОснованиеДляПакета, "СторонаПоРоли", "Отправитель"));
	Результат.ПолныйСоставПакета.Вставить("Контрагент", 				МодульОбъектаКлиент().ВложениеСБИС_Получить(ОснованиеДляПакета, "СторонаПоРоли", "Получатель"));
	Результат.ПолныйСоставПакета.Вставить("Ответственный", 				ОснованиеДляПакета.Ответственный);
	Результат.ПолныйСоставПакета.Вставить("Подразделение", 				ОснованиеДляПакета.Подразделение);	
	Результат.ПолныйСоставПакета.Вставить("Регламент", 					ОснованиеДляПакета.Регламент);
	Результат.ПолныйСоставПакета.Вставить("Тип", 						ПараметрыГенерацииПакета.Тип);
	Результат.ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",ПараметрыГенерацииПакета.НеЗапускатьВДокументооборот);
	Результат.ПолныйСоставПакета.Вставить("ДокументОснование",			ОснованиеДляПакета.ДокументОснование);
	Результат.ПолныйСоставПакета.Вставить("Примечание",					ОснованиеДляПакета.Примечание);
	Результат.ПолныйСоставПакета.Вставить("Сертификат",					ОснованиеДляПакета.Сертификат);
	Если ПараметрыГенерацииПакета.Свойство("Подтип") Тогда
		Результат.ПолныйСоставПакета.Вставить("Подтип", ПараметрыГенерацииПакета.Подтип);	
	КонецЕсли;
	
	ДопПоля = Новый Массив;
	Если ОснованиеДляПакета.Свойство("ДопПоля") Тогда   // alo ДопПоля
		ДопПоля = ОснованиеДляПакета.ДопПоля;
	КонецЕсли;
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПоддержкаОбменаЕИС") Тогда
		ДопПоля.Добавить("Расширение");
		ДопПоля.Добавить("ЕИС");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПоля) Тогда
		Результат.ПолныйСоставПакета.Вставить("ДопПоля", ДопПоля);
	КонецЕсли;

	Если ОснованиеДляПакета.Свойство("Провести") Тогда   // alo Провести
		Результат.ПолныйСоставПакета.Вставить("Провести",	ОснованиеДляПакета.Провести);
	КонецЕсли;
	
	ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(ОснованиеПакета, "Имя");
	
	Если ПакетВходящий.Свойство("ПользовательскийИдентификатор") Тогда 
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор", ПакетВходящий.ПользовательскийИдентификатор);
	ИначеЕсли		Результат.ПолныйСоставПакета.Свойство("Регламент",	РегламентНазвание) 
			И		РегламентНазвание.Свойство("Название",	РегламентНазвание) 
			И НЕ	ПараметрыГенерацииПакета.СтатусыРегламентов.Найти(РегламентНазвание) = Неопределено Тогда
		// Если вручную не назначен идентификатор и регламент подразумевает отдельное хранение статусов - guid выдается новый и не будет совпадать с guid документа			
		// Проверка, нет ли ранее сохраненного ид редакция
		фрм		= Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами, "", Кэш);
		ИдДок	= фрм.ПрочитатьПараметрыДокументаСБИС(ОснованиеПакета, Кэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек, РегламентНазвание + "ДокументСБИС_Ид", Кэш.Ини);
		//если первая отправка - новый ид
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор", ИмяДокумента + ":"+?( ЗначениеЗаполнено(ИдДок), ИдДок, Строка(Новый УникальныйИдентификатор) ) );
	ИначеЕсли НЕ Результат.ПолныйСоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",ИмяДокумента+":"+строка(ОснованиеПакета.УникальныйИдентификатор()));	
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Функция - генерирует вложения в пакет на основании подготовленных данных
//
// Параметры:
//  ПараметрыГенерацииВложений	 - Структура	 - 
//		Пакет			- Структура - данные генерируемого пакета
//		ОснованиеПакета - ДокумнтСсылка	- основной документ пакета
//	Кэш							- Структура		- кэш обработки
//
// Возвращаемое значение:
//  Массив		- сгенерированные вложения для пакета
//
&НаКлиенте
Функция СгенерироватьВложенияВПакет(ПараметрыГенерацииВложений, Кэш)
	
	СписокВложенийВПакет = Новый Массив;
	Для Каждого Вложение Из ПараметрыГенерацииВложений.СоставПакета.Вложение Цикл
		Попытка
			ПараметрыГенерацииВложений.Вставить("Вложение", Вложение);
			НаборВложенийВПакет = МодульОбъектаКлиент().СгенерироватьНаборВложенийВПакет(ПараметрыГенерацииВложений);
			Для Каждого ВложениеДобавить Из НаборВложенийВПакет Цикл
				СписокВложенийВПакет.Добавить(ВложениеДобавить);
			КонецЦикла;
		Исключение
			ИнфоОбОшибке= ИнформацияОбОшибке();
			КлючОшибки	= ?(Вложение.Свойство("Документ1С"), Вложение.Документ1С, ПараметрыГенерацииВложений.ОснованиеПакета);
			ПараметрыГенерацииВложений.Результат.Ошибки.Вставить(КлючОшибки, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "РаботаСДокументами1С.СгенерироватьВложенияВПакет"));
		КонецПопытки;
	КонецЦикла;
	
	Если Кэш.ДопВложение.Количество() Тогда
		Для Каждого Вложение Из Кэш.ДопВложение Цикл
			СписокВложенийВПакет.Добавить(Вложение);
		Конеццикла;
	КонецЕсли;
	
	Если	Не СписокВложенийВПакет.Количество()
		И	Не ПараметрыГенерацииВложений.Результат.Ошибки.Количество() Тогда
		//Нет вложений и ошибок в явном виде. Значит это пустой пакет (не заполнены табличные части)
		Если Кэш.Свойство("РезультатОтправки") Тогда
			//Сгенерировать пустое вложение для детализации
			СписокВложенийВПакет.Добавить(МодульОбъектаКлиент().НовыйВложениеСБИС(, ПараметрыГенерацииВложений));
		КонецЕсли;
		ОшибкаПодготовки = МодульОбъектаКлиент().НовыйСбисИсключение
			(, "РаботаСДокументами1С.СгенерироватьВложенияВПакет", 
			726, 
			"Документ не сформирован", 
			"В документе " + Строка(ПараметрыГенерацииВложений.ОснованиеПакета) + " не заполнены табличные части. Электронный документ не сформирован.");
		ПараметрыГенерацииВложений.Результат.Ошибки.Вставить(ПараметрыГенерацииВложений.ОснованиеПакета, ОшибкаПодготовки);
	КонецЕсли;	

	Возврат СписокВложенийВПакет;

КонецФункции	

//формируем файлы по документам 1С
&НаКлиенте
Функция ОбработатьДанныеДокументов1С(Кэш, Контекст, СоставПакета, СоответствиеДокументДанные) Экспорт
	Для Каждого Элемент Из СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеДокумента = СоответствиеДокументДанные.Получить(Документ);
		Если ДанныеДокумента = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
		Контекст.Вставить("Документ",		Документ);
		Контекст.Вставить("ДокументДанные",	ДанныеДокумента.ДокументДанные);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент", "Документ_" + ИмяДокумента, "Документ_Шаблон", Кэш);
		Если Не фрм.ПрочитатьДокумент(Кэш,Контекст) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Функция заполняет структуру файла настроек данными из документа
Функция ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни, КэшПарам=Неопределено) Экспорт // alo Меркурий
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, СтруктураИниФайла);
	// << alo Меркурий
	Контекст.Ини.Вставить("Парам",Новый Структура("Значение,РассчитанноеЗначение","",Новый Структура));
	// alo Меркурий >>
	Контекст.Документ = Документ;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ГрязныйИни = ЗаполнимДаннымиДокументаСтруктуру(СтруктураИниФайла, Контекст, СписокДопустимыхТипов,КэшЗначенийИни,Новый Массив);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ГрязныйИни;
	
КонецФункции

// Функция заполняет структуру файла настроек данными из документа
&НаКлиенте
Функция ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, КэшЗначенийИни, СоставПакета, КэшПарам = Неопределено, Кэш = Неопределено) Экспорт	// alo Меркурий
	
	Если Кэш = Неопределено Тогда
		Кэш = МестныйКэш;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("КэшЗначенийИни, СоставПакета, КэшПарам", КэшЗначенийИни, СоставПакета, КэшПарам);
	
	НовоеСоответствие = ПолучитьДанныеДокументов1СНаСервере(СоответствиеДокументДанные, ДопПараметры);
	Для каждого КлючИЗначение Из СоответствиеДокументДанные Цикл
		ГряныйИни = НовоеСоответствие.Получить(КлючИЗначение.Ключ);
		
		Если ГряныйИни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеДокументДанные.Вставить(КлючИЗначение.Ключ, ГряныйИни);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДокументов1СНаСервере(Знач СоответствиеДокументДанные, ДопПараметры)
	
	Перем СтруктураОбработчиковДо, СтруктураОбработчиковПосле;
	Результат = Новый Соответствие;
	
	Для каждого Док из ДопПараметры.СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		Если СтруктураИниФайла.Свойство("мОбработчикДоРасчетаНаСервере", СтруктураОбработчиковДо) Тогда
			ДопПараметрыОбработчика = Новый Структура;
			ДопПараметрыОбработчика.Вставить("Документ", Документ);
			ДопПараметрыОбработчика.Вставить("ГрязныйИни", СтруктураИниФайла);
			
			МодульОбъектаСервер().ВыполнитьОбработчикиНаСервере(СтруктураОбработчиковДо, ДопПараметрыОбработчика);
			СтруктураИниФайла.Удалить("мОбработчикДоРасчетаНаСервере");		
		КонецЕсли;
		
		ГрязныйИни = ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, ДопПараметры.КэшЗначенийИни, ДопПараметры.КэшПарам);  // alo Меркурий
		
		Если НЕ ГрязныйИни = Неопределено И ГрязныйИни.Свойство("ВходящийКонтекст") Тогда
			ДополнитьВходящийКонтекстГрязногоИни(Документ, ГрязныйИни.ВходящийКонтекст, ДопПараметры);
		КонецЕсли;
		
		Результат.Вставить(Документ,  Новый Структура("ИмяИни, ДокументДанные", ЭлементСоответствия.ИмяИни, ГрязныйИни));
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДополнитьВходящийКонтекстГрязногоИни(Документ, ВходящийКонтекст, ДопПараметры)
	ВходящийКонтекст.Вставить("МассивИсходныхНомеровСтрок", ПолучитьМассивИсходныеНомераСтрок(Документ));
КонецПроцедуры

&НаКлиенте
функция ДобавитьДокументыЮЗДО(МестныйКэш, ФормаПросмотра) экспорт
	ЕстьСвязанныйДокумент=Ложь;
	Если ФормаПросмотра.СоставПакета.Свойство("Вложение") Тогда
		ИниТекущегоРеестра = МестныйКэш.Текущий.ТипДок;	
		Документы1С=Новый СписокЗначений;
		Для Каждого Вложение Из ФормаПросмотра.СоставПакета.Вложение Цикл
			Для Каждого Документ Из Вложение.Документы1С Цикл
				Если Документы1С.НайтиПоЗначению(Документ.Значение) = Неопределено Тогда
					Документы1С.Добавить(Документ.Значение);
					ЕстьСвязанныйДокумент=Истина;
				конецесли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого Документ Из Документы1С Цикл
			ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ.Значение, "Имя");
			Попытка
				НаборПодходящихИни = МодульОбъектаКлиент().ИниПоПараметрам(Новый Структура("Тип1С", ИмяДокумента));
			Исключение
				МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.Найти_мФайлПоВложению");
			КонецПопытки;
			
			//Получим настройки документа
			СписокИни = Новый СписокЗначений;
			Для Каждого КлючИЗначениеИни Из НаборПодходящихИни Цикл
				ЗначениеИни = КлючИЗначениеИни.Значение;
				Если	ЗначениеИни.Свойство("ЗапросСпискаДокументов")
					Или	ЗначениеИни.Свойство("Реестр1С_Название") Тогда 
					Реестр1С_Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни, МестныйКэш);
					СписокИни.Добавить(КлючИЗначениеИни.Ключ, ?(ЗначениеЗаполнено(Реестр1С_Название),Реестр1С_Название, ИмяДокумента));
				КонецЕсли;
			КонецЦикла;
			Если Не СписокИни.Количество() тогда
				МодульОбъектаКлиент().СбисСообщить("Отсутствуют файлы настроек для выгрузки " + ИмяДокумента + "!");
			КонецЕсли;
			Если СписокИни.Количество() = 1 Тогда
				ДозаписьПослеВыбораИни(СписокИни[0], Новый Структура("Документ,ФормаПросмотра",Документ.Значение,ФормаПросмотра));
			Иначе
				ОбработчикПослеСписка = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ДозаписьПослеВыбораИни", ЭтаФорма, Новый Структура("Документ,ФормаПросмотра",Документ.Значение,ФормаПросмотра));
				ПараметрыВыбораСписка = Новый Структура;
				ПараметрыВыбораСписка.Вставить("Заголовок", "Выберите настройку для " + Документ.Значение);
				ПараметрыВыбораСписка.Вставить("Обработчик", ОбработчикПослеСписка);
				
				МодульОбъектаКлиент().СбисВыбратьИзСписка(СписокИни, ПараметрыВыбораСписка);
			КонецЕсли;
			Возврат Неопределено;
		КонецЦикла;
		МестныйКэш.Текущий.ТипДок = ИниТекущегоРеестра;	
	КонецЕсли;
	Если Не ЕстьСвязанныйДокумент Тогда
		МодульОбъектаКлиент().СбисСообщить("Нет сопоставленного документа 1С!");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПодготовитьДействие_Утвердить_ДокОтгрВх(ПараметрыДействия,Кэш = Неопределено) Экспорт
	
	Если  ПараметрыДействия.Действие.Свойство("СтруктураПодробнее") Тогда
		СтруктураТитулаПараметры = ПараметрыДействия.Действие.СтруктураПодробнее;
	
	
		СтруктураТитула = Новый Структура;
		 
		ДанныеРекордсет = Новый Структура;
		ДанныеРекордсет.Вставить("ОблПолн",Строка(СтруктураТитулаПараметры.Область));
		ДанныеРекордсет.Вставить("Статус",Строка(СтруктураТитулаПараметры.Статус));
		ДанныеРекордсет.Вставить("ОснПолн",СтруктураТитулаПараметры.Основания); 
		Рекордсет = Новый Структура("Рекордсет",ДанныеРекордсет);
		
		Генератор = Новый Структура;
		Генератор.Вставить("ДатаПринят",СтруктураТитулаПараметры.ДатаПринят);
		ПолучилГрузСтруктура = Новый Структура;
		СвЛицПолГруз = Новый Структура;                          
		Если Строка(СтруктураТитулаПараметры.ПолучательГруза) = "2" Тогда
			
			РабОргПок = Новый Структура; 
			РабОргПок.Вставить("Должность",СтруктураТитулаПараметры.Должность);
			РабОргПок.Вставить("ОснПолн",СтруктураТитулаПараметры.ДолжностныеОбязанности);
			РабОргПок.Вставить("Фамилия",СтруктураТитулаПараметры.Фамилия);
			РабОргПок.Вставить("Имя",СтруктураТитулаПараметры.Имя);
			РабОргПок.Вставить("Отчество",СтруктураТитулаПараметры.Отчество);
			СвЛицПолГруз.Вставить("РабОргПок",РабОргПок);
			ПолучилГрузСтруктура.Вставить("СвЛицПолГруз",СвЛицПолГруз);
			Генератор.Вставить("ПолучилГруз",ПолучилГрузСтруктура);
			
		ИначеЕсли Строка(СтруктураТитулаПараметры.ПолучательГруза) = "3" Тогда
			
			ИнЛицо = Новый Структура;
			ПредОргПол = Новый Структура;
			ПредОргПол.Вставить("Должность",СтруктураТитулаПараметры.Должность);
			ПредОргПол.Вставить("НаимОргПол",СтруктураТитулаПараметры.ОрганизацияСотрудника);
			ПредОргПол.Вставить("ОснДоверОргПол",СтруктураТитулаПараметры.ОснованиеПолномочийОрганизации1);
			ПредОргПол.Вставить("ОснПолнПредПол",СтруктураТитулаПараметры.ДолжностныеОбязанности);
			ПредОргПол.Вставить("Фамилия",СтруктураТитулаПараметры.Фамилия);
			ПредОргПол.Вставить("Имя",СтруктураТитулаПараметры.Имя);
			ПредОргПол.Вставить("Отчество",СтруктураТитулаПараметры.Отчество);
			ИнЛицо.Вставить("ПредОргПол",ПредОргПол);
			СвЛицПолГруз.Вставить("ИнЛицо",ИнЛицо);
			ПолучилГрузСтруктура.Вставить("СвЛицПолГруз",СвЛицПолГруз);
			Генератор.Вставить("ПолучилГруз",ПолучилГрузСтруктура);
			
		ИначеЕсли Строка(СтруктураТитулаПараметры.ПолучательГруза) = "4" Тогда
			
			ИнЛицо = Новый Структура;
			ФЛ = Новый Структура;
			ФЛ.Вставить("ОснДоверФЛ",СтруктураТитулаПараметры.ДолжностныеОбязанности);
			ФЛ.Вставить("Фамилия",СтруктураТитулаПараметры.Фамилия);
			ФЛ.Вставить("Имя",СтруктураТитулаПараметры.Имя);
			ФЛ.Вставить("Отчество",СтруктураТитулаПараметры.Отчество);
			ИнЛицо.Вставить("ФЛ",ФЛ);
			
			СвЛицПолГруз.Вставить("ИнЛицо",ИнЛицо);
			ПолучилГрузСтруктура.Вставить("СвЛицПолГруз",СвЛицПолГруз);
			Генератор.Вставить("ПолучилГруз",ПолучилГрузСтруктура);
			
		КонецЕсли;
		

		Подстановка = Новый Структура;
		Подстановка.Вставить("ПодписантТитула", Рекордсет);
		Подстановка.Вставить("Генератор", Генератор);
		СтруктураТитула.Вставить("Подстановка",Подстановка); 
		ПараметрыДействия.ДокументПодготовлен.Этап.Вставить("Вложение",СтруктураТитула);
		
	КонецЕсли;
	
	
КонецПроцедуры

