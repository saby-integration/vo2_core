
// Функция готовит структуру пакета электронных документов по комплекту документов 1С для просмотра и отправки контрагентам.
// Т.к. по одной строке документов 1С может быть сформировано несколько комплектов (оказание услуги), то структуры пакетов добавляются в массив.
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, Кэш) Экспорт
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно; 
	МассивПакетов = Новый Массив;
	Контекст = Новый Структура("МассивПакетов", Новый Массив);
	Попытка
		Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Исключение
		//Убрать в .50
	КонецПопытки;
	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	ТипПакета = "ДокОтгрИсх";
	ПодтипПакета = "";
	ВнешниеФайлы = Новый Массив;
	НеЗапускатьВДокументооборот = Ложь;
	МассивСтатусРегламент = Новый Массив;
	
	Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
		ЗначениеИниТекущегоРеестра = Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра);
		МассивТипов = РазбитьСтрокуВМассивНаКлиенте(РассчитатьЗначение("РеестрСБИС_Тип", ЗначениеИниТекущегоРеестра, Кэш),",");
		Если МассивТипов.Количество()>0 Тогда
			ТипПакета = МассивТипов[0];
		КонецЕсли;
		ПодтипПакета = РассчитатьЗначение("РеестрСБИС_Подтип", ЗначениеИниТекущегоРеестра, Кэш);
		НеЗапускатьВДокументооборот = РассчитатьЗначение("НеЗапускатьВДокументооборот", ЗначениеИниТекущегоРеестра, Кэш);
		Если Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра).Свойство("КаталогОбмена") Тогда
			Кэш.ФормаОтправки = Кэш.ГлавноеОкно.сбисПолучитьФорму("ИнтеграцияКаталог");
			Кэш.Парам.КаталогОбмена = Кэш.ОбщиеФункции.РассчитатьЗначение("КаталогОбмена", ЗначениеИниТекущегоРеестра, Кэш)
		Иначе
			Кэш.ФормаОтправки = Кэш.Интеграция;
		КонецЕсли;
	КонецЕсли;
	// выбираем нужные файлы настроек для выгрузки пакета
	СоответствиеДокументДанные = Новый Соответствие;
	Для Каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда
			//Ссылка на внешний файл
			ВнешниеФайлы.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		
		// Определяем ини для выгрузки текущего вложения			
		ИниДокумента = Кэш.ФормаНастроек.Ини_Выгрузка(Кэш, Документ, Элемент.Представление, Кэш.Текущий);
		Если Кэш.ини.Свойство(ИниДокумента) Тогда
			ВходящийКонтекстРасчета = Новый Структура;
			ВходящийКонтекстРасчета.Вставить("ИспользоватьНовыйФорматАктаСверки", Кэш.Парам.ИспользоватьНовыйФорматАктаСверки);
			ЗначениеИниДокумента = Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента);
			ЗначениеИниДокумента.Вставить("Формат2016",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("Формат2019",		Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ФорматУКД2020",	Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ВходящийКонтекст", Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
			ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
			СоответствиеДокументДанные.Вставить(Документ, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента));
		Иначе // Если нет инишки для одного из документов пакета, то весь пакет не формируем
			ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
			Если Кэш.Свойство("РезультатОтправки") Тогда
				Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
				Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
				ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", "Отсутствует настройка для формирования документа "+ИмяДокумента, СтрокаСпискаДокументов.СоставПакета[0].Значение, 726)
			Иначе
				Сообщить("Отсутствует настройка для формирования документа "+ИмяДокумента);	
			КонецЕсли;
			Возврат Новый Массив;
		КонецЕсли;		
	КонецЦикла;
	
	// получаем на сервере все данные по документам пакета по файлам настроек
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаНач = СбисТекущаяДатаВМиллисекундах(Кэш);	
	КонецЕсли;
	ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, СтрокаСпискаДокументов.СоставПакета, Кэш.Парам, Кэш);  // передаем СоставПакета, так как в нем нужный порядок документов	// alo Меркурий
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаКнц = СбисТекущаяДатаВМиллисекундах(Кэш);
		Кэш.РезультатОтправки.ВремяПолученияДанных = Кэш.РезультатОтправки.ВремяПолученияДанных+(ДатаКнц-ДатаНач)/1000;	
	КонецЕсли;
	Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	Если Не ОбработатьДанныеДокументов1С(Кэш, Контекст, СтрокаСпискаДокументов.СоставПакета, СоответствиеДокументДанные) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// добавляем в первый пакет внешние файлы
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Для Каждого ВнешнийФайлПуть из ВнешниеФайлы Цикл
			ВнешнийФайл = Новый Файл(ВнешнийФайлПуть);
			Если ВнешнийФайл.Существует() Тогда
				Вложение = Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",ВнешнийФайлПуть,ВнешнийФайл.Имя,ВнешнийФайл.Имя);
				Контекст.МассивПакетов[0].Вложение.Добавить(Вложение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)--> 1 +
	Если Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент  = РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;	   
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)
	
	ПараметрыГенерацииПакетов = Новый Структура("Кэш", Кэш);
	ПараметрыГенерацииПакетов.Вставить("ОснованиеПакета",				СтрокаСпискаДокументов.СоставПакета[0].Значение);
	ПараметрыГенерацииПакетов.Вставить("СтатусыРегламентов",			МассивСтатусРегламент);
	ПараметрыГенерацииПакетов.Вставить("Тип",							ТипПакета);
	ПараметрыГенерацииПакетов.Вставить("НеЗапускатьВДокументооборот",	НеЗапускатьВДокументооборот);
	ПараметрыГенерацииПакетов.Вставить("ГрязныеИни",					СоответствиеДокументДанные);
	Если ЗначениеЗаполнено(ПодтипПакета) Тогда
		ПараметрыГенерацииПакетов.Вставить("ПодТип", ПодтипПакета);
	КонецЕсли;
	Для Каждого Пакет Из Контекст.МассивПакетов Цикл
		РезультатГенерации = СгенерироватьИсходящийПакет(Пакет, ПараметрыГенерацииПакетов);
		Если РезультатГенерации.Ошибки.Количество() Тогда
			//В пакете ошибки. Дальнейшее выполнение не имеет смысла
			Если Кэш.Свойство("РезультатОтправки") Тогда
				Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано + 1;
				Для Каждого КлючИЗначение Из РезультатГенерации.Ошибки Цикл
					Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
					ДобавитьОшибкуВРезультатОтправки(Кэш, КлючИЗначение.Значение.message, КлючИЗначение.Значение.details, КлючИЗначение.Ключ, КлючИЗначение.Значение.code);
				КонецЦикла;
			Иначе
				Для Каждого КлючИЗначение Из РезультатГенерации.Ошибки Цикл
					//Показываем первое сообщение, старая логика
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, КлючИЗначение.Значение, Новый Структура("Отправлять", Ложь));
					Прервать;
				КонецЦикла;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		МассивПакетов.Добавить(РезультатГенерации.ПолныйСоставПакета);
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

// Функция - генерирует состав пакета с заголовками на основании подготовленных данных
//
// Параметры:
//  ПакетВходящий	 - Структура	 - Пакет-основание для формирования
//	ПараметрыГенерацииПакета	- Структура -
//		НеЗапускатьВДокументооборот - Булево         - признак проведения документа в СБИС после записи
//		Тип                         - Строка         - Тип в заголовок формируемого пакета. Если на входящем пакете указан Конверт, то игнорируется.
//		ПодТип                      - Строка         - ПодТип в заголовок формируемого пакета. Если на входящем пакете указан Конверт, то игнорируется.
//		ОснованиеПакета             - ДокументСсылка - основной документ пакета
//		Кэш                         - Структура      - кэш обработки
//
// Возвращаемое значение:
//  Структура - 
//		Ошибки				- Соответствие	- ошибки в процессе, где ключ - ссылка на документ 1С
//		ПолныйСоставПакета	- Структура - готовый состав пакета с данными.
//
&НаКлиенте
Функция СгенерироватьИсходящийПакет(ПакетВходящий, ПараметрыГенерацииПакета)
	Перем РегламентНазвание, ПолныйСоставПакета;
	
	Кэш				= ПараметрыГенерацииПакета.Кэш;
	ОснованиеПакета	= ПараметрыГенерацииПакета.ОснованиеПакета;
	Результат		= Новый Структура("Ошибки, ПолныйСоставПакета", Новый Соответствие);
	
	Если ПакетВходящий.Свойство("Конверт", Результат.ПолныйСоставПакета) Тогда
		Если	Не	Результат.ПолныйСоставПакета.Свойство("НеЗапускатьВДокументооборот")
			Или		Результат.ПолныйСоставПакета.НеЗапускатьВДокументооборот = Неопределено Тогда
			Результат.ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",	ПараметрыГенерацииПакета.НеЗапускатьВДокументооборот);
		КонецЕсли;
	Иначе
		Результат.ПолныйСоставПакета = Новый Структура;
	КонецЕсли;
	
	//Сгенерировать XML вложений
	ПараметрыГенерацииВложений	= Новый Структура("ОснованиеПакета, СоставПакета, Результат, ГрязныеИни", ОснованиеПакета, ПакетВходящий, Результат, ПараметрыГенерацииПакета.ГрязныеИни);
	РезультатГенерации			= СгенерироватьВложенияВПакет(ПараметрыГенерацииВложений, Кэш);

	//Если явно задана ошибка, то заменим последнюю по основанию, если такая была.
	Если ПакетВходящий.Свойство("Ошибка") Тогда
		Результат.Ошибки.Вставить(ОснованиеПакета, МодульОбъектаКлиент().НовыйСбисИсключение(ПакетВходящий.Ошибка, "РаботаСДокументами1С.СгенерироватьПакет"));
	КонецЕсли;
	Результат.ПолныйСоставПакета.Вставить("Вложение", РезультатГенерации);
	
	Если	ПакетВходящий.Свойство("Конверт")
		Или	Результат.Ошибки.Количество() Тогда
		//Есть конверт, либо были ошибки, генерировать конверт не надо. Выходим.
		Возврат Результат;
	КонецЕсли;
	
	// если нет структуры конверта, то берем все с первого вложения	
	ОснованиеДляПакета = РезультатГенерации[0];
	Если ТипЗнч(ОснованиеДляПакета.Отправитель) = Тип("Структура") Тогда
		СтрНашаОрганизация = ОснованиеДляПакета.Отправитель;
	Иначе
		СтрНашаОрганизация = ОснованиеДляПакета.СтруктураФайла.Файл.Документ[ОснованиеДляПакета.Отправитель];
	КонецЕсли;
	Если ТипЗнч(ОснованиеДляПакета.Получатель) = Тип("Структура") Тогда
		СтрПолучатель = ОснованиеДляПакета.Получатель;
	Иначе
		СтрПолучатель = ОснованиеДляПакета.СтруктураФайла.Файл.Документ[ОснованиеДляПакета.Получатель];	
	КонецЕсли;
	ЗапретРедакций = ?(СтрПолучатель.Свойство("ЗапретРедакций"), СтрПолучатель.ЗапретРедакций, Ложь);
	СтрГрузополучатель = Неопределено;
	// Если грузополучатель является филиалом получателя, то получаетелем пакета ставим грузополучателя
	// Удалить, когда на онлайне появится данный функционал
	Если	ОснованиеДляПакета.Свойство("СтруктураФайла",					СтрГрузополучатель)
		И	СтрГрузополучатель.Файл.Документ.Свойство("Грузополучатель",	СтрГрузополучатель) Тогда
		ПолучательИНН				= ?(СтрПолучатель.Свойство("СвЮЛ") И СтрПолучатель.СвЮЛ.Свойство("ИНН"),
										СтрПолучатель.СвЮЛ.ИНН,
										?(СтрПолучатель.Свойство("СвФЛ") И СтрПолучатель.СвФЛ.Свойство("ИНН"), СтрПолучатель.СвФЛ.ИНН, "")); 
		ГрузополучательИНН			= ?(СтрГрузополучатель.Свойство("СвЮЛ")	И СтрГрузополучатель.СвЮЛ.Свойство("ИНН"),
										СтрГрузополучатель.СвЮЛ.ИНН,
										?(СтрГрузополучатель.Свойство("СвФЛ") и СтрГрузополучатель.СвФЛ.Свойство("ИНН"), СтрГрузополучатель.СвФЛ.ИНН, "")); 
		ПолучательКПП				= ?(СтрПолучатель.Свойство("СвЮЛ") И СтрПолучатель.СвЮЛ.Свойство("КПП"),
										СтрПолучатель.СвЮЛ.КПП,
										""); 
		ГрузополучательКПП			= ?(СтрГрузополучатель.Свойство("СвЮЛ") И СтрГрузополучатель.СвЮЛ.Свойство("КПП"),
										СтрГрузополучатель.СвЮЛ.КПП,
										"");  
		ПолучательКодФилиала		= ?(СтрПолучатель.Свойство("СвЮЛ") И СтрПолучатель.СвЮЛ.Свойство("КодФилиала"),
										СтрПолучатель.СвЮЛ.КодФилиала,
										?(СтрПолучатель.Свойство("СвФЛ") И СтрПолучатель.СвФЛ.Свойство("КодФилиала"), СтрПолучатель.СвФЛ.КодФилиала, "")); 
		ГрузополучательКодФилиала	= ?(СтрГрузополучатель.Свойство("СвЮЛ")	И СтрГрузополучатель.СвЮЛ.Свойство("КодФилиала"),
										СтрГрузополучатель.СвЮЛ.КодФилиала,
										?(СтрГрузополучатель.Свойство("СвФЛ") И СтрГрузополучатель.СвФЛ.Свойство("КодФилиала"), СтрГрузополучатель.СвФЛ.КодФилиала, "")); 
										
		// если на Получателе заполнен КодФилиала, а на Грузополучателе нет, или у Получателя установлено ИспользоватьКакПолучателя, то оставляем получателем Получателя
		КлючСтороны = КлючСтороныДляДопПараметров(СтрПолучатель, Новый Структура);
		Если Не (Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство("мСторона")
					И Кэш.ТекущийСеанс.РасчитанныеЗначения.мСторона.Получить(КлючСтороны) <> Неопределено
					И Кэш.ТекущийСеанс.РасчитанныеЗначения.мСторона[КлючСтороны].Получить("ИспользоватьКакПолучателя") = Истина)
				И (ПолучательИНН = ГрузополучательИНН И (ПолучательКПП <> ГрузополучательКПП 
					Или (ЗначениеЗаполнено(ГрузополучательКодФилиала) И ПолучательКодФилиала <> ГрузополучательКодФилиала))) Тогда 
			СтрПолучатель = СтрГрузополучатель;
		КонецЕсли;
	КонецЕсли;
	//UAA Добавляем код страны для отправляемых организаций.
	СтрНашаОрганизация	= сбисСкопироватьОбъектНаКлиенте(СтрНашаОрганизация);
	СтрПолучатель		= сбисСкопироватьОбъектНаКлиенте(СтрПолучатель);
	Если		СтрНашаОрганизация.Свойство("СвЮЛ")
		И	Не	СтрНашаОрганизация.СвЮл.Свойство("КодСтраны") Тогда
		СтрНашаОрганизация.СвЮЛ.Вставить("КодСтраны", "643");
	КонецЕсли;
	Если		СтрПолучатель.Свойство("СвЮЛ")
		И	Не	СтрПолучатель.СвЮл.Свойство("КодСтраны") Тогда
		СтрПолучатель.СвЮЛ.Вставить("КодСтраны", "643");
	КонецЕсли;
	Если ЗапретРедакций = Истина Тогда
		СтрПолучатель.Вставить("ЗапретРедакций", Истина);						
	Конецесли;
	
	Результат.ПолныйСоставПакета.Вставить("НашаОрганизация", 			СтрНашаОрганизация);
	Результат.ПолныйСоставПакета.Вставить("Контрагент", 				СтрПолучатель);
	Результат.ПолныйСоставПакета.Вставить("Ответственный", 				ОснованиеДляПакета.Ответственный);
	Результат.ПолныйСоставПакета.Вставить("Подразделение", 				ОснованиеДляПакета.Подразделение);	
	Результат.ПолныйСоставПакета.Вставить("Регламент", 					ОснованиеДляПакета.Регламент);
	Результат.ПолныйСоставПакета.Вставить("Тип", 						ПараметрыГенерацииПакета.Тип);
	Результат.ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",ПараметрыГенерацииПакета.НеЗапускатьВДокументооборот);
	Результат.ПолныйСоставПакета.Вставить("ДокументОснование",			ОснованиеДляПакета.ДокументОснование);
	Результат.ПолныйСоставПакета.Вставить("Примечание",					ОснованиеДляПакета.Примечание);
	Результат.ПолныйСоставПакета.Вставить("Сертификат",					ОснованиеДляПакета.Сертификат);
	Если ПараметрыГенерацииПакета.Свойство("Подтип") Тогда
		Результат.ПолныйСоставПакета.Вставить("Подтип", ПараметрыГенерацииПакета.Подтип);	
	КонецЕсли;
	Если ОснованиеДляПакета.Свойство("ДопПоля") Тогда   // alo ДопПоля
		Результат.ПолныйСоставПакета.Вставить("ДопПоля",	ОснованиеДляПакета.ДопПоля);
	КонецЕсли;
	Если ОснованиеДляПакета.Свойство("Провести") Тогда   // alo Провести
		Результат.ПолныйСоставПакета.Вставить("Провести",	ОснованиеДляПакета.Провести);
	КонецЕсли;
	
	ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(ОснованиеПакета, "Имя");
	
	Если ПакетВходящий.Свойство("ПользовательскийИдентификатор") Тогда 
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор", ПакетВходящий.ПользовательскийИдентификатор);
	ИначеЕсли		Результат.ПолныйСоставПакета.Свойство("Регламент",	РегламентНазвание) 
			И		РегламентНазвание.Свойство("Название",	РегламентНазвание) 
			И НЕ	ПараметрыГенерацииПакета.СтатусыРегламентов.Найти(РегламентНазвание) = Неопределено Тогда
		// Если вручную не назначен идентификатор и регламент подразумевает отдельное хранение статусов - guid выдается новый и не будет совпадать с guid документа			
		// Проверка, нет ли ранее сохраненного ид редакция
		фрм		= Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами, "", Кэш);
		ИдДок	= фрм.ПрочитатьПараметрыДокументаСБИС(ОснованиеПакета, Кэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек, РегламентНазвание + "ДокументСБИС_Ид", Кэш.Ини);
		//если первая отправка - новый ид
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор", ИмяДокумента + ":"+?( ЗначениеЗаполнено(ИдДок), ИдДок, Строка(Новый УникальныйИдентификатор) ) );
	ИначеЕсли НЕ Результат.ПолныйСоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		Результат.ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",ИмяДокумента+":"+строка(ОснованиеПакета.УникальныйИдентификатор()));	
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Функция - генерирует вложения в пакет на основании подготовленных данных
//
// Параметры:
//  ПараметрыГенерацииВложений	 - Структура	 - 
//		Пакет			- Структура - данные генерируемого пакета
//		ОснованиеПакета - ДокумнтСсылка	- основной документ пакета
//	Кэш							- Структура		- кэш обработки
//
// Возвращаемое значение:
//  Массив		- сгенерированные вложения для пакета
//
&НаКлиенте
Функция СгенерироватьВложенияВПакет(ПараметрыГенерацииВложений, Кэш)
	
	СписокВложенийВПакет = Новый Массив;
	Для Каждого Вложение Из ПараметрыГенерацииВложений.СоставПакета.Вложение Цикл
		Попытка
			ПараметрыГенерацииВложений.Вставить("Вложение", Вложение);
			НаборВложенийВПакет = СгенерироватьНаборВложенийВПакет(ПараметрыГенерацииВложений, Кэш);
			Для Каждого ВложениеДобавить Из НаборВложенийВПакет Цикл
				СписокВложенийВПакет.Добавить(ВложениеДобавить);
			КонецЦикла;
		Исключение
			ИнфоОбОшибке= ИнформацияОбОшибке();
			КлючОшибки	= ?(Вложение.Свойство("Документ1С"), Вложение.Документ1С, ПараметрыГенерацииВложений.ОснованиеПакета);
			ПараметрыГенерацииВложений.Результат.Ошибки.Вставить(КлючОшибки, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "РаботаСДокументами1С.СгенерироватьВложенияВПакет"));
		КонецПопытки;
	КонецЦикла;
	
	Если Кэш.ДопВложение.Количество() Тогда
		Для Каждого Вложение Из Кэш.ДопВложение Цикл
			СписокВложенийВПакет.Добавить(Вложение);
		Конеццикла;
	КонецЕсли;
	
	Если	Не СписокВложенийВПакет.Количество()
		И	Не ПараметрыГенерацииВложений.Результат.Ошибки.Количество() Тогда
		//Нет вложений и ошибок в явном виде. Значит это пустой пакет (не заполнены табличные части)
		ОшибкаПодготовки = МодульОбъектаКлиент().НовыйСбисИсключение
			(, "РаботаСДокументами1С.СгенерироватьВложенияВПакет", 
			726, 
			"Документ не сформирован", 
			"В документе " + Строка(ПараметрыГенерацииВложений.ОснованиеПакета) + " не заполнены табличные части. Электронный документ не сформирован.");
		ПараметрыГенерацииВложений.Результат.Ошибки.Вставить(ПараметрыГенерацииВложений.ОснованиеПакета, ОшибкаПодготовки);
	КонецЕсли;	

	Возврат СписокВложенийВПакет;

КонецФункции	

// Функция - генерирует набор вложений в пакет на основании подготовленных данных одного документа
//
// Параметры:
//  ПараметрыСгенерироватьВходящие	 - Структура	 - 
//		Вложение		- Структура - данные подготовленного вложения, на основании которого формируем вложения в пакет
//		Пакет			- Структура - данные генерируемого пакета
//		ОснованиеПакета - ДокумнтСсылка	- основной документ пакета
//	Кэш								- Структура		- кэш обработки
//
// Возвращаемое значение:
//  Массив - сгенерированные вложения на основании собранной структуры докумнта.
//
&НаКлиенте
Функция СгенерироватьНаборВложенийВПакет(ПараметрыСгенерироватьВходящие, Кэш)
	
	Если ГенераторВключенДляДокумента(Кэш, ПараметрыСгенерироватьВходящие.Вложение) Тогда
		Возврат МодульОбъектаКлиент().СформироватьВложенияГенератором(ПараметрыСгенерироватьВходящие, Новый Структура);
	Иначе
		Возврат МодульОбъектаКлиент().СформироватьВложенияПрочие(ПараметрыСгенерироватьВходящие, Новый Структура)		
	КонецЕсли;
		
КонецФункции

//формируем файлы по документам 1С
&НаКлиенте
Функция ОбработатьДанныеДокументов1С(Кэш, Контекст, СоставПакета, СоответствиеДокументДанные) Экспорт
	Для Каждого Элемент Из СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеДокумента = СоответствиеДокументДанные.Получить(Документ);
		Если ДанныеДокумента = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
		Контекст.Вставить("Документ",		Документ);
		Контекст.Вставить("ДокументДанные",	ДанныеДокумента.ДокументДанные);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент", "Документ_" + ИмяДокумента, "Документ_Шаблон", Кэш);
		Если Не фрм.ПрочитатьДокумент(Кэш,Контекст) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Функция заполняет структуру файла настроек данными из документа
Функция ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни, КэшПарам=Неопределено) Экспорт // alo Меркурий
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, СтруктураИниФайла);
	// << alo Меркурий
	Контекст.Ини.Вставить("Парам",Новый Структура("Значение,РассчитанноеЗначение","",Новый Структура));
	Если Не КэшПарам = Неопределено Тогда
		сбисСкопироватьСтруктуру(Контекст.Ини.Парам.РассчитанноеЗначение, КэшПарам);
	КонецЕсли;
	// alo Меркурий >>
	Контекст.Документ = Документ;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ГрязныйИни = ЗаполнимДаннымиДокументаСтруктуру(СтруктураИниФайла, Контекст, СписокДопустимыхТипов,КэшЗначенийИни,Новый Массив);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ГрязныйИни;
	
КонецФункции

// Функция заполняет структуру файла настроек данными из документа
&НаКлиенте
Функция ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, КэшЗначенийИни, СоставПакета, КэшПарам = Неопределено, Кэш = Неопределено) Экспорт	// alo Меркурий
	
	Если Кэш = Неопределено Тогда
		Кэш = МестныйКэш;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("КэшЗначенийИни, СоставПакета, КэшПарам", КэшЗначенийИни, СоставПакета, КэшПарам);
	
	ПолучитьДанныеДокументов1СНаКлиентеДо(Кэш, СоответствиеДокументДанные, ДопПараметры);
	
	НовоеСоответствие = ПолучитьДанныеДокументов1СНаСервере(СоответствиеДокументДанные, ДопПараметры);
	Для каждого КлючИЗначение Из СоответствиеДокументДанные Цикл
		ГряныйИни = НовоеСоответствие.Получить(КлючИЗначение.Ключ);
		
		Если ГряныйИни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеДокументДанные.Вставить(КлючИЗначение.Ключ, ГряныйИни);
	КонецЦикла;
	
	ПолучитьДанныеДокументов1СНаКлиентеПосле(Кэш, СоответствиеДокументДанные, ДопПараметры);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДокументов1СНаКлиентеДо(Кэш, СоответствиеДокументДанные, ДопПараметры)
	
	Перем СтруктураХэндлеров;
	Результат = Новый Соответствие;
	
	Для каждого Док из ДопПараметры.СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		Если СтруктураИниФайла.Свойство("handler_before_calc_client", СтруктураХэндлеров) Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Документ", Документ);
			ПараметрыВыполнения.Вставить("ВходящийКонтекст", СтруктураИниФайла.ВходящийКонтекст);
			
			ДопПараметрыХэндлера = Новый Структура;
			ДопПараметрыХэндлера.Вставить("Кэш", Кэш);
			ДопПараметрыХэндлера.Вставить("СтруктураХэндлеров", СтруктураХэндлеров);
			
			МодульОбъектаКлиент().ВыполнитьОбработчикиХэндлеровНаКлиенте(ПараметрыВыполнения, ДопПараметрыХэндлера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДокументов1СНаКлиентеПосле(Кэш, СоответствиеДокументДанные, ДопПараметры)

	Перем СтруктураХэндлеров;
	
	Для каждого Док из ДопПараметры.СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		Если СтруктураИниФайла.Свойство("handler_after_calc_client", СтруктураХэндлеров) Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Документ", Документ);
			ПараметрыВыполнения.Вставить("ГрязныйИни", СтруктураИниФайла);
			
			
			ДопПараметрыХэндлера = Новый Структура;
			ДопПараметрыХэндлера.Вставить("Кэш", Кэш);
			ДопПараметрыХэндлера.Вставить("СтруктураХэндлеров", СтруктураХэндлеров);
			
			ПараметрыВыполнения.Вставить("СтруктураХэндлеров", СтруктураХэндлеров);
			МодульОбъектаКлиент().ВыполнитьОбработчикиХэндлеровНаКлиенте(ПараметрыВыполнения, ДопПараметрыХэндлера);
			СтруктураИниФайла.Удалить("handler_after_calc_client");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументов1СНаСервере(Знач СоответствиеДокументДанные, ДопПараметры)
	
	Перем СтруктураХэндлеровДо, СтруктураХэндлеровПосле;
	Результат = Новый Соответствие;
	
	Для каждого Док из ДопПараметры.СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		Если СтруктураИниФайла.Свойство("handler_before_calc_client") Тогда
			СтруктураИниФайла.Удалить("handler_before_calc_client");
		КонецЕсли;
		
		Если СтруктураИниФайла.Свойство("handler_before_calc_server", СтруктураХэндлеровДо) Тогда
			ДопПараметрыХэндлера = Новый Структура;
			ДопПараметрыХэндлера.Вставить("Документ", Документ);
			ДопПараметрыХэндлера.Вставить("ГрязныйИни", СтруктураИниФайла);
			
			МодульОбъектаСервер().ВыполнитьОбработчикиХэндлеровНаСервере(СтруктураХэндлеровДо, ДопПараметрыХэндлера);
			СтруктураИниФайла.Удалить("handler_before_calc_server");		
		КонецЕсли;
		
		ГрязныйИни = ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, ДопПараметры.КэшЗначенийИни, ДопПараметры.КэшПарам);  // alo Меркурий
		
		Если СтруктураИниФайла.Свойство("handler_after_calc_server", СтруктураХэндлеровПосле) Тогда
			ДопПараметрыХэндлера = Новый Структура;
			ДопПараметрыХэндлера.Вставить("Документ", Документ);
			ДопПараметрыХэндлера.Вставить("ГрязныйИни", ГрязныйИни);
			
			МодульОбъектаСервер().ВыполнитьОбработчикиХэндлеровНаСервере(СтруктураХэндлеровПосле, ДопПараметрыХэндлера);
			ГрязныйИни.Удалить("handler_after_calc_server");
		КонецЕсли;
		
		Результат.Вставить(Документ,  Новый Структура("ИмяИни, ДокументДанные",ЭлементСоответствия.ИмяИни,ГрязныйИни));
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

