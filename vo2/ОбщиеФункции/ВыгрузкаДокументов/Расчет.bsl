
&НаСервереБезКонтекста
Функция ЗаполнимДаннымиДокументаСтруктуру(Раздел, знач Контекст = "", СписокДопустимыхТипов,КэшЗначенийИни, Путь)
	Перем ЗначениеЭлемента;
	// Функция рекурсивно заполняет структуру файла настроек данными из документа
	Результат = Новый Структура;
	Контекст.Вставить("Путь", Путь);
	Если Не Контекст.Свойство("ТекущийРазделИни") Тогда
		Контекст.Вставить("ТекущийРазделИни", Контекст.Ини);
	КонецЕсли;
	Для Каждого Элемент из Раздел Цикл
		Если		Лев(Элемент.Ключ, 4) = "сбис"// служебные параметры не получаем
			Или	Не	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда   
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Значение.Свойство("Значение", ЗначениеЭлемента) Тогда
			Если Элемент.Значение.Свойство("Кэш") и ЗначениеЗаполнено(Элемент.Значение.Кэш) Тогда
				Если Элемент.Значение.Кэш = "Организация" Тогда
					ИНН = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_ИНН", Контекст));
					КПП = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_КПП", Контекст));
					Если КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Элемент.Ключ) Тогда
						ЗначениеПараметра = КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Элемент.Ключ];	
					Иначе
						ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
						Если Лев(ЗначениеПараметра,1)<>"!" Тогда
							КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Элемент.Ключ, ЗначениеПараметра);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если КэшЗначенийИни.ТекущийПакет.Свойство(Элемент.Значение.Кэш+"_"+Элемент.Ключ) Тогда
						ЗначениеПараметра = КэшЗначенийИни.ТекущийПакет[Элемент.Значение.Кэш+"_"+Элемент.Ключ];	
					Иначе
						ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
						Если Лев(ЗначениеПараметра,1)<>"!" Тогда
							КэшЗначенийИни.ТекущийПакет.Вставить(Элемент.Значение.Кэш+"_"+Элемент.Ключ, ЗначениеПараметра);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли
			Иначе
				ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);	
			КонецЕсли;
			Если СписокДопустимыхТипов.НайтиПоЗначению(ТипЗнч(ЗначениеПараметра)) <> Неопределено Тогда
				Результат.Вставить(Элемент.Ключ, ЗначениеПараметра);
				Контекст.ТекущийРазделИни[Элемент.Ключ].Вставить("РассчитанноеЗначение", ЗначениеПараметра);
			КонецЕсли;
			
			// Если это табличная часть без отбора и в значениии получилось неопределено, то возвращаем пустой массив. 
			// Получается, если нет такой таб части в документе. Например для счета в УТ11, если основание счета Акт, то нет ТЧ Товары, а если Реализация, то нет ТЧ Услуги.
			Если Элемент.Значение.Свойство("Тип") и Элемент.Значение.Тип="ТабличнаяЧасть" и НЕ Элемент.Значение.Свойство("Отбор") и (ЗначениеПараметра=Неопределено или ЗначениеПараметра="") Тогда
				Возврат Новый Массив;	
			КонецЕсли;
			
			Если (Элемент.Значение.Свойство("Тип") и Элемент.Значение.Тип = "ТабличнаяЧасть" и (Найти(строка(ЗначениеПараметра),"ТабличнаяЧасть")>0 или Найти(строка(ЗначениеПараметра),"TabularSection")>0)) или ТипЗнч(ЗначениеПараметра)=Тип("Массив") Тогда
				Если Элемент.Значение.Свойство("КолонкиГруппировок") и Элемент.Значение.Свойство("КолонкиСуммирования")
					и (Элемент.Значение.КолонкиГруппировок<>"" или Элемент.Значение.КолонкиСуммирования<>"")
					и НЕ ТипЗнч(ЗначениеПараметра)=Тип("Массив") Тогда
					ТабЧасть = ЗначениеПараметра.Выгрузить();
					ТабЧасть.Свернуть(Элемент.Значение.КолонкиГруппировок, Элемент.Значение.КолонкиСуммирования);
					ЗначениеПараметра = ТабЧасть;
				КонецЕсли;
				
				Если Элемент.Значение.Свойство("Сортировать") Тогда
					если типЗнч(ЗначениеПараметра)=Тип("ТаблицаЗначений") тогда
						ЗначениеПараметра.Сортировать(Элемент.Значение.Сортировать);
					иначе
						ТабЧасть = ЗначениеПараметра.Выгрузить();
						ТабЧасть.Сортировать(Элемент.Значение.Сортировать);
						ЗначениеПараметра = ТабЧасть;
					конецесли
				конецесли;
				
				МассивСтрок = Новый Массив;				
				ТекущийРаздел = Новый Структура;
				ПараметрыКопированияСтрок = Новый Структура("КлючиНеКопировать", Новый Массив);
				ПараметрыКопированияСтрок.КлючиНеКопировать.Добавить("РассчитанноеЗначение");
				
				ЗначениеКопия = Элемент.Значение;
				Раздел[Элемент.Ключ] = Неопределено;
				СбисСкопироватьСтруктуруСПараметрами(ТекущийРаздел, Контекст.ТекущийРазделИни, ПараметрыКопированияСтрок);
				Для Каждого СтрокаТаблЧасти Из ЗначениеПараметра Цикл
					//Подготавливаем структуру для строки документа
					Контекст.СтрТабл = СтрокаТаблЧасти; //Записываем в контекст строку документа
					СтруктураСтроки = ЗаполнимДаннымиДокументаСтруктуру(Раздел, Контекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь); 
					МассивСтрок.Добавить(СтруктураСтроки);
					
					Контекст.ТекущийРазделИни.Очистить();
					СбисСкопироватьСтруктуруСПараметрами(Контекст.ТекущийРазделИни, ТекущийРаздел, ПараметрыКопированияСтрок);
					//Контекст.ТекущийРазделИни = СбисСкопироватьОбъектСПараметрами(ТекущийРаздел, ПараметрыКопированияСтрок);
					//сбисУдалитьРассчитанныеЗначения(Контекст.ТекущийРазделИни);  // очищаем рассчитанные значения для правильного расчета следующей строки
				КонецЦикла;
				Раздел[Элемент.Ключ] = ЗначениеКопия;
				Возврат МассивСтрок;
			КонецЕсли;
		Иначе
			Путь.Добавить(Элемент.Ключ);
			Если Лев(Элемент.Ключ, 5) = "Выбор" Тогда
				//ТекущийРазделИни = Контекст.ТекущийРазделИни[Элемент.Ключ];
				ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, Путь, ТекущийРазделИни, ТекущийКлючРаздела",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.Путь, Контекст.ТекущийРазделИни, Элемент.Ключ);
				РассчитатьЗначениеВыбора(ВременныйКонтекст, Элемент.Значение, Результат, СписокДопустимыхТипов, КэшЗначенийИни, Путь);
			Иначе
				Если НЕ (Результат.Свойство(Элемент.Ключ) и ТипЗнч(Результат[Элемент.Ключ]) = Тип("Структура")) Тогда
					Результат.Вставить(Элемент.Ключ, Новый Структура);
				КонецЕсли;	
				Для Каждого ПодРаздел из Элемент.Значение Цикл //Выбираем подузлы
					Если Не ПодРаздел.Значение.Количество() Тогда
						Продолжить;
					ИначеЕсли ПодРаздел.Значение.Свойство("Значение") Тогда  // если структура содержит на верхнем уровне узлы, которые нужно рассчитать, то передаем всю эту структуру в функцию рекурсивно и прерываем цикл по подразделам
						ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.ТекущийРазделИни[Элемент.Ключ]);
						Результат[Элемент.Ключ] = ЗаполнимДаннымиДокументаСтруктуру(Элемент.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
						Прервать;
					Иначе   //   если есть подструктуры, то делаем расчет для каждого подраздела
						Путь.Добавить(ПодРаздел.Ключ);
						ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.ТекущийРазделИни[Элемент.Ключ][ПодРаздел.Ключ]);
						ЗначениеПараметра = ЗаполнимДаннымиДокументаСтруктуру(ПодРаздел.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
						Результат[Элемент.Ключ].Вставить(ПодРаздел.Ключ, ЗначениеПараметра);
						Путь.Удалить(Путь.Количество()-1);
					КонецЕсли;
				КонецЦикла;								
			КонецЕсли;
			Путь.Удалить(Путь.Количество()-1);
		КонецЕсли;
	КонецЦикла;	
	Возврат Результат;
КонецФункции	

//Отдельная процедура для лучшей читабельности. Рассчет выбора при выгрузке
&НаСервереБезКонтекста
Процедура РассчитатьЗначениеВыбора(Контекст, ЗначениеУзлаИни, Результат, СписокДопустимыхТипов, КэшЗначенийИни, Путь)
	Перем ВыбранныйУзел, ЛокальныйТекущийРазделИни, ТипПодраздела, ИндексПозицииПути;
	ГлобальныйРазделВыбора		= Контекст.ТекущийРазделИни;
	Контекст.ТекущийРазделИни	= Контекст.ТекущийРазделИни[Контекст.ТекущийКлючРаздела];
	Контекст.Удалить("ТекущийКлючРаздела");
	
	Для Каждого ПодРазделВыбор Из ЗначениеУзлаИни Цикл //Выбираем подузлы
		Путь.Добавить(ПодРазделВыбор.Ключ);
		Если ТипЗнч(ПодРазделВыбор.Значение) = Тип("Структура") и ПодРазделВыбор.Значение.Количество() <> 0 Тогда													
			Если ПодРазделВыбор.Значение.Свойство("Условие") = Истина Тогда															
				Путь.Добавить("Условие");
				РезультатУсловия = РассчитатьЗначениеНаСервере("Условие", Контекст);
				Путь.Удалить(Путь.Количество() - 1);
				Если РезультатУсловия = Истина Тогда									
					ВыбранныйУзел = ПодРазделВыбор;									
					Путь.Удалить(Путь.Количество() - 1);
					Прервать;
				КонецЕсли;								
			Иначе
				ВыбранныйУзел = ПодРазделВыбор;
			КонецЕсли;								
		КонецЕсли;
		Путь.Удалить(Путь.Количество()-1);
	КонецЦикла;	
	Если ВыбранныйУзел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Выбираем подузлы
	ИндексВПутиИсходный = Путь.Количество() -1;
	Путь.Добавить(ПодРазделВыбор.Ключ);
	Для Каждого ПодЭлемент Из ВыбранныйУзел.Значение Цикл 							
		Путь.Добавить(ПодЭлемент.Ключ);
		Если (Нрег(ПодЭлемент.Ключ) = "условие") Тогда
		ИначеЕсли Лев(ПодЭлемент.Ключ, 5) = "Выбор" Тогда
			ТекущийРазделИни = Контекст.ТекущийРазделИни[ПодРазделВыбор.Ключ];
			ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни, ТекущийКлючРаздела, Путь",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, ТекущийРазделИни, ПодЭлемент.Ключ, Путь);
			РассчитатьЗначениеВыбора(ВременныйКонтекст, ПодЭлемент.Значение, Результат, СписокДопустимыхТипов, КэшЗначенийИни, Путь);
		ИначеЕсли		ТипЗнч(ПодЭлемент.Значение) = Тип("Структура")
				И Не	ПодЭлемент.Значение.Свойство("Значение") Тогда
			Если Не Результат.Свойство(ПодЭлемент.Ключ) Тогда//Проверим наличие узла. Если есть, не добавляем.
				Результат.Вставить(ПодЭлемент.Ключ, Новый Структура);
			КонецЕсли;
			ПервыйУзел = Истина;
			Для Каждого ПодРаздел Из ПодЭлемент.Значение Цикл //Выбираем подузлы
				Если Лев(ПодРаздел.Ключ, 4) = "сбис" Тогда
					Продолжить;
				ИначеЕсли	ПодРаздел.Значение.Количество() = 0
					Или	(	Контекст.ТекущийРазделИни.Свойство(ПодЭлемент.Ключ)
						И	Контекст.ТекущийРазделИни[ПодЭлемент.Ключ].Свойство(ПодРаздел.Ключ)) Тогда
					//Узел есть в текущем контексте(сохранение приоритета пользовательской ини)
				ИначеЕсли	ПервыйУзел//Убрать проверку на первый узел
						И	ПодРаздел.Значение.Свойство("Тип", ТипПодраздела)
						И	(	НРег(ТипПодраздела) = "запрос"
							Или	НРег(ТипПодраздела) = "табличнаячасть") Тогда
					ТекущийРазделИни = Контекст.ТекущийРазделИни;
					Для СбисИндексПути = Путь.Количество() - 2 По Путь.Количество() - 1 Цикл
						ТекущийРазделИни = ТекущийРазделИни[Путь[СбисИндексПути]];
					КонецЦикла;
					ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, ТекущийРазделИни);
					Результат[ПодЭлемент.Ключ] = ЗаполнимДаннымиДокументаСтруктуру(ПодЭлемент.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
					//Первый элемент это описание ТЧ
					Прервать;
				Иначе
					Путь.Добавить(ПодРаздел.Ключ);
					ТекущийРазделИни = Контекст.ТекущийРазделИни;
					Для СбисИндексПути = Путь.Количество() - 3 По Путь.Количество() - 1 Цикл
						ТекущийРазделИни = ТекущийРазделИни[Путь[СбисИндексПути]];
					КонецЦикла;
					ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, ТекущийРазделИни);
					ЗначениеПараметра = ЗаполнимДаннымиДокументаСтруктуру(ПодРаздел.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
					Результат[ПодЭлемент.Ключ].Вставить(ПодРаздел.Ключ, ЗначениеПараметра);
					Путь.Удалить(Путь.Количество()-1);
				КонецЕсли;
				ПервыйУзел = Ложь;
			КонецЦикла;
		Иначе
			//Если значение узла занулено, то выбор срабатывает с заменой зануленного значения.
			Если	Контекст.ТекущийРазделИни.Свойство(ПодЭлемент.Ключ, ЛокальныйТекущийРазделИни)
				И	ЛокальныйТекущийРазделИни.Свойство("Значение")	И	ЛокальныйТекущийРазделИни.Значение = "''" Тогда
				Контекст.ТекущийРазделИни.Удалить(ПодЭлемент.Ключ);
			КонецЕсли;
			Если Не ГлобальныйРазделВыбора.Свойство(ПодЭлемент.Ключ) Тогда 
				Результат.Вставить(ПодЭлемент.Ключ, РассчитатьЗначениеНаСервере(ПодЭлемент.Ключ, Контекст));
				//Найдем обсчитываем раздел в структуре. Заполним то, что посчитано и вынесем его на требуемые уровень выбора для обсчета связанных параметров в продолжении обсчёта.
				УзелИзПодразделаДляДобавления = Контекст.ТекущийРазделИни;
				Для ИндексПоискаУзлаИни = ИндексВПутиИсходный+1 По Путь.Количество() - 1 Цикл
					Если УзелИзПодразделаДляДобавления.Свойство("Значение") Тогда
						Прервать;//Если есть Значение, то это обсчитываемый узел
					КонецЕсли;
					УзелИзПодразделаДляДобавления = УзелИзПодразделаДляДобавления[Путь[ИндексПоискаУзлаИни]];
				КонецЦикла;
				УзелИзПодразделаДляДобавления.Вставить("РассчитанноеЗначение", Результат[ПодЭлемент.Ключ]);
				ГлобальныйРазделВыбора.Вставить(ПодЭлемент.Ключ, УзелИзПодразделаДляДобавления);
			КонецЕсли;
		КонецЕсли;
		Путь.Удалить(Путь.Количество()-1);
	КонецЦикла;
	Путь.Удалить(Путь.Количество()-1);
	
КонецПроцедуры

// Функция рассчитывает значение параметра из файла настроек на сервере.	
// Используется при заполнении структуры файла настроек данными из документа.
&НаСервереБезКонтекста
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст) Экспорт
	ПервыйСимвол = Лев(Параметр,1);
	Если ПервыйСимвол="[" или ПервыйСимвол="'" Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			ПараметрИни = НайтиПараметрВИерархическойСтруктуре(Параметр, Контекст);
			Попытка
				ЗнПер=ПараметрИни.Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки
		Иначе
			Попытка
				ПараметрИни = Контекст.Ини[Параметр]; 
				ЗнПер=Контекст.Ини[Параметр].Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если ПараметрИни.Свойство("РассчитанноеЗначение") Тогда
			Возврат ПараметрИни.РассчитанноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗнПер)<>Тип("Строка") Тогда  // Если в ЗнПер уже лежит нужное значение
		Возврат ЗнПер;
	КонецЕсли;
	ПозТочки = Найти(ЗнПер, ".");
	ПервыйСимвол = Лев(ЗнПер,1);
	Если ПервыйСимвол="[" Тогда  // ссылка на объект (другую переменную)
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			СтрОбъектаИни = НайтиПараметрВИерархическойСтруктуре(СтрОбъекта, Контекст);
		Иначе
			СтрОбъектаИни = Контекст.Ини[СтрОбъекта];
		КонецЕсли;
		Если СтрОбъектаИни<>Неопределено и СтрОбъектаИни.Свойство("РассчитанноеЗначение") Тогда
			Объект1С=СтрОбъектаИни.РассчитанноеЗначение;
		Иначе	
			Объект1С=РассчитатьЗначениеНаСервере(СтрОбъекта,Контекст);
		КонецЕсли;
		ТипОбъект1С = ТипЗнч(Объект1С);
		Если ПозТочки > 0 Тогда
			Если ТипОбъект1С = Тип("Строка") и Найти(Объект1С, "{") Тогда  // Переменная ссылается на результат функции, значит будем рассчитывать позже на клиенте, в функции РассчитатьЗначение
				Возврат ЗнПер;
			КонецЕсли;
			ИмяРек=сред(ЗнПер,ПозТочки + 1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это строка табличной части
			Если СтрОбъектаИни.Свойство("Тип") и (СтрОбъектаИни.Тип="ТабличнаяЧасть" или (СтрОбъектаИни.Тип="Запрос" и СтрОбъектаИни.Свойство("Выбрать") и нрег(СтрОбъектаИни.Выбрать)="все")) и ТипОбъект1С <> Тип("Структура") и Объект1С <> Неопределено Тогда
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Если ИмяРек = "Метаданные" Тогда // Никита
						Объект1С = Объект1С.Метаданные();
						// alo <<
					ИначеЕсли ИмяРек = "УникальныйИдентификатор" Тогда 
						Объект1С = строка(Объект1С.УникальныйИдентификатор());
						// >>alo
					ИначеЕсли ИмяРек = "ПустаяСсылка" Тогда 
						Объект1С = Объект1С.ПустаяСсылка();
					Иначе						
						Объект1С = Объект1С[ИмяРек];
					КонецЕсли;
				КонецЕсли;
				
				//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
				Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип="ТабличнаяЧасть" Тогда
					Если ПараметрИни.Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из ПараметрИни.Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						
						Если Отбор.Свойство("НомерСтроки") Тогда
							СтрокиТЧ = Новый Массив;
							СтрокиТЧ.Добавить(Объект1С.Получить(Отбор.НомерСтроки));
						Иначе
							СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						КонецЕсли;
						ВыбратьВсе = Ложь;
						МассивСтрокТЧ = Новый массив;
						Если ПараметрИни.Свойство("Выбрать") и нрег(ПараметрИни.Выбрать) = "все" Тогда
							ВыбратьВсе = Истина;
						КонецЕсли;
						
						Если СтрокиТЧ.Количество()>0 и ПараметрИни.Свойство("Упорядочить") и ЗначениеЗаполнено(ПараметрИни.Упорядочить) Тогда
							Упорядочить = РассчитатьЗначениеНаСервере(ПараметрИни.Упорядочить, Контекст);
							СтрокиТЧ = Объект1С.Выгрузить(СтрокиТЧ);
							СтрокиТЧ.Сортировать(Упорядочить);
						КонецЕсли;
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Если Не ВыбратьВсе Тогда
								Возврат СтруктураСтрокиТЧ;
							Иначе
								МассивСтрокТЧ.Добавить(СтруктураСтрокиТЧ);
							КонецЕсли;
						КонецЦикла;
						Если МассивСтрокТЧ.Количество()>0 Тогда
							Возврат МассивСтрокТЧ;
						КонецЕсли;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Формат") Тогда 
				Объект1С = Формат(Объект1С,	ПараметрИни.Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли ПервыйСимвол="'" Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
			возврат Число(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Дата" Тогда
			возврат сбисСтрокаВДату(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Запрос" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст=Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
			КонецЕсли;
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если ПараметрИни.Свойство("Выбрать") и нрег(ПараметрИни.Выбрать) = "все" Тогда
				РезультатМассив = Новый Массив;
				Пока Выборка.Следующий() Цикл
					РезультатСтруктура = Новый Структура;
					Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
						РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
					КонецЦикла;
					РезультатМассив.Добавить(РезультатСтруктура);
				КонецЦикла;
				Возврат РезультатМассив;
			Иначе
				Если Выборка.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				РезультатСтруктура = Новый Структура;
				Выборка.Следующий();
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
				Возврат РезультатСтруктура;
			КонецЕсли;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли ПервыйСимвол="{" Тогда 
		Если ПараметрИни.Свойство("Кэш") и ЗначениеЗаполнено(ПараметрИни.Кэш) Тогда
			ЗнПер = "!" + ПараметрИни.Кэш + ЗнПер;
		КонецЕсли;
		Если ПараметрИни.Свойство("Формат") Тогда
		
			ВремПер = Новый Структура();
			ВремПер.Вставить("Значение", ЗнПер);
			ВремПер.Вставить("Формат", ПараметрИни.Формат);
			
			ЗнПер = ВремПер;
		КонецЕсли;
		Возврат ЗнПер;
	ИначеЕсли ПервыйСимвол="^" Тогда  // формула, которую необходимо вычислить
		// alo <<
		ЗнПер=сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст);
		Если ПараметрИни.Свойство("Формат") Тогда 
			ЗнПер = Формат(ЗнПер, ПараметрИни.Формат);
		КонецЕсли;
		Возврат ЗнПер;
		// >> alo
	ИначеЕсли ПозТочки>0 Тогда
		ПервыйСимвол = Лев(ЗнПер, ПозТочки-1);
		
		Если ПервыйСимвол = "Справочник" Тогда	// ссылка на справочник
			ИмяРек = сред(ЗнПер,12);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Возврат РасчитатьОтборНаСервере(Контекст, ПараметрИни, Новый Структура("Тип, Объект", ПервыйСимвол, ИмяРек));
			Иначе
				Возврат Справочники[ИмяРек];
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "Документ" Тогда // ссылка на документ	
			ИмяРек=сред(ЗнПер,10);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "ЗаписьСправочника" Тогда // ссылка на запись справочника 
			ИмяРек=сред(ЗнПер,21);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "Константа" Тогда	// константа
			ИмяРек=сред(ЗнПер,11);
			возврат Константы[ИмяРек].Получить();
		ИначеЕсли ПервыйСимвол = "Перечисление" Тогда	// значение перечисления
			ИмяРек=сред(ЗнПер,14);
			возврат Перечисления[ИмяРек];
		ИначеЕсли ПервыйСимвол = "РегистрыСведений" Тогда	// ссылка на регистр сведений
			ИмяРек=сред(ЗнПер,18);
			
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если ПараметрИни.Свойство("СрезПоследних") Тогда
				
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеНаСервере(ПараметрИни.СрезПоследних, Контекст);
				НаборЗаписей = РегистрыСведений[ИмяРек].СрезПоследних(ДатаСреза,Отбор);
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Запись = НаборЗаписей.Получить(0);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ *
				|ИЗ
				|   РегистрСведений."+ИмяРек+" КАК Рег
				|ГДЕ
				| ";
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				КонецЦикла;
				Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
				НаборЗаписей = Запрос.Выполнить().Выбрать();
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				НаборЗаписей.Следующий();
				Запись = НаборЗаписей;
				//НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
				//
				//Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				//	
				//	НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				//КонецЦикла;
				//НаборЗаписей.Прочитать();
			КонецЕсли;
			
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			Измерения = Метаданные.РегистрыСведений[ИмяРек].Измерения;	
			Для Каждого Измерение Из Измерения Цикл 
				Результат.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
			КонецЦикла;
			СтандартныеРеквизиты = Метаданные.РегистрыСведений[ИмяРек].СтандартныеРеквизиты;	
			Попытка
				Для Каждого Реквизит Из СтандартныеРеквизиты Цикл 
					Результат.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
				КонецЦикла;
			Исключение
			КонецПопытки;
			возврат Результат;
			// +tda//2018.07.05//
		ИначеЕсли ПервыйСимвол = "РегистрыНакопления" Тогда	// ссылка на регистр накопления
			ИмяРек=сред(ЗнПер,20);
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если ПараметрИни.Свойство("СрезОстатка") Тогда
				
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеНаСервере(ПараметрИни.СрезОстатка, Контекст);
				НаборЗаписей = РегистрыНакопления[ИмяРек].Остатки(ДатаСреза,Отбор);
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Запись = НаборЗаписей.Получить(0);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ *
				|ИЗ
				|   РегистрНакопления."+ИмяРек+" КАК Рег
				|ГДЕ
				| ";
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				КонецЦикла;
				Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
				НаборЗаписей = Запрос.Выполнить().Выбрать();
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				НаборЗаписей.Следующий();
				Запись = НаборЗаписей;
			КонецЕсли;
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыНакопления[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			Измерения = Метаданные.РегистрыНакопления[ИмяРек].Измерения;	
			Для Каждого Измерение Из Измерения Цикл 
				Результат.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
			КонецЦикла;
			СтандартныеРеквизиты = Метаданные.РегистрыНакопления[ИмяРек].СтандартныеРеквизиты;	
			Попытка
				Для Каждого Реквизит Из СтандартныеРеквизиты Цикл 
					Результат.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
				КонецЦикла;
			Исключение
			КонецПопытки;
			возврат Результат;
			//-tda	
		ИначеЕсли ПервыйСимвол = "ПланыВидовХарактеристик" Тогда	// ссылка на план видов характеристик
			ИмяРек=сред(ЗнПер,25);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовХарактеристик[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовХарактеристик."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "ПланыВидовРасчета" Тогда // ссылка на план видов Расчета
			ИмяРек=сред(ЗнПер,19);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовРасчета[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовРасчета."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "ПланыСчетов" Тогда	// alo ПланыСчетов
			ИмяРек=сред(ЗнПер,13);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				Выборка = ПланыСчетов[ИмяРек].Выбрать(,Отбор);
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				возврат ПланыСчетов[ИмяРек];
			КонецЕсли;
		КонецЕсли;
		возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ЗнПер) Тогда //Возможно, это имя узла в котором должно лежать наше значение
		Возврат РассчитатьЗначениеНаСервере(ЗнПер, Контекст);
	КонецЕсли;
	
КонецФункции

//Универсальная функция для расчета отбора запросом
&НаСервереБезКонтекста
Функция РасчитатьОтборНаСервере(Контекст, ПараметрИни, ОписаниеОбъектаОтбора)
	Отбор = Новый Структура;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектОтбора.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	{0}.{1} КАК ОбъектОтбора
	                      |ГДЕ
						  |	");
	Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст,"{0}",ОписаниеОбъектаОтбора.Тип),"{1}",ОписаниеОбъектаОтбора.Объект);					  
	Для Каждого Элемент Из ПараметрИни.Отбор Цикл
		РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	КонецЦикла;
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-4);
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если Не РезультатЗапроса.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат РезультатЗапроса.Ссылка;
КонецФункции

//Заполняет отбор в запрос
&НаСервереБезКонтекста
Процедура РасчитатьОтборНаСервере_ДобавитьОтбор(Контекст, Запрос, Элемент)
	Запрос.Параметры.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
	Запрос.Текст = Запрос.Текст + СтрЗаменить(	"ОбъектОтбора.{0} = &{0}
												|	И	", "{0}", Элемент.Ключ);
КонецПроцедуры

