
// Процедура запускает отправку документов по отмеченным записям	
&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	ОбработчикЗавершить = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ОтправитьВыбранныеДокументы", ЭтаФорма);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(1, "С текущей страницы");
	Кнопки.Добавить(2, "Все документы");
	Если ОтметитьВсе = Истина И ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикЗавершить, "Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(Кнопки[0], ОбработчикЗавершить);
	КонецЕсли;
КонецПроцедуры

// Процедура - Отправить выбранные документы после диалога
//
// Параметры:
//  Ответ						 - 1 С текущей страницы 2 Все документы
//  СбисДополнительныеПараметры	 - Не используется	 - 
//
&НаКлиенте
Процедура ОтправитьВыбранныеДокументы(Ответ, СбисДополнительныеПараметры=Неопределено) Экспорт
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
		
	МассивПакетов = Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
	
	СбисПоказатьСостояние("Подготовка к отправке");
	Для Каждого СтрокаВыбрана Из СписокОтмеченныхДокументов Цикл
		СтрокаДобавить = Новый Структура("СоставПакета", СтрокаВыбрана.Значение.СоставПакета); 
		СтрокаДобавить.Вставить("Статус",СтрокаВыбрана.Значение.Статус);  
		ДокументСсылка = СтрокаВыбрана.Значение.Документы1С[0].Значение;   
		Если Не СтрокаВыбрана.Значение.Статус = -1 Тогда

			Если	ЗначениеЗаполнено(СтрокаВыбрана.Значение.ИдСБИС) Тогда

				//У документа есть статус и Ид пакета в выборке
				ИдПакета = СтрокаВыбрана.Значение.ИдСБИС;  
				
			Иначе
				
				//В запросе отсутствует выборка Ид пакета, делать по каждой строке отдельно, или добавить в запрос списка документов в ини
				фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("СбисПрочитатьЗначениеСвойстваДокумента", Кэш.ФормаРаботыСоСтатусами);
				
				ПараметрыЧтенияСвойства	= Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", ДокументСсылка);
				ИдПакета = фрм.СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства);  

			КонецЕсли;
			
			//Если Ид есть в выборке, но он может быть составным, с ИД аккаунта.
			МодульСтатусов = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("СбисРазобратьИдентификатор", Кэш.ФормаРаботыСоСтатусами);
			
			Если Не МодульСтатусов = Ложь Тогда
				ОписаниеИд	= МодульСтатусов.СбисРазобратьИдентификатор(ИдПакета);
				ИдПакета	= ОписаниеИд.ИдДокумента;
			КонецЕсли;
			
			СтрокаДобавить.Вставить("ИдПакета", ИдПакета);
		КонецЕсли;
		
		МассивПакетов.Добавить(СтрокаДобавить);
	КонецЦикла;
	СбисСпрятатьСостояние();

	МодульОбъектаКлиент().ЗапуститьМассовуюОтправкуДокументов(МассивПакетов, Новый Структура("ИмяРеестра", Кэш.Текущий.ТипДок));
	
КонецПроцедуры

Процедура ЗаполнитьСуммыДокументов1С(Суммы1С, Документ1С, ИмяРеквизитаСуммы)
	//Процедура заполняет суммы документов 1С в структуре по типам документов
	Тип = Документ1С.Метаданные().Имя;
	Название = Документ1с.Метаданные().Синоним;
	Если Не Суммы1С.Свойство(Тип) Тогда
		Суммы1С.Вставить(Тип, Новый Структура("Название,Сумма",Название,0));
	КонецЕсли;
	Попытка
		Сумма = Документ1С[ИмяРеквизитаСуммы];
	Исключение
		Сумма=0;
	КонецПопытки;
	Суммы1С[Тип].Сумма = Суммы1С[Тип].Сумма+Сумма;								
КонецПроцедуры
&НаКлиенте
&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	// Процедура запускает обработку служебных документов и получение статусов	
	Кэш.Интеграция.ОбработкаСлужебныхДокументов(Кэш);
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ТипДокумента = Кэш.Текущий.ТипДок;
	ДопПараметрыФильтра = Новый Структура;
	фрм = сбисНайтиФормуФункции("сбисПараметрыСписокИзменений","Раздел_"+ТекущийРаздел+"_"+ТипДокумента,"Раздел_"+ТекущийРаздел+"_Шаблон", Кэш);
	Если фрм <> ложь Тогда
		ДопПараметрыФильтра = фрм.сбисПараметрыСписокИзменений(Кэш);
	КонецЕсли;
	СбисОбновитьИзмененияПоДокументам(Новый Структура("ДополнительныеПараметрыФильтра", ДопПараметрыФильтра));
	//Кэш.Интеграция.ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра);
	ОбновитьКонтент();
	Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры

&НаКлиенте
Процедура СбисОбновитьИзмененияПоДокументам(ПараметрыОбновленияВходящие)
	
	РезультатДействия		= МодульОбъектаКлиент().НовыйРезультатДействия(Новый Структура("Тип", "ОбновлениеСтатусов"), Новый Структура);
	ОбработчикЗавершения	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисОбновитьИзмененияПоДокументам_ПоказатьРезультат", ЭтаФорма, Кэш); 
	
	Попытка
		ПараметрыОбновленияНовые = Новый Структура("РезультатДействия, ДополнительныеПараметрыФильтра, ОбработкаПрерывания, ОбработчикЗавершения", РезультатДействия, ПараметрыОбновленияВходящие.ДополнительныеПараметрыФильтра, Истина, ОбработчикЗавершения);
		МодульОбъектаКлиент().ОбновитьИзмененияПоДокументамСбис(ПараметрыОбновленияНовые, Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().СообщитьСбисИсключение(МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ГлавноеОкно.СбисОбновитьСтатусы"));
	КонецПопытки;
	
	//МодульОбъектаКлиент().ОтключитьОтложенноеДействие(Новый Структура("ОтложенноеДействие", ОтложенноеДействие));
КонецПроцедуры	

// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
&НаКлиенте
Процедура СбисОбновитьИзмененияПоДокументам_ПоказатьРезультат(РезультатДействия, ЛокальныйКэш) Экспорт

	ЛокальныйКэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатДействия, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура сбисПереслатьДляОзнакомления(Кнопка)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисПолучитьФорму("ФормаПересылкаПакетов");
	фрм.Показать(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	// При изменении способа обмена (SDK, API, каталог)	"перезапускаем" обработку
	ПараметрыИнтеграции = Новый Структура("АдресСервера, СпособОбмена, СпособХраненияНастроек, ВремяОжиданияОтвета", Кэш.СБИС.АдресСервера);
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Кэш.Парам);
	ПараметрыИнтеграции.СпособОбмена = СпособОбмена;
	ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, , Ложь);
	ПараметрыПриИзменении(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога обмена	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог обмена документами"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогОбмена = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

