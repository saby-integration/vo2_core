
////////////////////////////////////////////////////
////////////////////Работа Формы////////////////////
////////////////////////////////////////////////////

//////////////////События формы/////////////////////

&НаКлиенте
Процедура ПередЗакрытием(Отказ, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено)
	
	Если ЗавершитьРаботу Тогда
		Возврат;	
	КонецЕсли;     
	
	Отказ = Истина;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		
		Параметр2 = Ложь;
		
	#Иначе
		
		Если Параметр2 = Истина Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	#КонецЕсли
	
	ОбработчикОписанияОповещения = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ЗакрытиеЗавершение", ЭтаФорма);
	
	ТекстВопроса = "Завершить работу в СБИС?";
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикОписанияОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеЗавершение(РезультатДиалога, ДопПараметры = Неопределено) Экспорт
	
	Если Не РезультатДиалога = КодВозвратаДиалога.Да Тогда	
		Возврат;
	КонецЕсли;
	
	МодульОбъектаКлиент().СбисЗавершитьРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	// Начально заполнение всех необходимых для работы объектов	
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеУстановитьРасширениеРаботыСФайлами",ЭтаФорма));
		Иначе
			ПослеУстановитьРасширениеРаботыСФайлами("");
		КонецЕсли;
	#Иначе
		ПослеУстановитьРасширениеРаботыСФайлами("");
	#КонецЕсли	
	
КонецПроцедуры

// Завершение открытия/перезапуска главного окна. Установка настроек, запуск редактора настроек при необходимости.
//
// Параметры:
//  ПараметрыЗавершенияВходящие	 - Струкутра	 -
//		ПовторныйЗапуск - Булево, Истина если окно не закрывалось, а перезапускается.
//		ИзмененаФормаНастроек - Булево, при изменении способа хранения настроек.
//		ОбновитьКонтент - Булево, нужно обновить таблицу реестра документов. Например, произошло изменение пользователя
//		ИзмененияОбмена - Структура, изменился способ обмена со СБИС.
//  ДопПараметры				 - Струкутра	 - резерв под расширение
//
&НаКлиенте
Процедура ПослеОткрытияЗавершение(ПараметрыЗавершенияВходящие=Неопределено, ДопПараметры=Неопределено)
	
	ЭтоПовторныйЗапуск		= Ложь;//При перезапуске не надо запускать некоторые функции.
	НужноОбновитьКонтент	= Истина;//Необходимо перечитать текущий активный раздел
	НужноОткрытьРедакторИни = Ложь;//Проблема с ини. Надо открыть форму раздела, либо обновить её.
	
	Если Не	ПараметрыЗавершенияВходящие = Неопределено Тогда
		Если Не ПараметрыЗавершенияВходящие.Свойство("ПовторныйЗапуск", ЭтоПовторныйЗапуск) Тогда
			ЭтоПовторныйЗапуск		= Ложь;
		КонецЕсли;
		Если Не	ПараметрыЗавершенияВходящие.Свойство("ОбновитьКонтент", НужноОбновитьКонтент) Тогда
			НужноОбновитьКонтент	= Истина
		КонецЕсли;
	КонецЕсли;
	
	НужноОбновитьКонтент = НужноОбновитьКонтент И ЭтоПовторныйЗапуск; //Надо перейти в раздел, а не обновить
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисПолучитьИУстановитьНастройкиВКэш(Новый Структура("ПринудительнаяПроверка, ПродолжитьУстановку", Ложь, Истина), Кэш);	
		НужноОткрытьРедакторИни = Кэш.ФормаНастроекОбщее.Открыта() Или Не Кэш.КэшНастроек.ИниВПорядке Или Кэш.КэшНастроек.ИзмененияВНастройках;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.ПослеОткрытияЗавершение");
		СбисСообщитьОбОшибке(Кэш, СбисИсключение, Новый Структура("ФормаВладелец", ЭтаФорма));
		НужноОткрытьРедакторИни = Истина;//Чтобы поправить проблемы;
	КонецПопытки;
	
	СбисОбновитьЗаголовокФормы(Кэш.СБИС);

	//перестроить аккордеон после изменения способа обмена
	Если	ПараметрыЗавершенияВходящие.Свойство("ИзмененияОбмена")
		И	ТипЗнч(ПараметрыЗавершенияВходящие.ИзмененияОбмена) = Тип("Структура") Тогда
		СформироватьСтруктуруАккордеона(Аккордеон, Новый Структура());
	КонецЕсли;
	
	ВсеДокументы	= Ложь;
	ФильтрСтраница	= 1;
	
	Если Не ЭтоПовторныйЗапуск Тогда
		Попытка
			ПараметрыЗапуска = Новый Структура;
			ПараметрыЗапуска.Вставить("АктивнаяВерсия",	Версия);
			ПараметрыЗапуска.Вставить("СтараяВерсия",	Кэш.Парам.ПредВерсия);
			ПараметрыЗапуска.Вставить("СбисПараметры",	Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек));
			
			МодульОбъектаКлиент().ДействияПриСтарте(ПараметрыЗапуска, Кэш);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.ПослеОткрытияЗавершение"), Новый Структура("ФормаВладелец", ЭтаФорма));
		КонецПопытки;
	КонецЕсли;
	
	//Обновим ГО при старте переходом, либо обновив текущий раздел
	//ФормаБлокировкиИнтерфейса = МодульОбъектаКлиент().СбисПолучитьБлокировкуФормы(ЭтаФорма);
	//Если	Не	ФормаБлокировкиИнтерфейса = Неопределено Тогда
	//	МодульОбъектаКлиент().СбисОбновитьБлокировку(ЭтаФорма, ПараметрыОбновить);
	//Иначе
	Если		НужноОткрытьРедакторИни Тогда
		ПараметрыОбновить = Новый Структура
		("ПовторныйЗапуск,	ОбновитьКонтент,		ОткрытьРедакторИни", 
		ЭтоПовторныйЗапуск,	НужноОбновитьКонтент,	НужноОткрытьРедакторИни);
		МодульОбъектаКлиент().ЗапуститьРедакторИни(ПараметрыОбновить);
		Возврат;
	ИначеЕсли	НужноОбновитьКонтент Тогда
		ОбновитьКонтент();
 		СбисСпрятатьСостояние(ЭтаФорма);				
		Возврат;
	Иначе
		ПерейтиВРаздел(СбисПолучитьИмяКнопкиПоРазделу(Кэш.Парам.РазделПоУмолчанию));
	КонецЕсли;
		
	СбисСпрятатьСостояние(ЭтаФорма);				
	ФильтрОбновитьПанель();
	
КонецПроцедуры

////////////////События элементов///////////////////

&НаКлиенте
Процедура ПересчитыватьЦеныПоДанным1СПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитыватьНДСПоДанным1СПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

//Процедура записывает в Кэш измененный параметр	
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент) Экспорт
	ПутьКДаннымФормы			= Сред(Элемент.Имя, Найти(Элемент.Имя, "_")+1);
	Кэш.Парам[ПутьКДаннымФормы] = ЭтаФорма[ПутьКДаннымФормы];
КонецПроцедуры

&НаКлиенте
Процедура сбисПослеНастройкиЭП(РезультатИзменения, ДопПараметры) Экспорт 
	Если РезультатИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	сбисОпределитьФормуРаботысЭП();
КонецПроцедуры

&НаКлиенте
Процедура сбисОпределитьФормуРаботысЭП()
	Если Кэш.Парам.НастройкиКриптографии.ПодписьНаСервере Тогда
		Кэш.Вставить("ФормаЭП",сбисПолучитьФорму("ЭлектроннаяПодписьНаСервере"));
	Иначе
		Кэш.Вставить("ФормаЭП",сбисПолучитьФорму("ЭлектроннаяПодписьНаКлиенте"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица_СервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//alo
	ТекущиеДанныеСтроки = ВыбраннаяСтрока;
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
	КонецЕсли;
	Контекст = Новый структура(ТекущиеДанныеСтроки.Ключ, ТекущиеДанныеСтроки.Команда);
	Контекст.Вставить("Кэш",Кэш);
	Кэш.ОбщиеФункции.РассчитатьЗначение(ТекущиеДанныеСтроки.Ключ,Контекст,Кэш);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрМаскаПриИзменении(Элемент)
	
	сбисПослеУстановкиФильтра(Истина, Неопределено);
	
КонецПроцедуры

//////////////////////Кнопки////////////////////////

&НаКлиенте
Процедура ВыйтиНажатие(Команда)
	сбисВыйти();
КонецПроцедуры

// Процедура запускает загрузку документов по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьВ1С(Команда)
	
	РезультатЗагрузки = Кэш.ОбщиеФункции.РезультатДействия_Получить(Кэш,Новый Структура("ПредставлениеОперации", "ЗагрузкаДокумента"),Истина);
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Всего = СписокОтмеченныхДокументов.Количество();
	ОбновитьКонтент = Ложь;
	Если Всего>0 Тогда
		фрм = сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
		РезультатЗагрузки = фрм.ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов, Новый Структура("РежимНоменклатуры, РежимДокументов", Кэш.Парам.СпособЗагрузки, Кэш.Парам.РежимЗагрузки));
		Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
			ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
			Кэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
			
			Сообщить("Загружено комплектов "+строка(РезультатЗагрузки.Всего.Выполнено)+" из "+строка(Всего));
			ОбновитьКонтент = Булево(РезультатЗагрузки.Всего.Выполнено);
		Иначе//Если пришли не структура, то ЗагрузитьДокументыВ1С вынесена. Поддержка старых функций
			ОбновитьКонтент = РезультатЗагрузки;
		КонецЕсли;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	Кэш.Удалить("РезультатДействия");
	Если ОбновитьКонтент Тогда
		ОбновитьКонтент();
	КонецЕсли;

КонецПроцедуры

// Открывает помощь на sbis.ru
&НаКлиенте
Процедура НадписьНужнаПомощьНажатие(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul");
КонецПроцедуры

//Нажатие на кнопку обновления обработки
&НаКлиенте
Процедура ОбновитьОбработкуОбщая(Команда)	
	сбисПроверитьНаличиеОбновлений(Новый Структура("Режим, ТекстДиалога", 
													"Ручной",
													"Обновление <ВерсияНаСервере> готово к установке. Продолжить?"));	
КонецПроцедуры

//Процедура открывает форму просмотра документа	
&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон", Кэш);	
	фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);
КонецПроцедуры

//Открывает документы 1С по текущей строке таблицы документов	
&НаКлиенте
Процедура ОткрытьДокумент1С(Кнопка) Экспорт
	ТекущаяСтрока		= Кэш.ТаблДок.ТекущиеДанные;
	сбисДанныеОткрыть	= Новый Структура("Документ1С, Документы1С");
	сбисСписокОткрыть	= Новый Массив;
	ЗаполнитьЗначенияСвойств(сбисДанныеОткрыть, ТекущаяСтрока);
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документ1С) Тогда
		сбисСписокОткрыть.Добавить(сбисДанныеОткрыть.Документ1С);
	КонецЕсли;
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документы1С) Тогда
		Для Каждого СтрокаДокумент1С Из сбисДанныеОткрыть.Документы1С Цикл
			Если Не ЗначениеЗаполнено(СтрокаДокумент1С.Значение) Тогда
				Продолжить;
			КонецЕсли;
			сбисСписокОткрыть.Добавить(СтрокаДокумент1С.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Не сбисСписокОткрыть.Количество() Тогда
		Сообщить("Нет связанных документов 1С");
		Возврат;
	КонецЕсли;
	Для Каждого сбисДокументОткрыть Из сбисСписокОткрыть Цикл
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ОткрытьЗначение(сбисДокументОткрыть);
			#Иначе
				ПоказатьЗначение(,сбисДокументОткрыть);
			#КонецЕсли
		Исключение
			Сообщить(ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		фрм = сбисНайтиФормуФункции("ОткрытьДокументОнлайнПоПакету","ФормаГлавноеОкно","",Кэш);
		фрм.ОткрытьДокументОнлайнПоПакету(ТекущаяСтрока.СоставПакета[0].Значение, Кэш);
	КонецЕсли;
КонецПроцедуры

//Процедура запускает загрузку отчетность по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьОтчетность(Команда)
	СбисОтвет = 1;
	ПараметрыКоманды = Новый Структура;
	Если	ОтметитьВсе 
		И	ЗаписейНаСтранице1С <> "все"
		И	(ФильтрСтраница <> 1 Или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		ТекстВопроса = "Загрузить отчеты только с текущей страницы или все документы списка?";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СбисОтвет = Вопрос(ТекстВопроса, Кнопки);
		#Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьВыбранныеДокументыОтчетности", ЭтаФорма), ТекстВопроса, Кнопки);
			Возврат;
		#КонецЕсли
	КонецЕсли;
	ЗагрузитьВыбранныеДокументыОтчетности(СбисОтвет, ПараметрыКоманды);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительныхОпераций(Команда)
	фрм = сбисПолучитьФорму("ФормаДлительныеОперации",,,ЭтаФорма);
	фрм.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ДоступнаНоваяВерсия(Команда)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиОбновлениеПрошлоУспешно"] Тогда
			ТекстВопроса	= "Завершить работу в СБИС?";
			КнопкиДиалога	= РежимДиалогаВопрос.ДаНет;
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Не забудьте перезапустить 1С:Предприятие для того, чтобы изменения вступили в силу.";
			Ответ	= Вопрос(ТекстВопроса,	КнопкиДиалога);
			ДоступнаНоваяВерсия_ПослеДиалога(Ответ);
			Возврат;
		КонецЕсли;			
	#Иначе
		Если Лев(сбисЭлементФормы(ЭтаФорма,"ВашаВерсияУстарела").Заголовок,25) = "Обновление прошло успешно" Тогда
			ТекстВопроса	= "Завершить работу в СБИС?";
			КнопкиДиалога	= РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДоступнаНоваяВерсия_ПослеДиалога", ЭтаФорма),ТекстВопроса,КнопкиДиалога,,);
			Возврат;
		КонецЕсли;	
	#КонецЕсли	
	
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/history/");
КонецПроцедуры

&НаКлиенте
Процедура ДоступнаНоваяВерсия_ПослеДиалога(Ответ, ДопПараметры = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура сбисИнформацияДляТП(Команда)
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Сохранить информацию для техподдержки в:"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент);
		Разделитель = Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Клиент);
		ПутьККаталогу = ПутьККаталогу+Формат(ТекущаяДата(), "ДФ =гггг_ММ_дд_ЧЧ_мм_сс")+Разделитель;
		СоздатьКаталог(ПутьККаталогу);
		
		Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
			СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
			Если СписокОтмеченныхДокументов.Количество() = 1 Тогда
				Если Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
					Кэш.ОбщиеФункции.СбисСформироватьИнформациюПоДокументам1С(Кэш, ПутьККаталогу, Разделитель, СписокОтмеченныхДокументов[0].Значение.СоставПакета); 
				ИначеЕсли Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					Кэш.ОбщиеФункции.сбисЗаписатьСтруктуруВТекстовыйДокумент(СписокОтмеченныхДокументов[0].Значение.СоставПакета[0].Значение, ТекстДок, "   ", Новый Массив);;
					ТекстДок.Записать(ПутьККаталогу + "СоставПакета.txt"); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Кэш.ОбщиеФункции.СбисСформироватьОбщуюИнформациюДляТП(Кэш, ПутьККаталогу);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыТП(Команда)
	ЗапуститьПриложение("https://sbis.ru/support");
КонецПроцедуры

&НаКлиенте
Процедура ОбращениеТП(Команда)
	ЗапуститьПриложение("https://online.sbis.ru/page/my-claims");
КонецПроцедуры

&НаКлиенте
Процедура РуководствоПользователя(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Элемент) Экспорт    
	
	фрм = СбисПолучитьФорму("ФормаНастройки", , , ЭтаФорма);
	фрм.Показать(Новый Структура("РежимЗапуска, Кэш", "ОбщиеНастройки", Кэш));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуСервисов(Элемент) Экспорт
	
	ФормаНастройки = СбисПолучитьФорму("ФормаНастройки", , , ЭтаФорма);
	ФормаНастройки.Показать(Новый Структура("РежимЗапуска, Кэш", "Сервисы", Кэш));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФайловНастроек(Команда) Экспорт    
	
	МодульОбъектаКлиент().ЗапуститьРедакторИни();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру()  
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	фрм = сбисПолучитьФорму("ФормаУстановкаСооответствияНоменклатуры");
	фрм.Показать(ТекущаяСтрока);
КонецПроцедуры

/////////////////Генерируемые кнопки/////////////////

//Функция добавляет кнопку на командную панель главного окна. Вызов функции происходит через поиск в Кэш.МенюРазделов по текущему разделу и идентификатору(имени) кнопки
&НаСервере
Функция СбисДобавитьКнопку(Знач ПараметрыКнопки, Отказ) Экспорт
	Попытка
		Если ПараметрыКнопки.УправляемоеПриложение Тогда
			Если ЭтаФорма.Команды.Найти(ПараметрыКнопки.Имя) = Неопределено Тогда
				НоваяКоманда			= ЭтаФорма.Команды.Добавить(ПараметрыКнопки.Имя);
				НоваяКоманда.Действие	= "сбисВыполнитьКомандуГенерируемойКнопки";//Имя процедуры
				НоваяКоманда.Заголовок	= ПараметрыКнопки.Заголовок;
			КонецЕсли;	
			НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ПараметрыКнопки.Имя,
					                                 Тип("КнопкаФормы"),
													 ЭтаФорма.Элементы[ПараметрыКнопки.Панель]);
			НовыйЭлемент.ИмяКоманды = ПараметрыКнопки.Имя;
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				сбисКнопкиПанели = ЭтаФорма.ЭлементыФормы[ПараметрыКнопки.Панель].Кнопки;
				сбисКнопкиПанели.Добавить(ПараметрыКнопки.Имя, ТипКнопкиКоманднойПанели.Действие, ПараметрыКнопки.Заголовок, Новый Действие("сбисВыполнитьКомандуГенерируемойКнопки"));
			#КонецЕсли
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при добавлении кнопки " + ПараметрыКнопки.Имя + " на форму главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецФункции

//Функция очищает панель кнопок (КО)
&НаСервере
Функция сбисОчиститьПанельКнопок(Знач ПараметрыПанели, Отказ) Экспорт
	
	Попытка
		Если ПараметрыПанели.УправляемоеПриложение Тогда
			ЭлементыУдалить = ЭтаФорма.Элементы[ПараметрыПанели.Имя].ПодчиненныеЭлементы;
			Пока ЭлементыУдалить.Количество() Цикл
				ЭтаФорма.Элементы.Удалить(ЭлементыУдалить[0]);
			КонецЦикла;
		Иначе
			ЭтаФорма.ЭлементыФормы[ПараметрыПанели.Имя].Кнопки.Очистить();
		КонецЕсли;                                                                                                                   
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при удалении кнопок панели " + ПараметрыПанели.Имя + " главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Функция сбисПослеУстановкиФильтра(Результат, Параметры) Экспорт
	Если Результат<>Неопределено Тогда
		ФильтрОбновитьПанель();	
		сбисСохранитьФильтрРаздела(Кэш);
		ОбновитьКонтент();
	КонецЕсли
КонецФункции

&НаКлиенте
Процедура СбисКомандаПанелиПечать(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	ПараметрыПечати = Новый Структура("Кэш, ВФоне,ФормаВызова", Кэш, Истина, ЭтаФорма);
	СписокДляВыбора = Кэш.ОбщиеФункции.ПолучитьВложенияПакетовНаПечать(СписокОтмеченныхДокументов, ПараметрыПечати);
	РезультатПечати = Кэш.ОбщиеФункции.СбисМассоваяПечать(СписокДляВыбора, ПараметрыПечати);
КонецПроцедуры

//Функция делает вызов в зависимости от того, какая команда из должна быть выполнена
&НаКлиенте
Процедура СбисВыполнитьКомандуГенерируемойКнопки(Команда) Экспорт 
	
	Попытка
		МодульОбъектаКлиент().ВызватьОбработчикКнопки(Команда);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФормаГлавноеОкно.СбисВыполнитьКомандуГенерируемойКнопки");
		МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
	КонецПопытки;

КонецПроцедуры

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьПрайс(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	Отказ = Ложь;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если		Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат Неопределено;
	ИначеЕсли	Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат Неопределено;
	ИначеЕсли	Не (	ИниНоменклатуры.Свойство("мФайл")
					И	ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования прайса.");
		Возврат Неопределено;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПодготовитьСтруктуруПрайса", "РаботаСДокументами1С");
	//В методе формирования прайса укажем, что ожидаем структуру результата, без записи в файл
	ПараметрыПодготовки = Новый Структура(	"Ини, ДанныеКаталога, ПараметрыПрайса"
											,ИниНоменклатуры.мФайл.Номенклатура
											,Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога)
											,Новый Структура(	"РеквизитСопоставленияНоменклатуры, ТипЦенНоменклатуры,	ДатаЦен, ТипCML, ОжидаемыйРезультат"
																,ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры
																,ТипЦен
																,ДатаЦен
																,"Прайс"
																,"СтруктураФайла"));
																
	МассивФайлов = фрм.ПодготовитьСтруктуруПрайса(Кэш, ПараметрыПодготовки, Отказ);
	
	Если Отказ Тогда
		сбисСообщитьОбОшибке(Кэш, МассивФайлов);
		Возврат Ложь;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПоказатьФорму", "ФормаОтправкиКорреспонденции");	
	фрм.ПоказатьФорму(ЛокальныйКэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceMatchingIn"));
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ОтправитьСогласованиеЦен(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	Отказ = Ложь;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если		Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат Неопределено;
	ИначеЕсли	Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат Неопределено;
	ИначеЕсли	Не (	ИниНоменклатуры.Свойство("мФайл")
					И	ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования прайса.");
		Возврат Неопределено;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПодготовитьСтруктуруПрайса", "РаботаСДокументами1С");
	//В методе формирования прайса укажем, что ожидаем структуру результата, без записи в файл
	ПараметрыПодготовки = Новый Структура(	"Ини, ДанныеКаталога, ПараметрыПрайса"
											,ИниНоменклатуры.мФайл.Номенклатура
											,Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога)
											,Новый Структура(	"РеквизитСопоставленияНоменклатуры, ТипЦенНоменклатуры,	ДатаЦен, ТипCML, ОжидаемыйРезультат, Тип, ВерсияФормата"
																,ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры
																,ТипЦен
																,ДатаЦен
																,"Прайс"
																,"СтруктураФайла"
																,"СогласованиеЦен"
																,"3.01"));
																
	МассивФайлов = фрм.ПодготовитьСтруктуруПрайса(Кэш, ПараметрыПодготовки, Отказ);
	
	Если Отказ Тогда
		сбисСообщитьОбОшибке(Кэш, МассивФайлов);
		Возврат Ложь;
	КонецЕсли;
	фрм = сбисНайтиФормуФункции("ПоказатьФорму", "ФормаОтправкиКорреспонденции");	
	фрм.ПоказатьФорму(ЛокальныйКэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceMatchingIn"));
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьКаталог(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт 
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	// Формирует и отправляет на онлайн каталог товаров
	Если ЛокальныйКэш.Парам.СпособОбмена = 1 Тогда // каталог
		Сообщить("Отправить каталог товаров можно только при способе обмена SDK или API. Способ обмена указывается в разделе Настройки");
		Возврат Неопределено;
	КонецЕсли;
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если НЕ (ИниНоменклатуры.Свойство("мФайл") И ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования каталога.");
		Возврат Неопределено;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ДанныеКаталога = Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога);
	ИниНоменклатура = Новый Структура;
	ЛокальныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ИниНоменклатура, ИниНоменклатуры.мФайл.Номенклатура);
	ПараметрыФормированияКаталога = Новый Структура("РеквизитСопоставленияНоменклатуры", ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры);
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ПараметрыФормированияКаталога.Вставить("ТипЦенНоменклатуры", ТипЦен);
	КонецЕсли;
	КаталогОтправлен = ЛокальныйКэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(ЛокальныйКэш, ДанныеКаталога,ИниНоменклатура,ПараметрыФормированияКаталога);
	Если КаталогОтправлен <> Ложь Тогда
		Сообщить("Каталог товаров успешно отправлен");
	КонецЕсли;
	ОтметитьВсе = Ложь;
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ЗагрузитьСотрудниковВСБИС(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	Ини = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Сотрудники");
	Если Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте сотрудников, которых необходимо загрузить в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Если Не (Ини.Свойство("мФайл") И Ини.мФайл.Свойство("Сотрудники")) Тогда
		Сообщить("Отсутствует настройка для загрузки сотрудников в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Ини = Ини.мФайл.Сотрудники;
	сбисПоказатьСостояние("Формирование данных по сотрудникам", ЭтаФорма);
	фрм	= сбисНайтиФормуФункции("сбисСформироватьДанныеСотрудников","РаботаСДокументами1С");
	ДанныеСотрудников = фрм.сбисСформироватьДанныеСотрудников(ЛокальныйКэш, СписокОтмеченных, Ини);
	сбисПоказатьСостояние("Загрузка сотрудников в СБИС", ЭтаФорма);
	Результат = Истина;
	Отказ = Ложь;
	РезультатОтправки = ЛокальныйКэш.Интеграция.сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ);
	сбисСпрятатьСостояние(ЭтаФорма);
	
	Если Отказ Тогда
		Результат = Ложь;
	КонецЕсли;
	
	РезультатОтправки.НеОтправлено = РезультатОтправки.Ошибок;
	РезультатОтправки.Вставить("ЗаголовкиФормыРезультатов", Новый Структура("Форма, ПоложительныйРезультат, ОтрицательныйРезультат, Объект1С, ТиповыеОшибки", "Результат загрузки", "Загружено", "Не загружено", "Сотрудник" ""));
	Кэш.Вставить("РезультатОтправки", РезультатОтправки);
	фрм = сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
	фрм.ПоказатьРезультатОтправки(Кэш);
	Кэш.Удалить("РезультатОтправки");
	Возврат Результат;
КонецФункции

//////////////////////Прочее////////////////////////

&НаСервере
Функция СбисУстановитьКонтекстноеМеню(ИмяЭлемента, ИмяМеню) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Для Каждого ЭлементМеню Из ЭтаФорма.Элементы[ИмяЭлемента].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			Если Найти(ЭлементМеню.Имя, ИмяМеню) = 1 Тогда 
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Истина);
			Иначе
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Ложь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭтаФорма.ЭлементыФормы[ИмяЭлемента].КонтекстноеМеню=ЭтаФорма.ЭлементыФормы[ИмяМеню];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, ВидимостьЭлемента)
	ЭлементМеню.Видимость = ВидимостьЭлемента;
	Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодЭлемент Из ЭлементМеню.ПодчиненныеЭлементы Цикл
			сбисУстановитьВидимостьЭлементаМеню(ПодЭлемент, ВидимостьЭлемента);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СбисПоказатьЗначение(ЛокальныйКэш, ОбъектСсылкаПоказать) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЛокальныйКэш.СовместимостьМетодов.Объекты1С.ПоказатьЗначение Тогда
			СбисСтрокаВыполнить = "ПоказатьЗначение(,ОбъектСсылкаПоказать)";
		Иначе
			СбисСтрокаВыполнить = "ОткрытьЗначение(ОбъектСсылкаПоказать)";
		КонецЕсли;
		Выполнить(СбисСтрокаВыполнить);
	#Иначе
		ПоказатьЗначение(,ОбъектСсылкаПоказать);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция СбисПолноеИмяКолонки(ТчИмя, КолонкаИмя) Экспорт
	Возврат СтрЗаменить(Кэш.ТекущийСеанс.Интерфейс.ШаблонРеквизитаКолонок, "{%ТЧ%}", ТчИмя) + КолонкаИмя;
КонецФункции

//Процедура запускает отправку документов по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьВыбранныеДокументыОтчетности(Ответ, СбисДополнительныеПараметры) Экспорт
	Перем ИмяРеестра, Ини;
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		Если	Не Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя, ИмяРеестра)
			Или	Не Кэш.Ини.Свойство(ИмяРеестра, Ини) Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.СбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения(СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	СбисДействие = Кэш.ОбщиеФункции.РезультатДействия_Новый(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова, СтатусыДляОбработки", "ЗагрузкаОтчетности", ЭтаФорма, Истина));

	ОписаниеОповещенияРезультат = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ОбработчикРезультатаЗагрузкиОтчетности", ЭтаФорма, Новый Структура("Кэш, РезультатДействия", Кэш, СбисДействие));
	ПараметрыМетода = Новый Структура("СписокДокументов, ОбработчикРезультата, РезультатДействия", СписокОтмеченныхДокументов, ОписаниеОповещенияРезультат, СбисДействие);
	
	фрм = СбисНайтиФормуФункции("ЗагрузитьОтчетность", "Документ_" + ИмяДокумента, "Документ_Шаблон", Кэш);
	фрм.ЗагрузитьОтчетность(Кэш, ПараметрыМетода);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикРезультатаЗагрузкиОтчетности(РезультатЗагрузки, ПараметрыОбработки) Экспорт
	ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
	Кэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
КонецПроцедуры

&НаКлиенте
Процедура СбисОбработкаПрерывания() Экспорт
	ОбработкаПрерыванияПользователя();
КонецПроцедуры

// Процедура устанавливает оформление 2х гиперссылок, предлагающих обновиться
// Параметры:
//	- СледующееДействие (строка):
//									- "Предложить обновление"
//									- "Предложить перезапуск"
//									- "Не требуется"
//	- ВерсияСильноУстарела (булево)
//  - РаботаНаНестабильнойВерсии (булево)
&НаКлиенте
Процедура сбисУстановитьОформлениеГиперссылокОбновления(СледующееДействие, СтатусВерсииПользователя=0) Экспорт
	// ВААл Старая логика. Информация о версии выводилась в элемент формы.
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	Если СледующееДействие = "Не требуется" Тогда
	//		ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Ложь;
	//		Возврат;
	//	КонецЕсли; 
	//	
	//	ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Истина;
	//	Если СледующееДействие = "Предложить обновление" Тогда
	//		Если Число(СтатусВерсииПользователя) = 4 Тогда  
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиКритическиеОшибки"]; // "Версия содержит критические ошибки"
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиВерсияНеСовместима"]; // "Версия не совместима"
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиВашаВерсияУстарела"]; // "Версия устарела"
	//		Иначе
	//			ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиДоступнаНоваяВерсия"]; // "Есть новая версия" 
	//		КонецЕсли;
	//	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
	//		ЭлементыФормы.ПанельКнопкиОбновления.ТекущаяСтраница = ЭлементыФормы.ПанельКнопкиОбновления.Страницы["СтраницаПанельКнопкиОбновлениеПрошлоУспешно"] // "Обновление прошло успешно, перезапустите 1С:Предприятие!"
	//	Иначе
	//		ЭлементыФормы.ПанельКнопкиОбновления.Видимость = Ложь;
	//	КонецЕсли;
	//#Иначе
	//	ЭлементВашаВерсияУстарела		= сбисЭлементФормы(ЭтаФорма, "ВашаВерсияУстарела");
	//	ЭлементОбновитьОбработкуОбщая	= сбисЭлементФормы(ЭтаФорма, "ОбновитьОбработкуОбщая");
	//	Если СледующееДействие = "Предложить обновление" Тогда
	//		ЭлементВашаВерсияУстарела.Видимость 	= Истина;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Истина; 
	//		Если Число(СтатусВерсииПользователя) = 4 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок = "Версия содержит критические ошибки";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Версия не совместима";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Версия устарела";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		Иначе
	//			ЭлементВашаВерсияУстарела.Заголовок		= "Есть новая версия";
	//			ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(28, 85, 184);
	//		КонецЕсли;
	//	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
	//		ЭлементВашаВерсияУстарела.Видимость 	= Истина;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Ложь;
	//		ЭлементВашаВерсияУстарела.ЦветТекста	= Новый Цвет(255, 0 ,0);
	//		ЭлементВашаВерсияУстарела.Заголовок = "Обновление прошло успешно, перезапустите обработку!";
	//	Иначе
	//		ЭлементВашаВерсияУстарела.Видимость 	= Ложь;
	//		ЭлементОбновитьОбработкуОбщая.Видимость	= Ложь;
	//	КонецЕсли;
	//#КонецЕсли
	
	ТекстСообщения = "";
	Если СледующееДействие = "Предложить обновление" Тогда 
		Если Число(СтатусВерсииПользователя) = 4 Тогда
			ТекстСообщения = "Версия содержит критические ошибки";
		ИначеЕсли Число(СтатусВерсииПользователя) = 3 Тогда
			ТекстСообщения = "Версия не совместима";
		ИначеЕсли Число(СтатусВерсииПользователя) = 2 Тогда
			ТекстСообщения = "Версия устарела";
		Иначе
			ТекстСообщения = "Есть новая версия";
		КонецЕсли;
	ИначеЕсли СледующееДействие = "Предложить перезапуск" Тогда
		ТекстСообщения = "Обновление прошло успешно, перезапустите обработку!";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		АргументДействия = Новый Структура(	"Текст, 		ФормаВладелец, 	ЭлементНазначения, 	СтатусСообщения",
											ТекстСообщения, ЭтаФорма, 		"Выход", 			СтатусСообщения.Внимание);
		МодульОбъектаКлиент().СбисСообщить(АргументДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сбисЗадатьВопросПослеОбновления() Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТекстВопроса = "Установка обновления прошла успешно." + Символы.ПС + "Для завершения обновления необходим  перезапуск 1С.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "Перезапустить 1С:Предприятие сейчас");
		Кнопки.Добавить(2, "Временно продолжить работу на старой версии");
		СбисОтвет = Вопрос(ТекстВопроса, Кнопки, , 1);
		сбисЗадатьВопросПослеОбновленияЗавершение(СбисОтвет);
	#Иначе
		ТекстВопроса = "Установка обновления прошла успешно." + Символы.ПС + "Для завершения обновления необходим  перезапуск обработки.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "Завершить работу в СБИС");
		Кнопки.Добавить(2, "Временно продолжить работу на старой версии");
		ПоказатьВопрос(Новый ОписаниеОповещения("сбисЗадатьВопросПослеОбновленияЗавершение", ЭтаФорма), ТекстВопроса, Кнопки, , 1);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура сбисЗадатьВопросПослеОбновленияЗавершение(Ответ, СбисДополнительныеПараметры = Неопределено) Экспорт
	Если Ответ = 1 Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ЗавершитьРаботуСистемы(Истина, Истина);
		#КонецЕсли
		ЭтаФорма.Закрыть();
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ТекстАргумент = "Для корректной работы обработки необходимо завершить обновление. Перезапустите 1С:Предприятие.";
		#Иначе
			ТекстАргумент = "Для корректной работы обработки необходимо завершить обновление. Перезапустите обработку.";
		#КонецЕсли
		АргументДействия = Новый Структура("Текст, ФормаВладелец, ЭлементНазначения, СтатусСообщения", ТекстАргумент, ЭтаФорма, "Выход", СтатусСообщения.Внимание);
		ОтложенноеДействиеОбновления = МодульОбъектаКлиент().НовыйОтложенноеДействие(Новый Структура(
		"Аргумент,			ИмяПроцедуры,				Модуль,		ДополнительныеПараметры,	Периодичность,	ВызватьСразу,	ИдентификаторДействия,  ЧислоВызовов", 
		АргументДействия,	"СбисСообщитьПользователю",	ЭтаФорма,	Кэш,						60*15,			Ложь, 			"ВывестиСообщениеОНеобходимостиПерезапускаПослеОбновления"));
		Кэш.СБИС.МодульОбъектаКлиент.ПодключитьОтложенноеДействие(ОтложенноеДействиеОбновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПереключенияАккаунта()
	фрм = сбисПолучитьФорму("ФормаСменыАккаунта");
	фрм.ПользовательСбис = Пользователь;
	ДопПараметры = Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	СбисОписаниеОповещение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисПослеАвторизации", ЭтаФорма, ДопПараметры);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = фрм.Показать(Кэш, Неопределено);
		Если Кэш = Неопределено И Результат = "" Тогда //после выхода закрыли окно авторизации
			Возврат;
		КонецЕсли;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Результат, СбисОписаниеОповещение);
	#Иначе
		фрм.ОписаниеОповещенияОЗакрытии = СбисОписаниеОповещение;
		фрм.Показать(Кэш, Неопределено);
	#КонецЕсли
КонецПроцедуры

