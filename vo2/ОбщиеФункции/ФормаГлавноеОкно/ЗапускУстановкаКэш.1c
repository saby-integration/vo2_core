
////////////////////////////////////////////////////
////////////////Запуск, установка кэш///////////////
////////////////////////////////////////////////////

// Процедура заполняет структуру Кэша	
&НаКлиенте
Функция КэшПодготовить(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	сбисПоказатьСостояние("Установка параметров", ЭтаФорма);
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	СбисПараметрыСистемы = ПолучитьПараметрыСистемы(Отказ);
	Если Отказ Тогда
		Возврат СбисПараметрыСистемы;
	КонецЕсли;
	
	Попытка
		ТекущийМодульОбъекта = МодульОбъектаКлиент();
	Исключение
		Сообщить("Возникла неизвестная ошибка при запуске обработки. Модуль объекта не был получен: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыФормированияКэша = Новый Структура("Владелец, ПараметрыСистемы, МодульОбъектаКлиент", ЭтаФорма, СбисПараметрыСистемы, ТекущийМодульОбъекта);
	Кэш = ТекущийМодульОбъекта.НовыйЛокальныйКэш(ПараметрыФормированияКэша);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		сбисПарам = ВосстановитьЗначение("сбисПарам");
		Если ЗначениеЗаполнено(сбисПарам) Тогда//Параметры есть. Заполним предверсию на форме для определения параметров запуска.
			Кэш.Парам = сбисПарам;
			ПредВерсия	= Кэш.Парам.ПредВерсия;
		КонецЕсли;
	#КонецЕсли
	
	ТекущийМодульОбъекта.УстановитьПараметрыГлобальногоМодуля(, Кэш);
	
	Попытка
		МодульОбработкиJSON = ТекущийМодульОбъекта.ПолучитьФормуОбработки("РаботаСJSON");
	Исключение
		Отказ = Истина;
		Возврат ТекущийМодульОбъекта.НовыйСбисИсключение(ИнформацияОбОшибке(), "ФормаГлавноеОкно.КэшПодготовить", 776, "Запуск программы/функции/метода не удался", "Не удалось определить модули для работы внешней обработки. Обратитесь в техническую поддержку.");
	КонецПопытки;
	ТекущийМодульОбъекта.ОбновитьПараметрГлобальногоМодуля("РаботаСJSON", МодульОбработкиJSON);
		
	СбисОбщиеФункции = СбисПолучитьФорму("РаботаСДокументами1С"); 
	Если СбисОбщиеФункции = Ложь Тогда
		Отказ = Истина;
		Возврат ТекущийМодульОбъекта.НовыйСбисИсключение(776, "ФормаГлавноеОкно.КэшПодготовить",,, "Не удалось определить модули для работы внешней обработки. Обратитесь в техническую поддержку.")
	КонецЕсли;
	СбисОбщиеФункции.МестныйКэш = Кэш;
	Кэш.ТекущийСеанс.Модули.ФункцииДокументов = СбисОбщиеФункции;
			
	//Кэш.Вставить("ПараметрыСистемы", СбисПараметрыСистемы);
	Версия = Кэш.ПараметрыСистемы.Обработка.Версия;
	//Кэш.ТекущийСеанс.Формы.Стандартные = ЗаполнитьСписокФорм();
	
	ПутьКРеквзизитуКолонки = "{%ТЧ%}.";
	Если СбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ПутьКРеквзизитуКолонки = ПутьКРеквзизитуКолонки + "{%ТЧ%}";
	КонецЕсли;
	Кэш.ТекущийСеанс.Интерфейс.Вставить("ШаблонРеквизитаКолонок", ПутьКРеквзизитуКолонки);
	
	Кэш.Вставить("Заплатки", Ложь);
	Кэш.Вставить("ВИ", сбисПолучитьФорму("SDK2"));
	Кэш.Вставить("Плагин", Неопределено);//Делать через Кэш.Интеграция при включенном ExtSDK.
	Кэш.Вставить("Текущий",Новый Структура());
	Кэш.Текущий.Вставить("Раздел","");
	Кэш.Текущий.Вставить("ТекущийРаздел","");
	Кэш.Текущий.Вставить("Имя","");
	Кэш.Текущий.Вставить("ТипДок","");
	Кэш.Текущий.Вставить("ПредыдущийРаздел",Неопределено);
	
	Кэш.Вставить("ТаблДок","");
	Кэш.Вставить("ГлавноеОкно",ЭтаФорма);
	Кэш.Вставить("ФормаНастроекОбщее",	сбисПолучитьФорму("ФайлыНастроекОбщее"));
	Кэш.Вставить("ОбщиеФункции",		сбисОбщиеФункции);
	Кэш.Вставить("РаботаСJSON",			сбисПолучитьФорму("РаботаСJSON"));
	//Кэш.С1.Вставить("ДокументСБИС_Ид",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид"));
	//Кэш.С1.Вставить("ДокументСБИС_Статус",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус"));
	
	Кэш.Вставить("Разделы",Новый Структура());
	Кэш.Разделы.Вставить("р1","Полученные");
	Кэш.Разделы.Вставить("р2","Отправленные");
	Кэш.Разделы.Вставить("р3","Продажа");
	Кэш.Разделы.Вставить("р4","Покупка");
	Кэш.Разделы.Вставить("р5","Настройки");
	Кэш.Разделы.Вставить("р6","Справочники");
	Кэш.Разделы.Вставить("р7","Учет");
	Кэш.Разделы.Вставить("р8","Задачи");
	Кэш.Разделы.Вставить("р9","Отчетность");
	
	//%Отчетность%
	Кэш.Разделы.Вставить("Продажа",		Новый Структура());
	Кэш.Разделы.Вставить("Покупка",		Новый Структура());
	Кэш.Разделы.Вставить("Отчетность",	Новый Структура());
	Кэш.Разделы.Вставить("Справочники",	Новый Структура());
	Кэш.Вставить("МенюРазделов", Новый Структура());
	
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Кэш.Вставить("ПараметрыФильтра", Новый Структура);
	КонецЕсли;
	Кэш.Вставить("ТипыПолейФильтра", Новый Структура);
	Кэш.Вставить("ИспользоватьОбработчикиСобытий", Ложь);
	
	Кэш.Вставить("ини",Новый Структура());
	//Кэш.Вставить("Цвет",Новый Структура());
	//Кэш.Цвет.Вставить("АктивныйПункт",Новый Цвет(255,112,51));
	//Кэш.Цвет.Вставить("ФонАктивныйРаздел",Новый Цвет(247,243,240));
	//Кэш.Цвет.Вставить("ФонПассивныйРаздел",Новый Цвет(251,251,251));
	//Кэш.Цвет.Вставить("ТекстАктивныйРаздел",Новый Цвет(0,0,0));
	//Кэш.Цвет.Вставить("ТекстПассивныйРаздел",Новый Цвет(153,153,153));
	//Кэш.Цвет.Вставить("ФонОшибки",Новый Цвет(255,209,209));
	
	Кэш.Вставить("Реестры",Новый Структура());
	Кэш.Вставить("КэшЗначенийИни",Новый Структура());
	Кэш.Вставить("КэшСертификатов",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("ТекущийПакет",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("Организации",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("ИниЗагрузки",Новый Структура);
	// Пользовательские фильтры
	Кэш.Вставить("ПараметрыФильтра", Новый Структура());
	Кэш.Вставить("ФормаРаботыСоСтатусами","Статусы_Регистры");
	// Дополнительные вложения, прикладываются к каждому отправляемому пакету
	Кэш.Вставить ("ДопВложение",Новый Массив);
	Кэш.Вставить("СписокНоменклатуры",Новый СписокЗначений);
	Кэш.Вставить("КоличествоВОтправке", 100);
	Кэш.Вставить("КоличествоПотоковОтправки", 10);
	Кэш.Вставить("ПодготовленныеКОтправке", Новый Массив);
	Кэш.Вставить("НеобработанныеОтветыОтправки", Новый Массив);
	//Кэш.Вставить("СБИС.ДанныеИнтеграции.Плагин.НеобработанныеОтветы", Новый Структура);
	Кэш.Вставить("КэшНастроек", Новый Структура);
	Кэш.Вставить("СовместимостьМетодов", сбисСовместимостьМетодов(Кэш));
	
	Если ЗначениеЗаполнено(СбисДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры Цикл
			Если КлючИЗначение.Ключ = "Парам" Тогда
				Продолжить;
			ИначеЕсли КлючИЗначение.Ключ = "РежимЗапускаГлавногоОкна" Тогда
				РежимЗапускаГлавногоОкна = КлючИЗначение.Значение;
				Продолжить;
			КонецЕсли;
			Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Кэш;
КонецФункции

//Устанавливает в Кэш формы для работы с настройками и методами работы с сервисом
&НаКлиенте
Функция ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры=Неопределено)	Экспорт
	
	#Если ВебКлиент Тогда
		// для веб ставим всегда АПИ
		ПараметрыИнтеграции.СпособОбмена = 3;
	#КонецЕсли
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВызыватьРекурсивно") Тогда
		СбисДополнительныеПараметры.Вставить("ВызыватьРекурсивно", Истина);
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВключатьОбмен") Тогда
		СбисДополнительныеПараметры.Вставить("ВключатьОбмен", Истина);
	КонецЕсли;
	
	//Переделал передачу параметров на структуру, чтобы нормально добавить адрес сервера и его дальнейшую передачу
	ПараметрыИнтеграции_До = Новый Структура("СпособОбмена, СпособХраненияНастроек, АдресСервера");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_До, ПараметрыИнтеграции);
	
	сбисПоказатьСостояние("Подключение SDK", ЭтаФорма);
	ОпределитьФормуИнтеграции(Кэш, ПараметрыИнтеграции.СпособОбмена);
	ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);	
	сбисОпределитьФормуРаботысЭП();
	
	ВключениеВыполнено = Ложь;
	Если СбисДополнительныеПараметры.ВызыватьРекурсивно Тогда
		Результат = Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш,ПараметрыИнтеграции,СбисДополнительныеПараметры,ВключениеВыполнено);
		Если ВключениеВыполнено Тогда//Если менялись параметры соединения, например, изменен в каталоге изменен адрес сервера, то включение уже выполнялось через рекурсивный вызов и повторно делать незачем
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить("ФормаОтправки", Кэш.Интеграция);
	
	Если Не Кэш.ТихийРежим//Включаем интеграцию сразу, только если не вызов извне и запуск не был отменен специально
		И	СбисДополнительныеПараметры.ВключатьОбмен Тогда
		Кэш.ФормаНастроек.сбисПодключитьЗаплатки(Кэш, Кэш.Парам);
		ОбменВключен = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("Включить", Кэш.ИнтеграцияИмя, "", Кэш).Включить(Кэш, ПараметрыИнтеграции);
		Если Не Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя = "SDK2" Тогда	
			ВерсияИнтеграции= Кэш.СБИС.ПараметрыИнтеграции.Версия;
		Иначе 
			ВерсияИнтеграции = "(Снят с поддержки)";	
		КонецЕсли; 
		Если Не ОбменВключен = Истина Тогда
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	//Дошли досюда, значит всё должно быть включено. Проверим, что в процессе включения ничего не поменялось 
	УспешноУстнановлено = Истина;
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_До Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		УспешноУстнановлено = Ложь;
		Прервать;
	КонецЦикла;
	сбисСпрятатьСостояние(ЭтаФорма);
	Возврат УспешноУстнановлено;	
	
КонецФункции

//Устанавливает в Кэш форму, в зависимости от установленного способа обмена
&НаКлиенте
Процедура ОпределитьФормуИнтеграции(ЛокальныйКэш,ВидОбмена) Экспорт
	// кладем в кэш форму интеграции в зависимости от способа обмена
	// удалить
	ЛокальныйКэш.Вставить("КоличествоВОтправке", 100);
	//
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		НадписьSDK = "ВерсияИнтеграции";
	Иначе
		НадписьSDK = "НадписьВерсияИнтеграции";
	КонецЕсли;
	ИнтеграцияЗаголовок = ""; 
	сбисЭлементФормы(ЭтаФорма, НадписьSDK).ЦветТекста = WebЦвета.Черный;
	ШрифтДляТекста = Новый Шрифт(,8); 
	сбисЭлементФормы(ЭтаФорма, НадписьSDK).Шрифт = ШрифтДляТекста;
	сбисЭлементФормы(ЭтаФорма, НадписьSDK).Гиперссылка = Ложь;
	Если ВидОбмена=0 Тогда
		НадписьSDK = "ВерсияИнтеграции";
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2");
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ИнтеграцияЗаголовок = "SDK2";
		Иначе 
			ИнтеграцияЗаголовок = "SDK(Снят с поддержки)";
		КонецЕсли;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).ЦветТекста = WebЦвета.Красный;
		ШрифтДляТекста = Новый Шрифт(,8,Истина,,Истина);
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Шрифт = ШрифтДляТекста;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Гиперссылка = Истина;
	ИначеЕсли ВидОбмена=2 Тогда
		НадписьSDK = "ВерсияИнтеграции";
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2Шифрование"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2Шифрование");
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ИнтеграцияЗаголовок = "SDK2";
		Иначе 
			ИнтеграцияЗаголовок = "SDK(Снят с поддержки)";
		КонецЕсли;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).ЦветТекста = WebЦвета.Красный;
		ШрифтДляТекста = Новый Шрифт(,8,Истина,,Истина);
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Шрифт = ШрифтДляТекста;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Гиперссылка = Истина;
	ИначеЕсли ВидОбмена=3 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("API"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","API");
		ИнтеграцияЗаголовок = "API";
	ИначеЕсли ВидОбмена=1 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ИнтеграцияКаталог"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ИнтеграцияКаталог");
		ИнтеграцияЗаголовок = "Каталог";
	ИначеЕсли ВидОбмена=4 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK");
		ИнтеграцияЗаголовок = "ExtSDK";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=5 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDKCrypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDKCrypto");
		ИнтеграцияЗаголовок = "ExtSDKCrypto";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=6 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2";
	ИначеЕсли ВидОбмена=7 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2Crypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2Crypto");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2Crypto";
	КонецЕсли;
	Если Не ЛокальныйКэш.ТихийРежим Тогда
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Заголовок = ИнтеграцияЗаголовок;
	КонецЕсли;
	ЛокальныйКэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя = ЛокальныйКэш.ИнтеграцияИмя;
	ЛокальныйКэш.ТекущийСеанс.Модули.Интеграция			= ЛокальныйКэш.Интеграция;	
	
	ЛокальныйКэш.Вставить("ФормаОтправки", ЛокальныйКэш.Интеграция);
КонецПроцедуры

//Устанавливает в Кэш форму, в зависимости от выбранного способа хранения настроек
&НаКлиенте
Процедура ОпределитьФормуРаботыСНастройками(ЛокальныйКэш, ВидОбмена, ВидХраненияНастроек, ПараметрыИнициализации=Неопределено) Экспорт
	
	Если ВидХраненияНастроек = 1 Тогда
		Если ЛокальныйКэш.Интеграция.ДоступныСерверныеНастройки() Тогда
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекСервер"));
		Иначе
			ВидХраненияНастроек	= 0;
			//Сообщить("Не удалось включить получение настроек с сервера! Для указанного способа обмена отсутствует возможность!", СтатусСообщения.Информация);
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
		КонецЕсли;
	Иначе
		ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
	КонецЕсли;
	ЛокальныйКэш.ФормаНастроек.ПараметрыРаботы = Новый Структура;
	ЛокальныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ЛокальныйКэш, ПараметрыИнициализации);
	
КонецПроцедуры

// Начальное заполнение всех необходимых для работы объектов	
&НаКлиенте
Функция ПослеОткрытияЗаполнитьКэш(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	ПодключитьРасширениеРаботыСФайлами();
	РезультатПодготовки = КэшПодготовить(СбисДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;
	СбисОбновитьЗаголовокФормы(Кэш.СБИС);
	СбисПолучитьПарам(СбисДополнительныеПараметры);
	ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	

	Возврат Кэш;
КонецФункции

// Начально заполнение всех необходимых для работы объектов	
&НаКлиенте
Процедура ПослеУстановитьРасширениеРаботыСФайлами(Результат=Неопределено) Экспорт
	ОтказЗапуска = Ложь;
	ДополнительныеПараметрыКэша = Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна", "Обычный");
	РезультатЗапуска = ПослеОткрытияЗаполнитьКэш(ДополнительныеПараметрыКэша,ОтказЗапуска);
	Если ОтказЗапуска Тогда
		сбисСообщитьОбОшибке(Кэш, РезультатЗапуска);
	Иначе
		//СбисПодготовитьРеестрДлительныхОпераций(); TODO раскомментировать, когда потребуется.
		ПослеОткрытияАвторизация();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияАвторизация(СбисДополнительныеПараметры=Неопределено) Экспорт
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Если Кэш.Парам.СпособОбмена = 1 Тогда//Для каталога пропускаем авторизацию.
		сбисПослеАвторизации(Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш), СбисДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	// Авторизация
	сбисПоказатьСостояние("Авторизация", ЭтаФорма);
	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат)
		Или (Не Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
		формаАвторизации.ЗагрузитьПараметрыАвторизации(Кэш);
		УспешнаяАвторизация = формаАвторизации.Авторизоваться();
	КонецЕсли;
	Если УспешнаяАвторизация = Истина Тогда
		сбисПослеАвторизации(УспешнаяАвторизация, СбисДополнительныеПараметры);
	Иначе
		Если Не формаАвторизации.Открыта() Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Результат = формаАвторизации.ОткрытьМодально();
				сбисПослеАвторизации(Результат,СбисДополнительныеПараметры);
			#Иначе
				формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
				формаАвторизации.Открыть();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура сбисПоследняяВерсия(Кэш)
	Отказ = Ложь;
	сбисВерсияНаСервере = Кэш.ОбщиеФункции.сбисПолучитьНомерВерсииОбработкиПоПараметрам(Кэш, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет сохраняемые параметры обработки	
&НаКлиенте
Процедура СбисПолучитьПарам(СбисДополнительныеПараметры=Неопределено) Экспорт
	ЗначПоУмолчанию = Новый Структура;
	ЗначПоУмолчанию.Вставить("Логин","");
	ЗначПоУмолчанию.Вставить("Пароль","");
	ЗначПоУмолчанию.Вставить("Сертификат","");
	ЗначПоУмолчанию.Вставить("ТипПрокси","Автоматически");
	ЗначПоУмолчанию.Вставить("ПроксиЛогин","");
	ЗначПоУмолчанию.Вставить("ПроксиПароль","");
	ЗначПоУмолчанию.Вставить("ПроксиПорт","");
	ЗначПоУмолчанию.Вставить("ПроксиСервер","");
	ЗначПоУмолчанию.Вставить("ЗапомнитьПароль",Ложь);
	ЗначПоУмолчанию.Вставить("ЗапомнитьСертификат",Ложь);
	ЗначПоУмолчанию.Вставить("ВходПоСертификату",Ложь);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице",50);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице1С",50);
	ЗначПоУмолчанию.Вставить("РежимСопоставления",1);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоСумме",0);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоНомеру","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоДате","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоКонтрагенту","По ИНН/КПП");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоОрганизации","Не использовать");
	ЗначПоУмолчанию.Вставить("СопоставлениеПериод","Дата документа");
	ЗначПоУмолчанию.Вставить("СопоставлятьПередЗагрузкой",Истина);
	ЗначПоУмолчанию.Вставить("УстанавливатьОбновленияАвтоматически",Истина);
	ЗначПоУмолчанию.Вставить("КаталогОтладки", "");
	//ЗначПоУмолчанию.Вставить("ОбновлятьСтатусы",Ложь);
	//ЗначПоУмолчанию.Вставить("ОбрабатыватьСлужебные",Ложь);
	ЗначПоУмолчанию.Вставить("ПредВерсия","");
	ЗначПоУмолчанию.Вставить("ОжидаемаяВерсия", "");
	//ЗначПоУмолчанию.Вставить("ДатаПоследнегоЗапросаСтатусов","");
	//ЗначПоУмолчанию.Вставить("ИдентификаторПоследнегоСобытия", "");
	ЗначПоУмолчанию.Вставить("ВариантВыгрузкиОтвПодр", 0);
	ЗначПоУмолчанию.Вставить("КолПакетовВОтправке", 0);
	ЗначПоУмолчанию.Вставить("КаталогНастроек","");
	ЗначПоУмолчанию.Вставить("ИдентификаторыНастроекВСБИС",Новый СписокЗначений);
	ЗначПоУмолчанию.Вставить("ИдентификаторНастроек","");
	ЗначПоУмолчанию.Вставить("СпособОбмена",6); //ExtSDK2
	ЗначПоУмолчанию.Вставить("СпособХраненияНастроек",0);
	ЗначПоУмолчанию.Вставить("КаталогОбмена","");
	ЗначПоУмолчанию.Вставить("УдалятьПрефиксИнформационнойБазы",Ложь);
	ЗначПоУмолчанию.Вставить("УдалятьПользовательскийПрефикс",Ложь);
	ЗначПоУмолчанию.Вставить("РазделПоУмолчанию","Полученные");
	ЗначПоУмолчанию.Вставить("ОтправлятьНоменклатуруСДокументами",Истина);
	ЗначПоУмолчанию.Вставить("ПересчитыватьЦеныПоДанным1С",0);
	ЗначПоУмолчанию.Вставить("ПересчитыватьНДСПоДанным1С",0);
	ЗначПоУмолчанию.Вставить("СпособЗагрузки",0); 
	ЗначПоУмолчанию.Вставить("ПерезаполнятьТолькоНепроведенные",Ложь);
	ЗначПоУмолчанию.Вставить("ИдентификаторСессии","");
	ЗначПоУмолчанию.Вставить("ПрочитаннаяНовость","");
	ЗначПоУмолчанию.Вставить("СостояниеЭД",Ложь);	// alo
	ЗначПоУмолчанию.Вставить("Меркурий",Ложь);	// alo Меркурий
	ЗначПоУмолчанию.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	ЗначПоУмолчанию.Вставить("ШифроватьВыборочно", Ложь);
	ЗначПоУмолчанию.Вставить("АдресСервера", СбисСписокСерверов()[0].Значение);
	ЗначПоУмолчанию.Вставить("НастройкиАвтообновление", Истина);
	ЗначПоУмолчанию.Вставить("ИнтеграцияAPIВызовыНаКлиенте", Ложь);
	ЗначПоУмолчанию.Вставить("СтатусыВГосСистеме", Ложь);
	ЗначПоУмолчанию.Вставить("ВремяОжиданияОтвета", 60);//Время ожидания ответа (для плагина)
	ЗначПоУмолчанию.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов", Ложь);
	ЗначПоУмолчанию.Вставить("РежимЗагрузки", 3); // Загружать только несопоставленные документы 1С
	ЗначПоУмолчанию.Вставить("СпособХраненияМетокСтатусов", 0); // Обновлять статусы в разрезе пользователя СБИС
	ЗначПоУмолчанию.Вставить("СоздаватьШтрихкодыНоменклатуры", Ложь);
	ФильтрыПоРазд = Новый Структура();
	ФильтрыПоРазд.Вставить("Полученные", Новый Структура);
	ФильтрыПоРазд.Вставить("Отправленные", Новый Структура);
	ФильтрыПоРазд.Вставить("Полученные_ЭТрН", Новый Структура);
	ФильтрыПоРазд.Вставить("Отправленные_ЭТрН", Новый Структура);
	ФильтрыПоРазд.Вставить("Продажа", Новый Структура);
	ФильтрыПоРазд.Вставить("Покупка", Новый Структура);
	ФильтрыПоРазд.Вставить("Задачи", Новый Структура);
	ФильтрыПоРазд.Вставить("Учет", Новый Структура);
	ЗначПоУмолчанию.Вставить("ФильтрыПоРазделам", ФильтрыПоРазд);
	ЗначПоУмолчанию.Вставить("ИспользоватьГенератор", Истина); 
	ЗначПоУмолчанию.Вставить("ИспользоватьНовыйФорматАктаСверки", Ложь);  
	ЗначПоУмолчанию.Вставить("РеквизитСопоставленияНоменклатуры", "Идентификатор");
	
	// Проект Контрагенты 1С в обработке
	ЗначПоУмолчанию.Вставить("СкладПоУмолчанию", Неопределено);
	ЗначПоУмолчанию.Вставить("РасСчетПоУмолчанию", Неопределено);
	ЗначПоУмолчанию.Вставить("ЗаполнениеКонтрагента1С", "ГрузополучательСБИС");
	ЗначПоУмолчанию.Вставить("ТипГрузополучателя", "ГрузополучательНеВедется");
	
	// Проект Расширенные проверки сопоставления номенклатуры
	ЗначПоУмолчанию.Вставить("ПорядокАвтоматическогоСопоставления", Неопределено);
	ЗначПоУмолчанию.Вставить("ПараметрыСохраненияСопоставлений", Неопределено);
	ЗначПоУмолчанию.Вставить("СпособСопоставленияНоменклатуры", 0);	
	
	НастройкиКрипто = Новый Структура();
	НастройкиКрипто.Вставить("ИмяПрограммы", "");
	НастройкиКрипто.Вставить("ПутьКПрограмме", "");
	НастройкиКрипто.Вставить("ТипПрограммы", 0);
	НастройкиКрипто.Вставить("ПодписьНаСервере", Ложь);
	ЗначПоУмолчанию.Вставить("НастройкиКриптографии", НастройкиКрипто);
	
	//Если первый запуск происходит на серверной БД с Линуксом
	Если	ЗначениеЗаполнено(Кэш.ПараметрыСистемы)
		И	Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
		И	Кэш.ПараметрыСистемы.Сервер.ЭтоLinux Тогда
		ЗначПоУмолчанию.СпособХраненияНастроек = 1;
	КонецЕсли;
	Если ТипЗнч(Кэш.Парам) = Тип("Структура") Тогда
		Для Каждого Поле Из ЗначПоУмолчанию Цикл
			Если НЕ(Кэш.Парам.Свойство(Поле.Ключ)) Тогда
				#Если Не ТолстыйКлиентОбычноеПриложение Тогда
					Попытка 
						Если	ЗначениеЗаполнено(ЭтаФорма[Поле.Ключ])
							Или (	Не Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
								И		ТипЗнч(Поле.Значение) = Тип("Число")) Тогда
							Кэш.Парам.Вставить(Поле.Ключ,ЭтаФорма[Поле.Ключ]);
							Продолжить;
						КонецЕсли;
					Исключение
					КонецПопытки;
				#КонецЕсли
				Кэш.Парам.Вставить(Поле.Ключ,Поле.Значение);
				Попытка
					ЭтаФорма[Поле.Ключ] = Поле.Значение;
				Исключение
				КонецПопытки;
				Продолжить;
			Иначе
				Попытка
					ЭтаФорма[Поле.Ключ] = Кэш.Парам[Поле.Ключ];
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Кэш.Парам = ЗначПоУмолчанию;
	КонецЕсли;
	Если Кэш.Парам.ВремяОжиданияОтвета = 0 Тогда
		Кэш.Парам.ВремяОжиданияОтвета = ЗначПоУмолчанию["ВремяОжиданияОтвета"];
	КонецЕсли;
	// Добавляем отдельный фильтр для подразделов ЭТрН
	Если Не Кэш.Парам.ФильтрыПоРазделам.Свойство("Полученные_ЭТрН") Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить("Полученные_ЭТрН", Новый Структура);
	КонецЕсли;
	Если Не Кэш.Парам.ФильтрыПоРазделам.Свойство("Отправленные_ЭТрН") Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить("Отправленные_ЭТрН", Новый Структура);
	КонецЕсли;
	Кэш.Парам.ИспользоватьГенератор = Кэш.Парам.ИспользоватьГенератор = Истина;
	//Отладка при запуске всегда ложь. 
	Кэш.Парам.Вставить("РежимОтладки", Ложь);
	Кэш.Парам.Вставить("ЧтениеНастроекПоТребованию", Истина);
	Кэш.Парам.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	Если Не	СбисДополнительныеПараметры = Неопределено
		И	СбисДополнительныеПараметры.Свойство("Парам") Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры.парам Цикл 
			Кэш.Парам.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск Тогда
		//При первом запуске, установить флаг автообновления ини
		Кэш.Парам.НастройкиАвтообновление = Истина;
		НастройкиАвтообновление = Истина;
	КонецЕсли;
	
	Если Кэш.Парам.СпособОбмена = 4 Тогда
		Кэш.Парам.СпособОбмена = 6; // ExtSDK -> ExtSDK2
	ИначеЕсли Кэш.Парам.СпособОбмена = 5 Тогда
		Кэш.Парам.СпособОбмена = 7; // ExtSDKCrypto -> ExtSDK2Crypto
	КонецЕсли;
	МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("Парам", Кэш.Парам);
	
КонецПроцедуры

&НаКлиенте
Функция сбисПослеАвторизации(Результат, СбисДополнительныеПараметры) Экспорт

	ЕстьИзмененияАккаунта = Ложь;
	Если Результат = Неопределено Тогда
		//Если результат неопределен, то форма авторизации была просто закрыта.
		Кэш.Парам.ЗапомнитьПароль = Ложь;
		Кэш.Парам.ЗапомнитьСертификат = Ложь;
		МодульОбъектаКлиент().СбисЗавершитьРаботу();
		Возврат Неопределено;
	ИначеЕсли Результат = "" Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ИдСессии = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Результат.Свойство("АккаунтИзменился") Тогда
			ЕстьИзмененияАккаунта = Результат.АккаунтИзменился;
		КонецЕсли;
		Результат = Результат.ИдСессии;	 
	КонецЕсли;
			
	Пользователь_До	= Пользователь;
	Попытка
		МодульОбъектаКлиент().ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ИнфОбОшибке, "сбисПослеАвторизации")); 
	КонецПопытки;
	
	СбисОбновитьЗаголовокФормы(Кэш.СБИС);
	
	ЕстьИзмененияОбмена			= Не (СпособОбмена			= Кэш.Парам.СпособОбмена);
	ЕстьИзмененияНастроек		= Не (СпособХраненияНастроек= Кэш.Парам.СпособХраненияНастроек);
	ЕстьИзмененияПользователя	= Не (Пользователь_До		= Пользователь) И Не Пользователь_До = "";
	
	Если ЕстьИзмененияОбмена Тогда
		ИзмененияОбмена = Новый Структура("СпособОбмена, СпособОбменаДо", Кэш.Парам.СпособОбмена, СпособОбмена);
		Если СбисДополнительныеПараметры = Неопределено Тогда
			СбисДополнительныеПараметры = Новый Структура();	
		КонецЕсли;
		Если СбисДополнительныеПараметры.Свойство("ИзмененияОбмена") Тогда
			СбисДополнительныеПараметры.ИзмененияОбмена = ИзмененияОбмена;	
		Иначе
			СбисДополнительныеПараметры.Вставить("ИзмененияОбмена", ИзмененияОбмена);	
		КонецЕсли;
	КонецЕсли;
	Если	СбисДополнительныеПараметры.Свойство("ИзмененаФормаНастроек")
		И	СбисДополнительныеПараметры.ИзмененаФормаНастроек Тогда
		ЕстьИзмененияНастроек = Истина;
	КонецЕсли;
	Если ЕстьИзмененияНастроек Тогда
		//был изменен способ хранения настроек. Нужно будет перечитать список доступных конфигураций, если соберёмся в раздел файлов.
		СбисДополнительныеПараметры.Вставить("ИзмененаФормаНастроек", Истина);
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзмененаФормаНастроек",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияПользователя Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияАккаунта Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеАккаунта",		Истина);
	КонецЕсли;

	СпособХраненияНастроек		= Кэш.Парам.СпособХраненияНастроек;
	СпособОбмена				= Кэш.Парам.СпособОбмена;
	КаталогОбмена				= Кэш.Парам.КаталогОбмена;
	ШифроватьВыборочно			= Кэш.Парам.ШифроватьВыборочно;
	КаталогНастроек				= Кэш.Парам.КаталогНастроек;
	ИнтеграцияAPIВызовыНаКлиенте= Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте;
	
	Если	ЕстьИзмененияНастроек
		Или	ЕстьИзмененияПользователя 
		Или ЕстьИзмененияАккаунта Тогда
		СбисДополнительныеПараметры.Вставить("ОбновитьКонтент", Истина);
	КонецЕсли;
	
	ПослеОткрытияЗавершение(СбисДополнительныеПараметры);
	
	Если Кэш.ТекущийСеанс.Свойство("ВыполненПереходНаExtSDK2") И Кэш.ТекущийСеанс.ВыполненПереходНаExtSDK2 = Истина Тогда
		//нужно перезапустить главное окно, но не здесь
		//т.к. форма авторизации не закрыта (закрывается)
		//перезапуск может вызвать повторную авторизацию
		Если Кэш.Парам.ЗапомнитьСертификат ИЛИ Кэш.Парам.ЗапомнитьПароль Тогда
			ПараметрыИнтеграции = Новый Структура("АдресСервера, СпособОбмена, СпособХраненияНастроек, ВремяОжиданияОтвета", Кэш.СБИС.АдресСервера);
			ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Кэш.Парам);
			Кэш.ГлавноеОкно.ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, , Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Устанавливает кэш обмена
&НаКлиенте
Функция	СформироватьСтруктуруКэшСБИС(СбисДополнительныеПараметры) Экспорт
	
	Возврат МодульОбъектаКлиент().НовыйКэшСБИС(СбисДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокФорм()
	СписокФорм = Новый СписокЗначений;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МетаданныеФорм = ЭтотОбъект.Метаданные().Формы;
	#Иначе
		МетаданныеФорм = РеквизитФормыВЗначение("Объект").Метаданные().Формы;
	#КонецЕсли	
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
КонецФункции

&НаКлиенте
Процедура СбисПодготовитьРеестрДлительныхОпераций()
	фрм = сбисПолучитьФорму("ФормаДлительныеОперации",,,ЭтаФорма);
	фрм.ПодготовитьРеестрКРаботе();		
КонецПроцедуры
