
&НаКлиенте
Процедура ПроверитьИУстановитьКэш()

	Попытка
		
		ТекущийМодульОбъекта = МодульОбъектаКлиент();
		
	Исключение
		
		ВызватьИсключение("Возникла неизвестная ошибка при запуске обработки. Модуль объекта не был получен: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	Если			ТекущийМодульОбъекта = Неопределено Тогда
		
		ВызватьИсключение("Возникла неизвестная ошибка при запуске обработки. Модуль объекта не был определен.");
		
	ИначеЕсли Не	ТекущийМодульОбъекта.ГлобальныйКэш = Неопределено Тогда 
		
		// считаем, что всё ок если глобальный кэш был установлен
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ТекущийМодульОбъекта.НастроитьКэшОбработки(ЭтаФорма);
		
	Исключение
		
		СообщениеОшибки		= "Ошибка настройки стартовых параметров обработки.";
		ОшибкаУстановкиКэш 	= ТекущийМодульОбъекта.НовыйСбисИсключение(ИнформацияОбОшибке(), "ФормаГлавноеОкно.ПроверитьИУстановитьКэш", 703, СообщениеОшибки);
		ВызватьИсключение(ТекущийМодульОбъекта.СбисИсключение_Представление(ОшибкаУстановкиКэш, "ПолныйТекст"));
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет структуру Кэша	
&НаКлиенте
Функция КэшПодготовить(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
    Перем ТекущийМодульОбъекта;
	
	ПроверитьИУстановитьКэш();
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	СбисПоказатьСостояние("Установка параметров");
	
	ТекущийМодульОбъекта	= МодульОбъектаКлиент();
	МодульОбработкиJSON		= ТекущийМодульОбъекта;
		
	Попытка
		
		СбисОбщиеФункции = ТекущийМодульОбъекта.ПолучитьФормуОбработки("РаботаСДокументами1С"); 
		СбисОбщиеФункции.МестныйКэш = Кэш;
		
	Исключение
		Отказ = Истина;
		Возврат ТекущийМодульОбъекта.НовыйСбисИсключение(ИнформацияОбОшибке(), "ФормаГлавноеОкно.КэшПодготовить", 776, "Запуск программы/функции/метода не удался", "Не удалось определить модуль вызываемых функций. Обратитесь в техническую поддержку.");
	КонецПопытки;

	Попытка
		
		ФайлыНастроекСервер = ТекущийМодульОбъекта.ПолучитьФормуОбработки("ФайлыНастроекСервер"); 
		
	Исключение
		
		Отказ = Истина;
		Возврат ТекущийМодульОбъекта.НовыйСбисИсключение(ИнформацияОбОшибке(), "ФормаГлавноеОкно.КэшПодготовить", 776, "Запуск программы/функции/метода не удался", "Не удалось определить модуль работы с настройками СБИС. Обратитесь в техническую поддержку.");
		
	КонецПопытки;
	
	ТекущийМодульОбъекта.ОбновитьПараметрГлобальногоМодуля("РаботаСJSON",		МодульОбработкиJSON);
	ТекущийМодульОбъекта.ОбновитьПараметрГлобальногоМодуля("ФункцииДокументов",	СбисОбщиеФункции);
	ТекущийМодульОбъекта.ОбновитьПараметрГлобальногоМодуля("НастройкиСБИС",		ФайлыНастроекСервер);
	ТекущийМодульОбъекта.ЛокальныйКэш_ПривестиСовместимость(Кэш);
	
	Если ЗначениеЗаполнено(СбисДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры Цикл
			Если КлючИЗначение.Ключ = "Парам" Тогда
				Продолжить;
			ИначеЕсли КлючИЗначение.Ключ = "РежимЗапускаГлавногоОкна" Тогда
				РежимЗапускаГлавногоОкна = КлючИЗначение.Значение;
				Продолжить;
			КонецЕсли;
			Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВосстановитьПараметрыПользователя(СбисДополнительныеПараметры);	
	
	ТекущийМодульОбъекта.ОбновитьПараметрГлобальногоМодуля("Парам",	Кэш.Парам);
	ТекущийМодульОбъекта.ИзменитьПараметрСбис("АдресСервера",		Кэш.Парам.АдресСервера);
	ТекущийМодульОбъекта.ИзменитьПараметрСбис("ТихийРежим",			Кэш.ТихийРежим);
	
	Возврат Кэш;
	
КонецФункции

//Устанавливает в Кэш формы для работы с настройками и методами работы с сервисом
&НаКлиенте
Функция ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры=Неопределено)	Экспорт
	
	#Если ВебКлиент Тогда
		// для веб ставим всегда АПИ
		ПараметрыИнтеграции.СпособОбмена = 3;
	#КонецЕсли
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВызыватьРекурсивно") Тогда
		СбисДополнительныеПараметры.Вставить("ВызыватьРекурсивно", Истина);
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВключатьОбмен") Тогда
		СбисДополнительныеПараметры.Вставить("ВключатьОбмен", Истина);
	КонецЕсли;
	
	//Переделал передачу параметров на структуру, чтобы нормально добавить адрес сервера и его дальнейшую передачу
	ПараметрыИнтеграции_До = Новый Структура("СпособОбмена, СпособХраненияНастроек, АдресСервера");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_До, ПараметрыИнтеграции);
	
	сбисПоказатьСостояние("Подключение SDK", ЭтаФорма);
	ОпределитьФормуИнтеграции(Кэш, ПараметрыИнтеграции.СпособОбмена);
	ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);	
	сбисОпределитьФормуРаботысЭП();
	ОпределитьФормуРаботыССопоставлениемНоменклатуры(ПараметрыИнтеграции.СпособСопоставленияНоменклатуры);
	
	ВключениеВыполнено = Ложь;
	Если СбисДополнительныеПараметры.ВызыватьРекурсивно Тогда
		Результат = Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш,ПараметрыИнтеграции,СбисДополнительныеПараметры,ВключениеВыполнено);
		Если ВключениеВыполнено Тогда//Если менялись параметры соединения, например, изменен в каталоге изменен адрес сервера, то включение уже выполнялось через рекурсивный вызов и повторно делать незачем
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Если Не МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ТихийРежим")//Включаем интеграцию сразу, только если не вызов извне и запуск не был отменен специально
		И	СбисДополнительныеПараметры.ВключатьОбмен Тогда
		Кэш.ФормаНастроек.сбисПодключитьЗаплатки(Кэш, Кэш.Парам);
		
		ИмяИнтеграции		= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("ИнтеграцияИмя", Новый Структура("ЛокальныйКэш", Кэш));
		МодульИнтеграции	= МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("Включить", ИмяИнтеграции);
		
		ОбменВключен		= МодульИнтеграции.Включить(Кэш, ПараметрыИнтеграции);
		МодульИсходный		= МодульОбъектаКлиент().МодульИнтеграцииСБИС(ИмяИнтеграции);
		
		Попытка 
			
			СведенияОбИнтеграции	= МодульИсходный.СведенияОбИнтеграции();
			ВерсияИнтеграции		= СведенияОбИнтеграции.Версия;
			
		Исключение
			
			ВерсияИнтеграции		= "";
			
		КонецПопытки;
		
		
		Если Не ОбменВключен = Истина Тогда
			
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;

	//Дошли досюда, значит всё должно быть включено. Проверим, что в процессе включения ничего не поменялось 
	УспешноУстнановлено = Истина;
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_До Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		УспешноУстнановлено = Ложь;
		Прервать;
	КонецЦикла;
	сбисСпрятатьСостояние(ЭтаФорма);
	Возврат УспешноУстнановлено;	
	
КонецФункции

//Устанавливает в Кэш форму, в зависимости от установленного способа обмена
&НаКлиенте
Процедура ОпределитьФормуИнтеграции(ЛокальныйКэш,ВидОбмена) Экспорт
	
	//TODO 24.1100 Старые параметры, спилить после отказа от старой отправки
	ЛокальныйКэш.Вставить("КоличествоВОтправке", 100);
	
	ИнтеграцияЗаголовок = ""; 
	
	Если ВидОбмена=0 Тогда
		НадписьSDK		= "ВерсияИнтеграции";
		ИнтеграцияИмя	= "SDK2";
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ИнтеграцияЗаголовок = "SDK2";
		Иначе 
			ИнтеграцияЗаголовок = "SDK(Снят с поддержки)";
		КонецЕсли;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).ЦветТекста = WebЦвета.Красный;
		ШрифтДляТекста = Новый Шрифт(,8,Истина,,Истина);
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Шрифт = ШрифтДляТекста;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Гиперссылка = Истина;
	ИначеЕсли ВидОбмена=2 Тогда
		НадписьSDK		= "ВерсияИнтеграции";
		ИнтеграцияИмя	= "SDK2Шифрование";
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ИнтеграцияЗаголовок = "SDK2";
		Иначе 
			ИнтеграцияЗаголовок = "SDK(Снят с поддержки)";
		КонецЕсли;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).ЦветТекста = WebЦвета.Красный;
		ШрифтДляТекста = Новый Шрифт(,8,Истина,,Истина);
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Шрифт = ШрифтДляТекста;
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Гиперссылка = Истина;
	ИначеЕсли ВидОбмена=3 Тогда
		ИнтеграцияЗаголовок = "API";
		ИнтеграцияИмя		= "API";
	ИначеЕсли ВидОбмена=1 Тогда
		ИнтеграцияЗаголовок = "Каталог";
		ИнтеграцияИмя		= "ИнтеграцияКаталог";
	ИначеЕсли ВидОбмена=4 Тогда
		
		ОпределитьФормуИнтеграции(ЛокальныйКэш, 6);
		Возврат;
		
	ИначеЕсли ВидОбмена=5 Тогда
		
		ОпределитьФормуИнтеграции(ЛокальныйКэш, 7);
		Возврат;
		
	ИначеЕсли ВидОбмена=6 Тогда
		ИнтеграцияЗаголовок = "ExtSDK2";
		ИнтеграцияИмя		= "ExtSDK2";
	ИначеЕсли ВидОбмена=7 Тогда
		ИнтеграцияЗаголовок = "ExtSDK2Crypto";
		ИнтеграцияИмя		= "ExtSDK2Crypto";
	ИначеЕсли ВидОбмена=8 Тогда 
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "SabyPluginConnector";
		ИнтеграцияИмя		= "SabyPluginConnector";
	ИначеЕсли ВидОбмена=9 Тогда 
		ИнтеграцияЗаголовок = "SabyHttpsClient";
		ИнтеграцияИмя		= "SabyHttpsClient";
	КонецЕсли;
	
	МодульИнтеграции = МодульОбъектаКлиент().МодульИнтеграцииСБИС(ВидОбмена);
	Если МодульИнтеграции = Неопределено Тогда
		
		ОшибкаПодбораИнтеграции = МодульОбъектаКлиент().НовыйСбисИсключение(700, "ФормаГлавноеОкно.ОпределитьФормуИнтеграции",,,"Установлено неизвестный способ обмена.");
		ВызватьИсключение МодульОбъектаКлиент().СбисИсключение_Представление(ОшибкаПодбораИнтеграции);
		
	КонецЕсли;
		
	
	ШрифтДляТекста = Новый Шрифт(,8); 
	
	ЭлементНадписи = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ВерсияИнтеграции");
	ЭлементНадписи.ЦветТекста		= WebЦвета.Черный;
	ЭлементНадписи.Шрифт			= ШрифтДляТекста;
	ЭлементНадписи.Гиперссылка		= Ложь;
	
	ЗаголовокНадписи = МодульОбъектаКлиент().ПолучитьЭлементФормыОбработки(ЭтаФорма, "ВерсияИнтеграции.Надпись");
	ЗаголовокНадписи.Заголовок		= ИнтеграцияЗаголовок;
	
	ДопПараметрыУстановить = Новый Структура("Глобально, Кэш", Ложь, ЛокальныйКэш);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Интеграция",	МодульИнтеграции, ДопПараметрыУстановить);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИнтеграцияИмя",	ИнтеграцияИмя, ДопПараметрыУстановить);
	
КонецПроцедуры

//Устанавливает в Кэш форму, в зависимости от выбранного способа хранения настроек
&НаКлиенте
Процедура ОпределитьФормуРаботыСНастройками(ЛокальныйКэш, ВидОбмена, ВидХраненияНастроек, ПараметрыИнициализации=Неопределено) Экспорт
	
	МодульИнтеграцииЛокальный	= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("Интеграция",	Новый Структура("ЛокальныйКэш", ЛокальныйКэш));
	СведенияОбИнтеграции		= МодульИнтеграцииЛокальный.СведенияОбИнтеграции(); 
	Если		ВидХраненияНастроек = 1
		И Не	СведенияОбИнтеграции.Параметры.ДоступныСерверныеНастройки Тогда
		ВидХраненияНастроек	= 0;
	КонецЕсли;
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособХраненияНастроек", ВидХраненияНастроек, Новый Структура("Параметры", ПараметрыИнициализации));
	
КонецПроцедуры

// Устанавливает в Кэш форму работы с сопоставлением номенклатуры
&НаКлиенте
Процедура ОпределитьФормуРаботыССопоставлениемНоменклатуры(СпособСопоставленияНоменклатуры)
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СпособСопоставленияНоменклатуры", СпособСопоставленияНоменклатуры);	
	
КонецПроцедуры

// Начальное заполнение всех необходимых для работы объектов	
&НаКлиенте
Функция ПослеОткрытияЗаполнитьКэш(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	РезультатПодготовки = КэшПодготовить(СбисДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;

	СбисОбновитьЗаголовокФормы(Кэш.СБИС);
	ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	
	Возврат Кэш;
КонецФункции

// Обработчик для Веб-клиента	
&НаКлиенте
Процедура ПослеУстановитьРасширениеРаботыСФайлами(ДопПараметры = Неопределено) Экспорт
	
	СтартОбработкиВО2(, ДопПараметры);
	
КонецПроцедуры

// Начально заполнение всех необходимых для работы объектов	
&НаКлиенте
Процедура СтартОбработкиВО2(АргументВыполнение = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	ОтказЗапуска = Ложь;
	ДополнительныеПараметрыКэша = Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна", "Обычный");
	РезультатЗапуска = ПослеОткрытияЗаполнитьКэш(ДополнительныеПараметрыКэша, ОтказЗапуска);
	
	Если ОтказЗапуска Тогда
		
		СбисСообщитьОбОшибке(Кэш, РезультатЗапуска);
		
	ИначеЕсли МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ОтложенныйЗапуск") Тогда
		
		// ничего не делаем
		Возврат;
		
	Иначе
		
		//СбисПодготовитьРеестрДлительныхОпераций(); TODO раскомментировать, когда потребуется.
		ПослеОткрытияАвторизация();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияАвторизация(СбисДополнительныеПараметры=Неопределено) Экспорт
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Если Кэш.Парам.СпособОбмена = 1 Тогда//Для каталога пропускаем авторизацию.
		сбисПослеАвторизации(Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш), СбисДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	// Авторизация
	сбисПоказатьСостояние("Авторизация", ЭтаФорма);
	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат)
		Или (Не Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
		формаАвторизации.ЗагрузитьПараметрыАвторизации(Кэш);
		УспешнаяАвторизация = формаАвторизации.Авторизоваться();
	КонецЕсли;
	Если УспешнаяАвторизация = Истина Тогда
		сбисПослеАвторизации(УспешнаяАвторизация, СбисДополнительныеПараметры);
	Иначе
		Если Не формаАвторизации.Открыта() Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Результат = формаАвторизации.ОткрытьМодально();
				сбисПослеАвторизации(Результат,СбисДополнительныеПараметры);
			#Иначе
				формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
				формаАвторизации.Открыть();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура сбисПоследняяВерсия(Кэш)
	Отказ = Ложь;
	сбисВерсияНаСервере = Кэш.ОбщиеФункции.сбисПолучитьНомерВерсииОбработкиПоПараметрам(Кэш, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет сохраняемые параметры обработки
//
// Параметры:
//  СбисДополнительныеПараметры	 - Структура - дополнителные параметры функции
//
&НаКлиенте
Процедура ВосстановитьПараметрыПользователя(СбисДополнительныеПараметры = Неопределено) Экспорт
	Перем ПараметрыПользователяВходящие, ВосстановленныйПараметрПользователя;
	
	МодульТекущий = МодульОбъектаКлиент();
	
	ЗначПоУмолчанию = МодульТекущий.ПараметрыСбисПоУмолчанию();
	
	// Восстановить сохраненные параметры пользователя
	Попытка
		
		ПараметрыВосстановлены = СбисСохраненныеЗначения();
		
	Исключение
		
		МодульТекущий.СбисСообщить(ИнформацияОбОшибке(), "ФормаГлавноеОкно.ВосстановитьПараметрыПользователя");
		ПараметрыВосстановлены = Новый Соответствие;
		
	КонецПопытки;
	
	Если		СбисДополнительныеПараметры = Неопределено
		Или	Не	СбисДополнительныеПараметры.Свойство("Парам", ПараметрыПользователяВходящие)Тогда
		
		ПараметрыПользователяВходящие = Новый Структура;
		
	КонецЕсли;
	
	ПараметрыНеВосстанавливаются = Новый Массив;
	ПараметрыНеВосстанавливаются.Добавить("ЧтениеНастроекПоТребованию");
	ПараметрыНеВосстанавливаются.Добавить("РежимОтладки");
	ПараметрыНеВосстанавливаются.Добавить("UserAgent");
	ПараметрыНеВосстанавливаются.Добавить("ПолнаяВерсияПродукта");
	
	Для Каждого КлючИЗначениеДефолт Из ЗначПоУмолчанию Цикл
		
		Если Не ПараметрыПользователяВходящие.Свойство(КлючИЗначениеДефолт.Ключ, ВосстановленныйПараметрПользователя) Тогда
			
			Если ПараметрыНеВосстанавливаются.Найти(КлючИЗначениеДефолт.Ключ) = Неопределено Тогда

				ВосстановленныйПараметрПользователя = ПараметрыВосстановлены.Получить(КлючИЗначениеДефолт.Ключ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВосстановленныйПараметрПользователя = Неопределено	Тогда
			
			ВосстановленныйПараметрПользователя = КлючИЗначениеДефолт.Значение;
			
		КонецЕсли;
		
		Кэш.Парам.Вставить(КлючИЗначениеДефолт.Ключ, ВосстановленныйПараметрПользователя);
		
	КонецЦикла;	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Кэш.Парам);
	
	ВерсияБылаСохранена = Кэш.Парам.ПредВерсия;
	ЭтоПервыйЗапуск		= ВерсияБылаСохранена = Неопределено;
	ЭтоНоваяВерсия		= Не	ЭтоПервыйЗапуск
						И		МодульТекущий.СбисНоваяВерсия(Кэш.ПараметрыСистемы.Обработка.Версия, ВерсияБылаСохранена);
						
	МодульТекущий.ИзменитьПараметрТекущегоСеанса("ПервыйЗапуск",	ЭтоПервыйЗапуск);
	МодульТекущий.ИзменитьПараметрТекущегоСеанса("НоваяВерсия",		ЭтоНоваяВерсия);
	
	
КонецПроцедуры

&НаКлиенте
Функция сбисПослеАвторизации(Результат, СбисДополнительныеПараметры) Экспорт

	ЕстьИзмененияАккаунта = Ложь;
	Если Результат = Неопределено Тогда
		//Если результат неопределен, то форма авторизации была просто закрыта.
		Кэш.Парам.ЗапомнитьПароль = Ложь;
		Кэш.Парам.ЗапомнитьСертификат = Ложь;
		МодульОбъектаКлиент().СбисЗавершитьРаботу();
		Возврат Неопределено;
	ИначеЕсли Результат = "" Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ИдСессии = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Результат.Свойство("АккаунтИзменился") Тогда
			ЕстьИзмененияАккаунта = Результат.АккаунтИзменился;
		КонецЕсли;
		Результат = Результат.ИдСессии;	 
	КонецЕсли;
			
	Пользователь_До	= Пользователь;
	Попытка
		МодульОбъектаКлиент().ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ИнфОбОшибке, "сбисПослеАвторизации")); 
	КонецПопытки;
	
	СбисОбновитьЗаголовокФормы(Кэш.СБИС);
	
	ЕстьИзмененияОбмена			= Не (СпособОбмена			= Кэш.Парам.СпособОбмена);
	ЕстьИзмененияНастроек		= Не (СпособХраненияНастроек= Кэш.Парам.СпособХраненияНастроек);
	ЕстьИзмененияПользователя	= Не (Пользователь_До		= Пользователь) И Не Пользователь_До = "";
	
	Если ЕстьИзмененияОбмена Тогда
		ИзмененияОбмена = Новый Структура("СпособОбмена, СпособОбменаДо", Кэш.Парам.СпособОбмена, СпособОбмена);
		Если СбисДополнительныеПараметры = Неопределено Тогда
			СбисДополнительныеПараметры = Новый Структура();	
		КонецЕсли;
		Если СбисДополнительныеПараметры.Свойство("ИзмененияОбмена") Тогда
			СбисДополнительныеПараметры.ИзмененияОбмена = ИзмененияОбмена;	
		Иначе
			СбисДополнительныеПараметры.Вставить("ИзмененияОбмена", ИзмененияОбмена);	
		КонецЕсли;
	КонецЕсли;
	Если	СбисДополнительныеПараметры.Свойство("ИзмененаФормаНастроек")
		И	СбисДополнительныеПараметры.ИзмененаФормаНастроек Тогда
		ЕстьИзмененияНастроек = Истина;
	КонецЕсли;
	Если ЕстьИзмененияНастроек Тогда
		//был изменен способ хранения настроек. Нужно будет перечитать список доступных конфигураций, если соберёмся в раздел файлов.
		СбисДополнительныеПараметры.Вставить("ИзмененаФормаНастроек", Истина);
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзмененаФормаНастроек",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияПользователя Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя",	Истина);
	КонецЕсли;
	Если ЕстьИзмененияАккаунта Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеАккаунта",		Истина);
	КонецЕсли;

	СпособХраненияНастроек		= Кэш.Парам.СпособХраненияНастроек;
	СпособОбмена				= Кэш.Парам.СпособОбмена;
	КаталогОбмена				= Кэш.Парам.КаталогОбмена;
	ШифроватьВыборочно			= Кэш.Парам.ШифроватьВыборочно;
	КаталогНастроек				= Кэш.Парам.КаталогНастроек;
	ИнтеграцияAPIВызовыНаКлиенте= Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте;
	
	Если	ЕстьИзмененияНастроек
		Или	ЕстьИзмененияПользователя 
		Или ЕстьИзмененияАккаунта Тогда
		СбисДополнительныеПараметры.Вставить("ОбновитьКонтент", Истина);
	КонецЕсли;
	
	ПослеОткрытияЗавершение(СбисДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокФорм()
	СписокФорм = Новый СписокЗначений;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МетаданныеФорм = ЭтотОбъект.Метаданные().Формы;
	#Иначе
		МетаданныеФорм = РеквизитФормыВЗначение("Объект").Метаданные().Формы;
	#КонецЕсли	
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
КонецФункции

&НаКлиенте
Процедура СбисПодготовитьРеестрДлительныхОпераций()
	фрм = сбисПолучитьФорму("ФормаДлительныеОперации",,,ЭтаФорма);
	фрм.ПодготовитьРеестрКРаботе();		
КонецПроцедуры
