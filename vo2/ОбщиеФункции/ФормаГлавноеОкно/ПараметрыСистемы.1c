
////////////////////////////////////////////////////
//////////////////Параметры системы/////////////////
////////////////////////////////////////////////////

//Структура с описанием текущей системы. Параметры получаются для текущей конфы.
//Вынесено в общее для сбора сразу всех данных на сервере
&НаКлиенте
Функция ПолучитьПараметрыСистемы(Отказ) Экспорт
	
	СистемнаяИнформацияКлиент = Новый СистемнаяИнформация;
	ПараметрыСистемы = Новый Структура("Сервер,Клиент,Конфигурация,Обработка",Новый Структура, Новый Структура, Новый Структура, Новый Структура);
	Попытка
		//Данные о клиенте
		ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	ТипЗнч(ЭтаФорма)=Тип("УправляемаяФорма"));
		ПараметрыСистемы.Клиент.Вставить("ВерсияПриложения",		СистемнаяИнформацияКлиент.ВерсияПриложения);
		ПараметрыСистемы.Клиент.Вставить("ТипОС", 					ТипПлатфтормыКлиент(СистемнаяИнформацияКлиент));
		ПараметрыСистемы.Клиент.Вставить("ЭтоLinux",				НРег(Лев(ПараметрыСистемы.Клиент.ТипОС, 5)) = "linux");
		ПараметрыСистемы.Клиент.Вставить("РежимЗапускаПриложения",	РежимЗапускаПриложения());
		//Данные о конфигурации
		ПараметрыСистемы.Конфигурация.Вставить("URL",		СтрокаСоединенияИнформационнойБазы());
		ПараметрыСистемы.Конфигурация.Вставить("Файловая",	Булево(Найти(ПараметрыСистемы.Конфигурация.URL, "File=")));
		//Данные об обработке
		
#Область include_sys_version
#КонецОбласти
		
		ВерсияОбработкиКратко = СтрЗаменить(СбисВерсия, ".", Символы.ПС);
		ВерсияОбработкиКратко = СтрПолучитьСтроку(ВерсияОбработкиКратко, 1) + "." + СтрПолучитьСтроку(ВерсияОбработкиКратко, 2);
		ВерсияПлатформыКратко = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
		ВерсияПлатформыКратко = СтрПолучитьСтроку(ВерсияПлатформыКратко, 1) + СтрПолучитьСтроку(ВерсияПлатформыКратко, 2);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ИмяПродуктаСБИС	= "vo2_1c_82_of";
			СбисИмяОбработки = Строка(ЭтаФорма.ОбработкаОбъект);
			СбисПутьКФормам = "";
		#Иначе
			ИмяПродуктаСБИС	= "vo2_1c_83_uf";
			СбисИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, ".", Символы.ПС);
			СбисИмяОбработки = СтрПолучитьСтроку(СбисИмяФормы, 1) + ".";
			Шаг = 2;
			Пока Шаг < СтрЧислоСтрок(СбисИмяФормы) - 1 Цикл
				СбисИмяОбработки = СбисИмяОбработки + СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
				Шаг = Шаг + 1;
			КонецЦикла;
			СбисПутьКФормам = СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
		#КонецЕсли
		ПараметрыСистемы.Обработка.Вставить("Версия",		СбисВерсия);
		ПараметрыСистемы.Обработка.Вставить("ПервыйЗапуск", Не ЗначениеЗаполнено(ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("НоваяВерсия",	СбисНоваяВерсия(ПараметрыСистемы.Обработка.Версия, ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("ПолноеИмя",	СбисИмяОбработки);
		ПараметрыСистемы.Обработка.Вставить("ИмяПродукта",	ИмяПродуктаСБИС);
		ПараметрыСистемы.Обработка.Вставить("КлючФорм",		СбисПутьКФормам);
		ПараметрыСистемы.Обработка.Вставить("КраткаяВерсия","VO" + ВерсияПлатформыКратко + ?(ПараметрыСистемы.Клиент.УправляемоеПриложение, "UF", "OF") + ВерсияОбработкиКратко);

		//Данные о сервере
		ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы);
		ПараметрыСистемы.Обработка.Вставить("ПолнаяВерсия",	"1C" + ПараметрыСистемы.Сервер.ВерсияПриложения + "_VO" + ВерсияОбработкиКратко);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Ошибка определения параметров текущей системы.", ОписаниеОшибки());
	КонецПопытки;
	Попытка
		//Для определения ангийского языка, сделаем заведомо ошибочный вызов и проверим исключение
		СбисТестИсключение = Новый Структура("1");
	Исключение
		СбисОшибка = ОписаниеОшибки();
		Если Найти(СбисОшибка, "calling constructor") Тогда
			ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
		КонецЕсли;
	Конецпопытки;
		
	Возврат	ПараметрыСистемы;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	//На толстом клиенте пока берем системную информацию клиента.
	ПараметрыСистемы.Сервер.Вставить("ТипОС", 			ТипПлатфтормыСервер(СистемнаяИнформация));
	ПараметрыСистемы.Сервер.Вставить("ВерсияПриложения",СистемнаяИнформация.ВерсияПриложения);
	ПараметрыСистемы.Сервер.Вставить("ЭтоLinux",		НРег(Лев(ПараметрыСистемы.Сервер.ТипОС, 5)) = "linux");
	//Получаем системные параметры файла обработки	
	ПараметрыСистемы.Обработка.Вставить("ПолноеИмяОбработки",		сбисПолноеИмяФайла(ПараметрыСистемы));
	ПараметрыСистемы.Обработка.Вставить("РежимИспользования",		ПолучитьРежимИспользованияОбработки(ПараметрыСистемы.Обработка.ПолноеИмяОбработки));
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ЗаписатьПараметрыИнтеграции = Ложь;
		ПараметрыИнтеграции = ХранилищеОбщихНастроек.Загрузить("Integration", "Integration", "Integration", "СБИС");
		Если ПараметрыИнтеграции = Неопределено Тогда
			ПараметрыИнтеграции = Новый Соответствие;
		КонецЕсли;
		УидСистемы = ПараметрыИнтеграции.Получить("integration_uuid");
		Если УидСистемы = Неопределено Тогда
			ЗаписатьПараметрыИнтеграции = Истина;
			УидСистемы = Строка(Новый УникальныйИдентификатор);
			ПараметрыИнтеграции.Вставить("integration_uuid", УидСистемы);
		КонецЕсли;
		Если ЗаписатьПараметрыИнтеграции Тогда
			ХранилищеОбщихНастроек.Сохранить("Integration", "Integration", ПараметрыИнтеграции, "Integration", "СБИС")
		КонецЕсли;
	    УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УидСистемы = "";
	КонецПопытки;
	ПараметрыСистемы.Конфигурация.Вставить("Имя",					Метаданные.Имя);
	ПараметрыСистемы.Конфигурация.Вставить("КраткаяИнформация",		Метаданные.КраткаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("ПодробнаяИнформация",	Метаданные.ПодробнаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("Версия",				Метаданные.Версия);
	ПараметрыСистемы.Конфигурация.Вставить("ВстроенныйЯзык",		"ru");
	ПараметрыСистемы.Конфигурация.Вставить("УИДИнтеграции",			УидСистемы);
	//Для анлгоязычных систем переопределим язык для проверки функций
	Если Найти(Строка(Метаданные), "Metadata") Тогда
		ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
	КонецЕсли;	
	//Для возможности записи в ИдПользователя для способов интеграции SDK2 и Каталог
	ПараметрыСистемы.Клиент.Вставить("ИдПользователяИБ", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

КонецПроцедуры

//Возвращает режим использования обработки: Во внешнем файле или в справочнике
&НаСервере
Функция ПолучитьРежимИспользованияОбработки(ПолноеИмяОбработки) Экспорт
		
	Если Прав(ПолноеИмяОбработки, 3) = "epf" Тогда
		РежимИспользования = "Файл внешней обработки";
	Иначе
		РежимИспользования = "Обработка в справочнике внешних обработок";
	КонецЕсли;
	Возврат РежимИспользования;
	
КонецФункции

//Возвращает полное имя файла обработки.
&НаСервере
Функция сбисПолноеИмяФайла(сбисПараметрыСистемы) Экспорт
	Если сбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"")").ИспользуемоеИмяФайла;
	Иначе
		Возврат Вычислить("ИспользуемоеИмяФайла");
	КонецЕсли;	
КонецФункции

//Возвращает строковое представление типа платформы сервера.
&НаСервереБезКонтекста
Функция ТипПлатфтормыСервер(Знач СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция РежимЗапускаПриложения()
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат "ТолстыйКлиентОбычноеПриложение";
	#ИначеЕсли ВебКлиент Тогда
		Возврат "ВебКлиент";
	#ИначеЕсли ТонкийКлиент Тогда
		Возврат "ТонкийКлиент";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат "ТолстыйКлиентУправляемоеПриложение";
	#ИначеЕсли Сервер Тогда
		Возврат "Сервер";	
	#ИначеЕсли ВнешнееСоединение Тогда
		Возврат "ВнешнееСоединение";
	#КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция сбисНоваяВерсия(Знач ВерсияНовая, Знач ВерсияТекущая, Знач ДопПараметры = Неопределено) Экспорт 
	
	Если		Не ЗначениеЗаполнено(ВерсияНовая) Тогда
		Возврат Ложь;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияТекущая) Тогда
		Возврат Истина;
	КонецЕсли;
	Версия1Разделить = СтрЗаменить(ВерсияНовая, ".", Символы.ПС);
	Версия2Разделить = СтрЗаменить(ВерсияТекущая, ".", Символы.ПС);
	Размер = Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	Результат = Ложь;
	Для Индекс = 1 По Размер Цикл
		Число1Сравнить = 0;
		Число2Сравнить = 0;
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = Число(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		КонецЕсли;
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = Число(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		КонецЕсли;
		Если		Число1Сравнить = Число2Сравнить Тогда
			Продолжить;
		ИначеЕсли	Число1Сравнить > Число2Сравнить Тогда
			Результат = Истина;
			Прервать;
		ИначеЕсли	Число1Сравнить < Число2Сравнить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции	

//Возвращает строковое представление типа платформы клиента.
&НаКлиенте
Функция ТипПлатфтормыКлиент(СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

