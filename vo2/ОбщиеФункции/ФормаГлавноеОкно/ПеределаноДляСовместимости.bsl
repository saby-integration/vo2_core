
////////////////////////////////////////////////////
//////////Переделано для совместимости ОФ УФ////////

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Функция ОткрытьДокументОнлайнПоПакету(Пакет, Кэш, ДопПараметры = Неопределено) Экспорт
	ОткрытьОнлайн = Ложь;
	Ссылка = ""; 
	
	Если НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("ОткрытьОнлайн") Тогда
		ОткрытьОнлайн = ДопПараметры.ОткрытьОнлайн;
	КонецЕсли;
	
	ОбработчикРезультата = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "ОткрытьДокументОнлайнПоПакетуЗавершение", ЭтаФорма, Новый Структура("Кэш, Отказ", Кэш, Ложь)); 
	Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "8" или Кэш.Текущий.Раздел = "7" Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, Новый Структура("Ссылка, Пакет", Пакет.СсылкаДляНашаОрганизация, Пакет), ОбработчикРезультата); 
	ИначеЕсли Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
		//UAA НоваяЛента
		
		ПараметрыПакетаСБИС = Кэш.ОбщиеФункции.ИдентификаторСБИСПоДокументу(Кэш, Пакет);	
		Кэш.СБИС.МодульОбъектаКлиент.КомандаОткрытьДокументОнлайн(Новый Структура("Пакет, ПараметрыПакетаСБИС", Пакет, ПараметрыПакетаСБИС), Новый Структура("Кэш, ОбработчикРезультата, ОткрытьОнлайн", Кэш, ОбработчикРезультата, ОткрытьОнлайн));			
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументОнлайнПоПакетуЗавершение(Результат, ДопПараметры) Экспорт
	Перем СоздатьЧерновик;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Сообщить(Результат);
		Возврат;
	ИначеЕсли ДопПараметры.Отказ Тогда
		СбисСообщитьОбОшибке(ДопПараметры.Кэш, Результат);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Результат.Ссылка) Тогда
		Сообщить("Не удалось получить ссылку на документ");
		Возврат;
	КонецЕсли;	
	
	//1190434889
	Если ДопПараметры.Кэш.Парам.СоздаватьЧерновик 
		И ДопПараметры.Свойство("СоздатьЧерновик",СоздатьЧерновик) 
		И СоздатьЧерновик Тогда
		Возврат;
	КонецЕсли;
	
	Если	ДопПараметры.Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
		И	ДопПараметры.Кэш.Текущий.Раздел = "8" Тогда
		//Для ОФ временно не доступно
		Отказ = Ложь;
		Попытка
			фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПоказатьДокументОнлайн", "ФормаHTML", ДопПараметры)
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", "ГлавноеОкно.ОткрытьДокументОнлайнПоПакетуЗавершение"));	
			Возврат;
		КонецПопытки;
		Если фрм = Ложь Тогда
			Сообщить("Не удалось получить форму просмотра документа");
			Возврат;
		КонецЕсли;
		фрм.ПоказатьДокументОнлайн(ДопПараметры.Кэш, Результат.Ссылка, Результат.Пакет);
	Иначе
		ЗапуститьПриложение(Результат.Ссылка);
	КонецЕсли;
КонецПроцедуры

//Процедура инициирует перезапуск главной формы.
//Флаги характеризуют глубину перезапуска.
//Флаг изменения интеграции означает, чтонеобходима повторная авторизация
//Флаг изменения формы настроек означает сброс собранных настроек для повторной обработки, переустановку параметров и проверку необходимости авторизации, если там что-то изменено.
&НаКлиенте
Процедура ПерезапуститьГлавноеОкно(ПараметрыИнтеграции, ИзмененаИнтеграция=Истина,ИзмененаФормаНастроек=Истина)	Экспорт
		
	ПовторАвторизации = Ложь;
	СпособОбменаДо = Кэш.Парам.СпособОбмена;
	
	Если ИзмененаИнтеграция Тогда          
		ПовторАвторизации = Истина;
		Если	(ПараметрыИнтеграции.СпособОбмена = 7	Или Кэш.Парам.СпособОбмена = 7)
			И	(ПараметрыИнтеграции.СпособОбмена = 6	Или Кэш.Парам.СпособОбмена = 6) Тогда
			//Идентичные модули, переавторизация не требуется
			ПовторАвторизации = Ложь;
		КонецЕсли;

		Если Кэш.Парам.СпособОбмена = 1 и Не ЗначениеЗаполнено(Кэш.Парам.КаталогОбмена) Тогда
			КаталогОбменаНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогОбмена"),"", Истина);
		КонецЕсли;
		СбисДополнительныеПараметры = Новый Структура("ВызыватьРекурсивно", Ложь);
		ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры);  
	Иначе//Интеграцию не меняли, однако могли быть изменены параметры обмена, настроек и сервера в сбисПараметрах. Проверить параметры и запустить авторизацию, если надо
		Если ИзмененаФормаНастроек Тогда
			ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);
		КонецЕсли;
		Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, Новый Структура("ВызыватьРекурсивно", Истина), ПовторАвторизации);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Кэш.Парам, ПараметрыИнтеграции);
	Если Не ИзмененаФормаНастроек Тогда
		ИзмененаФормаНастроек = (Не СпособХраненияНастроек = Кэш.Парам.СпособХраненияНастроек);
	КонецЕсли;
	//Если в процессе поменялось в параметрах, то отображаем и на Главном окне
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПовторныйЗапуск",			Истина);
	ПараметрыЗавершения.Вставить("ИзмененаФормаНастроек",	ИзмененаФормаНастроек);
	ПараметрыЗавершения.Вставить("РазделДо",				Кэш.Текущий.ТипДок);
	Если ПараметрыИнтеграции.СпособОбмена <> СпособОбменаДо Тогда 
		ПараметрыЗавершения.Вставить("ИзмененияОбмена", Новый Структура("СпособОбмена, СпособОбменаДо", ПараметрыИнтеграции.СпособОбмена, СпособОбменаДо));
	КонецЕсли;
	
	Если ПовторАвторизации Тогда
		ПослеОткрытияАвторизация(ПараметрыЗавершения);
	Иначе
		Если ИзмененаФормаНастроек Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПослеОткрытияЗавершение(ПараметрыЗавершения);
	КонецЕсли;

	Если Не ИзмененаФормаНастроек Тогда
		Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
			ФормаАвторизации = СбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
			Если ФормаАвторизации.Открыта() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
		Если СтруктураНастроек.Свойство("ИспользоватьГенератор") Тогда
			Кэш.Парам.ИспользоватьГенератор = СтруктураНастроек.ИспользоватьГенератор; 
	        ИспользоватьГенератор = СтруктураНастроек.ИспользоватьГенератор; 
		КонецЕсли;
		Если СтруктураНастроек.Свойство("СпособОбмена") Тогда
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("СпособОбмена", СпособОбмена), Кэш.Парам.ИдентификаторНастроек);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПерейтиВРаздел(СбисИмяРаздела, ДопПараметры=Неопределено) Экспорт
	
	Если Не Кэш.Свойство("ОбщиеФункции") Тогда
		Сообщить("При запуске обработки произошла ошибка. Переход по разделам заблокирован");
		Возврат Ложь;
	КонецЕсли;
	
#Область include_local_ГлавноеОкноПерейтиВРаздел	
#КонецОбласти

КонецФункции

&НаКлиенте
Функция ПерейтиВРазделВО2(СбисИмяРаздела, ДопПараметры=Неопределено)
	Если ПустаяСтрока(СбисИмяРаздела) Тогда
		СбисИмяРаздела	= СбисПолучитьИмяКнопкиПоРазделу(Кэш.Парам.РазделПоУмолчанию);
	КонецЕсли;
	
	Выбор = сбисСтруктураВыбранногоРаздела(Кэш, СбисИмяРаздела);
	//Сохраняем последовательность переходов по разделам на случай, если при невозможности перехода понадобится вернуться.	
	Если Кэш.Текущий.Раздел = Выбор.Раздел Тогда
		Если Кэш.Разделы["р"+Кэш.Текущий.Раздел] = Кэш.Текущий.ТипДок Тогда//Текущий - основной раздел. Берем его как предыдущий
			Выбор.ПредыдущийРаздел = Кэш.Текущий;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на случай, если переход был между разделами и в предыдущем что-то осталось
		ИначеЕсли Не Кэш.Текущий.ПредыдущийРаздел = Неопределено Тогда//Переход был между подразделами. Взять предыдущий от текущего
			Выбор.ПредыдущийРаздел = Кэш.Текущий.ПредыдущийРаздел;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на всякий случай
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Кэш.Текущий.Раздел)
			И Не Кэш.Разделы["р"+Выбор.Раздел] = Выбор.ТипДок	Тогда
		Выбор.ПредыдущийРаздел = Новый Структура("Форма,ПредыдущийРаздел,Раздел,ТекущийРаздел,Имя,ТипДок");
		ЗаполнитьЗначенияСвойств(Выбор.ПредыдущийРаздел, Кэш.Текущий,,"ПредыдущийРаздел");//Чтобы не хранить всю историю, не берем предыдущий раздел от текущего.
	КонецЕсли;
	
	Если(Выбор.Форма = Ложь) Тогда //нет отдельной формы функции для этого раздела
		Возврат Ложь;
	КонецЕсли;
		
	Предыдущий = Кэш.Текущий;
	ПредыдущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	ФильтрСтраница = 1;
	Если Выбор.Раздел <> Кэш.Текущий.ТекущийРаздел Тогда //переходим в другую категрию
		СменаРаздела = Истина;
		Кэш.Текущий = Выбор;
		Кэш.Текущий.ТекущийРаздел = Кэш.Текущий.Раздел; //меняем текущий раздел
		Кэш.Текущий.Имя = "Аккордеон"+Кэш.Текущий.ТипДок+Кэш.Текущий.ТекущийРаздел+Кэш.Текущий.Раздел; //заменяем ссылку на текущий раздел
	Иначе
		Кэш.Текущий = Выбор;
	КонецЕсли;
	
	//ПодговитьРаздел   
	РазделПодготовлен = Ложь;
	НазваниеРаздела = Кэш.Разделы["р"+Выбор.Раздел];
	
	Попытка
		//Точка входа для настройки вызова перед переходом. Без элементов форм, только то что касается данных.
		Выбор.Форма.ОбновитьКонтент_ПередВызовом(Выбор, Кэш)
	Исключение
		 //Пока ошибки пропускаем.
	КонецПопытки;
	Попытка
		СтруктураДляОбновленияФормы = Выбор.Форма.ОбновитьКонтент(Кэш);
	Исключение
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), Выбор.Имя + ".ОбновитьКонтент");
		МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
		СтруктураДляОбновленияФормы = Ложь;
	КонецПопытки;
	
	фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ОбновитьКонтентПодговитьРаздел", Выбор.ФормыРаздела);
	Если фрм <> Ложь Тогда
		ПараметрыПодготовки		= Новый Структура("Выбор, ДанныеОбновить", Выбор, СтруктураДляОбновленияФормы);
		ДопПараметрыПодготовки	= Новый Структура("Кэш", Кэш);
		фрм.ОбновитьКонтентПодговитьРаздел(ПараметрыПодготовки, ДопПараметрыПодготовки);
		РазделПодготовлен		= Истина;
	КонецЕсли;

	// Обновляем данные на форме главного окна
	Попытка
		Если СтруктураДляОбновленияФормы = Ложь Тогда //если не смогли обновить таблицу - откатываем назад
			Если Предыдущий.Раздел = "" Тогда
				ПерейтиВРаздел("АккордеонПолученные11");
				Возврат Истина;
			Иначе
				Кэш.Текущий = Предыдущий;
				Кэш.Текущий.Форма.НаСменуРаздела(Кэш);
				сбисВосстановитьФильтр(Кэш, ПредыдущийФильтр);
				ФильтрОбновитьПанель();
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Не РазделПодготовлен Тогда
			// Для ЭТрН - при переходе по подразделу должен перерисовываться тулбар
			Выбор.Форма.НаСменуРаздела(Кэш);
			Выбор.Форма.НастроитьКолонки(Кэш);
			Выбор.Форма.НавигацияУстановитьПанель(Кэш);
		КонецЕсли;
		ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
		Если Выбор.ТипДок <> Кэш.Текущий.ТипДок Тогда //была переадресация
			Возврат Истина;		
		КонецЕсли
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;		
	
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		// Прячем пользовательские параметры фильтра предыдущего раздела
		Если ЗначениеЗаполнено(Предыдущий.Раздел) Тогда
			НазваниеРазделаПред = Кэш.Разделы["р"+Предыдущий.Раздел];
			ФормаДопФильтраПред = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРазделаПред+"_"+Предыдущий.ТипДок,"Фильтр_Раздел_"+НазваниеРазделаПред+"_Шаблон", Кэш);
			Если ФормаДопФильтраПред<>ложь Тогда
				СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтраПред);	
			КонецЕсли;
		КонецЕсли;
		// Устанавливаем пользовательские параметры фильтра для текущего раздела
		НазваниеРаздела = Кэш.Разделы["р"+Выбор.Раздел];	
		ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
		Если ФормаДопФильтра<>ложь Тогда
			ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
		КонецЕсли;
	КонецЕсли;
	
	ФильтрОбновитьПанель();
	фрм = сбисНайтиФормуФункции("сбисОформлениеДопПолейРеестра","Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_"+Выбор.ТипДок,"Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_Шаблон", Кэш);
	Если фрм<>Ложь Тогда
		фрм.сбисОформлениеДопПолейРеестра(Кэш);
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Функция открывает окно диалога выбора папки
&НаКлиенте
Функция сбисВыбратьКаталог(лТекущийКаталог, Отказ=Ложь) Экспорт
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= лТекущийКаталог;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		Возврат Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент)
	Иначе
		Отказ = Истина;
		Возврат лТекущийКаталог;
	КонецЕсли;
КонецФункции

//Дописывает окончание к выбранному каталогу.
&НаКлиенте
Функция сбисФорматКаталога(лТекущийКаталог) Экспорт
	Возврат лТекущийКаталог + ?(Прав(лТекущийКаталог, 1) = "\", "", "\");	
КонецФункции

//Процедура завершает текущую сессию на онлайне и предлагает авторизоваться, в случае авторизации обновляет информацию на главном окне	
&НаКлиенте
Процедура сбисВыйти() Экспорт
	Попытка
		МодульОбъектаКлиент().СбисДействияПриВыходеИзАккаунта(Кэш);
		МодульОбъектаКлиент().ОчиститьЗначенияФич();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СбисСообщитьОбОшибке(Кэш, ИнформацияОбОшибке);
	КонецПопытки;
	
	Кэш.Интеграция.ЗакрытьСессию(Кэш);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	формаАвторизации		= сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = формаАвторизации.ОткрытьМодально();
		сбисПослеАвторизации(Результат, СбисДополнительныеПараметры);
	#Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
		формаАвторизации.Открыть();
	#КонецЕсли
КонецПроцедуры

// Процедура проверяет структуру настроек, обновляет данные на форме об установленных настройках, заполняет разделы Продажа и Покупка подразделами	
&НаКлиенте
Процедура СбисОбновитьИнформациюНастроекНаГлавномОкне(ЛокальныйКэш, УстановленныеИниФайлы=Неопределено, Отказ=Ложь) Экспорт

	Если ЛокальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	
	СбисОбновитьЗаголовокФормы(ЛокальныйКэш.СБИС); 

КонецПроцедуры

&НаКлиенте
Процедура СбисОбновитьЗаголовокФормы(ОсновныеПараметрыФормы, ДопПараметры=Неопределено) 
	НовыйЗаголовок		= ОсновныеПараметрыФормы.ПараметрыИнтеграции.ПредставлениеСервера;
	ДобавитьКЗаголовку	= "";
	Если Не ОсновныеПараметрыФормы.ПараметрыИнтеграции.Пользователь = Неопределено Тогда
		МассивФИО = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ОсновныеПараметрыФормы.ПараметрыИнтеграции.Пользователь, " ");
		Если МассивФИО.Количество() = 3 Тогда
			ДобавитьКЗаголовку = МассивФИО[0] + " " + Лев(МассивФИО[1], 1) + "." + Лев(МассивФИО[2], 1) + ".";
		Иначе
			ДобавитьКЗаголовку = ОсновныеПараметрыФормы.ПараметрыИнтеграции.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновныеПараметрыФормы.ПараметрыИнтеграции.Демо) Тогда
		Если Не ПустаяСтрока(ДобавитьКЗаголовку) Тогда
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + " ";
		КонецЕсли;
		Если ОсновныеПараметрыФормы.ПараметрыИнтеграции.Демо > ТекущаяДата() Тогда
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + "Демо-версия до " + Формат(ОсновныеПараметрыФормы.ПараметрыИнтеграции.Демо, "ДФ=dd.MM.yyyy");
		Иначе
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + "Пробный период истек";
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ДобавитьКЗаголовку) Тогда
		НовыйЗаголовок = НовыйЗаголовок + " (" + ДобавитьКЗаголовку + ")";
	КонецЕсли;
	ЭтаФорма.Заголовок = НовыйЗаголовок;
КонецПроцедуры

//Проверяет, что строка является каталогом и открывает его в проводнике
&НаКлиенте
Процедура сбисОткрытьКаталог(ВыбранныйКаталог) Экспорт
	Попытка
		Файл = Новый Файл(ВыбранныйКаталог);
		Если Файл.ЭтоКаталог() Тогда
			ЗапуститьПриложение(ВыбранныйКаталог);
		Иначе
			Сообщить("Неверно указан путь к каталогу настроек.");
		КонецЕсли;
	Исключение
		Сообщить("Не удалось открыть каталог настроек.");
	КонецПопытки;
КонецПроцедуры

//Процедура вызывает очистку сохраненного кэша настроек ини
&НаКлиенте
Процедура сбисОчиститьКэшНастроек() Экспорт 
	Кэш.ФормаНастроек.сбисОчиститьКэшНастроек(Кэш);
КонецПроцедуры

// Функция возвращает название раздела в аккордеоне по красивому названию.
&НаКлиенте
Функция СбисПолучитьИмяКнопкиПоРазделу(РазделТест) Экспорт
	
	Если РазделТест = "Полученные" Тогда
		Возврат "АккордеонПолученные11";
	ИначеЕсли РазделТест = "Отправленные" Тогда
		Возврат "АккордеонОтправленные22";
	ИначеЕсли РазделТест = "Продажа" Тогда
		Возврат "АккордеонПродажа33";
	ИначеЕсли РазделТест = "Учет" Тогда
		Возврат "АккордеонУчет77";
	ИначеЕсли	РазделТест = "Задачи"
			И	Найти("34567", Строка(Кэш.Парам.СпособОбмена)) Тогда
		Возврат "АккордеонЗадачи88";
	Иначе
		Возврат "АккордеонПокупка44";
	КонецЕсли;
	
КонецФункции

//Не использовать! Использовать с формы работы с настройками общее
//Вызов получения и установки настроек
&НаКлиенте
Процедура СбисПолучитьУстановитьНастройки(ЛокальныйКэш, СказатьЧтоВсеХорошо, Отказ=Ложь) Экспорт
	Попытка
		Кэш.ФормаНастроекОбщее.СбисПолучитьИУстановитьНастройкиВКэш(Новый Структура("ПринудительнаяПроверка, ПродолжитьУстановку", СказатьЧтоВсеХорошо, Истина), Кэш)
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СбисОшибка = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке, "ФормаГлавноеОкно.СбисПолучитьУстановитьНастройки");
		СбисСообщитьОбОшибке(ЛокальныйКэш, СбисОшибка, Новый Структура("ФормаВладелец", ЭтаФорма));
	КонецПопытки;
КонецПроцедуры

//Формирует структуру раздела по его имени из аккордеона. Вынесено в отделную функцию для внешнего интерфейса.
&НаКлиенте
Функция сбисСтруктураВыбранногоРаздела(ЛокальныйКэш, ИмяВыбранногоРаздела) Экспорт
	
	Возврат МодульОбъектаКлиент().НовыйСтруктураРазделаГО(ИмяВыбранногоРаздела);

КонецФункции

&НаКлиенте
Процедура сбисПослеПросмотраНовости(Результат) Экспорт
	
	Если Результат = Неопределено ИЛИ Кэш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
	
		ПрочитаннаяНовость = Версия;
		Кэш.Парам.ПрочитаннаяНовость = Версия;

	Иначе

		ПрочитаннаяНовость = "2.45.0.1";
		Кэш.Парам.ПрочитаннаяНовость = "2.45.0.1";
	КонецЕсли;

КонецПроцедуры

//Функция меняет в указанной таблице колонки
&НаСервере
Процедура НастроитьКолонкиФормы(СтруктраДляОбновленияФормы) Экспорт
	Перем ДобавитьКолоноки, УдалитьКолонки;
	
	СтруктураПолей	= СтруктраДляОбновленияФормы.СтруктураПолей;
	
	Если СтруктураПолей.Свойство("КолонкиИзменить")	Тогда	
		КолонкиТаблицы	= ЭтаФорма;
		ПутьККолонкам	= СтрЗаменить(СтруктраДляОбновленияФормы.ПутьККолонкам, ".",	Символы.ПС);
		Для	шаг = 1 По СтрЧислоСтрок(ПутьККолонкам)	Цикл
			КолонкиТаблицы	= КолонкиТаблицы[СтрПолучитьСтроку(ПутьККолонкам,шаг)];
		КонецЦикла;
		Для	Каждого ДанныеКолонки Из СтруктураПолей.КолонкиИзменить	Цикл
			ИмяКолонки		= ДанныеКолонки.ПолноеИмяКолонки;
			КолонкаТаблицы	= КолонкиТаблицы.Найти(ИмяКолонки);                           
			Если	КолонкаТаблицы = Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			
			Для	Каждого	ПараметрРеактировать Из ДанныеКолонки.ПараметрыИзменить	Цикл
				Попытка
					КолонкаТаблицы[ПараметрРеактировать.Ключ]	= ПараметрРеактировать.Значение;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;                                                                         
	
	Если СтруктураПолей.Свойство("КолонкиДобавить", ДобавитьКолоноки) Тогда
		КвалификаторыСтроки = Новый КвалификаторыСтроки();
		ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
		      
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		// Добавление колонок таблицы значений
			ТЧ = РеквизитФормыВЗначение(СтруктраДляОбновленияФормы.ИмяТаблицы);
			ДобавляемыеРеквизиты = Новый Массив;
			НомерПоследнего = ДобавитьКолоноки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл
				Если ТЧ.Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
					НовРеквизит = Новый РеквизитФормы(ДобавитьКолоноки[Индекс], ОписаниеТипа, СтруктраДляОбновленияФормы.ИмяТаблицы, ДобавитьКолоноки[Индекс]);
					ДобавляемыеРеквизиты.Добавить(НовРеквизит);
				КонецЕсли;
			КонецЦикла;
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			Для Каждого Колонка Из ДобавитьКолоноки Цикл                                
				
				ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицы;
				Если СтруктраДляОбновленияФормы.Свойство("ИмяТаблицыФормы") Тогда
					ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицыФормы;
				КонецЕсли;
				
				НовПоле = Элементы.Найти(ИмяТаблицыФормы + Колонка);
				Если НовПоле = Неопределено Тогда
					НовПоле = Элементы.Добавить(ИмяТаблицыФормы + Колонка, Тип("ПолеФормы"), Элементы.Найти(ИмяТаблицыФормы));
					НовПоле.Вид = ВидПоляФормы.ПолеВвода;
					НовПоле.ПутьКДанным = СтруктраДляОбновленияФормы.ИмяТаблицы + "." + Колонка;
				КонецЕсли;
			КонецЦикла;
		#Иначе
			ДобавляемыеРеквизиты = Новый Массив;
			ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицы;
			Если СтруктраДляОбновленияФормы.Свойство("ИмяТаблицыФормы") Тогда
				ИмяТаблицыФормы = СтруктраДляОбновленияФормы.ИмяТаблицыФормы;
			КонецЕсли;			

			НомерПоследнего = ДобавитьКолоноки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл 
				Если ЭлементыФормы[ИмяТаблицыФормы].Значение.Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
					Если ЭлементыФормы[ИмяТаблицыФормы].Колонки.Найти(ДобавитьКолоноки[Индекс]) = Неопределено Тогда
						Поле = ЭлементыФормы[ИмяТаблицыФормы].Колонки.Добавить(ДобавитьКолоноки[Индекс]);
					Иначе
						Поле = ЭлементыФормы[ИмяТаблицыФормы].Колонки.Найти(ДобавитьКолоноки[Индекс])
					КонецЕсли;
					ЭлементыФормы[ИмяТаблицыФормы].Значение.Колонки.Добавить(ДобавитьКолоноки[Индекс], ОписаниеТипа);
					Поле.Данные = ДобавитьКолоноки[Индекс];
				КонецЕсли;
			КонецЦикла;
			//Для Каждого Колонка Из ДобавитьКолоноки Цикл
			//КонецЦикла;
		#КонецЕсли
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("КолонкиУдалить", УдалитьКолонки) Тогда
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			Для Каждого Колонка Из УдалитьКолонки Цикл
				Поле = Элементы.Найти(СтруктраДляОбновленияФормы.ИмяТаблицы + Колонка);
				Если Поле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Элементы.Удалить(Поле);
			КонецЦикла; 
			
			ТЧ = РеквизитФормыВЗначение(СтруктраДляОбновленияФормы.ИмяТаблицы);	
			УдаляемыеРеквизиты = Новый Массив;
			НомерПоследнего = УдалитьКолонки.ВГраница();
			Для Индекс = 0 По НомерПоследнего Цикл
				Если ТЧ.Колонки.Найти(УдалитьКолонки[Индекс]) <> Неопределено Тогда
					УдаляемыеРеквизиты.Добавить(СтруктраДляОбновленияФормы.ИмяТаблицы + "." + УдалитьКолонки[Индекс]);
				КонецЕсли;
			КонецЦикла;
			ИзменитьРеквизиты(,УдаляемыеРеквизиты);
		#Иначе
			Для Каждого Колонка Из УдалитьКолонки Цикл	
				Поле = ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Значение.Колонки.Найти(Колонка);
				Если Поле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Значение.Колонки.Удалить(Поле);
				КолонкаТЧ = ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Колонки.Найти(Колонка);
				Если КолонкаТЧ <> Неопределено Тогда
					ЭлементыФормы[СтруктраДляОбновленияФормы.ИмяТаблицы].Колонки.Удалить(КолонкаТЧ);
				КонецЕсли;
			КонецЦикла;	
			УдаляемыеРеквизиты = Новый Массив;
			НомерПоследнего = УдалитьКолонки.ВГраница();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

/////работа с сохраняемыми значениями/////

// Функция - восстанавливает параметры пользователя 
// 
// Возвращаемое значение:
//  Соответствие - сохраняемые параметры пользователя (реквизиты ГО)
//
&НаКлиенте
Функция СбисСохраненныеЗначения() Экспорт
	
	ПараметрыПользователяСоответствие = СбисСохраненныеЗначенияНаСервере();
	
	Если ПараметрыПользователяСоответствие = Неопределено Тогда
		
		ПараметрыПользователяСоответствие = Новый Соответствие;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			// Для переноса параметров, восстановить из сбисПарам, если в 1С не нашлось.
			ПараметрыПользователяСтруктура = ВосстановитьЗначение("сбисПарам");
			Если Не ПараметрыПользователяСтруктура = Неопределено Тогда
					
				Для Каждого КлючИЗначениеПарам Из ПараметрыПользователяСтруктура Цикл
					ПараметрыПользователяСоответствие.Вставить(КлючИЗначениеПарам.Ключ, КлючИЗначениеПарам.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат ПараметрыПользователяСоответствие;
	
КонецФункции

//Выполняет дозапись указанных настроек в ручном режиме. Необходимо для работы ВИ, без открытия формы
&НаСервере
Функция СбисСохраненныеЗначенияНаСервере()
	
	Попытка
		
		Возврат ХранилищеСистемныхНастроек.Загрузить(ЭтаФорма.ИмяФормы + "/ТекущиеДанные");
		
	Исключение
		
		ОшибкаВосстановить = МодульОбъектаСервер().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФормаГлавноеОкно.СбисВосстановитьКэшПарамНаСервере");
		ВызватьИсключение МодульОбъектаСервер().СбисИсключение_Представление(ОшибкаВосстановить);
		
	КонецПопытки;
	
КонецФункции

//Выполняет запись текущих настроек обработки
//Возвращает истина при успехе, структуру ошибки при неудаче.
&НаКлиенте
Функция СбисСохранитьЗначения(ПараметрыЗаписи, Отказ = Ложь) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Возврат СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ);
		
	#Иначе
		
		//Делаем через внешний интерфейс.
		Если ПараметрыЗаписи.ВыполнитьВручную Тогда
			Возврат СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ);
		//Если делаем вызов перед закрытием, то просто записываем в реквизиты и платформа делает сама стандартым механизмом.
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыЗаписи.Парам);
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

//Выполняет дозапись указанных настроек в ручном режиме. Необходимо для работы ВИ, без открытия формы
&НаСервере
Функция СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ)
	
	Попытка
		СоответствиеНастроек = ХранилищеСистемныхНастроек.Загрузить(ЭтаФорма.ИмяФормы + "/ТекущиеДанные");
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка чтения из хранилища настроек: " + ОписаниеОшибки());
	КонецПопытки;
	Если СоответствиеНастроек = Неопределено Тогда
		СоответствиеНастроек = Новый Соответствие;
	КонецЕсли;
	Для Каждого КлючИЗначениеОбновить Из ПараметрыЗаписи.Парам Цикл
		СоответствиеНастроек.Вставить(КлючИЗначениеОбновить.Ключ, КлючИЗначениеОбновить.Значение);
	КонецЦикла;
	Попытка
		ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы+"/ТекущиеДанные",,СоответствиеНастроек);	
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка записи в хранилище настроек: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

/////Вывод списка/////

&НаКлиенте
Процедура сбисВывестиДанныеВТаблДок(Кнопка)
	
	фрм = сбисНайтиФормуФункции("сбисВывестиСписок","Форма_ВывестиСписок","Форма_ВывестиСписок",Кэш);	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		фрм.сбисВывестиСписок(Кэш, ВывестиСписокСфромироватьКонтекстНаСервере(Кэш.ТаблДок.Имя));
	Иначе
		фрм.сбисВывестиСписок(Кэш);
	КонецЕсли;
	
КонецПроцедуры

//УФ функция формирует контекст для вывода списка управляемых форм.
//&НаСервере
Функция ВывестиСписокСфромироватьКонтекстНаСервере(ТабличнаяЧасть)
	
	Контекст	= Новый	Структура();
	КолонкиНеДобавлять	= Новый	Массив;
	
	//На форме списка не выйдет обратиться к колонкам другой формы, поэтому данные по колонкам собираем заранее, на сервере в главном окне.
	Колонки			= ЭтаФорма.Элементы[ТабличнаяЧасть].ПодчиненныеЭлементы;
	
	СтруктураЗаголовков		= Новый	Структура("Видимые, Невидимые", Новый	Структура, Новый	Структура);
	Для	Каждого	Колонка	Из	Колонки	Цикл
		МногострочныйПуть	= СтрЗаменить(Колонка.ПутьКДанным,".",Символы.ПС);
		Если	Колонка.Видимость
			И	Колонка.Доступность	Тогда
			СтруктураЗаголовков.Видимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
		Иначе
			Если	Колонка.Доступность	Тогда
				СтруктураЗаголовков.Невидимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
			Иначе
				КолонкиНеДобавлять.Добавить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Проверим невидимые элементы
	ТабличнаяЧастьКолонкиВсе = ЭтаФорма.РеквизитФормыВЗначение(ТабличнаяЧасть, Тип("ТаблицаЗначений")).СкопироватьКолонки();
	Для	Каждого	Колонка	Из	ТабличнаяЧастьКолонкиВсе.Колонки	Цикл
		Если	СтруктураЗаголовков.Видимые.Свойство(Колонка.Имя)
			Или		СтруктураЗаголовков.Невидимые.Свойство(Колонка.Имя)
			Или	Не	КолонкиНеДобавлять.Найти(Колонка.Имя)=Неопределено Тогда
			Продолжить;
		Иначе
			СтруктураЗаголовков.Невидимые.Вставить(Колонка.Имя, Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	Если	Не	СтруктураЗаголовков.Видимые.Количество()
		И	Не	СтруктураЗаголовков.Невидимые.Количество()	Тогда
		СтруктураЗаголовков	= Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("СтруктураЗаголовков",	СтруктураЗаголовков);
	Контекст.Вставить("ТабличнаяЧасть",			ТабличнаяЧасть);
	Контекст.Вставить("Данные", ЗначениеВСтрокуВнутр(ЭтаФорма[ТабличнаяЧасть].Выгрузить()));
	
	Возврат	Контекст;
	
КонецФункции

&НаКлиенте
Процедура РеестрСправочниковСтраницыПриСменеСтраницы(Элемент)
	
	Если Элемент.ТекущаяСтраница.Имя = "СтраницаНоменклатураКонтрагентов" Тогда
		ПерейтиВРаздел("АккордеонНоменклатураКонтрагентов66");
	Иначе 
		ПерейтиВРаздел("АккордеонСправочникиДок166");
	КонецЕсли;
	
КонецПроцедуры

/////Аккордеон/////

