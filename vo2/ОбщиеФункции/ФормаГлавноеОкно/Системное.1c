
////////////////////////////////////////////////////
//////////////////////Системное/////////////////////
////////////////////////////////////////////////////

//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме(Обработка,ИмяФормы,ИмяФункции, сбисВладелецФормы = Неопределено) Экспорт 
	Попытка
		Если ИмяФормы = "ФормаГлавноеОкно" Тогда // ToDo Костыль для корректной работы генерируемых кнопок на главном окне в случае открытия обработки из элемента справочника на УФ
			Возврат ЭтаФорма;	
		КонецЕсли;
		фрм = сбисПолучитьФорму(ИмяФормы, Обработка,,сбисВладелецФормы);
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Выполнить("фрм."+ИмяФункции+"();");
			#Иначе
				сбисТест = Вычислить("фрм."+ИмяФункции+"()");
			#КонецЕсли
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", Кэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык)+" ("+ИмяФункции+")") Тогда//функции нет
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	Исключение//форма не найдена
		Возврат Ложь;
	КонецПопытки;
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции	
&НаКлиенте
Функция сбисНайтиФормуФункции(сбисИмяФункции, сбисИмяОсновнойФормы, сбисИмяДополнительнойФормы="",ВходящийКэш="", сбисВладелецФормы = Неопределено) Экспорт
	Если Не ВходящийКэш = "" Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;	
	сбисБезопасноеИмяФункции = Кэш.ОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(сбисИмяФункции);
	//Проверим закэшированное значение
	фрм = Неопределено;
	Если Кэш.ТекущийСеанс.Функции.Свойство(сбисБезопасноеИмяФункции + "_" + сбисИмяОсновнойФормы, фрм) Тогда 
		Возврат фрм;
	КонецЕсли;	
	фрм = сбисНайтиФункциюНаФорме(сбисБезопасноеИмяФункции, сбисИмяОсновнойФормы, сбисВладелецФормы);
	Если	фрм = Ложь
		И	Не ПустаяСтрока(сбисИмяДополнительнойФормы) Тогда
		фрм = сбисНайтиФункциюНаФорме(сбисБезопасноеИмяФункции, сбисИмяДополнительнойФормы, сбисВладелецФормы);
	КонецЕсли;	
	//Закэшируем результат
	Кэш.ТекущийСеанс.Функции.Вставить(сбисБезопасноеИмяФункции + "_" + сбисИмяОсновнойФормы, фрм);	
	Возврат фрм;
КонецФункции

//Вынесен дублирующийся код
&НаКлиенте
Функция сбисНайтиФункциюНаФорме(сбисИмяФункции, сбисИмяФормы, сбисВладелецФормы = Неопределено)
	//Проверим в внешних функциях
	фрм = ?(Кэш.Заплатки = Ложь, Ложь, ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки, сбисИмяФормы, сбисИмяФункции, сбисВладелецФормы));
	Если фрм = Ложь Тогда//Проверим в обработке
		фрм = ПроверитьНаличиеФункцииВФорме(Неопределено, сбисИмяФормы, сбисИмяФункции, сбисВладелецФормы);
	КонецЕсли;	
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции. Работает на Фреш. Постепенно перевести получение форм на новые функции.
//Возможные параметры:
//	ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//  КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//	ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//	ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено. 
&НаКлиенте
Функция СбисНайтиФормуФункцииСеанса(ЛокальныйКэш, СбисИмяФункции, СбисОсновныеФормы, СбисДополнительныеПараметры, Отказ) Экспорт
	Результат = Ложь;
	//Проверим закэшированное значение
	Если Не СбисОсновныеФормы = Неопределено Тогда
		Если ТипЗнч(СбисОсновныеФормы) = Тип("Массив") Тогда
			Для Каждого СбисИмяФормы Из СбисОсновныеФормы Цикл
				Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
				Если Не Результат = Ложь Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисОсновныеФормы, СбисДополнительныеПараметры, Отказ);
		КонецЕсли;
	КонецЕсли;
	//В случае необходимости поиска по нескольким формам отдаем массивом строк
	Если СбисДополнительныеПараметры.Свойство("ВспомогательныеФормы") Тогда
		Для Каждого СбисВспомогательнаяФорма Из СбисДополнительныеПараметры.ВспомогательныеФормы Цикл
			Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисВспомогательнаяФорма, СбисДополнительныеПараметры, Отказ);
			Если Результат = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

//Делает проверку функции на указанной форме с учетом заплаток и возможностью получения либо только в ВФК, или только на в основном коде.	
&НаКлиенте
Функция СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	Результат = Ложь;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВФК")
			Или		СбисДополнительныеПараметры.ПроверятьВФК)
		И	Не ЛокальныйКэш.Заплатки = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Объект1С, Ключ", ЛокальныйКэш.Заплатки, "ВФК"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВО")
			Или		СбисДополнительныеПараметры.ПроверятьВО)
		И	Результат = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Ключ", "ВО"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

//Проверка наличия функции на форме с пробросом ошибок 
&НаКлиенте
Функция СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	СбисКлючФункции = СбисДополнительныеПараметры.Ключ + "_" + СбисИмяФункции + "_" + СбисИмяФормы;
	Если ЛокальныйКэш.ТекущийСеанс.Функции.Свойство(СбисКлючФункции) Тогда
		Возврат ЛокальныйКэш.ТекущийСеанс.Функции[СбисКлючФункции];
	КонецЕсли;
	фрм = СбисПолучитьФормуОбработки(ЛокальныйКэш, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(фрм, "СбисНайтиФункциюНаФорме_2");
	ИначеЕсли Не фрм = Ложь Тогда
		Результат = ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, фрм, СбисИмяФункции);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Если	Не	СбисДополнительныеПараметры.Свойство("КэшироватьФункцию")
			Или	СбисДополнительныеПараметры.КэшироватьФункцию Тогда
		ЛокальныйКэш.ТекущийСеанс.Функции.Вставить(СбисКлючФункции, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, СбисФормаОбработки, СбисИмяФункции)
	//Попытка
	СбисКодЯзыка = ЛокальныйКэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Выполнить("СбисФормаОбработки."+СбисИмяФункции+"();");
		#Иначе
			сбисТест = Вычислить("СбисФормаОбработки."+СбисИмяФункции+"()");
		#КонецЕсли
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", СбисКодЯзыка)+" ("+СбисИмяФункции+")") Тогда//функции нет
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	Возврат СбисФормаОбработки;
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция СбисПолучитьФормуОбработки(ЛокальныйКэш, ИмяФормы, СбисДополнительныеПараметры, Отказ) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;
	СбисДополнительныеПараметры.Свойство("Параметры", СбисПараметрыФормы);
	Если Не СбисДополнительныеПараметры.Свойство("КэшироватьФорму", КэшироватьПолученную) Тогда
		//Для возможности получить форму без её запоминания
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ПолучитьНовую", ПолучитьНовую) Тогда
		//Для возможности получить новую форму не из кэша
		ПолучитьНовую = Ложь;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("Владелец", СбисВладелецФормы) И ИмяФормы <> "ФормаГлавноеОкно" Тогда
		//Попробуем по-умолчанию ставить владельцем главное окно, если не указано обратное.
		СбисВладелецФормы = ЭтаФорма;
	КонецЕсли;	
	Стандартная = Истина;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда
			СбисОбъект1С	= ЭтотОбъект;
			ПолноеИмяФормы	= ИмяФормы;//Имя для кэширования
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = "ВФК." + ИмяФормы;//Кэширование для форм внешних функций
		КонецЕсли;
		БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".", "_");
	#Иначе
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда			
			СбисОбъект1С	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя;
			ПолноеИмяФормы	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя + ЛокальныйКэш.ПараметрыСистемы.Обработка.КлючФорм + ИмяФормы;
			БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".", "_");
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = СбисОбъект1С + ИмяФормы;
			БезопасноеИмяФормы = "ВФК_" + СтрЗаменить(ПолноеИмяФормы, ".", "_");
		КонецЕсли;
	#КонецЕсли
	Если		ПолучитьНовую
		Или	Не	Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		Если		Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(ИмяФормы) <> Неопределено
			Или	Не	Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(ИмяФормы) <> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(ИмяФормы, СбисВладелецФормы);
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						Отказ = Истина;
						Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#КонецЕсли
		Иначе
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	Если КэшироватьПолученную Тогда
		ЛокальныйКэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнениеОтложенныхПроцедур() Экспорт
	Если Кэш = Неопределено Тогда
		Сообщить("Не инициирован кэш. Выполнение отсроченных операций недоступно!");
		Возврат;
	КонецЕсли;
	МодульОбъектаКлиент().ВыполнитьОтложенныеПроцедуры(Кэш);
КонецПроцедуры

&НаСервере
Функция DecodeXmlXdto(СтрокаXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Десериализовать объект из XML
	Возврат НовыйСериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции // DecodeXmlXdto(СтрокаXML)

&НаСервере
Функция EncodeXdtoXml(ОбъектДляСериализации)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.УстановитьСтроку();
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Cериализовать объект в XML
	НовыйСериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДляСериализации);
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции // EncodeXdtoXml(ОбъектДляСериализации)

