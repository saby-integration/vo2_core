
////////////////////////////////////////////////////
///////////////////Отправка прайса//////////////////
////////////////////////////////////////////////////

&НаСервере
Процедура сбисЗаполнитьНоменклатуру(ДокументДанные, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров)
	БазоваяЕдиница = Новый Структура("Атрибуты", Новый Структура);
	БазоваяЕдиница.Атрибуты.Вставить("МеждународноеСокращение",ДокументДанные.БазоваяЕдиница_МеждународноеСокращение);
	БазоваяЕдиница.Атрибуты.Вставить("НаименованиеПолное",ДокументДанные.БазоваяЕдиница_НаименованиеПолное);
	БазоваяЕдиница.Атрибуты.Вставить("Код",ДокументДанные.БазоваяЕдиница_Код);
	БазоваяЕдиница.Вставить("ЗначениеУзла",ДокументДанные.БазоваяЕдиница_Наименование);
	ПолноеНаименование = ДокументДанные.Номенклатура_ПолноеНаименование;
	НоменклатураНаименование = ?(ЗначениеЗаполнено(ПолноеНаименование),ПолноеНаименование,Номенклатура.Наименование);
	СтавкаНалога = Новый Структура("СтавкаНалога", Новый Структура("Наименование, Ставка", "НДС", строка(ДокументДанные.Номенклатура_СтавкаНДС)));
	ЕдИзм = ДокументДанные.БазоваяЕдиница;
	ИдЕдИзм = "";
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		ИдЕдИзм = строка(ЕдИзм.УникальныйИдентификатор());
	КонецЕсли;
	Если СтруктураПараметров.РеквизитСопоставленияНоменклатуры = "Код" Тогда
		Если ТипЗнч(Номенклатура.Код) = Тип("Число") Тогда
			ИдНоменклатуры = СокрЛП(Формат( Номенклатура.Код ,"ЧН=0; ЧГ=0"));	
		Иначе
			ИдНоменклатуры = СокрЛП(Номенклатура.Код);
		КонецЕсли;
	Иначе
		ИдНоменклатуры = строка(Номенклатура.УникальныйИдентификатор())+"##"+ИдЕдИзм;
	КонецЕсли;
	Если ИниНоменклатура.Свойство("ХарактеристикиНоменклатуры") и ЗначениеЗаполнено(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение) Тогда
		ЕстьХарактеристики = Ложь;
		ИмяСправочникаХарактеристики = Сред(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение, Найти(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение, ".")+1);
		Характеристики = Справочники[ИмяСправочникаХарактеристики];
		Выборка = Характеристики.Выбрать(,Номенклатура);
		Пока Выборка.Следующий() Цикл
			ЕстьХарактеристики = Истина;
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Выборка.Ссылка);
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Выборка.Ссылка));
			Ид = строка(Номенклатура.УникальныйИдентификатор())+"#"+строка(Выборка.Ссылка.УникальныйИдентификатор())+"#"+ИдЕдИзм;
			Наименование = НоменклатураНаименование+" ("+Выборка.Ссылка.Наименование+")";
			
			ХарактеристикиТовара = Неопределено;
			//		Если ИниНоменклатура.Свойство("СвойстваХарактеристики") и ЗначениеЗаполнено(ИниНоменклатура.СвойстваХарактеристики.Значение) Тогда
			//			ИмяРегистраСвойствОбъектов = Сред(ИниНоменклатура.СвойстваХарактеристики.Значение, Найти(ИниНоменклатура.СвойстваХарактеристики.Значение, ".")+1);
			//			НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
			//			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			//			НаборЗаписей.Прочитать();
			//
			//			Если НаборЗаписей.Количество()>0 Тогда	
			//				ХарактеристикиТовара = Новый Структура("ХарактеристикаТовара", Новый Массив);
			//				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
			//					ХарактеристикиТовара.ХарактеристикаТовара.Добавить(Новый Структура("Наименование,Значение", строка(ЗаписьРегистра.Свойство), строка(ЗаписьРегистра.Значение)));
			//				КонецЦикла;
			//			КонецЕсли;
			//		КонецЕсли;
			
			
			сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара,ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЦикла;
		Если ЕстьХарактеристики = Ложь Тогда
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка());
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка()));
			сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЕсли;
	Иначе
		сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция сбисСформироватьДанныеПоНоменклатуре(Номенклатура,Знач ИниНоменклатура, ДанныеПоНоменклатуре, Предложения, СтруктураПараметров)
	// Формирует данные по номенклатуре
	ИниНоменклатура.Вставить("Номенклатура", Новый Структура("Значение",Номенклатура));
	Если СтруктураПараметров.Свойство("ДатаЦен") и ЗначениеЗаполнено(СтруктураПараметров.ДатаЦен) Тогда
		ИниНоменклатура.Вставить("ТекущаяДата", Новый Структура("Значение",СтруктураПараметров.ДатаЦен));
	Иначе
		ИниНоменклатура.Вставить("ТекущаяДата", Новый Структура("Значение",ТекущаяДата()));
	КонецЕсли;
	
	
	ГрязныйИни = Новый Структура;
	сбисСкопироватьСтруктуру(ГрязныйИни, ИниНоменклатура); 
	
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, ГрязныйИни);
	Контекст.Документ = Номенклатура;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	ДокументДанные = ЗаполнимДаннымиДокументаСтруктуру(ГрязныйИни, Контекст, СписокДопустимыхТипов, Новый Структура("ТекущийПакет",Новый Структура),Новый Массив);
	
	//+tda// Добавляю возможность работы, если в ДокументДанные вернулся массив
	Если ТипЗнч(ДокументДанные) = Тип("Массив") Тогда
		Для Каждого ДокументДанныеСтрока из ДокументДанные Цикл
			сбисЗаполнитьНоменклатуру(ДокументДанныеСтрока, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров);
		КонецЦикла;
	Иначе
		сбисЗаполнитьНоменклатуру(ДокументДанные, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров);
	КонецЕсли;
	//-tda//	
КонецФункции

&НаСервере
Функция сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара, ДанныеПоНоменклатуре, Предложения, СтруктураПараметров)
	// Формирует данные по номенклатуре
	СтруктураТовара = Новый Структура;		
	СтруктураТовара.Вставить("Ид", Ид);
	Если ДокументДанные.Свойство("Штрихкод") Тогда
		Штрихкод = РассчитатьЗначениеНаСервере("Штрихкод", Новый Структура("Ини", ГрязныйИни));
		СтруктураТовара.Вставить("Штрихкод", Штрихкод);
	КонецЕсли;
	Если ДокументДанные.Свойство("Номенклатура_Артикул") и ЗначениеЗаполнено(ДокументДанные.Номенклатура_Артикул) Тогда
		СтруктураТовара.Вставить("Артикул", ДокументДанные.Номенклатура_Артикул);	
	конецЕсли;
	СтруктураТовара.Вставить("Наименование", Наименование);
	СтруктураТовара.Вставить("БазоваяЕдиница", БазоваяЕдиница);
	Если Не Номенклатура.Родитель.Пустая() Тогда
		СтруктураТовара.Вставить("Группы", Новый Структура("Ид", строка(Номенклатура.Родитель.УникальныйИдентификатор())));
	КонецЕсли;
	СтруктураТовара.Вставить("СтавкиНалогов", СтавкаНалога);
	Если ЗначениеЗаполнено(ХарактеристикиТовара) Тогда
		СтруктураТовара.Вставить("ХарактеристикиТовара", ХарактеристикиТовара);
	КонецЕсли;
	Если ДокументДанные.Свойство("мПараметр") Тогда
		СтруктураТовара.Вставить("ЗначенияРеквизитов",Новый Структура("ЗначениеРеквизита",Новый Массив));
		Для Каждого Элемент Из ДокументДанные.мПараметр Цикл
			сбисСкопироватьСтруктуру(ГрязныйИни,ГрязныйИни.мПараметр[Элемент.Ключ]);
			Параметр = Новый Структура();
			Параметр.Вставить("Наименование",Элемент.Значение.Параметр_Имя);
			Параметр.Вставить("Значение",Элемент.Значение.Параметр_Значение);
			СтруктураТовара.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(Параметр);
		КонецЦикла;
	КонецЕсли;
	ДанныеПоНоменклатуре.Добавить(СтруктураТовара);	
	Если СтруктураПараметров.Свойство("ТипЦены") Тогда
		ЦенаЗаЕдиницу = ДокументДанные.Номенклатура_Цена;
		// Добавляем проверку на остатки, если такой параметр есть и остатки пустые - не выводим Предложение. Если параметра нет, то остатки не контролируем и выводим все.
		Если ДокументДанные.Свойство("мПараметр") И ДокументДанные.мПараметр.Свойство("Остаток") И НЕ ЗначениеЗаполнено(ДокументДанные.мПараметр.Остаток.Параметр_Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦенаЗаЕдиницу) Тогда
			Предложение = Новый Структура;
			сбисСкопироватьСтруктуру(Предложение,СтруктураТовара);
			//Предложение.Удалить("Группы");
			Предложение.Вставить("Цены", Новый Структура("Цена", Новый Массив));
			Предложение.Цены.Цена.Добавить(Новый Структура("ИдТипаЦены,ЦенаЗаЕдиницу",СтруктураПараметров.ТипЦены.Ид, ЦенаЗаЕдиницу));
			Предложения.Добавить(Предложение);
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция сбисСформироватьКаталогТоваров(Знач ДанныеКаталога, Знач ИниНоменклатура, Знач СтруктураПараметров, Отказ=Ложь) Экспорт
	// Формирует каталог товаров в формате CommerceML
	ДанныеПоНоменклатуре	= Новый Массив;
	Предложения				= Новый Массив;
	СтруктураГрупп			= Новый Структура;
	ПлоскоеСоответствиеГрупп= Новый Соответствие;
	ПлоскоеСоответствиеГрупп.Вставить("Корень", Новый Соответствие);
	
	СписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	
	Если ИниНоменклатура.Свойство("ТипЦенНоменклатуры") Тогда
		Контекст = Новый Структура("Ини",ИниНоменклатура); 
		Если СтруктураПараметров.Свойство("ТипЦенНоменклатуры") и ЗначениеЗаполнено(СтруктураПараметров.ТипЦенНоменклатуры) Тогда
			ТипЦенНоменклатуры = СтруктураПараметров.ТипЦенНоменклатуры;
			ИниНоменклатура.ТипЦенНоменклатуры.Значение = СтруктураПараметров.ТипЦенНоменклатуры;
		Иначе
			ТипЦенНоменклатуры = РассчитатьЗначениеНаСервере("ТипЦенНоменклатуры", Контекст);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипЦенНоменклатуры) Тогда
			ТипЦены = Новый Структура;
			ТипЦены.Вставить("Ид",			РассчитатьЗначениеНаСервере("ТипЦены_Код", Контекст));
			ТипЦены.Вставить("Наименование",РассчитатьЗначениеНаСервере("ТипЦены_Наименование", Контекст));
			ТипЦены.Вставить("Валюта",		РассчитатьЗначениеНаСервере("ТипЦены_Валюта", Контекст));
			ТипЦены.Вставить("Налог",		Новый Структура("Наименование, УчтеноВСумме", 
															"НДС", ?(РассчитатьЗначениеНаСервере("ТипЦены_ВключаетНДС", Контекст) = Истина, "true", "false")));
			СтруктураПараметров.Вставить("ТипЦены", ТипЦены);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокНоменклатуры Цикл
		Номенклатура = Элемент.Значение;
		сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп,Номенклатура);
		сбисСформироватьДанныеПоНоменклатуре(Номенклатура,ИниНоменклатура,ДанныеПоНоменклатуре,Предложения, СтруктураПараметров);
	КонецЦикла;
	сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ПлоскоеСоответствиеГрупп["Корень"], СтруктураГрупп);
	СтруктураФайла = Новый Структура("КоммерческаяИнформация", Новый Структура("Классификатор", Новый Структура));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Ид", Строка(Новый УникальныйИдентификатор()));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Наименование", "Классификатор товаров");
	
	Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
		Владелец = Новый Структура;
		Владелец.Вставить("Ид", строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		Владелец.Вставить("Наименование", ДанныеКаталога.Организация.Наименование);
		Если ИниНоменклатура.Свойство("Организации_ИНН") Тогда
			ИмяРеквизитаИНН = СокрЛП(Сред(ИниНоменклатура.Организации_ИНН.Значение, Найти(ИниНоменклатура.Организации_ИНН.Значение, ".")+1));
		Иначе
			ИмяРеквизитаИНН = "ИНН";
		КонецЕсли;
		Если ИниНоменклатура.Свойство("Организации_КПП") Тогда
			ИмяРеквизитаКПП = СокрЛП(Сред(ИниНоменклатура.Организации_КПП.Значение, Найти(ИниНоменклатура.Организации_КПП.Значение, ".")+1));
		Иначе
			ИмяРеквизитаКПП = "КПП";
		КонецЕсли;
		Владелец.Вставить("ИНН", ДанныеКаталога.Организация[ИмяРеквизитаИНН]);
		Владелец.Вставить("КПП", ДанныеКаталога.Организация[ИмяРеквизитаКПП]);
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Владелец",Владелец);
	КонецЕсли;
	
	Если СтруктураГрупп.Свойство("Группы") Тогда
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Группы",СтруктураГрупп.Группы);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ТипCML") Тогда
		СтруктураФайла.КоммерческаяИнформация.Вставить("Каталог", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Наименование", "Каталог товаров от "+Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Товары",Новый Структура("Товар",ДанныеПоНоменклатуре));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЦены) Тогда
		ТипыЦен = Новый Массив;
		ТипыЦен.Добавить(ТипЦены);
		СтруктураФайла.КоммерческаяИнформация.Вставить("ПакетПредложений", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Наименование", "Прайс-лист от " + Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("ТипыЦен",Новый Структура("ТипЦены",ТипыЦен));
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Предложения",Новый Структура("Предложение",Предложения));
	КонецЕсли;
	Если	СтруктураПараметров.Свойство("ОжидаемыйРезультат")
		И	СтруктураПараметров.ОжидаемыйРезультат = "СтруктураФайла" Тогда
		СтруктураФайла.Вставить("Формат",		"CommerceML");
		СтруктураФайла.Вставить("ВерсияФормата","2.10"); 
		СтруктураФайла.Вставить("Дата",			ТекущаяДата()); 
		Возврат Новый Структура("Файл", СтруктураФайла);
	КонецЕсли;
	//Совместимость со старой доработкой для отправки каталога с XSLT.
	Возврат ПолучитьXMLСПростымиЭлементами(СтруктураФайла, "UTF-16");		
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруПрайса(Кэш=Неопределено, ПараметрыФомирования=Неопределено, Отказ=Ложь) Экспорт
	Если Кэш = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ДанныеКаталога		= ПараметрыФомирования.ДанныеКаталога;
	ИниНоменклатура		= ПараметрыФомирования.Ини;
	СтруктураПараметров = ПараметрыФомирования.ПараметрыПрайса;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "СбисСформироватьКаталогТоваров", "РаботаСДокументами1С", Новый Структура("ПроверятьВО", Ложь), Отказ);
	Если фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	СбисПрайс = фрм.СбисСформироватьКаталогТоваров(ДанныеКаталога, ИниНоменклатура, СтруктураПараметров, Отказ);
	//Для сохранения совместимости со старым функционалом: если пришёл текст, то обрабатываем рассылку старым механизмом, без XSLT
	Если	ПараметрыФомирования.ПараметрыПрайса.Свойство("Тип")
		И	ПараметрыФомирования.ПараметрыПрайса.Тип = "СогласованиеЦен" Тогда
		ИмяПрайс = "Согласование цен от " + Формат(ТекущаяДата(), "ДФ=""дд_ММ_гггг""");
	Иначе
		ИмяПрайс = "ПрайсЛист от " + Формат(ТекущаяДата(), "ДФ=""дд_ММ_гггг""");
	КонецЕсли;	
	ПараметрыФайлаПрайса= Новый Структура;
	ПараметрыФайлаПрайса.Вставить("Имя",		ИмяПрайс);
	ПараметрыФайлаПрайса.Вставить("Расширение",	"xml");
	ПараметрыФайлаПрайса.Вставить("Кодировка",	"UTF-16");
	Если ТипЗнч(СбисПрайс) = Тип("Строка") Тогда
		ПараметрыФайлаПрайса.Вставить("Данные", СбисПрайс);
		ОписаниеФайлаПрайса = Кэш.ОбщиеФункции.сбисЗаписатьФайл_Клиент(Кэш, ПараметрыФайлаПрайса, Отказ);
		Если Отказ Тогда
			Возврат ОписаниеФайлаПрайса;
		КонецЕсли;
	Иначе
		СтруктураВложения = Новый Структура("СтруктураДокумента, ОписаниеФайла, ПодТип, ПодВерсияФормата", сбисПрайс, ПараметрыФайлаПрайса);
		Если ПараметрыФомирования.ПараметрыПрайса.Свойство("Тип") Тогда
			//ИспользоватьГенератор = РассчитатьЗначение("ИспользоватьГенератор", ИниНоменклатура, Кэш);
			СтруктураВложения.Вставить("Тип", ПараметрыФомирования.ПараметрыПрайса.Тип);
			Если ПараметрыФомирования.ПараметрыПрайса.Тип = "СогласованиеЦен" Тогда
				СтруктураВложения.Вставить("ИспользоватьГенератор", Истина);
			КонецЕсли;
		Иначе
			СтруктураВложения.Вставить("Тип", "PriceMatchingIn");
		КонецЕсли;
		Если ПараметрыФомирования.ПараметрыПрайса.Свойство("ВерсияФормата") Тогда
			СтруктураВложения.Вставить("ВерсияФормата",ПараметрыФомирования.ПараметрыПрайса.ВерсияФормата);
		Иначе
			СтруктураВложения.Вставить("ВерсияФормата","2.10"); 
		КонецЕсли;
		Если ПараметрыФомирования.ПараметрыПрайса.Свойство("ПодТип") Тогда
			СтруктураВложения.Вставить("ПодТип", ПараметрыФомирования.ПараметрыПрайса.ПодТип);
		Иначе
			СтруктураВложения.Вставить("ПодТип", СтруктураВложения.Тип); 
		КонецЕсли;
		
		сбисПараметрыФайла = Новый СписокЗначений;
		сбисПараметрыФайла.Добавить(СтруктураВложения, "Вложение");
		
		ОписаниеФайлаПрайса	= Новый Структура;
		ОписаниеФайлаПрайса.Вставить("ИмяФайла",		ПараметрыФайлаПрайса.Имя);
		ОписаниеФайлаПрайса.Вставить("ПараметрыФайла",	сбисПараметрыФайла);
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ОписаниеФайлаПрайса);
	Возврат МассивФайлов; 
КонецФункции

&НаКлиенте
Функция сбисСформироватьОтправитьКаталогТоваров(Кэш, ДанныеКаталога, ИниНоменклатура, Параметры) Экспорт
	Если Кэш.Парам.СпособОбмена = 1 Тогда // каталог
		Возврат Ложь;
	КонецЕсли;
	ПолныйСписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	ВсеОтправлено = Истина;
	Шаг		= 1000;    // отправляем по 1000 карточек номенклатуры
	Всего	= ПолныйСписокНоменклатуры.Количество();
	сч		= 0;
	
	сбисКонтекст		= Новый Структура("Ини", ИниНоменклатура); 
	лДанныеКаталога		= Новый Структура("СписокНоменклатуры, Организация");
	лСтруктураПараметров= Новый Структура("СПростымиЭлементами, РеквизитСопоставленияНоменклатуры, ОжидаемыйРезультат, Кодировка", Истина, Кэш.Парам.РеквизитСопоставленияНоменклатуры, "СтруктураФайла", "UTF-16");
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ТипЦенНоменклатуры") Тогда
		   лСтруктураПараметров.Вставить("ТипЦенНоменклатуры", Параметры.ТипЦенНоменклатуры);
	КонецЕсли;	
	ФайлФормат			= РассчитатьЗначениеНаСервере("Файл_Формат",		сбисКонтекст);
	ФайлВерсияФормата	= РассчитатьЗначениеНаСервере("Файл_ВерсияФормата",	сбисКонтекст);
	сбисИмяXSLT			= СтрЗаменить(СтрЗаменить("{0}_{1}", "{0}", ФайлФормат), "{1}", ФайлВерсияФормата);
	Пока сч < Всего Цикл
		Кэш.ГлавноеОкно.сбисПоказатьСостояние("Формирование каталога номенклатуры", Кэш.ГлавноеОкно, Мин(100,Окр((сч+Шаг)*100/Всего)));
		лДанныеКаталога.СписокНоменклатуры = Новый СписокЗначений;
		ТекущееКоличество = Мин(сч+Шаг, Всего);
		лСтруктураПараметров.Вставить("Название", СтрЗаменить(СтрЗаменить("Номенклатура {0}-{1}", "{0}", сч), "{1}", ТекущееКоличество));
		счТек = сч;
		Пока счТек < ТекущееКоличество Цикл
			лДанныеКаталога.СписокНоменклатуры.Добавить(ПолныйСписокНоменклатуры[счТек].Значение);
			счТек = счТек + 1;			
		КонецЦикла;
		ОшибкаФормирования	= Ложь;
		лСтруктураКаталога	= сбисСформироватьКаталогТоваров(лДанныеКаталога, ИниНоменклатура, лСтруктураПараметров, ОшибкаФормирования);
		КаталогТоваров		= Новый Структура("КоммерческаяИнформация");
		ЗаполнитьЗначенияСвойств(КаталогТоваров, лСтруктураКаталога.Файл);
		КаталогТоваров		= сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, КаталогТоваров, сбисИмяXSLT, лСтруктураПараметров, ОшибкаФормирования);
		Если ОшибкаФормирования Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, КаталогТоваров);
			ВсеОтправлено = Ложь;
			Прервать;
		КонецЕсли;
		КаталогОтправлен= Кэш.Интеграция.ОтправитьКаталогТоваров(Кэш, КаталогТоваров);
		Если КаталогОтправлен = Ложь Тогда
			ВсеОтправлено = Ложь;
		КонецЕсли;
		сч = сч + Шаг;
	КонецЦикла;
	сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Возврат ВсеОтправлено;
КонецФункции

&НаСервере
Функция сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп, Номенклатура)
	// Формирует плоское соответствие групп (каждой группе соответствют вложенные в нее группы первого уровня, ключ корневой группы - "Корень")
	СписокРодителей = Новый СписокЗначений;
	ТекЭлемент = Номенклатура;
	сч = 1;
	Пока НЕ ТекЭлемент.Родитель.Пустая() Цикл
		Если ПлоскоеСоответствиеГрупп.Получить(ТекЭлемент.Родитель)=Неопределено Тогда
			ПлоскоеСоответствиеГрупп.Вставить(ТекЭлемент.Родитель, Новый Соответствие);
		КонецЕсли;
		Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Получить(ТекЭлемент) = Неопределено Тогда
			ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Вставить(ТекЭлемент)
		КонецЕсли;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп["Корень"].Получить(ТекЭлемент) = Неопределено Тогда
		ПлоскоеСоответствиеГрупп["Корень"].Вставить(ТекЭлемент)
	КонецЕсли;
КонецФункции

&НаСервере
Функция сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ТекЭлемент, ТекСтруктураГрупп) 
	// Формирует иерархическую структуру групп из плоского соответствия, начиная перебор с ключа "Корень"
	Если ТекЭлемент.Количество()>0 Тогда
		ТекСтруктураГрупп.Вставить("Группы", Новый Структура);	
		ТекСтруктураГрупп.Группы.Вставить("Группа", Новый Массив);
		Для Каждого Элемент из ТекЭлемент Цикл
			НоваяГруппа = Новый Структура;
			НоваяГруппа.Вставить("Ид", строка(Элемент.Ключ.УникальныйИдентификатор()));
			НоваяГруппа.Вставить("Наименование", строка(Элемент.Ключ.Наименование));
			
			НовыйТекЭлемент = ПлоскоеСоответствиеГрупп.Получить(Элемент.Ключ);
			сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, НовыйТекЭлемент, НоваяГруппа);
			ТекСтруктураГрупп.Группы.Группа.Добавить(НоваяГруппа);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

