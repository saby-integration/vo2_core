
//Блок функций, использующихся в ини файлах

// Маркировка
&НаКлиенте
Функция сбисСформироватьПредДанныеПоМаркировке(Контекст) Экспорт
	Возврат сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, Контекст.мПредШтрихкодыУпаковок);
КонецФункции

&НаКлиенте
Функция сбисСформироватьДанныеПоМаркировке(Контекст) Экспорт
	Возврат сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, Контекст.мШтрихкодыУпаковок);
КонецФункции

&НаКлиенте
Функция сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, мШтрихкодыУпаковок) Экспорт
	Маркировка = Новый Соответствие;
	ЕстьХарактеристики = Найти(Контекст.КлючиКодовМаркировки, "Характеристика")>0;
	ЕстьСерии = Найти(Контекст.КлючиКодовМаркировки, "Серия")>0;
	Для Каждого Элемент Из мШтрихкодыУпаковок Цикл
		Если Элемент.Свойство("ТипУпаковки") Тогда  // Добавлено условие, так как встречаются случаи, когда в таб части ШтрихкодыУпаковок появляются пустые ссылки. Их нужно пропустить.
			Если Элемент.ТипУпаковки <> "МультитоварнаяУпаковка" И Элемент.Свойство("ОсобенностьУчета") Тогда   // добавлена проверка на ОсобенностьУчета, так как встречаются случаи, когда в монотоварной упаковке номенклатура не заполнена, тогда тоже смотрим на вложенные штрихкоды
				ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Элемент.ОсобенностьУчета, Элемент.ТипУпаковки, Элемент.ЗначениеШтрихкода);
				сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, Элемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии);
			Иначе
				Для Каждого ВложенныйЭлемент Из Элемент.мВложенныеШтрихкоды Цикл
					ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, ВложенныйЭлемент.ОсобенностьУчета, Элемент.ТипУпаковки, Элемент.ЗначениеШтрихкода);
					сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, ВложенныйЭлемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии);		
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Маркировка;
КонецФункции

&НаКлиенте
Функция сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, Элемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии) Экспорт
	ЭлемПоНоменклатуре = Маркировка.Получить(Элемент.Номенклатура);
	Если ЭлемПоНоменклатуре = Неопределено Тогда
		Маркировка.Вставить(Элемент.Номенклатура, ?(ЕстьХарактеристики,Новый Соответствие(),Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений)));	
		ЭлемПоНоменклатуре = Маркировка.Получить(Элемент.Номенклатура);
	КонецЕсли;
	Если НЕ ЕстьХарактеристики Тогда
		Если ЭлемПоНоменклатуре[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
			ЭлемПоНоменклатуре[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
		КонецЕсли;
	Иначе
		ЭлемПоХарактеристике = ЭлемПоНоменклатуре.Получить(Элемент.Характеристика);
		Если ЭлемПоХарактеристике = Неопределено Тогда
			ЭлемПоНоменклатуре.Вставить(Элемент.Характеристика, ?(ЕстьСерии,Новый Соответствие(),Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений)));	
			ЭлемПоХарактеристике = ЭлемПоНоменклатуре.Получить(Элемент.Характеристика);
		КонецЕсли;
		Если НЕ ЕстьСерии Тогда
			Если ЭлемПоХарактеристике[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
				ЭлемПоХарактеристике[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
			КонецЕсли;
		Иначе
			ЭлемПоСерии = ЭлемПоХарактеристике.Получить(Элемент.Серия);
			Если ЭлемПоСерии = Неопределено Тогда
				ЭлемПоХарактеристике.Вставить(Элемент.Серия, Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений));	
				ЭлемПоСерии = ЭлемПоХарактеристике.Получить(Элемент.Серия);
			КонецЕсли;
			Если ЭлемПоСерии[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
				ЭлемПоСерии[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисСформироватьЗначениеШтрихкода(Контекст) Экспорт
	ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Контекст.ОсобенностьУчета, Контекст.ТипУпаковки, Контекст.ЗначениеШтрихкода);
	Возврат ДанныеШтрихкода.ЗначениеШтрихкода
КонецФункции

&НаКлиенте
Функция сбисСформироватьДанныеШтрихкода(Контекст, ОсобенностьУчета, ТипУпаковки, ЗначениеШтрихкода) Экспорт
	ДанныеШтрихкода = Новый Структура("Вид, ЗначениеШтрихкода");
	// вырезаем скобки у разделителей
	Если Лев(ЗначениеШтрихкода, 1) = "(" Тогда
		Если Сред(ЗначениеШтрихкода, 4, 1) = ")" Тогда    // (00), (01), (02)
			ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 2, 2)+ Сред(ЗначениеШтрихкода, 5);
		КонецЕсли;
		Если Сред(ЗначениеШтрихкода, 17, 1) = "(" и Сред(ЗначениеШтрихкода, 20, 1) = ")" Тогда          // (21), для коробов табака (11), (13), (37)
			ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 16) + Сред(ЗначениеШтрихкода, 18, 2) + Сред(ЗначениеШтрихкода, 21);
		КонецЕсли;
		Если ОсобенностьУчета = "Молоко" Тогда
			Если Сред(ЗначениеШтрихкода, 32, 4) = "(17)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "17" + Сред(ЗначениеШтрихкода, 36);
			КонецЕсли;
			Если Сред(ЗначениеШтрихкода, 32, 6) = "(7003)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "7003" + Сред(ЗначениеШтрихкода, 38);
			КонецЕсли;
		КонецЕсли;
		Если ОсобенностьУчета = "Обувь" Тогда   // В экспериментальных кодах (выданных в 2019 году) присутствует разделитель (240). Общая длина кода для них 38 символов.
			Если Сред(ЗначениеШтрихкода, 32, 5) = "(240)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "240" + Сред(ЗначениеШтрихкода, 37);
			КонецЕсли;
		КонецЕсли;
		Если ОсобенностьУчета = "Табак" или ОсобенностьУчета = "АльтернативныйТабак" или ОсобенностьУчета = "НикотиносодержащаяПродукция" Тогда
			Если (Сред(ЗначениеШтрихкода, 17, 2) = "11" или Сред(ЗначениеШтрихкода, 17, 2) = "13") Тогда
				Если Сред(ЗначениеШтрихкода, 25, 4) = "(21)" Тогда
					ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 24) + "21" + Сред(ЗначениеШтрихкода, 29);
				ИначеЕсли Сред(ЗначениеШтрихкода, 25, 4) = "(37)" Тогда
					ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 24) + "37" + Сред(ЗначениеШтрихкода, 29);
					Если Сред(ЗначениеШтрихкода, 35, 4) = "(21)" Тогда
						ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 34) + "21" + Сред(ЗначениеШтрихкода, 39);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Сред(ЗначениеШтрихкода, 17, 2) = "37" и Сред(ЗначениеШтрихкода, 27, 4) = "(21)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 26) + "21" + Сред(ЗначениеШтрихкода, 31);
			КонецЕсли;
			Если Найти(ЗначениеШтрихкода, "(240)") Тогда   // Для коробов клиенты могут сами создавать коды, в частности встречаются коды с данным разделителем после серийника, у которого требуется обрезать скобки
				ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода, "(240)", "240");
			КонецЕсли;
			Если Найти(ЗначениеШтрихкода, "(8005)") Тогда  // по рекомендациям ЧЗ с 26 символа, но у клиентов встречаются коды, где данный разделитель находится дальше 
				ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода, "(8005)", "8005");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипУпаковки = "МаркированныйТовар" Тогда
		ДанныеШтрихкода.Вид = "КИЗ";
		Если ОсобенностьУчета = "Обувь" Тогда
			Если Сред(ЗначениеШтрихкода, 32, 4)="(91)" Тогда
				ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 31);
			ИначеЕсли Сред(ЗначениеШтрихкода, 39, 4)="(91)" Тогда   // экспериментальный код
				ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 38);
			КонецЕсли;    // если нет разделителя (91), то считаем, что код лежит в готовом виде и ничего не обрезаем
		ИначеЕсли ОсобенностьУчета = "Шины" или ОсобенностьУчета = "Духи" или ОсобенностьУчета = "ЛегкаяПромышленность" или ОсобенностьУчета = "Велосипеды" или ОсобенностьУчета = "КреслаКоляски" или ОсобенностьУчета = "УпакованнаяВода" или ОсобенностьУчета = "Антисептики" или ОсобенностьУчета = "БАДы" или ОсобенностьУчета = "Пиво" Тогда
			ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 31);
		ИначеЕсли ОсобенностьУчета = "Фотоаппараты" Тогда
			ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 38);
		КонецЕсли;
	ИначеЕсли (ТипУпаковки = "МонотоварнаяУпаковка" И (ОсобенностьУчета = "Табак" или ОсобенностьУчета = "АльтернативныйТабак" или ОсобенностьУчета = "НикотиносодержащаяПродукция") И Лев(ЗначениеШтрихкода,2) = "01" И Сред(ЗначениеШтрихкода, 17, 2) = "21" И (Сред(ЗначениеШтрихкода, 26, 4) = "8005" или СтрДлина(СокрЛП(ЗначениеШтрихкода))=25)) // встретился у клиента непонятный штрихкод 01146033990011272001212005/05/22/2/3/0001, который не подходит ни под одно описание, но должен выгружаться в ИдентТрансУпак (как во входящем ЭД)
		ИЛИ (Лев(ЗначениеШтрихкода,2) = "02" И Сред(ЗначениеШтрихкода, 17, 2) = "37" И (ОсобенностьУчета = "УпакованнаяВода" или ОсобенностьУчета = "Молоко")) Тогда       // объемно-сортовой учет
		ДанныеШтрихкода.Вид = "НомУпак";
	Иначе
		ДанныеШтрихкода.Вид = "ИдентТрансУпак";
		Если ОсобенностьУчета <> "Табак" и ОсобенностьУчета <> "АльтернативныйТабак" и ОсобенностьУчета <> "НикотиносодержащаяПродукция" Тогда   // для всех, кроме табака надо обрезать первые два нуля
			Если СтрДлина(ЗначениеШтрихкода) = 20 и Лев(ЗначениеШтрихкода, 2) = "00" тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 3);
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	ДанныеШтрихкода.ЗначениеШтрихкода = ЗначениеШтрихкода;
	Возврат ДанныеШтрихкода;
КонецФункции

&НаКлиенте
Функция сбисПолучитьПредКодыМаркировокПоСтроке(Контекст) Экспорт
	Попытка
		Количество = Число(Контекст.ПредКоличество);
	Исключение
		Количество = 0;
	КонецПопытки;
	Возврат сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, Контекст.ПредКодыМаркировки, Количество);
КонецФункции

&НаКлиенте
Функция сбисПолучитьКодыМаркировокПоСтроке(Контекст) Экспорт
	Попытка
		Количество = Число(Контекст.Количество);
	Исключение
		Количество = 0;
	КонецПопытки;
	Возврат сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, Контекст.КодыМаркировки, Количество);
КонецФункции

&НаКлиенте
Функция сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, КодыМаркировки, Количество) Экспорт
	НомСредИдентТов = Новый Массив;
	ДанныеПоМаркировке = КодыМаркировки.Получить(Контекст.Номенклатура);
	Если ЗначениеЗаполнено(ДанныеПоМаркировке) Тогда
		Если Контекст.Свойство("Характеристика") Тогда
			ДанныеПоМаркировкеХ = ДанныеПоМаркировке.Получить(Контекст.Характеристика);
			Если ДанныеПоМаркировкеХ = Неопределено И Не Контекст.Характеристика.Пустая() И ДанныеПоМаркировке.Количество() = 1 Тогда  
				// Коды маркировки заведены для номенклатуры, без указания характеристик, тогда возьмем коды с пустой характеристикой
				Для Каждого Элем Из ДанныеПоМаркировке Цикл
					Если Элем.Ключ.Пустая() Тогда
						ДанныеПоМаркировкеХ = Элем.Значение;
					КонецЕсли;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			ДанныеПоМаркировке = ДанныеПоМаркировкеХ; 
			Если ЗначениеЗаполнено(ДанныеПоМаркировке) и Контекст.Свойство("Серия") Тогда
				ДанныеПоМаркировкеС = ДанныеПоМаркировке.Получить(Контекст.Серия);
				Если ДанныеПоМаркировкеС = Неопределено И Не Контекст.Серия.Пустая() И ДанныеПоМаркировке.Количество() = 1 Тогда  
					// Коды маркировки заведены без указания серий, тогда возьмем коды с пустой серией
					Для Каждого Элем Из ДанныеПоМаркировке Цикл
						Если Элем.Ключ.Пустая() Тогда
							ДанныеПоМаркировкеС = Элем.Значение;
						КонецЕсли;
						Прервать;
					КонецЦикла;
				ИначеЕсли ДанныеПоМаркировкеС = Неопределено И Контекст.Серия.Пустая() И ДанныеПоМаркировке.Количество() > 0 Тогда
					// коды маркировок заведены с указанием серий, а в аналитике учета номенклатуры серии не указаны - берем коды маркировок без учета серий по аналогии со штатным механизмом 1С
					МаркировкаСПустойСерией =  Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений);
					Для	Каждого Элем Из ДанныеПоМаркировке Цикл
						Для Каждого ИдентТрансУпак Из Элем.Значение.ИдентТрансУпак Цикл
							МаркировкаСПустойСерией.ИдентТрансУпак.Добавить(ИдентТрансУпак.Значение);	
						КонецЦикла;
						Для Каждого НомУпак Из Элем.Значение.НомУпак Цикл
							МаркировкаСПустойСерией.НомУпак.Добавить(НомУпак.Значение);	
						КонецЦикла;
						Для Каждого КИЗ Из Элем.Значение.КИЗ Цикл
							МаркировкаСПустойСерией.КИЗ.Добавить(КИЗ.Значение);	
						КонецЦикла;
					КонецЦикла;
					ДанныеПоМаркировке.Вставить(Контекст.Серия, МаркировкаСПустойСерией);
					ДанныеПоМаркировкеС = ДанныеПоМаркировке.Получить(Контекст.Серия);
				КонецЕсли;
				ДанныеПоМаркировке = ДанныеПоМаркировкеС;
			КонецЕсли;
		КонецЕсли;
		
		НомСредИдентТов = сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, Количество);
	КонецЕсли;
	Возврат НомСредИдентТов;
КонецФункции

&НаКлиенте
Функция сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, Количество) Экспорт
	Если ЗначениеЗаполнено(ДанныеПоМаркировке) Тогда
		Если ДанныеПоМаркировке.ИдентТрансУпак.Количество()>0 Тогда
			Для Каждого Элемент Из ДанныеПоМаркировке.ИдентТрансУпак Цикл 
				НомСредИдентТов.Добавить(Новый Структура("ИдентТрансУпак", Элемент.Значение));
			КонецЦикла;
		КонецЕсли;
		Если ДанныеПоМаркировке.НомУпак.Количество()>0 Тогда
			НомУпак = Новый Массив;   
			Для Каждого Элемент Из ДанныеПоМаркировке.НомУпак Цикл 
				НомУпак.Добавить(Новый Структура("Значение", Элемент.Значение));
				Если Лев(Элемент.Значение,2) = "02" И Сред(Элемент.Значение, 17, 2) = "37" Тогда   // коды объемно-сортового учета раскладываются по одному на строку 
					ДанныеПоМаркировке.НомУпак.Удалить(Элемент);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			НомСредИдентТов.Добавить(Новый Структура("НомУпак", НомУпак));
		КонецЕсли;
		Если ДанныеПоМаркировке.КИЗ.Количество()>0 Тогда
			КИЗ = Новый Массив;
			КИЗОчистить = Новый Массив;
			сч = Количество;
			Для Каждого Элемент Из ДанныеПоМаркировке.КИЗ Цикл 
				Если Количество > 0 и сч <= 0 Тогда
					Прервать;
				КонецЕсли;
				сч = сч -1;
				КИЗ.Добавить(Новый Структура("Значение", Элемент.Значение));
				КИЗОчистить.Добавить(Элемент);
			КонецЦикла;
			НомСредИдентТов.Добавить(Новый Структура("КИЗ", КИЗ));
			Для Каждого Элемент Из КИЗОчистить Цикл
				ДанныеПоМаркировке.КИЗ.Удалить(Элемент);  // чтобы одни и те же КИЗы не попадали на разные строки с одним товаром, почистим уже использованные
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат НомСредИдентТов;
КонецФункции

&НаКлиенте
Функция сбисПолучитьРасхКодыМаркировокПоСтроке(Контекст) Экспорт
	ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Контекст.ОсобенностьУчета, Контекст.ТипУпаковки, Контекст.ЗначениеШтрихкода);	
	ДанныеПоМаркировке = Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений);
	ДанныеПоМаркировке[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
	НомСредИдентТов = Новый Массив;
	Возврат сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, 0);
КонецФункции

&НаКлиенте
Функция сбисЭмитироватьКМСписок(Кэш, ВыбранныеСтроки) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Для Каждого Элемент Из ВыбранныеСтроки Цикл

		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Элемент.Значение.Документы1С[0].Значение, Кэш.Парам.КаталогНастроек, "ДокументСБИС_Ид",Кэш.Ини);

		Если ЗначениеЗаполнено(ИдДок) Тогда         
			Отказ = Ложь;
			Рез = Кэш.Интеграция.сбисЭмитироватьКМ(Кэш, ИдДок,, Отказ);
			Если Не Отказ Тогда
				Сообщить("Запущено выполнение операции ""Эмитировать коды маркировки"" для документа "+ Элемент.Значение.Документы1С[0].Значение);
			КонецЕсли;
		Иначе
			Сообщить("Для документа "+Элемент.Значение.Документы1С[0].Значение+" нет связанного документа в СБИС.");
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ФормаПросмотра) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение, Кэш.Парам.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
	Если ЗначениеЗаполнено(ИдДок) Тогда
		Отказ = Ложь;
		Рез = Кэш.Интеграция.сбисЭмитироватьКМ(Кэш, ИдДок,, Отказ);
		Если Не Отказ Тогда
			Сообщить("Запущено выполнение операции ""Эмитировать коды маркировки"" для документа "+ ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение);
		КонецЕсли;
	Иначе
		Сообщить("Для документа "+ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение+" нет связанного документа в СБИС.");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, ДополнительныеПараметры=Неопределено) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Элемент.Значение.Документы1С[0].Значение, Кэш.Парам.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
		Если ЗначениеЗаполнено(ИдДок) Тогда 
			Отказ = Ложь;
			Рез = Кэш.Интеграция.сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры, Отказ);
			Если Не Отказ Тогда
				Сообщить("Запущено выполнение операции ""Зарегистрировать в госсистеме"" для документа "+ Элемент.Значение.Документы1С[0].Значение);
			КонецЕсли;
		Иначе
			Сообщить("Для документа "+Элемент.Значение.Документы1С[0].Значение+" нет связанного документа в СБИС.");
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, ДополнительныеПараметры=Неопределено) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение, Кэш.Парам.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
	Если ЗначениеЗаполнено(ИдДок) Тогда 
		Отказ = Ложь;
		Рез = Кэш.Интеграция.сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры, Отказ);
		Если Не Отказ Тогда
			Сообщить("Запущено выполнение операции ""Зарегистрировать в госсистеме"" для документа "+ ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение);
		КонецЕсли;
	Иначе
		Сообщить("Для документа "+ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение+" нет связанного документа в СБИС.");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписаниеСписок(Кэш, ВыбранныеСтроки) Экспорт
	сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, Новый Структура("Операция", "Списание"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписание(Кэш, ФормаПросмотра) Экспорт
	сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, Новый Структура("Операция", "Списание"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеОтправитьКодыСписок(Кэш, ВыбранныеСтроки) Экспорт
	сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, Новый Структура("Операция", "ОтправитьКоды"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеОтправитьКоды(Кэш, ФормаПросмотра) Экспорт
	сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, Новый Структура("Операция", "ОтправитьКоды"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеГотовКВводуВОборотСписок(Кэш, ВыбранныеСтроки) Экспорт
	сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, Новый Структура("Операция", "ГотовКВводуВОборот"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеГотовКВводуВОборот(Кэш, ФормаПросмотра) Экспорт
	сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, Новый Структура("Операция", "ГотовКВводуВОборот"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеВводВОборотСписок(Кэш, ВыбранныеСтроки) Экспорт
	сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, Новый Структура("Операция", "ВводВОборот"));
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеВводВОборот(Кэш, ФормаПросмотра) Экспорт
	сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, Новый Структура("Операция", "ВводВОборот"));
КонецФункции

//------------------------------
&НаКлиенте
Функция сбисИдентификаторУчастника(Контекст) Экспорт
	Если МестныйКэш = Неопределено Тогда
		МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисИдентификаторУчастника(МестныйКэш,Контекст.Сторона_ИНН,Контекст.Сторона_КПП,Контекст.Сторона_Наименование);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция сбисПодписант(Контекст) Экспорт
	Если МестныйКэш = Неопределено Тогда
		МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисПодписант(МестныйКэш,Контекст.Сторона_ИНН);
	Иначе
		Возврат Новый Структура("Должность,ФИО,ИНН");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура сбисПроверитьПолеАдреса (АдрСтрук, Название, Поле,Формат)	
	// Функция проверяет поле адреса на соответствие формату	
	Если СтрДлина(Поле) <= Формат тогда
		АдрСтрук.Вставить(Название,Поле);
	Иначе
		ВызватьИсключение("");
	КонецЕсли;
КонецПроцедуры
// alo << изменение по кадровым документам

&НаКлиенте
Функция сбисПолучитьАдресДоставки(Контекст) Экспорт
	// Функция заполняет структуру адреса доставки в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если НЕ Контекст.Свойство("АдресДоставкиПредставление") ИЛИ НЕ ЗначениеЗаполнено(Контекст.АдресДоставкиПредставление) Тогда
		Возврат Неопределено;
	Иначе
		АдресРег = Контекст.АдресДоставкиПредставление;
	КонецЕсли;

	Если Контекст.Свойство("АдресДоставкиЗначенияПолей") И ЗначениеЗаполнено(Контекст.АдресДоставкиЗначенияПолей) Тогда
		АдресРег = Контекст.АдресДоставкиЗначенияПолей;
	КонецЕсли;
	
	Возврат сбисПолучитьСтруктуруАдрес(АдресРег);
КонецФункции

&НаКлиенте
Функция сбисПолучитьАдресПогрузки(Контекст) Экспорт
	// Функция заполняет структуру адреса доставки в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если НЕ Контекст.Свойство("АдресПогрузкиПредставление") ИЛИ НЕ ЗначениеЗаполнено(Контекст.АдресПогрузкиПредставление) Тогда
		Возврат Неопределено;
	Иначе
		АдресРег = Контекст.АдресПогрузкиПредставление;
	КонецЕсли;

	Если Контекст.Свойство("АдресПогрузкиЗначенияПолей") И ЗначениеЗаполнено(Контекст.АдресПогрузкиЗначенияПолей) Тогда
		АдресРег = Контекст.АдресПогрузкиЗначенияПолей;
	КонецЕсли;
	
	Возврат сбисПолучитьСтруктуруАдрес(АдресРег);
КонецФункции

&НаКлиенте
Функция сбисПолучитьАдрес(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресЮЛ") и ЗначениеЗаполнено(Контекст.АдресЮЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресЮЛ);
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФЛ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисПолучитьСтруктуруАдрес(АдресРег) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Адрес = Новый Структура;
	// alo УКД <<
	Адрес.Вставить("Тип","Юридический");
	если типЗнч(АдресРег) <> тип("Строка") тогда 
		Адрес.Вставить("АдрТекст",АдресРег.Представление);
		КодРегион = "";	
		Если АдресРег.Поле2 <> "" Тогда
			КодРегион = ПолучитьКодРегионаПоНазванию(АдресРег.Поле2);
		КонецЕсли;
		Попытка
			Если КодРегион = "" Тогда
				ВызватьИсключение("")
			КонецЕсли;
			АдрСтрук = Новый Структура;
			сбисПроверитьПолеАдреса(АдрСтрук, "Индекс", АдресРег.Поле1,6);
			сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион", КодРегион,2);
			сбисПроверитьПолеАдреса(АдрСтрук, "Район", АдресРег.Поле3,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "Город", АдресРег.Поле4,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт", АдресРег.Поле5,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "Улица", АдресРег.Поле6,50);
			Дом = АдресРег.Поле7;
			Корпус = АдресРег.Поле8;
			Квартира = АдресРег.Поле9;
			Попытка
				Если строка(АдресРег.ТипДома) = "владение" Тогда
					Дом = "влд."+Дом;
				КонецЕсли;
				Если строка(АдресРег.ТипКорпуса) = "строение" Тогда
					Корпус = "стр."+Корпус;
				КонецЕсли;
				Если строка(АдресРег.ТипКвартиры) = "оф." Тогда
					Квартира = "оф."+Квартира;
				КонецЕсли;
			Исключение
				
			КонецПопытки;
			сбисПроверитьПолеАдреса(АдрСтрук, "Дом", Дом,20);
			сбисПроверитьПолеАдреса(АдрСтрук, "Корпус", Корпус,20);
			сбисПроверитьПолеАдреса(АдрСтрук, "Кварт", Квартира,20);
			Адрес.Вставить("АдрРФ",АдрСтрук);
			
		Исключение
			АдресСтрана = АдресРег.Поле1;                     
			Если ПустаяСтрока(АдресРег.Поле1) И АдресРег.Свойство("Значение") И НЕ ПустаяСтрока(АдресРег.Значение) Тогда                                             
				Попытка
					АдресСтруктураИзЗначения = МестныйКэш.РаботаСJSON.СбисПрочитатьJSON(АдресРег.Значение);
					Если АдресСтруктураИзЗначения.Свойство("countryCode") И ЗначениеЗаполнено(АдресСтруктураИзЗначения.countryCode) Тогда
						КодСтраны = АдресСтруктураИзЗначения.countryCode;
					ИначеЕсли АдресСтруктураИзЗначения.Свойство("country") И ЗначениеЗаполнено(АдресСтруктураИзЗначения.country) Тогда
						КодСтраны = ПолучитьКодСтраныПоНазванию(АдресСтруктураИзЗначения.country);
					Иначе 
						КодСтраны = ПолучитьКодСтраныПоНазванию(АдресСтрана);	
					КонецЕсли;	
				Исключение  
					КодСтраны = "643";
				КонецПопытки;	
			Иначе 
				КодСтраны = ПолучитьКодСтраныПоНазванию(АдресСтрана); 	
			КонецЕсли;
			Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(КодСтраны, АдресРег.Представление));
		КонецПопытки;	
	иначе
		Попытка
			// В некоторых конфах на ОФ адрес доставки в документе, почему то, хранится не в виде представления, а в виде набора параметров через ","
			АдресРег = Вычислить("УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРег)");
		Исключение
		КонецПопытки;
		Адрес.Вставить("АдрТекст",АдресРег);
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(,АдресРег));
	конецесли;
	//  УКД alo >>
	Возврат Адрес;
КонецФункции

&НаКлиенте
Функция сбисСтруктураАдрИно(КодСтраны,Представление) Экспорт   // alo вставлена для УКД
	АдрИно=Новый Структура;
	АдрИно.Вставить("КодСтр",?(ЗначениеЗаполнено(КодСтраны),КодСтраны,"643"));
	АдрИно.Вставить("АдрТекст",Представление);
	Возврат АдрИно;
КонецФункции

&НаКлиенте
Функция сбисПолучитьАдресФакт(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресФакт") и ЗначениеЗаполнено(Контекст.АдресФакт) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФакт);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// изменение по кадровым документам >> alo
&НаКлиенте
Функция ПолучитьАдресДоставкиУП(Контекст) Экспорт
	АдресЗапись = Новый Структура;
	Если НЕ Контекст.Свойство("АдресДоставкиПредставление") ИЛИ НЕ ЗначениеЗаполнено(Контекст.АдресДоставкиПредставление) Тогда
		Возврат Неопределено;
	Иначе
		АдресЗапись.Вставить("Представление",Контекст.АдресДоставкиПредставление);
	КонецЕсли;
	
	Если Контекст.Свойство("АдресДоставкиЗначение") И ЗначениеЗаполнено(Контекст.АдресДоставкиЗначение) И Не Контекст.АдресДоставкиЗначение = Ложь Тогда
		АдресЗапись.Вставить("Значение",Контекст.АдресДоставкиЗначение);
	КонецЕсли;
	
	Если Контекст.Свойство("АдресДоставкиЗначенияПолей") И ЗначениеЗаполнено(Контекст.АдресДоставкиЗначенияПолей) И Не Контекст.АдресДоставкиЗначенияПолей = Ложь Тогда
		АдресЗапись.Вставить("ЗначенияПолей",Контекст.АдресДоставкиЗначенияПолей);
	КонецЕсли;
	
	Возврат ПолучитьАдресУПОбщая(АдресЗапись);
КонецФункции

&НаКлиенте
Функция ПолучитьАдресПогрузкиУП(Контекст) Экспорт
	АдресЗапись = Новый Структура;
	Если НЕ Контекст.Свойство("АдресПогрузкиПредставление") ИЛИ НЕ ЗначениеЗаполнено(Контекст.АдресПогрузкиПредставление) Тогда
		Возврат Неопределено;
	Иначе
		АдресЗапись.Вставить("Представление",Контекст.АдресПогрузкиПредставление);
	КонецЕсли;
	
	Если Контекст.Свойство("АдресПогрузкиЗначение") И ЗначениеЗаполнено(Контекст.АдресПогрузкиЗначение) Тогда
		АдресЗапись.Вставить("Значение",Контекст.АдресПогрузкиЗначение);
	КонецЕсли;
	
	Если Контекст.Свойство("АдресПогрузкиЗначенияПолей") И ЗначениеЗаполнено(Контекст.АдресПогрузкиЗначенияПолей) Тогда
		АдресЗапись.Вставить("ЗначенияПолей",Контекст.АдресПогрузкиЗначенияПолей);
	КонецЕсли;
	
	Возврат ПолучитьАдресУПОбщая(АдресЗапись);
КонецФункции

// Общая функция,  возвращает структуру адреса в универсальном формате (3.01)
// Используется для конфигураций, где адреса хранятся в табличной части КонтактнаяИнформация справочников Организации и Контрагенты
// Параметры: 
// - АдресЗапись (Тип "Строка"(см. АдресЗапись.Представление) или "Структура"). Если структура:
//		- АдресЗапись.Представление	(Тип "Строка", обязательный) - представление адреса в текстовом виде
//		- АдресЗапись.Значение		(Тип "Строка") - Адрес в виде строки JSON
//		- АдресЗапись.ЗначенияПолей	(Тип "Строка") - Адрес в виде строки XML
// 		Обязательно к заполнению хотя бы одно из полей "АдресЗапись.Значение", "АдресЗапись.ЗначенияПолей"
&НаКлиенте
Функция ПолучитьАдресУПОбщая(АдресЗапись) Экспорт
	Адрес = Новый Структура;
	Адрес.Вставить("Тип", "Юридический");
	Если ТипЗнч(АдресЗапись) = Тип("Строка") Тогда
		Адрес.Вставить("АдрТекст",	АдресЗапись);
		Адрес.Вставить("АдрИно",	сбисСтруктураАдрИно(,АдресЗапись));
		Возврат Адрес;
	ИначеЕсли НЕ АдресЗапись.Свойство("Представление") ИЛИ НЕ ЗначениеЗаполнено(АдресЗапись.Представление)  Тогда
		Возврат Неопределено;	
	ИначеЕсли	(НЕ АдресЗапись.Свойство("Значение") ИЛИ НЕ ЗначениеЗаполнено(АдресЗапись.Значение)) 
			И	(НЕ АдресЗапись.Свойство("ЗначенияПолей") ИЛИ НЕ ЗначениеЗаполнено(АдресЗапись.ЗначенияПолей)) Тогда 
		Адрес.Вставить("АдрТекст",	АдресЗапись.Представление);
		Адрес.Вставить("АдрИно",	сбисСтруктураАдрИно(,АдресЗапись.Представление));
		Возврат Адрес;
	КонецЕсли;		
	
	Адрес.Вставить("АдрТекст",АдресЗапись.Представление);
	
	Индекс		= "";
	КодРегион	= "";
	Регион		= "";
	Район		= "";
	Город		= "";
	НаселПункт	= "";
	Улица		= "";
	УлицаДопИнфо= "";
	Дом			= "";
	Корпус		= "";
	Квартира	= "";
	КодСтраны	= "";
	ЗаполненоЗначениеАдреса = Ложь; 
	// В приоритете берем адрес из поля Значение, т.к. в последних версиях конфигураций в ЗначенияПолей кладется не вся инфа (например, нет Района)
	Если АдресЗапись.Свойство("Значение") и Лев(АдресЗапись.Значение, 1) = "{" Тогда
		сбисЗаполнитьАдресИзJSON(АдресЗапись.Значение,Индекс,Регион,Район,Город,НаселПункт,Улица,УлицаДопИнфо,Дом,Корпус,Квартира,КодСтраны,ЗаполненоЗначениеАдреса);
	КонецЕсли;     
	Если НЕ ЗаполненоЗначениеАдреса Тогда
		АдресРег = АдресЗапись.ЗначенияПолей;
		Если Лев(АдресРег,21) = "<КонтактнаяИнформация" Тогда
			АдресСтруктураXML = ЗаполнитьСтруктуруФайла(АдресЗапись.ЗначенияПолей);
			ЗначениеСостав = АдресСтруктураXML;
			Если	ЗначениеСостав.Свойство("КонтактнаяИнформация",	ЗначениеСостав) 
				И	ЗначениеСостав.Свойство("Состав",				ЗначениеСостав)
				И	ЗначениеСостав.Свойство("Состав",				ЗначениеСостав)//Да, два раза.
				И	ТипЗнч(ЗначениеСостав) = Тип("Структура") Тогда
				Если ЗначениеСостав.Свойство("ДопАдрЭл") Тогда
					Для Каждого АдрЭл Из ЗначениеСостав.ДопАдрЭл Цикл
						Если АдрЭл.Свойство("ТипАдрЭл") и АдрЭл.Свойство("Значение") Тогда
							Если АдрЭл.ТипАдрЭл = "10100000" Тогда
								Индекс = АдрЭл.Значение;
							ИначеЕсли	АдрЭл.ТипАдрЭл = "10200000"//Адресная точка
								Или		АдрЭл.ТипАдрЭл = "10300000"//Садовое товарищество
								Или		АдрЭл.ТипАдрЭл = "10400000"//Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента
								Или		АдрЭл.ТипАдрЭл = "10500000"//Промышленная зона
								Или		АдрЭл.ТипАдрЭл = "10600000"//Гаражно-строительный кооператив
								Или		АдрЭл.ТипАдрЭл = "10700000"//Территория
								Тогда//Уже должно быть обработанное поле с сокращенным названием типа.
								УлицаДопИнфо = УлицаДопИнфо + ?(ПустаяСтрока(УлицаДопИнфо), "", ",") + АдрЭл.Значение;
							КонецЕсли;
						ИначеЕсли АдрЭл.Свойство("Номер") и АдрЭл.Номер.Свойство("Тип") и АдрЭл.Номер.Свойство("Значение") Тогда
							Если АдрЭл.Номер.Тип = "1010" Тогда
								Дом = АдрЭл.Номер.Значение;
							ИначеЕсли АдрЭл.Номер.Тип = "1020" Тогда  // владение
								Дом = "влд."+строка(АдрЭл.Номер.Значение);
							ИначеЕсли АдрЭл.Номер.Тип = "1030" Тогда  // домовладение
								Дом = "дмвлд."+строка(АдрЭл.Номер.Значение);
							ИначеЕсли АдрЭл.Номер.Тип = "1034" Тогда  // гараж
								Дом = "гар."+строка(АдрЭл.Номер.Значение);
							ИначеЕсли АдрЭл.Номер.Тип = "1036" Тогда  // здание
								Дом = "зд."+строка(АдрЭл.Номер.Значение);
							ИначеЕсли АдрЭл.Номер.Тип = "1038" Тогда  // шахта
								Дом = "шах."+строка(АдрЭл.Номер.Значение);
							ИначеЕсли АдрЭл.Номер.Тип = "1050" Тогда
								Корпус = Корпус+"корп."+АдрЭл.Номер.Значение+",";
							ИначеЕсли АдрЭл.Номер.Тип = "1040" Тогда
								Корпус = Корпус+"уч."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "1060" Тогда
								Корпус = Корпус+"стр."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "1070" Тогда
								Корпус = Корпус+"соор."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "1080" или АдрЭл.Номер.Тип = "1090" Тогда   // литера или литер
								Корпус = Корпус+"лит."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2010" Тогда
								Квартира = Квартира+"кв."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2020" Тогда
								Квартира = Квартира+"пом."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2030" Тогда
								Квартира = Квартира+"оф."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2040" Тогда
								Квартира = Квартира+"бокс."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2050" Тогда
								Квартира = Квартира+"ком."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2060" Тогда
								Квартира = Квартира+"эт."+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2070" Тогда
								Квартира = Квартира+"а/я "+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2080" Тогда
								Квартира = Квартира+"в/ч "+строка(АдрЭл.Номер.Значение)+",";
							ИначеЕсли АдрЭл.Номер.Тип = "2090" Тогда
								Квартира = Квартира+"п/о "+строка(АдрЭл.Номер.Значение)+",";
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				//UAA Вынес дубли кода
				Город		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "Город");
				Регион		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "СубъектРФ");
				НаселПункт	= ПолучитьПараметрАдресаУП(ЗначениеСостав, "НаселПункт");
				Улица		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "Улица");			
				Если ЗначениеСостав.Свойство("СвРайМО") Тогда
					Район = ПолучитьПараметрАдресаУП(ЗначениеСостав.СвРайМО, "Район");
				КонецЕсли;
				//UAA добавляем к улице информацию в случае нестандартных адресных объектов.
				Улица = Улица + ?(ПустаяСтрока(Улица) Или ПустаяСтрока(УлицаДопИнфо), "", ", ") + УлицаДопИнфо;
			ИначеЕсли ТипЗнч(ЗначениеСостав) = Тип("Строка") Тогда	 // иностранный адрес
				Попытка
					КодСтраны = ПолучитьКодСтраныПоНазванию(АдресСтруктураXML.КонтактнаяИнформация.Состав.Страна);	
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			сч = 1;
			Пока сч<=СтрЧислоСтрок(АдресРег) Цикл
				ЭлементАдреса = СтрПолучитьСтроку(АдресРег, сч);
				сч = сч+1;
				Если Найти(нрег(ЭлементАдреса), "индекс=") Тогда
					Индекс = Сред(ЭлементАдреса, 8);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "кодрегиона=") Тогда
					КодРегион = Сред(ЭлементАдреса, 12);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "регион=") Тогда
					Регион = Сред(ЭлементАдреса, 8);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "район=") Тогда
					Район = Сред(ЭлементАдреса, 7);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "город=") Тогда
					Город = Сред(ЭлементАдреса, 7);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "населенныйпункт=") Тогда
					НаселПункт = Сред(ЭлементАдреса, 17);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "улица=") Тогда
					Улица = Сред(ЭлементАдреса, 7);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "дом=") Тогда
					Дом = Сред(ЭлементАдреса, 5);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "корпус=") Тогда
					Корпус = Сред(ЭлементАдреса, 8);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "квартира=") Тогда
					Квартира = Сред(ЭлементАдреса, 10);
				ИначеЕсли Найти(нрег(ЭлементАдреса), "кодстраны=") Тогда
					КодСтраны = Сред(ЭлементАдреса, 11);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	Если Лев(Корпус,5) = "корп." Тогда    // отрезаем "корп." в начале, чтобы в пользовательских визуализациях не выводилось два раза "корп."
		Корпус = Сред(Корпус,6);
	КонецЕсли;
	Если Прав(Корпус,1) = "," Тогда
		Корпус = Лев(Корпус,СтрДлина(Корпус)-1);
	КонецЕсли;
	Если Лев(Квартира,3) = "кв." Тогда    // отрезаем "кв." в начале, чтобы в пользовательских визуализациях не выводилось два раза "кв."
		Квартира = Сред(Квартира,4);
	КонецЕсли;
	Если Прав(Квартира,1) = "," Тогда
		Квартира = Лев(Квартира,СтрДлина(Квартира)-1);
	КонецЕсли;
	Если КодРегион = "" И Не ПустаяСтрока(Регион) Тогда
		сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.КлассификаторРегионов", Регион); 
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
			сбисОписаниеОбъекта.Значение = ПолучитьКодРегионаПоНазванию(сбисОписаниеОбъекта.Ключ);
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		КонецЕсли;
		КодРегион = сбисОписаниеОбъекта.Значение;
	КонецЕсли;	
	
	Попытка
		Если КодРегион = "" Тогда
			ВызватьИсключение("")
		КонецЕсли;
		АдрСтрук = Новый Структура;
		сбисПроверитьПолеАдреса(АдрСтрук, "Индекс",		Индекс,6);
		сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион",	КодРегион,2);
		сбисПроверитьПолеАдреса(АдрСтрук, "Район",		Район,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Город",		Город,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт",	НаселПункт,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Улица",		Улица,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Дом",		Дом,20);
		сбисПроверитьПолеАдреса(АдрСтрук, "Корпус",		Корпус,20);
		сбисПроверитьПолеАдреса(АдрСтрук, "Кварт",		Квартира,20);
		Адрес.Вставить("АдрРФ",АдрСтрук);
		
	Исключение
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(КодСтраны,АдресЗапись.Представление)); // alo УКД
	КонецПопытки;
	//  УКД alo >>
	Возврат Адрес;
КонецФункции

&НаКлиенте
Функция ПолучитьАдресУП(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в табличной части КонтактнаяИнформация справочников Организации и Контрагенты
	Если Контекст.Свойство("Адрес") и ЗначениеЗаполнено(Контекст.Адрес) Тогда
		АдресЗапись = Контекст.Адрес;
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		АдресЗапись = Контекст.АдресФЛ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат  ПолучитьАдресУПОбщая(АдресЗапись);
КонецФункции

//Функция вынесена из ПолучитьАдресУП.
&НаКлиенте
Функция ПолучитьПараметрАдресаУП(ЗначениеСостав, КлючПараметра)
	ЗначениеПараметра = Неопределено;
	Если ЗначениеСостав.Свойство(КлючПараметра, ЗначениеПараметра) Тогда
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ЗначениеПараметра.Свойство("Параметр") Тогда
			Возврат ЗначениеПараметра.Параметр;
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
			Возврат ЗначениеПараметра;
		КонецЕсли;
	КонецЕсли;
	Возврат "";	
КонецФункции

// функция получает поля адреса из json, лежащего в поле Значение в табличной части КонтактнаяИнформация
&НаКлиенте
Функция сбисЗаполнитьАдресИзJSON(АдресЗаписьЗначение,Индекс,Регион,Район,Город,НаселПункт,Улица,УлицаДопИнфо,Дом,Корпус,Квартира,КодСтраны,ЗаполненоЗначениеАдреса);
	Попытка
		АдресСтруктура = МестныйКэш.РаботаСJSON.СбисПрочитатьJSON(АдресЗаписьЗначение); 
		Если АдресСтруктура.Свойство("ZIPcode") Тогда
			Индекс = АдресСтруктура.ZIPcode	
		КонецЕсли;  
		Если АдресСтруктура.Свойство("area") и АдресСтруктура.Свойство("areaType") Тогда
			Регион = АдресСтруктура.area + " " + АдресСтруктура.areaType;				
		КонецЕсли; 
		Если АдресСтруктура.Свойство("addressType") и Нрег(АдресСтруктура.addressType)="муниципальный" и АдресСтруктура.Свойство("munDistrict") и АдресСтруктура.Свойство("munDistrictType") Тогда
			Район = АдресСтруктура.munDistrict + " " + АдресСтруктура.munDistrictType;
		ИначеЕсли АдресСтруктура.Свойство("District") и АдресСтруктура.Свойство("DistrictType") Тогда
			Район = АдресСтруктура.District + " " + АдресСтруктура.DistrictType;
		КонецЕсли; 
		Если АдресСтруктура.Свойство("city") Тогда
			Город = АдресСтруктура.city;	 
			Если АдресСтруктура.Свойство("cityType") и ЗначениеЗаполнено(АдресСтруктура.cityType) Тогда
				Город = Город + " " + АдресСтруктура.cityType;	
			КонецЕсли;
		КонецЕсли;
		Если АдресСтруктура.Свойство("locality") и АдресСтруктура.Свойство("localityType") Тогда
			НаселПункт = АдресСтруктура.locality + " " + АдресСтруктура.localityType;				
		КонецЕсли; 
		Если АдресСтруктура.Свойство("street") Тогда
			Улица = АдресСтруктура.street;
			Если АдресСтруктура.Свойство("streetType") и ЗначениеЗаполнено(АдресСтруктура.streetType) Тогда
				Улица = Улица + " " + АдресСтруктура.streetType;	
			КонецЕсли;
		КонецЕсли;  
		Если АдресСтруктура.Свойство("territory") и АдресСтруктура.Свойство("territoryType") Тогда
			УлицаДопИнфо = АдресСтруктура.territory + " " + АдресСтруктура.territoryType;				
		КонецЕсли;  
		Улица = Улица + ?(ПустаяСтрока(Улица) Или ПустаяСтрока(УлицаДопИнфо), "", ", ") + УлицаДопИнфо;
		Если АдресСтруктура.Свойство("houseType") и АдресСтруктура.Свойство("houseNumber") Тогда
			Если нрег(АдресСтруктура.houseType) = "дом" Тогда
				Дом = АдресСтруктура.houseNumber;
			ИначеЕсли нрег(АдресСтруктура.houseType) = "владение" Тогда  // владение
				Дом = "влд."+строка(АдресСтруктура.houseNumber);
			ИначеЕсли нрег(АдресСтруктура.houseType) = "домовладение" Тогда  // домовладение
				Дом = "дмвлд."+строка(АдресСтруктура.houseNumber);
			ИначеЕсли нрег(АдресСтруктура.houseType) = "гараж" Тогда  // гараж
				Дом = "гар."+строка(АдресСтруктура.houseNumber);
			ИначеЕсли нрег(АдресСтруктура.houseType) = "здание" Тогда  // здание
				Дом = "зд."+строка(АдресСтруктура.houseNumber);
			ИначеЕсли нрег(АдресСтруктура.houseType) = "шахта" Тогда  // шахта
				Дом = "шах."+строка(АдресСтруктура.houseNumber); 
			КонецЕсли;
		ИначеЕсли АдресСтруктура.Свойство("stead") и ЗначениеЗаполнено(АдресСтруктура.stead) Тогда
			Дом = "з/у "+строка(АдресСтруктура.stead);	
		КонецЕсли;
		Если АдресСтруктура.Свойство("buildings") и ТипЗнч(АдресСтруктура.buildings) = Тип("Массив") и АдресСтруктура.buildings.Количество()>0 Тогда
			Для Каждого КорпусСтруктура Из АдресСтруктура.buildings цикл
				ТипКорпуса = Нрег(КорпусСтруктура.type);
				Если ТипКорпуса = "корпус" Тогда
					Корпус = Корпус+"корп."+КорпусСтруктура.number+",";
				ИначеЕсли ТипКорпуса = "участок" Тогда
					Корпус = Корпус+"уч."+строка(КорпусСтруктура.number)+",";
				ИначеЕсли ТипКорпуса = "строение" Тогда
					Корпус = Корпус+"стр."+строка(КорпусСтруктура.number)+",";
				ИначеЕсли ТипКорпуса = "сооружение" Тогда
					Корпус = Корпус+"соор."+строка(КорпусСтруктура.number)+",";
				ИначеЕсли ТипКорпуса = "литера" или ТипКорпуса = "литер" Тогда   // литера или литер
					Корпус = Корпус+"лит."+строка(КорпусСтруктура.number)+",";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		Если АдресСтруктура.Свойство("apartments") и ТипЗнч(АдресСтруктура.apartments) = Тип("Массив") и АдресСтруктура.apartments.Количество()>0 Тогда
			Для Каждого КвартираСтруктура Из АдресСтруктура.apartments цикл
				ТипКвартиры = Нрег(КвартираСтруктура.type);
				Если ТипКвартиры = "квартира" Тогда
					Квартира = Квартира+"кв."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "помещение" Тогда
					Квартира = Квартира+"пом."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "офис" Тогда
					Квартира = Квартира+"оф."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "бокс" Тогда
					Квартира = Квартира+"бокс."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "комната" Тогда
					Квартира = Квартира+"ком."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "этаж" Тогда
					Квартира = Квартира+"эт."+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "а/я" Тогда
					Квартира = Квартира+"а/я "+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "в/ч" Тогда
					Квартира = Квартира+"в/ч "+строка(КвартираСтруктура.number)+",";
				ИначеЕсли ТипКвартиры = "п/о" Тогда
					Квартира = Квартира+"п/о "+строка(КвартираСтруктура.number)+",";
				Иначе
					Квартира = Квартира+?(ЗначениеЗаполнено(Квартира)," ","")+строка(КвартираСтруктура.number)+",";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		Если АдресСтруктура.Свойство("countryCode") Тогда
			КодСтраны = АдресСтруктура.countryCode;	
		КонецЕсли;
		ЗаполненоЗначениеАдреса = Истина;
	Исключение
	КонецПопытки;	
КонецФункции

// Функция вычисляет номер телефона в универсальном формате (3.01) 
// не используется в типовых инишках. оставлена для совместимости 
// может быть использована для конфигураций, где Контрагенты это ссылка на справочник ЮрЛица или ФизЛица (БГУ 2.0,...) 
&НаКлиенте 
Функция ПолучитьТелефонБГУ2(Контекст) Экспорт 
	Если Контекст.Свойство("Телефон") и ЗначениеЗаполнено(Контекст.Телефон) Тогда 
		Возврат Контекст.Телефон.Представление; 
	ИначеЕсли Контекст.Свойство("ТелефонФЛ") и ЗначениеЗаполнено(Контекст.ТелефонФЛ) Тогда 
		Возврат Контекст.ТелефонФЛ.Представление; 
	ИначеЕсли Контекст.Свойство("ТелефонОрг") и ЗначениеЗаполнено(Контекст.ТелефонОрг) Тогда 
		Возврат Контекст.ТелефонОрг.Представление;
	Иначе 
		Возврат Неопределено; 
	КонецЕсли; 
КонецФункции

// функция возвращает код региона по названию из регистра сведений АдресныйКлассификатор
Функция ПолучитьКодРегионаПоНазванию(НазваниеРегиона) Экспорт
	ИмяРегистра = ?(Метаданные.РегистрыСведений.Найти("АдресныеОбъекты") <> Неопределено, "АдресныеОбъекты", "АдресныйКлассификатор");
	ИмяУровня = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента",?(Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента","Уровень"));
	НазваниеКода = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодСубъектаРФ") <> Неопределено,"КодСубъектаРФ",?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде"));
	Если Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("Сокращение") <> Неопределено
			Или Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("Сокращение") <> Неопределено Тогда
		РеквизитСокращение = "Сокращение";
	Иначе
		РеквизитСокращение = "ТипОбъекта";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресныйКлассификатор."+НазваниеКода+" КАК КодРегион
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор."+ИмяУровня+" = 1
	|И  АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор." + РеквизитСокращение + " = &НазваниеРегиона";
	Запрос.УстановитьПараметр("НазваниеРегиона", НазваниеРегиона);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодРегион = Выборка.КодРегион;
		Если Число(КодРегион)<10 Тогда
			КодРегион = "0"+Строка(КодРегион);
		КонецЕсли;
		Возврат КодРегион;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// функция возвращает код региона по названию из регистра сведений АдресныйКлассификатор
&НаСервереБезКонтекста
Функция ПолучитьКодСтраныПоНазванию(НазваниеСтраны) Экспорт
	Если Метаданные.Справочники.Найти("СтраныМира") <> Неопределено Тогда
		Возврат Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(НазваниеСтраны), Истина).Код;	
	ИначеЕсли Метаданные.Справочники.Найти("КлассификаторСтранМира") <> Неопределено Тогда
		Возврат Справочники.КлассификаторСтранМира.НайтиПоНаименованию(СокрЛП(НазваниеСтраны), Истина).Код;
	Иначе
		Возврат "643";
	КонецЕсли;
КонецФункции

// функция рассчитывает цену без НДС
&НаКлиенте
Функция сбисВычислитьЦену(Контекст) Экспорт 	
	Если Контекст.СуммаВключаетНДС Тогда
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Если СуммаНДС = 0 Тогда
			Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		КонецЕсли;
		
		Возврат Формат(?(Кол_во = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции

// функция рассчитывает цену без НДС	
&НаКлиенте
Функция сбисВычислитьЦенуРОЗН(Контекст) Экспорт 
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(?(Кол_во = 0, 0, Сумма / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции

// функция рассчитывает цену без НДС
&НаКлиенте
Функция cбисВычислитьЦенуПоСуммеИКоличеству(Контекст) Экспорт 	
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(?(Кол_во = 0, Сумма, Сумма / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции

// функция рассчитывает цену без НДС
&НаКлиенте
Функция сбисВычислитьЦенуСНДС(Контекст) Экспорт 	
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма+СуммаНДС), (Сумма+СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции

// функция рассчитывает цену без НДС до корректировки
&НаКлиенте
Функция сбисВычислитьПредЦену(Контекст) Экспорт 
	Если Контекст.СуммаВключаетНДС Тогда
		Попытка
			Кол_во = Число(Контекст.ПредСтрТабл_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ПредСтрТабл_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДСДо);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.ЦенаДо,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисВычислитьРасхождениеЦены(Контекст) Экспорт 
	// функция рассчитывает цену без НДС до корректировки
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(?(Число(Контекст.Расхождение_Кол_во) = 0, (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС), (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС) / Контекст.Расхождение_Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Расхождение_Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции

Функция ПолучитьНазваниеОснования(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Возврат Контекст.Договор_Название;
	Иначе
		Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
			НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
			ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
			ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
			ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
			Возврат НазваниеНомер+ДатаСделки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисПолучитьНазваниеСделки(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
		НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
		ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
		ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
		ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
		Возврат НазваниеНомер+ДатаСделки;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисПолучитьДатуОснованияИзНазвания(Контекст) Экспорт
	ПозицияДаты = Найти(Контекст.Основание_Название, " от ");
	Если ПозицияДаты>0 Тогда
		ДатаСтрокой = Сред(Контекст.Основание_Название, ПозицияДаты+4, 10);
		Попытка
			ДатаОсн = Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
			Возврат ДатаСтрокой
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция сбисНайтиСвязанныйСчет(Контекст) Экспорт
	СтруктураСчета = Новый Структура("Дата,Номер");
	Запрос = Новый Запрос("ВЫБРАТЬ 
	|	СчетНаОплатуПокупателю.Номер, 
	|	СчетНаОплатуПокупателю.Дата
	|ИЗ 
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю 
	|ГДЕ 
	|	СчетНаОплатуПокупателю.ЗаказПокупателя = &Сделка ИЛИ СчетНаОплатуПокупателю.Ссылка = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Контекст.Сделка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураСчета.Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");	
		СтруктураСчета.Номер = Выборка.Номер;
	КонецЕсли;
	Возврат СтруктураСчета;
КонецФункции

Функция ПолучитьНаименованиеУчережденияБГУ(Контекст) Экспорт
	// Функция возвращает название гос. учреждения	
	Если ЗначениеЗаполнено(Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст) = 1 Тогда
		НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст;
	Иначе
		//AU 1176084057
		ДопНомерСчета	= "";
		ЛицевойСчетКод	= СокрЛП(Контекст.ЛицевойСчет.Код);
		Если ЗначениеЗаполнено(ЛицевойСчетКод) Тогда
			ДопНомерСчета = ", л/с " + ЛицевойСчетКод;
		КонецЕсли;
		Если Контекст.ЛицевойСчет.ТипЛицевогоСчета = Перечисления.ТипыЛицевыхСчетов.Казначейский Тогда
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + ДопНомерСчета + ", " + Контекст.Наименование;
		ИначеЕсли ЗначениеЗаполнено(Контекст.РеквизитыЛицевогоСчета) Тогда
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + " (" + Контекст.Наименование + ДопНомерСчета + ")";
		Иначе
			НаимСтороны = Контекст.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаимСтороны;
	
КонецФункции

функция НомерИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает номер исправления исходного СФ (для бухгалтерии гос. учреждений)
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Контекст.ДокОснование.НомерИсправления;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
функция ДатаИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает дату исправления исходного СФ (для бухгалтерии гос. учреждений)	
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Формат(Контекст.ДокОснование.Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция РеквизитыСчетаКонечнойКредитнойОрганизацииБГУ(Контекст) Экспорт
	
	Отказ = Ложь;
	Результат =  РеквизитыСчетаКонечнойКредитнойОрганизацииБГУНаСервере(Контекст.Документ, Отказ);
	
	Если Отказ Тогда
		ВызватьИсключение(Результат);
	КонецЕсли;              
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыСчетаКонечнойКредитнойОрганизацииБГУНаСервере(Документ, Отказ)
	
	РеквизитыСчета			= Документ.РеквизитыЛицевогоСчета;	
	КассовыйОрган			= РеквизитыСчета.КассовыйОрган;
	МассивОбойденныхСчетов	= Новый Массив;

	Пока ЗначениеЗаполнено(КассовыйОрган) Цикл
		Если  ТипЗнч(КассовыйОрган) = Тип("СправочникСсылка.Банки") Тогда
			Прервать;
		КонецЕсли;
		
		Если МассивОбойденныхСчетов.Найти(РеквизитыСчета)<>Неопределено Тогда
			КоличествоСчетов = МассивОбойденныхСчетов.Количество();
			Если КоличествоСчетов = 1 Тогда
				ПроблемныйСчет = МассивОбойденныхСчетов[0];
			Иначе
				ПроблемныйСчет = МассивОбойденныхСчетов[КоличествоСчетов-2];
			КонецЕсли;
			
			//этот счет уже обходили, значит зациклилось...
			//ошибка в данных - в справочнике реквизите Л.С. или Банковские и казначейские счета
			ТекстОшибки = НСтр("ru='Внимание! Обнаружены некорректные данные!
			|Обнаружено зацикливание в справочнике ""Банковские и казначейские счета"".
			|Проверьте корректность данных в реквизите ""Счет казначейства"" в элементе """+ ПроблемныйСчет +""".'");
			Отказ = Истина;
			Возврат ТекстОшибки;
		Иначе
			МассивОбойденныхСчетов.Добавить(РеквизитыСчета);
		КонецЕсли;
		
		РеквизитыСчета	= РеквизитыСчета.СчетКазначейства;
		КассовыйОрган	= РеквизитыСчета.КассовыйОрган;	
	КонецЦикла;
		
	Результат					= Новый Структура("БИК, НаимБанк, КоррСчет, РассчетныйСчет");
	Результат.БИК 				= КассовыйОрган.Код;
	Результат.РассчетныйСчет	= РеквизитыСчета.Код;
	Результат.НаимБанк			= КассовыйОрган.Наименование +" "+КассовыйОрган.Город;
	Результат.КоррСчет			= КассовыйОрган.КоррСчет;
	
	Если ТипЗнч(РеквизитыСчета) = Тип("СправочникСсылка.БанковскиеИКазначейскиеСчета") Тогда 
		Результат.РассчетныйСчет = РеквизитыСчета.Код;
	Иначе
		Результат.РассчетныйСчет = РеквизитыСчета.Владелец.Код;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдентификаторНоменклатуры(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	Если Контекст.Свойство("РеквизитСопоставленияНоменклатуры") и Контекст.РеквизитСопоставленияНоменклатуры="Код" Тогда
		Возврат ОпределитьКодНоменклатуры(Контекст);
	Иначе
		Возврат ОпределитьИдентификаторНоменклатурыНаСервере(Контекст);	
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОпределитьИдентификаторНоменклатурыНаСервере(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	ИДТовара = строка(Контекст.Номенклатура.УникальныйИдентификатор());
	ИДХарактеристики = "";
	ИДУпаковки = "";
	Если Контекст.Свойство("Характеристика") Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.Характеристика) Тогда
				ИДХарактеристики = Контекст.Характеристика.УникальныйИдентификатор();
			Иначе
				ИДХарактеристики = "";
			КонецЕсли;
		Исключение
			ИДХарактеристики = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзмУпаковки") и ЗначениеЗаполнено(Контекст.ЕдИзмУпаковки) Тогда
		Попытка
			ИДУпаковки = Контекст.ЕдИзмУпаковки.УникальныйИдентификатор();
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзм") и ИДУпаковки = "" Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.ЕдИзм) Тогда
				ИДУпаковки = Контекст.ЕдИзм.УникальныйИдентификатор();
			Иначе
				ИДУпаковки = "";
			КонецЕсли;
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);	
КонецФункции

&НаКлиенте
Функция ОпределитьКодНоменклатуры(Контекст) Экспорт
	// Функция возвращает код номенклатуры. 
	// Данный код используется при сопоставлении номенклатуры
	Если Контекст.Свойство("Номенклатура_Код") Тогда   // в случае, если ТаблДок_Код вычисляется с помощью функции
		ИДТовара = СокрЛП(Контекст.Номенклатура_Код);
	Иначе
		ГлавноеОкно = Неопределено;
		Если МестныйКэш = Неопределено
			Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
			ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		КонецЕсли;
		Если ЗначениеЗаполнено(ГлавноеОкно.Кэш) Тогда
			ИДТовара = ГлавноеОкно.Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок_Код", Контекст, ГлавноеОкно.Кэш); 
		Иначе
			ИДТовара = СокрЛП(Контекст.ТаблДок_Код);
		КонецЕсли;
	КонецЕсли;
	Возврат ИДТовара;	
КонецФункции

// Функция возвращает код поставщика номенклатуры.
&НаКлиенте
Функция ОпределитьКодПоставщикаНоменклатуры(Контекст) Экспорт
	Перем Номенклатура, Характеристика;
	Контекст.Свойство("Номенклатура", Номенклатура);
	Контекст.Свойство("Характеристика", Характеристика);
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Характеристика) Тогда
		Возврат Строка(Номенклатура.УникальныйИдентификатор()) + "#" + Строка(Характеристика.УникальныйИдентификатор());
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Строка(Номенклатура.УникальныйИдентификатор());
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры контрагента (если есть сопоставление по номенклатуре) 
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.Кэш) Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьИдентификаторНоменклатурыПоставщика",ГлавноеОкно.Кэш.ФормаРаботыСНоменклатурой,"", ГлавноеОкно.Кэш);
		Попытка
			стрКонтрагент = сбисЗаполнитьСтруктуруКонтрагента(Контекст.Контрагент);
			стрНоменклатура = Новый Структура("Номенклатура,Характеристика", Контекст.Номенклатура,?(Контекст.Свойство("Характеристика"),Контекст.Характеристика,Неопределено));
			Возврат фрм.ПолучитьИдентификаторНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, ГлавноеОкно.Кэш.Парам.КаталогНастроек, ГлавноеОкно.Кэш.Ини);	
		Исключение
			Возврат "";		
		КонецПопытки;
	Иначе
		Возврат "";	
	КонецЕсли;
КонецФункции 

&НаКлиенте
Функция сбисОпределитьШтрихкодНоменклатурыКонтрагента(Контекст) Экспорт
	// Функция получает штрихкод номенклатуры контрагента (если есть сопоставление по номенклатуре) 
	Попытка
		ШКНоменклатурыКонтрагента = сбисОпределитьРеквизитНоменклатурыКонтрагента(Контекст, "GTIN");   
	Исключение
		ШКНоменклатурыКонтрагента = "";
	КонецПопытки;
	// если в сопоставлении не сохранен ШК контрагента, то берем свой
	Если Не ЗначениеЗаполнено(ШКНоменклатурыКонтрагента) и Контекст.Свойство("ШКНоменклатурыНаш") Тогда
		ШКНоменклатурыКонтрагента = Контекст.ШКНоменклатурыНаш;	
	КонецЕсли;
	Возврат ШКНоменклатурыКонтрагента;
КонецФункции 

&НаКлиенте
Функция сбисОпределитьРеквизитНоменклатурыКонтрагента(Контекст, ИмяРеквизита) Экспорт
	// Функция получает реквизит номенклатуры контрагента (если есть сопоставление по номенклатуре) 
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.Кэш) Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисПолучитьРеквизитНоменклатурыПоставщика",ГлавноеОкно.Кэш.ФормаРаботыСНоменклатурой,"", ГлавноеОкно.Кэш);
		Попытка
			стрКонтрагент = сбисЗаполнитьСтруктуруКонтрагента(Контекст.Контрагент);
			стрНоменклатура = Новый Структура("Номенклатура,Характеристика", Контекст.Номенклатура,?(Контекст.Свойство("Характеристика"),Контекст.Характеристика,Неопределено));
			Возврат фрм.сбисПолучитьРеквизитНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, ИмяРеквизита, ГлавноеОкно.Кэш.Парам.КаталогНастроек, ГлавноеОкно.Кэш.Ини);	
		Исключение
			Возврат "";		
		КонецПопытки;
	Иначе
		Возврат "";	
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОпределитьКодНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем код
		Код = Контекст.Номенклатура_Код;
	КонецЕсли;
	Возврат Код;
КонецФункции

&НаКлиенте
Функция ОпределитьИдентификаторНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем идентификатор
		Код = ОпределитьИдентификаторНоменклатуры(Контекст);
	КонецЕсли;
	Возврат Код;
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойстваОбъектов(Свойства, ИниКонфигурация) Экспорт
	Для Каждого Элемент Из Свойства Цикл
		сбисЗаполнитьДопСвойствоОбъекта(Элемент.Объект1С, Элемент.ИмяСвойства, Элемент.ЗначениеСвойства, ?(Элемент.Свойство("НазначениеСвойства"), Элемент.НазначениеСвойства, Неопределено), ИниКонфигурация);	
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойствоОбъекта(Объект1С, ИмяСвойства, ЗначениеСвойства, НазначениеСвойства, ИниКонфигурация) Экспорт
	Свойство = ДобавитьЗаписьВПланВидовХарактеристик(ИмяСвойства, ИниКонфигурация, НазначениеСвойства);
	Если Свойство<>Ложь Тогда
		ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
		НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект1С);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.Объект = Объект1С;
			НоваяЗаписьНабора.Свойство = Свойство.Ссылка;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		КонецЕсли;
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьНаименованиеУслуги(Контекст) Экспорт
	// Функция возвращает наименование услуги	
	НаименованиеУслуги = ?(ЗначениеЗаполнено(Контекст.Описание),Контекст.Описание,Контекст.Название);
	Возврат НаименованиеУслуги;
КонецФункции

функция ОпределитьНазваниеУпаковки(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции

функция ОпределитьКоличествоВОдномМесте(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.Упаковка.Коэффициент, "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции

Функция ОпределитьМассуБрутто(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			КолМест = ?(Контекст.Свойство("КолМест"), Контекст.КолМест, Контекст.Упаковка_КолМест);  // в Контекст.Упаковка_КолМест - округленное значение, а для веса нужно точное
			Если ЗначениеЗаполнено(КолМест) и Число(КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМассуНетто(Контекст) Экспорт
	// Функция опеределяет массу нетто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Возврат Формат(Кол_во * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
	КонецЕсли;	
	
КонецФункции

Функция ПараметрыМассыПрописью(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения	
	КоэффициентПересчетаВТонны     = Константы.КоэффициентПересчетаВТонны.Получить();
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции

функция ОпределитьМассуИтогПрописью(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

функция ОпределитьМассуИтогПрописьюНеупрПрил(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью для обычных приложений	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(Контекст.ЕдиницаИзмеренияВеса) И МассаИтог > 0 Тогда
		Возврат ЧислоПрописью(МассаИтог, ,",,,,,,,,0")+ " " +Контекст.ЕдиницаИзмеренияВеса.Наименование + ".";
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

//НГС
Функция НайтиФизЛицоПоРеквизиту(Контекст) Экспорт
	ФИО = Контекст.Ини.ФизическоеЛицо.Значение;
	СправочникФизЛица = Вычислить(Контекст.Ини.Контрагент.Тип);
	Возврат СправочникФизЛица.НайтиПоРеквизиту(Контекст.Ини.Контрагент.Данные, ФИО);
КонецФункции

//КНГС
//// УТ 11.2+
&НаКлиенте
функция ОпределитьКоличествоВОдномМестеУТ11_2(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке 
	Если Контекст.Упаковка.Пустая() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.УпаковкаЧислитель/?(Контекст.УпаковкаЗнаменатель = 0,1,Контекст.УпаковкаЗнаменатель), "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОпределитьМассуБруттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			КолМест = ?(Контекст.Свойство("КолМест"), Контекст.КолМест, Контекст.Упаковка_КолМест);  // в Контекст.Упаковка_КолМест - округленное значение, а для веса нужно точное
			Если ЗначениеЗаполнено(КолМест) и Число(КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(ОпределитьВесНоменклатурыУТ11_2(Контекст)), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОпределитьВесНоменклатурыУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	Если Контекст.ВесИспользовать тогда
		ВесЧислитель = Контекст.ВесЧислитель;
		ВесЗнаменатель = Контекст.ВесЗнаменатель;
		Если ВесЗнаменатель=0 Тогда
			Возврат ВесЧислитель;
		Иначе
			Вес = Число(ВесЧислитель/ВесЗнаменатель); 
			Возврат Формат(Вес, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
		КонецЕсли; 
		
	иначе
		возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОпределитьМассуНеттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		ВесНетто = ОпределитьВесНоменклатурыУТ11_2(Контекст);
		Возврат Формат(Кол_во * Число(ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
	КонецЕсли; 
	
КонецФункции

функция ОпределитьНазваниеУпаковкиУТ11_2(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара 
	Если Контекст.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции

&НаКлиенте
функция ОпределитьМассуИтогПрописьюУТ11_2(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью 
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописьюУТ11_2(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыМассыПрописьюУТ11_2(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения 
	КоэффициентПересчетаВТонны     =  0.001;
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции

////Сверка взаиморасчетов////
&НаСервереБезКонтекста
Функция ТекстЗапросаОтборПоАналитике(ДопПараметры=Неопределено)
	// Функция возвращает часть запроса для формирования табличной части акта сверки в конфигурации УТ11
	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)" +
	?(ДопПараметры=Неопределено Или ДопПараметры.АналитикаДоговор,  
	"
	|	И (АналитикаУчетаПоПартнерам.Договор = &Договор
	|		ИЛИ &НеИспользоватьОтборПоДоговору)",
	"") + 
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции

&НаСервереБезКонтекста
функция сбисОбработатьЗапросВзаиморасчетов(Контекст, ТекстЗапроса)
	ДанныеДокумента = Контекст.Документ;
	ТабЧастьДокумента = Новый Массив;
	НачальныйОстаток = 0;
	
	ЗапросНашихДанных = Новый Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеПартнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "РасчетыСПартнерами.Партнер КАК Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Партнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеДоговор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "РасчетыСПартнерами.Договор КАК Договор,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Договор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "Договор,", ""));
	ЗапросНашихДанных.Текст = ТекстЗапроса;
	
	ЗапросНашихДанных.УстановитьПараметр("НачалоПериодаСверки", ДанныеДокумента.НачалоПериода);
	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки",	КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросНашихДанных.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(
	КонецДня(ДанныеДокумента.КонецПериода)+1,
	ВидГраницы.Исключая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		    ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		    ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	    ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	    ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));
	
	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ВыборкаНашихДанных = РезультатЗапросаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаНашихДанных = Неопределено;
	КонецЕсли;
	
	Если ВыборкаНашихДанных = Неопределено Тогда 
		Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);
	КонецЕсли;
	
	Пока ВыборкаНашихДанных.Следующий() Цикл
		
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			ВыборкаПоДетальнымРасчетам = ВыборкаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
				сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ВыборкаНашихДанных.Договор, НачальныйОстаток);
			КонецЦикла; 
		Иначе
			сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаНашихДанных, ДанныеДокумента, ,НачальныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);	
КонецФункции

&НаСервереБезКонтекста
Функция сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаДетальныхЗаписей, ДанныеДокумента, ТекущийДоговор = Неопределено,НачальныйОстаток)
	// Функция заполняет данные по строкам акта сверки для конфигурации УТ11	
	ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
	
	ПервыйПроход = Истина;
	Пока ДетальныеЗаписи.Следующий() Цикл
		Если ДетальныеЗаписи.Документ = Null Тогда//AU Выборка шапки итогов. Пропускаем
			Продолжить;
		КонецЕсли;
		Если ДетальныеЗаписи.Документ = Неопределено Тогда
			Если ДетальныеЗаписи.Период = ДанныеДокумента.НачалоПериода Тогда
				НачальныйОстаток = НачальныйОстаток + ДетальныеЗаписи.СуммаНачальныйОстаток;
				//Иначе
				//	КонечныйОстаток = КонечныйОстаток + ДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЕсли;
		Иначе
			
			//Если ПервыйПроход
			//	И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
			//	
			//	ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'");
			//	Если НачальныйОстаток > 0 Тогда
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
			//	Иначе
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
			//	КонецЕсли;				
			//	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
			//	
			//КонецЕсли;
			
			ДатаДокумента = Формат(ДетальныеЗаписи.Дата, "ДФ='дд.ММ.гггг'");
			НомерДокумента = ДетальныеЗаписи.Номер;			
			мПараметр = Новый Структура("Дата, Номер", Новый Структура("Параметр_Имя, Параметр_Значение", "Дата", Формат(ДетальныеЗаписи.Документ.Дата, "ДФ='дд.ММ.гггг'")), Новый Структура("Параметр_Имя, Параметр_Значение", "Номер", ДетальныеЗаписи.Документ.Номер));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("ТаблДок_Дата",	ДатаДокумента); 
			НоваяСтрока.Вставить("ТаблДок_Номер",	НомерДокумента); 
			НоваяСтрока.Вставить("ДокументТабл",	ДетальныеЗаписи.Документ); 
			НоваяСтрока.Вставить("ТаблДок_Дебет",	ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрока.Вставить("ТаблДок_Кредит",	ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрока.Вставить("ТаблДок_Раздел",	"Отправитель");
			НоваяСтрока.Вставить("мОснование",		Новый Структура);
			НоваяСтрока.Вставить("мПараметр",		мПараметр); 
			
			НоваяСтрокаПоДаннымКонтрагента = Новый Структура;
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дата",		ДатаДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Номер",	НомерДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ДокументТабл",		ДетальныеЗаписи.Документ); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дебет",	ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Кредит",	ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Раздел",	"Получатель");
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мОснование",		Новый Структура);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мПараметр",		мПараметр); 
			
			Основание = ?(ДанныеДокумента.РасшифровкаПоДоговорам, ТекущийДоговор, ДанныеДокумента.Договор);
			Если Не Основание = Неопределено Тогда
				НоваяСтрока.мОснование.Вставить("Договор", Новый Структура());
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Название",	Строка(Основание));
				НоваяСтрока.мОснование.Договор.Вставить("Основание",			Основание);
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Номер",		Основание.Номер);
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Дата",		Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
				
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Вставить("Договор", Новый Структура());
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Название",Строка(Основание));
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание",			Основание);
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Номер",	Основание.Номер);
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Дата",	Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ТабЧастьДокумента.Добавить(НоваяСтрока);
			ТабЧастьДокумента.Добавить(НоваяСтрокаПоДаннымКонтрагента);
			
			ПервыйПроход = Ложь;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТабЧастьДокумента;
	
КонецФункции

//
&НаКлиенте
Функция сбисФорматСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "счФактКор";
	Иначе
		Возврат "СчФктр";	
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисПодтипСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "1115127";
	Иначе
		Возврат "1115125";	
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисИмяФайлаСФ(Контекст) Экспорт
	// Функция определяет префикс имени файла выгружаемого счета-фактуры (обычный или корректировочный)		
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "ON_KORSCHFDOPPR_";
	Иначе
		Возврат "ON_SCHFDOPPR_";	
	КонецЕсли;
КонецФункции

Функция сбисПересчитатьСФВВалютеУчета(Контекст) Экспорт
	Если Контекст.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию и Контекст.ДоговорРасчетыУЕ = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисИтогСуммаПоДокументамРасчетовСКонтрагентом(Контекст) Экспорт
   	Возврат сбисИтогСуммаПоДокументамРасчетовСКонтрагентомНаСервере(Контекст.Документ, Контекст.КурсВзаиморасчетов, Контекст.КратностьВзаиморасчетов);
КонецФункции   

&НаСервере
Функция сбисИтогСуммаПоДокументамРасчетовСКонтрагентомНаСервере(ДокументСсылка, КурсВзаиморасчетов, КратностьВзаиморасчетов)
	ЗапросКурсАванса = Новый Запрос;
	ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ЗапросКурсАванса.Текст =
	"ВЫБРАТЬ
	|	Док.СуммаВзаиморасчетов,
	|	Док.СуммаРегл
	|ИЗ 
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
	|ГДЕ Док.Ссылка = &ДокументСсылка
	|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
	
	Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		ВыборкаСуммаРегл           = Выборка.СуммаРегл;
	Иначе
		ВыборкаСуммаВзаиморасчетов = 0;
		ВыборкаСуммаРегл           = 0;
	КонецЕсли;
	НеоплаченнаяСумма = ДокументСсылка.СуммаДокумента - ВыборкаСуммаВзаиморасчетов;
	НеоплаченнаяСуммаРегл = Окр(НеоплаченнаяСумма*КурсВзаиморасчетов/?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов),2);
	Возврат НеоплаченнаяСуммаРегл+ВыборкаСуммаРегл;   
КонецФункции   

&НаКлиенте
Функция сбисИтогСуммаПоДокументамРасчетовПоТаблДок(Контекст) Экспорт
   	РаспределяемаяСумма = сбисИтогСуммаПоДокументамРасчетовСКонтрагентомНаСервере(Контекст.Документ, Контекст.КурсВзаиморасчетов, Контекст.КратностьВзаиморасчетов);	
	ИтогСумма 			= 0; 
	ИтогСуммыПоТаблДок 	= ИтогСуммыПоТаблДок(Контекст.Документ, Контекст.КурсВзаиморасчетов, Контекст.КратностьВзаиморасчетов, РаспределяемаяСумма);
	
	Для Каждого мТаблДок Из Контекст.мТаблДок Цикл        
		ТекСуммаПоТаблДок = Неопределено;    
		Если ИтогСуммыПоТаблДок.Свойство(мТаблДок.Ключ, ТекСуммаПоТаблДок) Тогда
			ИтогСумма = ИтогСумма + ТекСуммаПоТаблДок;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтогСумма;
КонецФункции   

&НаСервере
Функция ИтогСуммыПоТаблДок(ДокументСсылка, КурсВзаиморасчетов, КратностьВзаиморасчетов, РаспределяемаяСумма)
	ИтогСуммыПоТаблДок = Новый Структура; 
    ТаблицаРаспределения = Новый Массив;
	МассивРаспределения = Новый Массив;
	Запрос = Новый Запрос;   
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|   Товары.Сумма    * &Курс / &Кратность КАК Сумма,
	|	Товары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	""Товары"" КАК ИмяТаблицы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   Услуги.Сумма    * &Курс / &Кратность КАК Сумма,
	|	Услуги.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	""Услуги""
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &ДокументСсылка";   
		
	Запрос.УстановитьПараметр("Курс", КурсВзаиморасчетов); 
	Запрос.УстановитьПараметр("Кратность", КратностьВзаиморасчетов); 
	Выборка = Запрос.Выполнить().Выбрать(); 
	СуммаБазы = 0;
    СуммаВключаетНДС = ДокументСсылка.СуммаВключаетНДС;
	
	Пока Выборка.Следующий() Цикл  
		СуммаСНДС = Выборка.Сумма + ?(СуммаВключаетНДС, 0, Выборка.СуммаНДС);
		СтрокаТаблицы = Новый Структура("Сумма, ИмяТаблицы, СуммаРублевая", СуммаСНДС, Выборка.ИмяТаблицы, 0);
		ТаблицаРаспределения.Добавить(СтрокаТаблицы); 
		МассивРаспределения.Добавить(СуммаСНДС);
		СуммаБазы = СуммаБазы + СуммаСНДС; 
	КонецЦикла;
	
	УчтеноБазыРаспределения = 0;
	УжеРаспределено = 0;  
	
	//Распределение суммы аналогично типовой УПП 
	Для Индекс = 0 По МассивРаспределения.Количество() - 1 Цикл
		ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;
		ТаблицаРаспределения[Индекс]["СуммаРублевая"] = Формат(ШагРаспределения, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		
		УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивРаспределения[Индекс];
		УжеРаспределено         = УжеРаспределено + ШагРаспределения;		
	КонецЦикла;		
	
	ИтогСуммыПоТаблДок = Новый Структура("Товары, Услуги", 0, 0); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		Если СтрокаТаблицы.ИмяТаблицы = "Товары" Тогда
			ИтогСуммыПоТаблДок.Товары = ИтогСуммыПоТаблДок.Товары + СтрокаТаблицы.СуммаРублевая; 
		ИначеЕсли СтрокаТаблицы.ИмяТаблицы = "Услуги" Тогда
			ИтогСуммыПоТаблДок.Услуги = ИтогСуммыПоТаблДок.Услуги + СтрокаТаблицы.СуммаРублевая; 
		КонецЕсли;
	КонецЦикла;    
	
	Возврат ИтогСуммыПоТаблДок; 
	
КонецФункции

Функция сбисИтогСуммаПоРегиструБухгалтерииТовары(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугТовары.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ГДЕ
	|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Текст = Текст +") И Хозрасчетный.Содержание <> &Содержание";
	Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции

Функция сбисИтогСуммаПоРегиструБухгалтерииУслуги(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугУслуги.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ГДЕ
	|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка";
	Текст = Текст +") И Хозрасчетный.Содержание = &Содержание";
	Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции

Функция сбисДатаПоступленияДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет дату документа-поступления в таб. части отчета комитенту		
	Если Контекст.Свойство("ПоступлениеДатаВх") и ЗначениеЗаполнено(Контекст.ПоступлениеДатаВх) Тогда
		Возврат Контекст.ПоступлениеДатаВх;
	Иначе
		Возврат Контекст.ПоступлениеДата;	
	КонецЕсли;
КонецФункции

Функция сбисНомерВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.НомерВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.НомерВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.НомерВходящегоДокумента;
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции

Функция сбисДатаВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.ДатаВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.ДатаВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции

Функция сбисСуммаНДСВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаНДСВознаграждения");
КонецФункции

Функция сбисСуммаВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаВознаграждения");
КонецФункции

// Функция формирует строку для вывода перед таб. частью в СФ, составленном комиссионером
//
// Параметры:
//  Контекст - Структура - Контекст рассчитываемого документа	 
// 
// Возвращаемое значение:
//  Строка - Информация, которая будет выведена перед ТЧ с информацией о составителе отчета
//
&НаКлиенте
Функция сбисИнфПередТаблСФотКомиссионера(Контекст) Экспорт
	Перем лДанныеСтороны, лАдрТекст;

	Если Не Контекст.мСторона.Свойство("Грузополучатель", лДанныеСтороны) Тогда
		лДанныеСтороны = Контекст.мСторона.Организация;
	КонецЕсли;
	
	Инф = "Составлен комиссионером(агентом):"	+ лДанныеСтороны.Сторона_Наименование
		+ "ИНН/КПП: "							+ лДанныеСтороны.Сторона_ИНН
		+ "/"									+ лДанныеСтороны.Сторона_КПП;

	Если	лДанныеСтороны.Свойство("Сторона_Адрес", лАдрТекст)
		И	ТипЗнч(лАдрТекст) = Тип("Структура")
		И	лАдрТекст.Свойство("АдрТекст", лАдрТекст)
		И	ЗначениеЗаполнено(лАдрТекст) Тогда
		Инф = Инф + "," + лАдрТекст;
	КонецЕсли;

	
	Возврат Инф
	
КонецФункции

Функция ЗаполнитьЕдиницуИзмеренияНоменклатуры(Контекст) Экспорт
	// Функция возвращает единицу измерения для номенклатуры в загружаемом документе (для конфигураций КА, УПП, УТ10) 
	КлассификаторЕИ = РассчитатьЗначениеНаСервере("КлассификаторЕдиницИзмерения",Контекст);
	СпрЕИ = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения",Контекст);
	// d.ch 29.07.19
	// получаем название реквизита табличной части документа куда будем записывать единицу измерения
	// берем рассчитанное значение из СтрТабл по имени реквизита
	Попытка 
		ИмяРеквизита = Сред(Контекст.ТекущееПолеИни.Значение, Найти(Контекст.ТекущееПолеИни.Значение,".")+1);
		ЕИ = КлассификаторЕИ.НайтиПоКоду(Контекст.СтрТабл[ИмяРеквизита], Истина);
	Исключение 
		//в противном случае по старинке
		ТекстОшибки = ОписаниеОшибки();
		ЕИ = КлассификаторЕИ.НайтиПоКоду(Контекст.СтрТабл.ЕдиницаИзмерения, Истина);
	КонецПопытки;
	
	Если ЕИ <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕдиницыИзмерения.Ссылка
			|ИЗ
			|	Справочник.%СпрЕИ% КАК ЕдиницыИзмерения
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Владелец
			|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕИ
			|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
		
		
		Запрос.УстановитьПараметр("Владелец", Контекст.СтрТабл.Номенклатура);
		Запрос.УстановитьПараметр("ЕИ", ЕИ);
		
		Запрос.Текст 			= СтрЗаменить(Запрос.Текст,"%СпрЕИ%",СпрЕИ.ПустаяСсылка().Метаданные().Имя);	
		РезультатЗапроса 		= Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ЗаполнитьСписокПартнераСРодителями(Партнер,СписокПартнераСРодителями) Экспорт
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Получить родителей партнера
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ДеревоИерархии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСписокПартнеровИзДерева(ДеревоИерархии.Строки, СписокПартнераСРодителями,Партнер);
	
КонецПроцедуры

Процедура ЗаполнитьСписокПартнеровИзДерева(СтрокиДерева, СписокПартнеров, Партнер)
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СписокПартнеров.Добавить(СтрокаДерева.Ссылка, СтрокаДерева.Наименование);
		Если СтрокаДерева.Ссылка <> Партнер Тогда
			ЗаполнитьСписокПартнеровИзДерева(СтрокаДерева.Строки, СписокПартнеров,Партнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьВалюту(Контекст) Экспорт
	// Функция заполняет валюту в загружаемых документах	
	Валюты = Справочники.Валюты;
	Возврат Валюты.НайтиПоКоду(Контекст.Документ.Валюта);
КонецФункции

Функция сбисЗаполнитьБанкСчет(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.СтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Функция сбисЗаполнитьБанкСчетОрганизации(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки) Экспорт
	Если ЗначениеЗаполнено(иниЗагрузки) и иниЗагрузки.Свойство("Документ_Сумма") Тогда
		ИмяРеквизитаСуммы = сбисСообщитьИмяРеквизита(иниЗагрузки.Документ_Сумма.Значение);
	Иначе
		ИмяРеквизитаСуммы = "СуммаДокумента";
	КонецЕсли;
	Возврат ИмяРеквизитаСуммы;
КонецФункции

&НаКлиенте
Функция сбисИниЗагрузкиПоДокументу1С(Кэш, Документ1С) Экспорт
	ИмяДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
	Если Кэш.КэшЗначенийИни.ИниЗагрузки.Свойство(ИмяДок) Тогда
		Возврат Кэш.ФормаНастроек.Ини(Кэш, Кэш.КэшЗначенийИни.ИниЗагрузки[ИмяДок]).мДокумент[ИмяДок]
	Иначе
		КэшИни = МодульОбъектаКлиент().ИниПоПараметрам();
		Для Каждого Ини Из КэшИни Цикл
			ЗначениеИни = Ини.Значение;
			Если ЗначениеИни.Свойство("мДокумент") и ЗначениеИни.мДокумент.Свойство(ИмяДок) Тогда
				Кэш.КэшЗначенийИни.ИниЗагрузки.Вставить(ИмяДок, Ини.Ключ);
				Возврат ЗначениеИни.мДокумент[ИмяДок];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
КонецФункции

//Березкин
&НаКлиенте
Функция сбисВидОперацииКорректировочногоДокумента(Контекст) Экспорт
	// Функция вычисляет ДокументВидОперации в корректировочных документах	
	Попытка	
		Если Найти(НРег(Контекст.ВидОперации), "исправление") Тогда
			Возврат "Исправление";
		Иначе //Если Контекст.ВидОперации = СогласованноеИзменение или КорректировкаПоСогласованиюСторон Тогда	
			Возврат "Корректировка";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат "";
КонецФункции

Функция сбисЗаполнитьВидХозяйственнойОперации(Контекст) Экспорт
	// Функция заполняет ВидОперации в полученных корректировочных документах	
	Попытка
		Если Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Исправление" Тогда
			Возврат Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;
		ИначеЕсли Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Корректировка" Тогда	
			Возврат Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции

&НаКлиенте
функция ПолучитьСкладТекущегоПользователяРОЗН(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Склады", "Склад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Магазин=неопределено;
		Если Контекст.Свойство("Документ") и Контекст.Документ.Свойство("Магазин") и ЗначениеЗаполнено(Контекст.Документ.Магазин) Тогда
			Магазин = Контекст.Документ.Магазин;
		КонецЕсли;
		сбисОписаниеОбъекта.Значение = ПолучитьСкладТекущегоПользователяРОЗННаСервере(Магазин);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если ЗначениеЗаполнено(Магазин) И Контекст.Свойство("Документ") Тогда
			Контекст.Документ.Вставить("Магазин", Магазин);
		КонецЕсли;
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаСервереБезКонтекста
функция ПолучитьСкладТекущегоПользователяРОЗННаСервере(Магазин) Экспорт
	Если не ЗначениеЗаполнено(Магазин) Тогда
		Магазин = Вычислить("ПараметрыСеанса.ТекущийМагазин");
		Если не ЗначениеЗаполнено(Магазин) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Магазины.Ссылка КАК Магазин
			|ИЗ	Справочник.Магазины КАК Магазины
			|ГДЕ (НЕ Магазины.ПометкаУдаления)");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
				Магазин = Выборка.Магазин;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка	
		ТекущийПользователь = Вычислить("глЗначениеПеременной(""глТекущийПользователь"")");
		Если не ЗначениеЗаполнено(ТекущийПользователь) Тогда
			ТекущийПользователь = Вычислить("Пользователи.ТекущийПользователь()");
		КонецЕсли;
	Исключение
		ТекущийПользователь = неопределено;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Если ЗначениеЗаполнено(Магазин) Тогда
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.СкладПоступленияПоУмолчанию(Магазин,,, ТекущийПользователь)"); // Розница 2.3
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,, ТекущийПользователь)");// Розница 2.2
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	Иначе
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.СкладПоступленияПользователяПоУмолчанию(ТекущийПользователь)");	// Розница 2.3		
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПользователяПоУмолчанию(ТекущийПользователь)");// Розница 2.2
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	Возврат неопределено;
КонецФункции     	// alo розница >>

Функция ЗаполнитьФизическоеЛицо(Контекст) Экспорт
	Если Контекст.Ини.Свойство("ФизическоеЛицо") и Контекст.Ини.ФизическоеЛицо.Свойство("РассчитанноеЗначение") Тогда
		Возврат Справочники.ФизическиеЛица.НайтиПоНаименованию(Контекст.Ини.ФизическоеЛицо.РассчитанноеЗначение);
	КонецЕсли;
КонецФункции

Функция ПолучитьКассуККМ(Контекст) Экспорт 
	КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	Если Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр") Тогда
		ПараметрыДокумента = Контекст.СтруктураФайла.Файл.Документ.Параметр;
		Если ПараметрыДокумента.Свойство("ККМСерНомер") Тогда
			Попытка
				КассаККМ = Справочники.КассыККМ.НайтиПоРеквизиту("СерийныйНомер", ПараметрыДокумента.ККМСерНомер);
			Исключение
			Конецпопытки;
			
			Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
				Попытка
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ 
					|	КассыККМ.Ссылка 
					|ИЗ 
					|	Справочник.КассыККМ КАК КассыККМ 
					|ГДЕ
					|	КассыККМ.Наименование ПОДОБНО &Наименование";
					Запрос.УстановитьПараметр("Наименование", "%" + ПараметрыДокумента.ККМСерНомер + "%");
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Количество() <> 0 Тогда
						Выборка.Следующий();
						КассаККМ = Выборка.Получить(0);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Организация = Контекст.Документ.Организация;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Владелец = &Владелец И КассыККМ.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Владелец", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			КассаККМ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат КассаККМ;
КонецФункции

&НаКлиенте
Функция ПолучитьТекущуюДату(Контекст) Экспорт 
	Возврат Строка(ТекущаяДата());
КонецФункции

&НаКлиенте
Функция ПолучитьДатуДокумента(Контекст) Экспорт
	ДокументСБиС = Контекст.СтруктураФайла.Файл.Документ;
	ДатаДокумента = ДокументСБиС.Дата;
	ВремяДокумента = "";
	Если ДокументСБиС.Свойство("Время") Тогда
		ВремяДокумента = СтрЗаменить(ДокументСБиС.Время, ".", ":") 	
	КонецЕсли;
	Если Контекст.СоставПакета.Свойство("ДатаВремяСоздания") И (ВремяДокумента = "" ИЛИ ВремяДокумента = "00:00:00") Тогда
		ВремяДокумента = Прав(Строка(Контекст.СоставПакета.ДатаВремяСоздания), 8);
	КонецЕсли;
	Возврат Дата(ДатаДокумента + " " + ВремяДокумента);
КонецФункции

&НаКлиенте
функция сбисПолучитьФИО(Название) Экспорт
	// Функция формирует структуру ФИО из строки	
	ФИО = РазбитьСтрокуВМассивНаКлиенте(Название," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
КонецФункции

&НаКлиенте
Функция СокращенноеФИО(Кэш, ФИО) Экспорт
	// Формирует сокращенное ФИО из полного	
	_ФИО = РазбитьСтрокуВМассивНаКлиенте(ФИО," ");
	
	Фамилия  = ?(_ФИО.Количество()>0,_ФИО[0],"");
	Имя      = ?(_ФИО.Количество()>=2,Лев(_ФИО[1],1)+".","");
	Отчество = ?(_ФИО.Количество()>=3,Лев(_ФИО[2],1)+".","");
	Возврат Фамилия+" "+Имя+Отчество;
КонецФункции

//функция сбисРазложитьСтрокуВСтруктуру(знач Строка, Разделитель) Экспорт
//	
//	РезСтруктура = Новый Структура;
//	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
//	КолЭлементов = СтрЧислоСтрок(Строка);
//	Для сч = 1 по КолЭлементов Цикл
//		Попытка
//			РезСтруктура.Вставить(СокрЛП(СтрПолучитьСтроку(Строка,сч)));
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	Возврат РезСтруктура
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита) Экспорт
	// Функция возвращает значение реквизита объекта 1С
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции

Функция ПроверитьНаличиеМетаданных(ИмяМетаданных, ИмяРеквизита)
	// Функция проверяет наличие матаданных в конфигурации	
	Если Метаданные[ИмяМетаданных].Найти(ИмяРеквизита)<>Неопределено Тогда
		возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции

Функция сбисВыбратьПодходящийДокумент(Документы1С,ТипДокумента) Экспорт
	// выбирает из списка документов 1С документ определенного типа
	Для Каждого Документ1С Из Документы1С Цикл
		Если Документ1С.Значение.Метаданные().Имя = ТипДокумента Тогда
			Возврат Документ1С.Значение;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ИмяРеквизита)
//	Возврат Перечисления[ИмяПеречисления][ИмяРеквизита];
//КонецФункции

//Поиск документов в 1С по реквизитам входящих документов
&НаКлиенте
Функция НайтиПодходящиеДокументы(Кэш, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту	
	СписокДокументов = Новый СписокЗначений;
	ИниЗагрузки = оДокумент.Ини;
	фрмНайтиДок = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа","РаботаСДокументами1С",,Кэш);
	Если ИниЗагрузки.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумент Из ИниЗагрузки.мДокумент Цикл
			
			Ини = РазделДокумент.Значение;
			Если Ини.Документ.Значение = "''" Тогда  // в случае, если в пользовательской настройке прописали пустой документ
				Продолжить;
			КонецЕсли;
			фрмНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, Кэш.Ини, Кэш.Парам, оДокумент);	
			Если СписокДокументов.Количество() = 1 Тогда  //если нашли 1 подходящий документ в одном реестре, то в остальных не ищем
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокДокументов;
КонецФункции

&НаКлиенте
Процедура НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, КэшИни, Парам, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	
	Если НЕ ЗначениеЗаполнено(оДокумент.Дата) и НЕ ЗначениеЗаполнено(оДокумент.Номер) Тогда   //  Если в СБИС не заполнены дата и номер, то нет смысла сопоставлять
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса = Новый Структура;
	//НГС
	ИмяРеквизитаКонтрагента = "";
	Если Ини.Свойство("Контрагент_Роль") Тогда
		РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
		Если Ини.мСторона.Свойство(РольКонтрагента) Тогда
			ИмяРеквизитаКонтрагента = сбисСообщитьИмяРеквизита(Ини.мСторона[РольКонтрагента].Сторона.Значение);
		КонецЕсли;
		//ИмяРеквизитаИННКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_ИНН.Значение,"'",""));
		//ИмяРеквизитаКППКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_КПП.Значение,"'",""));
		//Попытка
		//	ИННКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.ИНН,оДокумент.Контрагент.СвФЛ.ИНН);
		//Исключение
		//	ИННКонтрагента = "";
		//КонецПопытки;
		//Попытка
		//	КППКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.КПП,"");
		//Исключение
		//	КППКонтрагента = "";
		//КонецПопытки;
		
	КонецЕсли;
	//КНГС
	РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'",""); 
	ИмяРеквизитаОрганизации = сбисСообщитьИмяРеквизита(Ини.мСторона[РольОрганизации].Сторона.Значение); 
	ИмяРеквизитаИННОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_ИНН.Значение,"'","")); 
	ИмяРеквизитаКППОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_КПП.Значение,"'",""));	
	ИмяРеквизитаДатаВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, "")));
	ИмяРеквизитаНомерВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, "")));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|Док.Ссылка КАК Док
	|ИЗ
	|"+Ини.Документ.Значение+" КАК Док"+"
	|";
	УсловияЗапроса = "";
	
	Если ЗначениеЗаполнено(ИмяРеквизитаДатаВх) Тогда
		Если Парам.СопоставлениеПериод = "Дата документа" Тогда
			УсловияЗапроса = УсловияЗапроса + " И НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ)=НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		ИначеЕсли Парам.СопоставлениеПериод = "Месяц с даты документа" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док.Дата МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
			// << alo Календарный месяц документа
		ИначеЕсли Парам.СопоставлениеПериод = "Календарный месяц документа" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док.Дата МЕЖДУ &ДатНач И &ДатКнц";
			ПараметрыЗапроса.Вставить("ДатНач", НачалоМесяца(оДокумент.Дата));
			ПараметрыЗапроса.Вставить("ДатКнц", КонецМесяца(оДокумент.Дата));
			// alo Календарный месяц документа >>
		КонецЕсли;
		
		Если Парам.СопоставлениеПоДате = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаДатаВх+"=&ДатНач";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		ИначеЕсли Парам.СопоставлениеПоДате = "Отклонение 1 день" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)<2 И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)>-2";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
			ПараметрыЗапроса.Вставить("ДатКнц", КонецДня(оДокумент.Дата+1));
		КонецЕсли;
	КонецЕсли;
	
	
	Если Ини.Свойство("Контрагент_Роль") и ЗначениеЗаполнено(ИмяРеквизитаКонтрагента) и Парам.СопоставлениеПоКонтрагенту <> "Не использовать" и оДокумент.Свойство("Контрагент") и ЗначениеЗаполнено(оДокумент.Контрагент) Тогда
		//d.ch
		Если КэшИни.Конфигурация.Свойство("ЗапросКонтрагента") и КэшИни.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") И НРег(КэшИни.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да" Тогда
			оДокумент.Контрагент.Вставить("Ограничения", Новый Структура("Организация",НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация)));
		КонецЕсли;
		Контрагент = НайтиКонтрагентаИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.Контрагент, Ини, Истина);
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаКонтрагента+" В (&Контрагент)";
		ПараметрыЗапроса.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если Парам.СопоставлениеПоОрганизации <> "Не использовать" Тогда 
		Организация = НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация); 
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаОрганизации+"=&Организация"; 
		ПараметрыЗапроса.Вставить("Организация", Организация); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаНомерВх) Тогда
		Если Парам.СопоставлениеПоНомеру = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+"=&НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", оДокумент.Номер);
		ИначеЕсли Парам.СопоставлениеПоНомеру = "Вхождение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+" ПОДОБНО &НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", "%"+оДокумент.Номер+"%");
		КонецЕсли;
	КонецЕсли;
	
	УсловияЗапроса = Сред(УсловияЗапроса,3);
	Если ЗначениеЗаполнено(УсловияЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + " ГДЕ Док.ПометкаУдаления = Ложь И "+УсловияЗапроса;
	КонецЕсли;
	
	НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса);
КонецПроцедуры

Процедура НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	Запрос = Новый Запрос;
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Запрос.Текст=ТекстЗапроса;
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокДокументов.Добавить(Результат.Док);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция НайтиОрганизациюИзДокументаСБИС(Ини, оУчастник) Экспорт
	// Функция ищет организацию в базе 1С по данным участника в универсальном формате	
	Если Ини.Свойство("ЗапросОрганизации") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросОрганизации.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Организации.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	ТолькоПоИНН = ГлавноеОкно.Кэш.Парам.СопоставлениеПоОрганизации="Только по ИНН";	
	Возврат НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН);
КонецФункции

Функция НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН = Ложь, МножественныйВыбор = Ложь, СообщитьЕслиНеНайден = Ложь) Экспорт
	// Функция ищет организацию или контрагента в базе 1С по ИНН/КПП	
	Если Не оУчастник.Свойство("СвЮЛ") и Не оУчастник.Свойство("СвФЛ") Тогда
		Возврат Ложь;
	КонецЕсли;
	ЮлОрг   = оУчастник.Свойство("СвЮЛ");
	Если (ЮлОрг и Не оУчастник.СвЮЛ.Свойство("ИНН")) или (Не ЮлОрг и Не оУчастник.СвФЛ.Свойство("ИНН")) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыТекст = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН));
	ПараметрыТекст = "ИНН = " + ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН) + ", ";
	
	Если ЮлОрг и НЕ ТолькоПоИНН и оУчастник.СвЮЛ.Свойство("КПП") Тогда
		Запрос.УстановитьПараметр("КПП",оУчастник.СвЮЛ.КПП);
		ПараметрыТекст = ПараметрыТекст + "КПП = " + оУчастник.СвЮЛ.КПП + ", ";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Участник.КПП=&КПП","");
	КонецЕсли;
	
	Если оУчастник.Свойство("Подразделение") и оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		Запрос.УстановитьПараметр("КодФилиала",оУчастник.Подразделение.Идентификатор);
		Если ЗначениеЗаполнено(оУчастник.Подразделение.Идентификатор) Тогда
			ПараметрыТекст = ПараметрыТекст + "КодФилиала = " + оУчастник.Подразделение.Идентификатор + ", ";	
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("КодФилиала","");
	КонецЕсли;
	
	Если оУчастник.Свойство("GLN") Тогда
		Запрос.УстановитьПараметр("GLN",оУчастник.GLN);
		Если ЗначениеЗаполнено(оУчастник.GLN) Тогда
			ПараметрыТекст = ПараметрыТекст + "GLN = " + оУчастник.GLN + ", ";	
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("GLN","");
	КонецЕсли;
	
	// d.ch 26.06.15
	Если оУчастник.Свойство("Ограничения") Тогда
		Для Каждого Параметр из оУчастник.Ограничения Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатМассив = Новый Массив();
	Пока РезультатЗапроса.Следующий() Цикл
		Если Не МножественныйВыбор Тогда
			Возврат РезультатЗапроса.Ссылка;
		Иначе
			РезультатМассив.Добавить(РезультатЗапроса.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Если МножественныйВыбор Тогда
		Возврат РезультатМассив;
	КонецЕсли;
	Если СообщитьЕслиНеНайден Тогда
		ПараметрыТекст = Лев(ПараметрыТекст, СтрДлина(ПараметрыТекст)-2);
		Сообщить("Не найден контрагент с параметрами: "+ПараметрыТекст);		
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция НайтиКонтрагентаИзДокументаСБИС(Ини, оУчастник, ИниДок = Неопределено, МножественныйВыбор = Ложь, СообщитьЕслиНеНайден = Ложь, ТолькоПоИНН = Ложь) Экспорт
	// Функция ищет контрагента в базе 1С по данным участника в универсальном формате
	Если Не ТипЗнч(оУчастник) = Тип("Структура") И Не оУчастник = Неопределено Тогда 
		Возврат оУчастник;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИниДок) и ИниДок.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(ИниДок.ЗапросКонтрагента.Значение,"'","");
	ИначеЕсли Ини.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросКонтрагента.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Контрагенты.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	ТолькоПоИНН = ТолькоПоИНН ИЛИ ГлавноеОкно.Кэш.Парам.СопоставлениеПоКонтрагенту = "Только по ИНН";
	Контрагент = НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН, МножественныйВыбор, СообщитьЕслиНеНайден);
	Если оУчастник.Свойство("GLN") и ЗначениеЗаполнено(оУчастник.GLN) и Контрагент = Ложь и Не СообщитьЕслиНеНайден Тогда
		Сообщить("Не найден контрагент с GLN "+оУчастник.GLN);
	КонецЕсли;
	
	Возврат Контрагент;
КонецФункции

Функция сбисСообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	// Функция возвращает название реквизита для значений из файлов настроек (например, для [Документ].Контрагент)	
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции

Функция СформироватьНазваниеВходящегоДокумента1С(Документ1С) Экспорт
	// Функция формирует название входящего документа 1С (используется при сопоставлении документов)	
	Попытка
		Возврат Документ1С.Метаданные().Синоним + " вх. № "+ Документ1С.НомерВходящегоДокумента+" от " + формат(Документ1С.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг") + " на сумму " + Документ1С.СуммаДокумента + " (№ "+Документ1С.Номер+" от "+ формат(Документ1С.Дата, "ДФ=дд.ММ.гггг")+")";
	Исключение
		Возврат строка(Документ1С)
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьЗаписьВПланВидовХарактеристик(ИмяЗаписи, ИниКонфигурация, НазначениеСвойства = Неопределено) Экспорт
	// Функция добавляет запись в план видов характеристик
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) <> Неопределено Тогда
		Возврат сбисДобавитьЗаписьВПланВидовХарактеристик(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, НазначениеСвойства)
	Иначе
		Сообщить("В конфигурации отсутствует план видов характеристик "+ИмяПланаВидовХарактеристикСвойствОбъектов+". Невозможно создать дополнительное свойство "+ИмяЗаписи+"." );
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция сбисДобавитьЗаписьВПланВидовХарактеристик(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, НазначениеСвойства = Неопределено, Отказ = Ложь) Экспорт
	// Функция добавляет запись в план видов характеристик
	НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи, Истина).Ссылка;
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяЗаписи;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Имя") = Неопределено Тогда
			СвойствоОбъект.Имя = ИмяЗаписи;
		КонецЕсли;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
		Попытка
			СвойствоОбъект.Заголовок = ИмяЗаписи;
		Исключение
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
				СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
			Иначе
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			КонецЕсли;
		Исключение
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		Ошибка = ОписаниеОшибки();   
		Сообщить("Не удалось создать дополнительное свойство "+ИмяЗаписи);  
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИниКонфигурация, ТипЗначения) Экспорт
	// Функция добавляет запись в план видов характеристик		
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) <> Неопределено Тогда
		Возврат сбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, ИниКонфигурация, ТипЗначения);
	Иначе
		Сообщить("В конфигурации отсутствует план видов характеристик "+ИмяПланаВидовХарактеристикСвойствОбъектов+". Невозможно создать дополнительное свойство "+ИмяЗаписи+"." );
		Возврат Ложь;
	КонецЕсли;
КонецФункции 
 
&НаСервереБезКонтекста
Функция сбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, ИниКонфигурация, ТипЗначения, Отказ = Ложь) Экспорт
	// Функция добавляет запись в план видов характеристик		
	НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяЗаписи;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
			СправочникСвойствОбъектов = ИмяСправочникаСвойствОбъектов(ИниКонфигурация);
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + СправочникСвойствОбъектов);
		Иначе
			Попытка
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
			Исключение
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			КонецПопытки;
		КонецЕсли;
		Попытка
			СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		Исключение
		КонецПопытки;
		Попытка
			СвойствоОбъект.Заголовок = ИмяЗаписи;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка
			СвойствоОбъект.Виден = Истина;
			СвойствоОбъект.Доступен = Истина;
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		Исключение 
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка
			НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
			СвойствоОбъект.НаборСвойств = НаборДопСв;
		Исключение 
			Попытка
				НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоРеквизиту("ИмяПредопределенногоНабора", "Справочник_Контрагенты");
				СвойствоОбъект.НаборСвойств = НаборДопСв;
			Исключение 
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Попытка
			НаборДопСвойствКонтр = НаборДопСв.ПолучитьОбъект();
			НовоеСведение = НаборДопСвойствКонтр.ДополнительныеСведения.Добавить();
			НовоеСведение.Свойство = СвойствоОбъект.Ссылка;
			НаборДопСвойствКонтр.Записать();
		Исключение
		КонецПопытки;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "ЭДО";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага, хочет ЭДО";
			ЗначениеСпр.Записать();
		КонецЕсли;
		
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		Ошибка = ОписаниеОшибки(); 
		Сообщить("Не удалось создать дополнительное свойство "+ИмяЗаписи);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)
	// Функция возвращает имя плана видов характеристик, необходимого для хранения статусов и идентификаторов в регистрах сведений	
	Если ИниКонфигурация.Свойство("ИмяПланаВидовХарактеристикСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения")<>Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция ИмяРегистраСвойствОбъектов(ИниКонфигурация) Экспорт
	// возвращает имя регистра, где хранятся статусы и идентификаторы СБИС	
	Если ИниКонфигурация.Свойство("ИмяРегистраСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяРегистраСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция ИмяСправочникаСвойствОбъектов(ИниКонфигурация) Экспорт
	// возвращает имя справочника, где хранятся свойства для статусов контрагентов	
	Если ИниКонфигурация.Свойство("СправочникСвойствОбъектов") Тогда
		СправочникСвойствОбъектов = СтрЗаменить(ИниКонфигурация.СправочникСвойствОбъектов.Значение, "'","");
	Иначе
		СправочникСвойствОбъектов = "ЗначенияСвойствОбъектов";
	КонецЕсли;
	Возврат СправочникСвойствОбъектов;
КонецФункции

Функция НеверныеКодыКонтрагентовНаСервере() Экспорт
	ОшибкиКонтрагентовИННКонтрРазряд = Новый СписокЗначений();
	ошИНН_КонтрРазряд=0;
	
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		КонтрагентИНН=Выборка.ИНН;
		
		// если не правльный контрольный разряд в ИНН и наименование контрагента еще нет списке значений то добавляем его
		Если НЕ сбисИННСоответствуетТребованиямБезТипа(КонтрагентИНН) и ОшибкиКонтрагентовИННКонтрРазряд.НайтиПоЗначению(Выборка.Ссылка)=Неопределено тогда
			ОшибкиКонтрагентовИННКонтрРазряд.Добавить(Выборка.Ссылка,КонтрагентИНН);
			ошИНН_КонтрРазряд=ошИНН_КонтрРазряд+1;
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Макет = сбисПолучитьМакет("МакетОшибки");
	Таб = Новый ТабличныйДокумент;
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Таб.Вывести(ОбластьЗаголовок);
	
	//------ вывод строк с неправильным контрольным разрядом в ИНН
	Если ошИНН_КонтрРазряд>0 Тогда
		ОбластьОписание = Макет.ПолучитьОбласть("ОписаниеОшибки");
		ОбластьОписание.Параметры.ОписаниеОшибки="Неверная контрольная сумма ИНН (кол-во ошибок: "+строка(ошИНН_КонтрРазряд)+"):";
		Таб.Вывести(ОбластьОписание);
		
		Для Каждого Элемент Из ОшибкиКонтрагентовИННКонтрРазряд Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Контрагент = Элемент.Значение;
			ОбластьСтрока.Параметры.ИНН = Элемент.Представление;
			Таб.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтоги.Параметры.КоличествоОшибок = строка(ошИНН_КонтрРазряд);
	Таб.Вывести(ОбластьИтоги);
	
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Возврат Таб;
КонецФункции

Функция сбисИННСоответствуетТребованиямБезТипа(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат сбисИННСоответствуетТребованиям(ИНН, ВладелецИННФизЛицо);
	
КонецФункции

Функция сбисИННСоответствуетТребованиям(Знач ИНН, Знач ТипЛица) Экспорт
	
	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);
	
	Если НЕ сбисТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма = 0;
		
		Для Н = 1 По 9 Цикл
			
			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Функция сбисТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьКэшСБИСини(Кэш) Экспорт
	// Функция формирует структуру, содержащую соответствия типов документов СБИС и 1С. Используется при сопоставлении документов.	
	КэшСБИС = Неопределено;
	Если Не Кэш.Свойство("СБИС", КэшСБИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	КэшСБИС.Ини = Новый Структура;
	Для Каждого Ини Из Кэш.Ини Цикл
		СписокТипов = РассчитатьЗначение("РеестрСБИС_Тип",Ини.Значение,Кэш);
		Если СписокТипов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокТипов = СтрЗаменить(СписокТипов, ",", Символы.ПС);
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокТипов) Цикл 
			ТипДок = СокрЛП(СтрПолучитьСтроку(СписокТипов, НомерСтроки));
			ТипДокИни = Неопределено;
			Если Не КэшСБИС.Ини.Свойство(ТипДок, ТипДокИни) Тогда
				ТипДокИни = Новый Массив;
				КэшСБИС.Ини.Вставить(ТипДок,ТипДокИни);
			КонецЕсли;
			ДокументЗначение = Неопределено;
			Если Не Ини.Значение.Свойство("Документ", ДокументЗначение) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ИмяДокумента1С = Кэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(ДокументЗначение.Значение);
				СсылкаПустая = СформироватьПустуюСсылкуДокумента(ИмяДокумента1С);
				ТипДокИни.Добавить(Новый Структура("Тип,ПустаяСсылка,ини",ИмяДокумента1С,СсылкаПустая,Ини.Ключ));
			Исключение;
			КонецПопытки;
		КонецЦикла
	КонецЦикла;
	Возврат Истина;	
КонецФункции

Функция СформироватьПустуюСсылкуДокумента(ТипДок)
	// Функция формирует пустую ссылку на документ	
	Возврат Документы[ТипДок].ПустаяСсылка();
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции
	
&НаКлиенте
Функция РассчитатьЗначениеИзСтруктуры(Путь, СтруктураФайла) Экспорт
	// Функция получает значение из структуры по указанному пути	
	ПутьКДаннымФайла = РазбитьСтрокуВМассивНаКлиенте(Путь, ".");
	ЗначениеРеквизита = Новый Структура;	
	//сбисСкопироватьСтруктуру(ЗначениеРеквизита, СтруктураФайла);
	ЗначениеРеквизита = СтруктураФайла;
	
	Для Каждого Узел Из ПутьКДаннымФайла Цикл
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") и ЗначениеРеквизита.Свойство(Узел) Тогда
			ЗначениеРеквизита = ЗначениеРеквизита[Узел];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗначениеРеквизита;
КонецФункции

&НаСервереБезКонтекста
Процедура сбисУдалитьРассчитанныеЗначения(СтруктураРаздела)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Если ТипЗнч(СтруктураРаздела) = ТипСтруктура Тогда
		Для Каждого Элемент Из СтруктураРаздела Цикл	
			
			
			Если ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
				Если Элемент.Значение.Свойство("Значение") Тогда
					СтруктураРаздела[Элемент.Ключ].Удалить("РассчитанноеЗначение");
				Иначе
					сбисУдалитьРассчитанныеЗначения(СтруктураРаздела[Элемент.Ключ]);				
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СписокДопустимыхТипов()
	// Функция возвращает список типов переменных, которые можно вернуть с сервера на клиент (нужна для управляемых приложений)	
	СписокДопустимыхТипов = Новый СписокЗначений;
	СписокДопустимыхТипов.Добавить(Тип("Число"));
	СписокДопустимыхТипов.Добавить(Тип("Булево"));
	СписокДопустимыхТипов.Добавить(Тип("Строка"));
	СписокДопустимыхТипов.Добавить(Тип("Дата"));
	СписокДопустимыхТипов.Добавить(Тип("Массив"));
	СписокДопустимыхТипов.Добавить(Тип("Структура"));
	СписокДопустимыхТипов.Добавить(Тип("Неопределено"));
	СписокДопустимыхТипов.Добавить(Тип("УникальныйИдентификатор")); // alo
	Для Каждого Перечисление Из Метаданные.Перечисления Цикл
		СписокДопустимыхТипов.Добавить(Тип("ПеречислениеСсылка."+Перечисление.Имя));
	КонецЦикла;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		СписокДопустимыхТипов.Добавить(Тип("СправочникСсылка."+Справочник.Имя));
	КонецЦикла;
	Для Каждого Документ Из Метаданные.Документы Цикл
		СписокДопустимыхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
	КонецЦикла;
	Возврат СписокДопустимыхТипов;
КонецФункции

&НаКлиенте
Функция РассчитатьЗначение(Параметр, Контекст, ВходящийКэш="") Экспорт //Контекст{ини,Документ,СтрТабл}
	// Функция рассчитывает значение параметра из файла настроек на клиенте.
	// Используется непосредственно при формировании структуры файла, после того, как все данные с сервера получены.
	Если ВходящийКэш <> "" Тогда
		Кэш = ВходящийКэш;
		МестныйКэш = ВходящийКэш;
	КонецЕсли;	
	Если Контекст=Ложь Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
	Иначе
		Попытка
			ЗнПер=Контекст[Параметр];
			Если ТипЗнч(ЗнПер) = Тип("Структура") и ЗнПер.Свойство("Значение") Тогда
				ЗнПер = ЗнПер.Значение;
			КонецЕсли;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	КэшироватьФункцию = Ложь;
	Если Лев(ЗнПер, 1)="!" и Найти(ЗнПер,"{")>1 и Прав(ЗнПер, 1)="}" Тогда // кешируемая функция
		КэшироватьФункцию = сред(ЗнПер,2,Найти(ЗнПер,"{")-2);
		ЗнПер = сред(ЗнПер,Найти(ЗнПер,"{"));
		Если КэшироватьФункцию = "Организация" Тогда 
			ИНН = СокрЛП(РассчитатьЗначение("Сторона_ИНН", Контекст, ВходящийКэш));
			КПП = СокрЛП(РассчитатьЗначение("Сторона_КПП", Контекст, ВходящийКэш));
			Если Кэш.КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Параметр];
			КонецЕсли;
		Иначе	
			Если Кэш.КэшЗначенийИни.ТекущийПакет.Свойство(КэшироватьФункцию+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.ТекущийПакет[КэшироватьФункцию+"_"+Параметр];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Попытка
			ГлавноеОкно = Неопределено;
			Если ВходящийКэш <> "" Тогда
				ГлавноеОкно = Кэш.ГлавноеОкно;
			ИначеЕсли МестныйКэш = Неопределено
				Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
				ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
			КонецЕсли;
			фрм = ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","", Кэш);
			Результат=вычислить("фрм."+ИмяФункции+"(Контекст)");
			Если КэшироватьФункцию<>Ложь Тогда
				Если КэшироватьФункцию = "Организация" Тогда
					Кэш.КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Параметр, Результат);
				Иначе
					Кэш.КэшЗначенийИни.ТекущийПакет.Вставить(КэшироватьФункцию+"_"+Параметр, Результат);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Если Найти(ЗнПер, "()}")>0 Тогда
				Ошибка = ОписаниеОшибки();
				сообщить(Ошибка);
			Иначе  // если фигурная скобка присутствует в каком-то значении в базе 1С, например, в названии договора
				возврат ЗнПер;
			КонецЕсли;
		КонецПопытки;	
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на структуру, полученную в результате выполнения функции
		Если Найти(ЗнПер, "].")>0 Тогда
			СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
			Объект1С=РассчитатьЗначение(СтрОбъекта,Контекст,ВходящийКэш);
			Если Найти(ЗнПер,".")>0 Тогда
				ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
			Иначе
				ИмяРек = "";
			КонецЕсли;
			
			Попытка
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Возврат Объект1С;
			Исключение
			КонецПопытки;
		Иначе   // если квадратная скобка присутствует в каком-то значении в базе 1С, например, в названии договора
			возврат ЗнПер;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		ЗнПер = СокрЛП(ЗнПер);
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	Иначе
		возврат ЗнПер;
	КонецЕсли	
КонецФункции

&НаСервереБезКонтекста
Функция сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст)
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		ПозСкобки = Найти(ВычисляемаяСтрока, "(");
		ИмяФормулы = нрег(СокрЛП(Лев(ВычисляемаяСтрока, ПозСкобки-1)));
		СтрокаПараметров = Сред(ВычисляемаяСтрока,ПозСкобки+1, СтрДлина(ВычисляемаяСтрока)-ПозСкобки-1);
		МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
		Если ИмяФормулы = ">" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "<" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "!=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "+" Тогда
			Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "-" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат 0;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Попытка
				Уменьшаемое = Число(МассивПараметров[0]);
			Исключение
				Уменьшаемое = 0;
			КонецПопытки;
			Попытка
				Вычитаемое = Число(МассивПараметров[1]);
			Исключение
				Вычитаемое = 0;
			КонецПопытки;
			Результат = Уменьшаемое - Вычитаемое;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "/" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат 0;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Попытка
				Результат = ?(Число(МассивПараметров[1]) = 0, Число(МассивПараметров[0]), Число(МассивПараметров[0]) / Число(МассивПараметров[1]));
			Исключение
				Результат = 0;
			КонецПопытки;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "*" Тогда
			Результат = 1;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				Результат = Результат * Число(Элемент);
			КонецЦикла;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "сред" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "найти" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли ИмяФормулы = "или" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
		ИначеЕсли ИмяФормулы = "и" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Ложь или МассивПараметров[сч] = Неопределено Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		ИначеЕсли ИмяФормулы = "окрбольше" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[0] = РассчитатьЗначениеНаСервере(МассивПараметров[0], Контекст);
			Если Цел(МассивПараметров[0]) = МассивПараметров[0] Тогда
				Возврат МассивПараметров[0];
			Иначе
				Возврат Цел(МассивПараметров[0])+1;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "окр" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<2 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров.Количество() = 2 Тогда
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]));
			Иначе
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]), РежимОкругления.Окр15как10);
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "типзнч" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			Парам = РассчитатьЗначениеНаСервере(МассивПараметров[0], Контекст);
			Попытка
				Рез = Парам.Метаданные().ПолноеИмя();
				ПозТочки = Найти(Рез, ".");
				ТипОбъекта = Лев(Рез, ПозТочки-1);
				Если ТипОбъекта = "Справочник" или ТипОбъекта = "Catalog" Тогда
					ТипОбъекта = "СправочникСсылка";
				ИначеЕсли ТипОбъекта = "Документ" или ТипОбъекта = "Document" Тогда
					ТипОбъекта = "ДокументСсылка";
				КонецЕсли;
				Возврат ТипОбъекта+Сред(Рез, ПозТочки);
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПараметрВИерархическойСтруктуре(Параметр,Контекст)
	ТекущийРаздел = Контекст.ТекущийРазделИни;
	Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
		Возврат ТекущийРаздел[Параметр];	
	КонецЕсли;
	Результат = Неопределено;
	ТекущийРаздел = Контекст.Ини;
	Для Каждого ЭлементПуть Из Контекст.Путь Цикл
		Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
			Результат = ТекущийРаздел[Параметр];	
		КонецЕсли;
		ТекущийРаздел = ТекущийРаздел[ЭлементПуть];
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПараметрыВСтроке(знач Условие)
	МассивПараметров = Новый Массив;
	Пока Найти(Условие,")")>0 Цикл 
		Подстрока = Лев(Условие, Найти(Условие,")")-1);
		Если Найти(Подстрока, "(")>0 Тогда
			Пока Найти(Подстрока, "(")>0 Цикл
				Подстрока = Сред(Подстрока, Найти(Подстрока,"(")+1);
			КонецЦикла;
			Если Подстрока <> "" Тогда
				МассивПараметровПодстроки = РазбитьСтрокуВМассив(Подстрока, ",");
				Для Каждого Элемент Из МассивПараметровПодстроки Цикл
					МассивПараметров.Добавить(Подстрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Условие = Сред(Условие,Найти(Условие,")")+1);
	КонецЦикла;	
	Возврат МассивПараметров;
КонецФункции

// alo <<
&НаКлиенте
Функция ЗаполнениеАдресовПоКЛАДР(Контекст) экспорт
	// открывает форму заполнения адресов контрагентов по КЛАДР	
	ФормаАдреса = сбисПолучитьФорму("ФормаАдресаПоКЛАДР");
	ФормаАдреса.Показать(Новый Структура("КэшСовместимостьМетодов, КэшПарам, АдресСервера, РезервныйДомен", МестныйКэш.СовместимостьМетодов, МестныйКэш.Парам, МестныйКэш.СБИС.АдресСервера, МестныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен));
КонецФункции

&НаКлиенте
Функция НеверныеКодыКонтрагентов(Контекст) экспорт
	// Показывает отчет по неверным ИНН контрагентов	
	Таб = Контекст.Кэш.ОбщиеФункции.НеверныеКодыКонтрагентовНаСервере();
	Таб.Показать("Ошибки по контрагентам");
КонецФункции

&НаКлиенте
Функция МассоваяРассылка(Контекст) экспорт
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	фрм = Контекст.Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьФорму","МассоваяРассылка","",Контекст.Кэш);	
	фрм.ПоказатьФорму(Контекст.Кэш);
КонецФункции

// >> alo
&НаКлиенте
Функция сбисЗаполнитьДанныеАдминистратора(Контекст) экспорт
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	фрм = сбисПолучитьФорму("ФормаДанныеАдминистратора");	
	фрм.Показать(Контекст.Кэш);
КонецФункции

&НаКлиенте
Функция сбисПереносНоменклатурыПоставщиковВНоменклатуруКонтрагентов(Контекст) экспорт
	сбисПереносНоменклатурыПоставщиковВНоменклатуруКонтрагентовНаСервере();
КонецФункции
	
&НаСервереБезКонтекста
Функция сбисПереносНоменклатурыПоставщиковВНоменклатуруКонтрагентовНаСервере() экспорт
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ Наименование, Владелец, Номенклатура, Артикул, Идентификатор ИЗ Справочник.НоменклатураПоставщиков ГДЕ НЕ ЭтоГруппа и НЕ ПометкаУдаления И НЕ (Владелец, Номенклатура, Идентификатор) В(ВЫБРАТЬ ВладелецНоменклатуры, Номенклатура, Идентификатор ИЗ Справочник.НоменклатураКонтрагентов)");
		ЕстьХарактеристики = Ложь;
		Если Метаданные.Справочники.НоменклатураПоставщиков.Реквизиты.Найти("Характеристика")<>Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура, ", "Номенклатура, Характеристика, "); 
			ЕстьХарактеристики = Истина;
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ОбъектСпр = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ОбъектСпр, Выборка,"Наименование, Номенклатура, Артикул, Идентификатор" +?(ЕстьХарактеристики,", Характеристика",""));
				ОбъектСпр.ВладелецНоменклатуры = Выборка.Владелец;
				ОбъектСпр.НаименованиеНоменклатуры = Выборка.Наименование;
				ОбъектСпр.Записать(); 
			Исключение
			КонецПопытки;
		КонецЦикла;
		Если Выборка.Количество()>0 Тогда
			Сообщить("Выполнен перенос данных из справочника ""Номенклатура поставщиков"" в справочник ""Номенклатура контрагентов""");
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить("Не удалось выполнить перенос данных из справочника ""Номенклатура поставщиков"" в справочник ""Номенклатура контрагентов"" ("+Ошибка+")")
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисНастройкаEDI(Контекст) экспорт
	
	фрм = Контекст.Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьФорму","ФормаНастройкаEDI","",Контекст.Кэш);	
	фрм.ПоказатьФорму(Контекст.Кэш);
	
КонецФункции

// << alo EDI_ДозаписьЮЗДО
&НаКлиенте
Функция ДозаписьПослеВыбораИни(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) тогда
		Возврат Неопределено
	КонецЕсли;
	
	Ини = МестныйКэш.Ини[Результат];
	МестныйКэш.Текущий.ТипДок = Результат;
	
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить( "ФильтрДокумент", Параметры.Документ); 		
	ПараметрыФильтра.Вставить( "ФильтрДатаНач", дата(1,1,1)); 
	ПараметрыФильтра.Вставить( "ФильтрДатаКнц", дата(1,1,1)); 
	ПараметрыФильтра.Вставить("ЗначениеДатаКонЗаполнено", Ложь );
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");	
	ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ПолучитьПустуюСсылку("Пользователи"));
	ПараметрыФильтра.Вставить( "ФильтрМаска", "");
	ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
	ПараметрыФильтра.Вставить( "Страница", 1 );
	ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	
	Если МестныйКэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из МестныйКэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	//Получим массив выгружаемых документов по запросу
	ТекстЗапроса = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", Ини, МестныйКэш);
	Если ТекстЗапроса <> Неопределено Тогда
		СоставПакета = Параметры.ФормаПросмотра.СоставПакета;
		МассивДокументов1С = МестныйКэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, МестныйКэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек);
	Иначе       
		СписокСоставПакета = Новый СписокЗначений;
		СписокСоставПакета.Добавить(Параметры.Документ,Результат);
		CписокДокументы1С = Новый СписокЗначений;
		CписокДокументы1С.Добавить(Параметры.Документ,Результат);
		СтруктураДляМассива = Новый Структура;       
		СтруктураДляМассива.Вставить("СоставПакета",СписокСоставПакета);
		СтруктураДляМассива.Вставить("ФайлНастроекДокумента",Результат);
		МассивДокументов1С = новый Массив;
		МассивДокументов1С.Добавить(СтруктураДляМассива);
		СоставПакета = Параметры.ФормаПросмотра.СоставПакета;  
		ОбработатьМассивДокументов1С(МассивДокументов1С,СоставПакета,Параметры)
	КонецЕсли;
		
	Параметры.ФормаПросмотра.ЗаполнитьТаблицуДокументов(СоставПакета);          
	
КонецФункции                                                                                

// Функция - Обработать массив документов 1С
//
// Параметры:
//  МассивДокументов1С	 - 	 - 
//  СоставПакета		 - 	 - 
//
&НаКлиенте
функция ОбработатьМассивДокументов1С(МассивДокументов1С,СоставПакета,Параметры)

	Для каждого СтрокаСпискаДокументов из МассивДокументов1С цикл
		МассивПакетов = ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, МестныйКэш);	
		Для каждого Пакет из МассивПакетов Цикл
			Для каждого Вложение из Пакет.Вложение Цикл
				ДобавитьВложение=Истина;
				Для каждого СуществующееВложение из СоставПакета.Вложение Цикл
					Если СуществующееВложение.Тип= Вложение.Тип Тогда
						Если СуществующееВложение.Свойство("Номер") = Вложение.Свойство("Номер") И СуществующееВложение.Номер= Вложение.Номер тогда
							Если СуществующееВложение.Свойство("Дата") = Вложение.Свойство("Дата") И СуществующееВложение.Дата= Вложение.Дата тогда
								ДобавитьВложение=Ложь;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					Конецесли;
				Конеццикла;
				Если ДобавитьВложение Тогда
					Если Вложение.Свойство("XMLДокумента") И ЗначениеЗаполнено(Вложение.XMLДокумента) Тогда
						ТекстHTML = МестныйКэш.Интеграция.ПолучитьHTMLПоXML(МестныйКэш, Вложение);
						Вложение.Вставить("ТекстHTML",ТекстHTML);
					КонецЕсли;
					СоставПакета.Вложение.Добавить(Вложение);
					МестныйКэш.Интеграция.СБИСЗаписатьВложения(МестныйКэш,СоставПакета, Вложение);
				Конецесли;
			Конеццикла;
		КонецЦикла;
	КонецЦикла; 
			
КонецФункции

&НаСервере
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
КонецФункции

// alo EDI_ДозаписьЮЗДО >>

Функция ЗаполнитьEDIТЧ(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") и ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
		Свойства = Новый Массив;
		Для Каждого Элемент Из Контекст.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
			Если Не Элемент.Свойство("Номенклатура") Тогда
				Возврат Ложь;
			КонецЕсли;
			Если	Элемент.Свойство("GTIN")
				И	ЗначениеЗаполнено(Элемент.GTIN) Тогда
				Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "GTIN", Элемент.GTIN));
			КонецЕсли;	
			Если Контекст.СтруктураФайла.Файл.Документ.Свойство("ПодТип") Тогда
				Если(ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.ПодТип) и Контекст.СтруктураФайла.Файл.Документ.ПодТип = "Fresh") Тогда
					Если Элемент.Свойство("Параметр") Тогда
						Если Элемент.Параметр.Свойство("Калибр") Тогда
							Если (ЗначениеЗаполнено(Элемент.Параметр.Калибр)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "Калибр", Элемент.Параметр.Калибр));	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если Элемент.Свойство("Упаковка") Тогда
						Если Элемент.Упаковка.Свойство("Название") Тогда
							Если (ЗначениеЗаполнено(Элемент.Упаковка.Название)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "УпаковкаНазвание", Элемент.Упаковка.Название));	
							КонецЕсли;	
						КонецЕсли;
						Если Элемент.Упаковка.Свойство("КолМест") Тогда
							Если (ЗначениеЗаполнено(Элемент.Упаковка.КолМест)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "КолМест", Элемент.Упаковка.КолМест));	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		сбисЗаполнитьДопСвойстваОбъектов(Свойства, ?(Контекст.Свойство("ИниКонфигурация"), Контекст.ИниКонфигурация, Новый Структура));
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ИмяФайлаНастроекРасхожденияЗаказаПокупателя(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") Тогда
		Если ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
			Возврат "EDI_ЗаказПокупателя";
		КонецЕсли;
	КонецЕсли;
	Возврат "ЗаказПокупателя";
КонецФункции

&НаКлиенте
Функция ИмяФайлаНастроекРасхожденияЗаказаКлиента(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") Тогда
		Если ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
			Возврат "EDI_ЗаказКлиента";
		КонецЕсли;
	КонецЕсли;
	Возврат "ЗаказКлиента";
КонецФункции

#Область include_core_vo2_ОбщиеФункции_ЗагрузкаДокументов_УТ11
#КонецОбласти

