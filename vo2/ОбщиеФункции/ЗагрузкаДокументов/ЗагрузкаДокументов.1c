
////////////////////////////////////////////////////
////////////////Загрузка документов/////////////////
////////////////////////////////////////////////////

//Вынесено в отдельную функцию, общую для просмотра и массовой загрузки.
&НаКлиенте
Функция ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(Кэш, СоставПакета, Вложение, ДополнительныеПараметры=Неопределено) Экспорт     	
	
	Результат = Новый Структура("МожемЗагрузитьВ1С,Статус,СтатусКартинка", 0,"",0);
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	//Определяем первоначальные данные вложения
	СтруктураИниФайла = Неопределено;
	СтруктураФайла = Неопределено;
	Если	Не Вложение.Свойство("Направление")
		Или	Не Вложение.Свойство("СтруктураИниФайла",СтруктураИниФайла)
		Или Не Вложение.Свойство("СтруктураФайла",СтруктураФайла) Тогда
		Результат.Статус = "Загрузка документа не поддерживается.";
		Возврат Результат;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИниФайла) Тогда
		Результат.Статус = "В настройках не указан тип документа 1С, которому соответствует данный файл.";
		Возврат Результат;
	КонецЕсли;
	ФормаВызова = Неопределено;
	Если 		ДополнительныеПараметры = Неопределено
		Или	Не	ДополнительныеПараметры.Свойство("ФормаВызова", ФормаВызова) Тогда
		ФормаВызова = "ФормаПросмотрДокумента";
	КонецЕсли;
	
	Результат.МожемЗагрузитьВ1С = Истина;
	ЕстьВходящиеВложения = Истина;
	
	ПараметрыНоменклатуры = Новый Структура("НадоСопоставлять, ЕстьХарактеристики, Сопоставлено",Ложь,Ложь);
	Если Не СоставПакета.Свойство("НоменклатураСопоставлена",ПараметрыНоменклатуры.Сопоставлено) Тогда 
		ПараметрыНоменклатуры.Сопоставлено = Истина;
	КонецЕсли;
		
	КонтрагентРоль = РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла, Кэш);
	ОрганизацияРоль = РассчитатьЗначение("Организация_Роль", СтруктураИниФайла, Кэш);
	КонтрагентДляСопоставленияНоменклатуры_Роль = РассчитатьЗначение("КонтрагентДляСопоставленияНоменклатуры_Роль", СтруктураИниФайла, Кэш);
	
	Если Вложение.Свойство("Документы1С") И Вложение.Документы1С.Количество() > 0 Тогда
		Результат.СтатусКартинка = 3;
	КонецЕсли;
	Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
		ПутьКонтрагента = "Файл.Документ."+Вложение.Получатель;
	КонецЕсли;
	
	//НГС
	Если Не КонтрагентРоль = Неопределено Тогда
		Попытка
			ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
			СтрКонтрагента = РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Исключение
			ПутьКонтрагента = "Файл.Документ."+КонтрагентРоль;
			СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
		КонецПопытки;
	КонецЕсли;
	//КНГС
	
	ДанныеСторон = Неопределено;
		                                         
	ОрганизацияВложения = Неопределено;
	КонтрагентВложения = Неопределено;
	
	Если	МодульОбъектаКлиент().ПолучитьЗначениеФичи(Новый Структура("НазваниеФичи", "НовыеКонтрагенты"))
		И	Кэш.ТекущийСеанс.Параметры.ИспользоватьВходящийКонтекст Тогда
		
		Если НЕ Вложение.Свойство("ВходящийКонтекст") Тогда	
			Вложение.Вставить("ВходящийКонтекст", Новый Структура("РассчитанноеЗначение", Новый Структура));
		КонецЕсли;
		
		ДанныеСторон = МодульОбъектаКлиент().ПолучитьДанныеСторонИзПакета(СоставПакета);
		МодульОбъектаКлиент().ДополнитьДанныеСторонСопоставлением(ДанныеСторон);
		Вложение.ВходящийКонтекст.Вставить("ДанныеСторон", ДанныеСторон);    
		ДанныеСторонДляДокумента1С = Новый Структура;
		МодульОбъектаКлиент().ПодготовитьСтороныКЗагррузкеДокумента(Новый Структура("ДанныеСторонСБИС, ДанныеСторон1С", ДанныеСторон, ДанныеСторонДляДокумента1С),
											  Новый Структура("ЕстьПартнеры", Кэш.ини.Конфигурация.Свойство("Партнеры")));
		
		Если НЕ Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Организация") 
			ИЛИ (Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Организация")
				И Не ЗначениеЗаполнено(Вложение.ВходящийКонтекст.РассчитанноеЗначение.Организация)) Тогда			
			
			Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Организация", ДанныеСторон.ДанныеОрганизации.Ссылка);
		КонецЕсли;    
		
		Если НЕ Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Контрагент") 
			ИЛИ (Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Контрагент")
				И Не ЗначениеЗаполнено(Вложение.ВходящийКонтекст.РассчитанноеЗначение.Контрагент)) Тогда			
			
			Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Контрагент", ДанныеСторонДляДокумента1С.ДанныеКонтрагента);
		КонецЕсли; 
		
		Если НЕ Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Грузополучатель") 
			ИЛИ (Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Грузополучатель") 
				И Не ЗначениеЗаполнено(Вложение.ВходящийКонтекст.РассчитанноеЗначение.Грузополучатель)) Тогда
			
			Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Грузополучатель", ДанныеСторонДляДокумента1С.ДанныеГрузополучателя);
		КонецЕсли; 
		
		Если НЕ Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Партнер") 
			ИЛИ (Вложение.ВходящийКонтекст.РассчитанноеЗначение.Свойство("Партнер") 
				И Не ЗначениеЗаполнено(Вложение.ВходящийКонтекст.РассчитанноеЗначение.Партнер)) Тогда
			
			Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Партнер", ДанныеСторонДляДокумента1С.ДанныеПартнера);
		КонецЕсли; 
		
		Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Склад", Кэш.Парам.СкладПоУмолчанию);
		
		Если Кэш.Парам.Свойство("РасСчет") Тогда
			Вложение.ВходящийКонтекст.РассчитанноеЗначение.Вставить("РасСчет", Кэш.Парам.РасСчетПоУмолчанию);
		КонецЕсли;
		
		ОрганизацияВложения = Вложение.ВходящийКонтекст.РассчитанноеЗначение.Организация;
		КонтрагентВложения = Вложение.ВходящийКонтекст.РассчитанноеЗначение.Контрагент;
	КонецЕсли;
	
	Если ДанныеСторон = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ОрганизацияВложения) Тогда
		
		Попытка
			ПутьОрганизации = Вложение.СтруктураИниФайла.мСторона[ОрганизацияРоль].Сторона.Данные;
			СтрОрганизации = РассчитатьЗначениеИзСтруктуры(ПутьОрганизации, СтруктураФайла);
			Если СтрОрганизации = Неопределено Тогда
				ВызватьИсключение("");
			КонецЕсли;
		Исключение
			Если НЕ СтруктураФайла.Файл.Документ.Свойство(ОрганизацияРоль) Тогда
				СтруктураФайла.Файл.Документ.Вставить(ОрганизацияРоль, СоставПакета.НашаОрганизация);
			КонецЕсли;
			СтрОрганизации = СтруктураФайла.Файл.Документ[ОрганизацияРоль];
			ПутьОрганизации = "Файл.Документ."+ОрганизацияРоль;
		КонецПопытки;
		
		ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрОрганизации), Ложь);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрКонтрагента) и Кэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") 
		И Кэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") 
		И НРег(Кэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
		
		СтрКонтрагента.Вставить("Ограничения", Новый Структура("Организация",ОрганизацияВложения));
	КонецЕсли; 
	
	// при загрузке исходящих сопоставляем номенклатуру с номенклатурой нашей организации в случае, если в файле настроек не указано другое (например для созданных вручную поступлений надо сопоставлять с контрагентом)
	Если (Вложение.Направление = "Исходящий" И КонтрагентДляСопоставленияНоменклатуры_Роль = Неопределено) Или КонтрагентДляСопоставленияНоменклатуры_Роль = ОрганизацияРоль Тогда  
		КонтрагентДляСопоставления = СтрОрганизации;
		ПутьКонтрагента = ПутьОрганизации;//AU для исходящего документа для сопоставления должна быть организация
	Иначе
		КонтрагентДляСопоставления = СтрКонтрагента;
	КонецЕсли;
	
	ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
	Если СтруктураИниФайла.Свойство("мТаблДок") Тогда
		//Определим параметры номенклатуры ини в мТаблДок
		Для Каждого мТаблДокКлючИЗначение Из СтруктураИниФайла.мТаблДок Цикл
			ТабЧасть = мТаблДокКлючИЗначение.Значение;
			Если ТабЧасть.Свойство("Номенклатура") Тогда
				ПараметрыНоменклатуры.НадоСопоставлять = Истина;
			КонецЕсли;
			Если ТабЧасть.Свойство("Характеристика") Тогда
				ПараметрыНоменклатуры.ЕстьХарактеристики = Истина;
			КонецЕсли;
			Если	ТабЧасть.Свойство("ТаблДок")
				И	ТабЧасть.ТаблДок.Свойство("Данные") Тогда
				ПутьТаблДок = ТабЧасть.ТаблДок.Данные;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтруктураИниФайла.Свойство("мОснование") Тогда
		ПараметрыНоменклатуры.НадоСопоставлять = Истина;// если не окажется в пакете документа основания, надо будет сопоставлять
		Для Каждого Основание Из СтруктураИниФайла.мОснование Цикл
			Если Не (	Основание.Значение.Свойство("Основание_Документ")
				И	Основание.Значение.Основание_Документ.Свойство("Тип")) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ТипыОснований = Новый ОписаниеТипов(Основание.Значение.Основание_Документ.Тип);
				// Ищем в пакете Документ, который будет основанием СФ
				Для Каждого ВложениеОснование Из СоставПакета.Вложение Цикл
					ИниФайл_Документ = Неопределено;
					Если	Не ВложениеОснование.Свойство("СтруктураИниФайла", ИниФайл_Документ)
						Или	Не ИниФайл_Документ.Свойство("Документ", ИниФайл_Документ) Тогда
						Продолжить;
					КонецЕсли;
					ДокументСсылка = СтрЗаменить(ИниФайл_Документ.Значение,"Документ.","ДокументСсылка.");
					Если ТипыОснований.СодержитТип(Тип(ДокументСсылка)) Тогда	
						//такой тип будет загружен из пакета, И будет использовано его сопоставление
						ПараметрыНоменклатуры.НадоСопоставлять = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Если нет подходящих оснований в пакете, проверим основания, которые можно загрузить по текущей инишке. 
				// Если ни в одном основании сопоставление не требуется, то и для текущего документа не требуется.
				Если ПараметрыНоменклатуры.НадоСопоставлять Тогда
					счОснССопост = 0;
					Для Каждого РазделДок Из Кэш.ФормаНастроек.Ини(Кэш, Вложение.ИмяИни).мДокумент Цикл   // Ищем в инишке мДокумент с типом, который может быть основанием текущего документа
						РазделДокСтруктураИни = РазделДок.Значение;
						ТипМДок = Сред(РазделДокСтруктураИни.Документ.Значение, Найти(РазделДокСтруктураИни.Документ.Значение, ".")+1);
						Если	Не ТипыОснований.СодержитТип(Тип("ДокументСсылка."+ТипМДок))
							Или	Не РазделДокСтруктураИни.Свойство("мТаблДок") Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого Элемент Из РазделДокСтруктураИни.мТаблДок Цикл
							Если Элемент.Значение.Свойство("Номенклатура") Тогда
								счОснССопост = счОснССопост + 1;    // Если хотя бы для одного основания требуется сопоставление, то считаем, что требуется сопоставление
								// << alo загрузка 3.03
								Если Элемент.Значение.Свойство("ТаблДок") И Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
									ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
								конецесли;
								// alo загрузка 3.03 >>
							КонецЕсли;
							Если Элемент.Значение.Свойство("Характеристика") Тогда
								ПараметрыНоменклатуры.ЕстьХарактеристики = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Если счОснССопост = 0 Тогда   // Если ни для одного основания не требуется сопоставление, то и для текущего документа не требуется
						ПараметрыНоменклатуры.НадоСопоставлять = Ложь;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Результат.Вставить("ТекстОшибки", ОписаниеОшибки());
				Результат.Статус = "Ошибка при получении данных.";
				Результат.МожемЗагрузитьВ1С = Ложь;
				Возврат Результат;
			КонецПопытки;
		КонецЦикла;
		// >> alo
	КонецЕсли;
	Если ПараметрыНоменклатуры.НадоСопоставлять и ЗначениеЗаполнено(КонтрагентДляСопоставления) Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
		Попытка
			фрм.МестныйКэш	= Кэш;
		Исключение
			//Это старая пользовательская функция. По-хорошему, надо добавить туда переменную МестныйКэш
		КонецПопытки;
		НашаНоменклатура = РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, Кэш);
		ТаблДок = РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		Если ЗначениеЗаполнено(ТаблДок) Тогда
			Попытка   //d.ch 29.06.15
				стрТаблДок = фрм.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(КонтрагентДляСопоставления, ТаблДок, Кэш.Парам.КаталогНастроек, Кэш.Ини);
			Исключение
				ИнфоОбОшибке	= ИнформацияОбОшибке();
				СбисИсключение	= МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию");
				Если ЗначениеЗаполнено(СбисИсключение.help) Тогда
					МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
				КонецЕсли;
				Результат.Вставить("ТекстОшибки", МодульОбъектаКлиент().СбисИсключение_Представление(СбисИсключение)); 
				стрТаблДок = Новый Структура;
			КонецПопытки;
			
			счСтр			= -1;
			ВсёСопоставлено	= Истина;
			Для Каждого СтрТабл Из ТаблДок Цикл
				счСтр				= счСтр + 1;
				ДанныеНоменклатуры	= Неопределено;
				
				Если ТаблДок[счСтр].Свойство("НеЗагружать") Тогда
					Продолжить;
				КонецЕсли;
				
				Если стрТаблДок.Количество()>0 Тогда //d.ch 29.06.15
					ДанныеНоменклатуры = стрТаблДок["СтрТабл_"+Формат(счСтр, "ЧН=0; ЧГ=0")].НоменклатураПоставщика;
				Иначе
					Попытка
						ДанныеНоменклатуры = фрм.НайтиНоменклатуруПоставщика(КонтрагентДляСопоставления, СтрТабл, Кэш.Парам.КаталогНастроек, Кэш.Ини);
					Исключение
						СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию");
						
						Если Найти(СбисИсключение.details, "Проблема с драйвером ODBC")>0 Тогда
							Прервать; 
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) И ЗначениеЗаполнено(НашаНоменклатура) Тогда//UAA убрано условие на наличие свойства НашаНоменклатура по ошибке 1177970522.
					ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(Вложение.СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", Вложение.СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),Кэш);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
					Если Не ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда
						ВсёСопоставлено = Ложь;
					КонецЕсли;
					ТаблДок[счСтр].Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
					Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
						ТаблДок[счСтр].Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
					КонецЕсли;
					Если    ДанныеНоменклатуры.Свойство("ЕдИзмОрг")
						И	ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдИзмОрг) Тогда
						ТаблДок[счСтр].Вставить("ЕдИзмОрг", ДанныеНоменклатуры.ЕдИзмОрг);
					КонецЕсли;
					Если	ДанныеНоменклатуры.Свойство("Коэффициент")
						И	ЗначениеЗаполнено(ДанныеНоменклатуры.Коэффициент) Тогда
						ТаблДок[счСтр].Вставить("Коэффициент", ДанныеНоменклатуры.Коэффициент);
					КонецЕсли;
				Иначе
					ВсёСопоставлено = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВсёСопоставлено Тогда
				Результат.Статус = "Не вся номенклатура сопоставлена.";
				Результат.СтатусКартинка = 1;
				ПараметрыНоменклатуры.Сопоставлено = Ложь;
			КонецЕсли;
				
		КонецЕсли;
		Результат.Вставить("ТаблДок", ТаблДок);
	Иначе
		Результат.Статус = "Сопоставление не требуется. ";
	КонецЕсли;
	
	Если ДанныеСторон = Неопределено ИЛИ НЕ ЗначениеЗаполнено(КонтрагентВложения) Тогда
		КонтрагентВложения = ?(ЗначениеЗаполнено(СтрКонтрагента), НайтиКонтрагентаИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрКонтрагента, Вложение.СтруктураИниФайла), Ложь);	
	КонецЕсли;
	
	Если  Вложение.Свойство("РучноеИзменение") И Вложение.РучноеИзменение = Истина и Вложение.Свойство("Контрагент1С") и ЗначениеЗаполнено(Вложение.Контрагент1С) Тогда
		КонтрагентВложения = Вложение.Контрагент1С;
	КонецЕсли;
	Если ТипЗнч(ОрганизацияВложения) = Тип("Булево") Тогда
		Результат.МожемЗагрузитьВ1С = Ложь;
		Результат.Статус = СокрЛП(Результат.Статус + " Не найдена организация.");
		Результат.СтатусКартинка = 1;
	КонецЕсли;
	Если ТипЗнч(КонтрагентВложения) = Тип("Булево") И СтруктураИниФайла.Свойство("Контрагент_Роль")  Тогда
		Результат.МожемЗагрузитьВ1С = Ложь;
		Результат.Статус = СокрЛП(Результат.Статус + " Не найден контрагент.");
		Результат.СтатусКартинка = 1;
	КонецЕсли;
	Если Результат.МожемЗагрузитьВ1С и ПараметрыНоменклатуры.Сопоставлено Тогда
		Если ПараметрыНоменклатуры.НадоСопоставлять Тогда
			Результат.Статус = "Номенклатура сопоставлена. ";
		КонецЕсли;
		Если Не (Вложение.Свойство("Документы1С") И Вложение.Документы1С.Количество() > 0) Тогда // alo Меркурий 
			Результат.Статус = Результат.Статус + "Загрузка возможна.";
			Результат.СтатусКартинка = 2;
		Иначе
			Результат.Статус = Результат.Статус + "Возможно перезаполнение.";
			Если ЗначениеЗаполнено(Вложение.Документ1СПроведен) и Вложение.Документ1СПроведен Тогда
				Результат.Статус = Результат.Статус + " Необходимо отменить проведение документа.";
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	СоставПакета.Вставить("НоменклатураСопоставлена",	ПараметрыНоменклатуры.Сопоставлено);	
	Результат.Вставить("ПутьОрганизации",				ПутьОрганизации);
	Результат.Вставить("ПутьКонтрагента",				ПутьКонтрагента);
	Результат.Вставить("ПутьТаблДок", 					ПутьТаблДок);
	Результат.Вставить("ОрганизацияВложения",			ОрганизацияВложения);
	Результат.Вставить("КонтрагентВложения",			КонтрагентВложения);
	Результат.Вставить("ЕстьВходящиеВложения",			ЕстьВходящиеВложения);
	Результат.Вставить("КонтрагентДляСопоставления",	КонтрагентДляСопоставления);
	Результат.Вставить("ПараметрыНоменклатуры",			ПараметрыНоменклатуры);
	Возврат Результат;
КонецФункции

//Функции с формы просмотра документов. Вынесены для использования в алгоритмах массовой загрузки.
&НаКлиенте
Функция СоздатьПерезаполнитьДокументы(Кэш,СоставПакета,СписокВложений,Параметры,ДополнительныеПараметры) Экспорт
	
	//Режим 0 Перезаполнить
	//Режим 1 Создать новые
	//Режим 2 Отменить
	//Режим 3 Загружать ещё не загруженные
	РежимДокументов = Параметры.РежимДокументов;
	//Режим 0 Документ не загружается, если нет сопоставления.
	//Режим 1 Для несопоставленных позиций создавать карточки номенклатуры и контрагента.
	//Режим 2 В табличную часть загружать только сопоставленную номенклатуру.
	//режим 3 Для несопоставленной номенклатуры в табличной части не заполнять поле Номенклатура
	РежимНоменклатуры = Параметры.РежимНоменклатуры;
	Если РежимДокументов = 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Берем как результат созданный объект РезультатДействия и возвращаем его везде, где можно. 
	//Его можно взять в любом другом месте из Кэш.РезультатДействия, но для нормальной проброски результата выше, сделаю ещё возвратом.
	Результат				= Кэш.РезультатДействия;
	ГлавноеОкно				= Кэш.ГлавноеОкно;
	ФормаВызова				= Результат.Параметры.ФормаВызова;
	СоздаемНовый			= РежимДокументов = 1;
	
	СписокВесов				= Новый СписокЗначений;
	ИсходящиеДокументы1С	= Новый СписокЗначений;  // при загрузке расхождения редактируем исходящий документ
	НоменклатураСопоставлена= Истина;
	СтатусНеПоддерживается	= "Загрузка документа не поддерживается.";
	
	РезультатДетализация	= Новый Структура("Отказ,Строки,ГлобальнаяОшибка",Ложь);
	РезультатДетализация.Строки = Новый Структура("Выполнено,НеВыполнено,Ошибки",Новый Соответствие, Новый Соответствие, Новый Соответствие);
	РезультатДетализация.ГлобальнаяОшибка = Новый Структура("Вложение, Текст"); 	
	Для каждого СтрокаТаблДок из СписокВложений Цикл
		ОшибкаЗаполненияНоменклатуры = Ложь;
		Вложение = СтрокаТаблДок.Вложение[0].Значение;
		Если Вложение.Свойство("Направление") И Вложение.Направление = "Исходящий" и Вложение.Документы1С.Количество()>0 Тогда
			ИсходящиеДокументы1С.Добавить(Вложение.Документы1С[0].Значение);	
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если ТипЗнч(СтрокаТаблДок) = Тип("Структура") Тогда
				НеОтмечен = СтрокаТаблДок.Свойство("Отмечен") и СтрокаТаблДок.Отмечен = Ложь;
			Иначе
				НеОтмечен = Не СписокВложений.Колонки.Найти("Отмечен") = Неопределено и СтрокаТаблДок.Отмечен = Ложь;
			КонецЕсли;	
		#Иначе
			НеОтмечен = СтрокаТаблДок.Свойство("Отмечен") и СтрокаТаблДок.Отмечен = Ложь;
		#КонецЕсли
		
		Если НеОтмечен Тогда
			Продолжить;			
		КонецЕсли;
		
		СтрокаРезультат = РезультатДействия_СформироватьСтрокуДетализации(Кэш, "Загрузка");
		СтрокаРезультат.ИдентификаторПакета		= СоставПакета.Идентификатор;
		СтрокаРезультат.ИдентификаторВложения	= Вложение.Идентификатор;
		СтрокаРезультат.Название				= Вложение.Название;
		//СтрокаРезультат = Новый Структура(	"ИдентификаторПакета, 		ИдентификаторВложения,	Номенклатура,Документы1С,Название,ОбработанДокумент1С,СостояниеДокумента,Сообщение", 
		//СоставПакета.Идентификатор,	Вложение.Идентификатор,	Новый Массив);
		
		//Возможные состояния документа в результате:
		//Выполнено:	"Обработан." - вложение было обработано и по нему созданы/перезаполнены, либо были найдены существующие документы/справочники. 
		//				Так, как по одному вложению может быть создано более одного документа, то подробнее смотреть в расшифровке обработанных объектов 1С:
		//					"Создан." - успешно создан новый документ 1С
		//					"Перезаполнен." - выбран режим 0, документ уже был создан и успешно перезаполнен
		//					"Найден." - такой документ есть
		//НеВыполнено:	"Загрузка документа не поддерживается." - отсутствует ини для загрузки
		//				"Документ уже загружен." - установлен режим 3, документ существует и не обрабатывается
		//				"Ошибки в связанном документе." при загрузке пакета в одном из документов были ошибки. Пакет не загружаем, а все документы, кроме того что с ошибкой попадают в этот раздел.
		//Ошибки:		"Не вся номенклатура сопоставлена."
		//				"Не найден контрагент."
		//				"Ошибка поиска номенклатуры."
		//				"Ошибка автоматического сопоставления/создания номенклатуры." - режим номенклатуры 0, при попытке создать новую карточку возникли проблемы.
		//				"Ошибка записи документа." - в процессе записи нового документа, либо заполнения возникли проблемы.
		//				Так же тут идет составной статус документа после заполнения данных по-умолчанию, например "Не вся номенклатура сопоставлена. Не найдена организация. Не найден контрагент."
		
		Пропускаем = Ложь;
		Если РезультатДетализация.Отказ Тогда
			//При ошибке в одном из докумтов, чтобы не тратить лишних действий на проверку оставшихся, сразу объявляем их пропущенными, так как пакет всё равно не грузим.
			СтрокаРезультат.Состояние = "Ошибки в связанном документе.";
			Пропускаем = Истина;
		ИначеЕсли СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда 
			//Если не можем загрузить в 1С, то по ключевому слову проверим, что это не ошибка отсутствия организации, либо контрагента.
			Если Найти(СтрокаТаблДок.Статус," Не найден") Тогда
				СтрокаРезультат.Состояние = СтрокаТаблДок.Статус;
				СтрокаРезультат.Сообщение = СтрокаТаблДок.Статус + ?(Не ФормаВызова="ФормаПросмотрДокумента", " Откройте карточку документа для исправления.", "");
				РезультатДетализация.ГлобальнаяОшибка.Текст = СтрокаТаблДок.Статус;
				РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
				//На вложение нет ИНИшки для загрузки то ничего не делаем
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблДок.Статус) Тогда 
				СтрокаРезультат.Состояние = СтрокаТаблДок.Статус;
			Иначе
				СтрокаРезультат.Состояние = СтатусНеПоддерживается;
			КонецЕсли;
			Пропускаем = Истина;
		ИначеЕсли 	РежимДокументов = 3
			И	ЗначениеЗаполнено(Вложение.Документы1С) Тогда
			СтрокаРезультат.Состояние = "Документ уже загружен.";
			СтрокаРезультат.Сообщение = "Документ " + СтрокаРезультат.Название + " уже загружен.";
			Пропускаем = Истина;
		ИначеЕсли	РежимНоменклатуры = 0//Прерываем формирование пакета, если у какого-нибудь вложения уже не сопоставлена номенклатура, и выбран соответствующий режим.
			И	Найти(СтрокаТаблДок.Статус, "Не вся номенклатура сопоставлена.") Тогда
			СтрокаРезультат.Состояние = "Не вся номенклатура сопоставлена.";
			СтрокаРезультат.Сообщение = СтрокаТаблДок.Статус + ?(Не ФормаВызова="ФормаПросмотрДокумента", " Для сопоставления откройте карточку документа.", "");
			РезультатДетализация.ГлобальнаяОшибка.Текст = "Не вся номенклатура сопоставлена.";
			РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
			РезультатДетализация.Отказ = Истина;
			РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
			Продолжить;
		КонецЕсли;
		Если Пропускаем Тогда
			РезультатДетализация.Строки.НеВыполнено.Вставить(Вложение.Идентификатор, СтрокаРезультат);
			Продолжить;
		КонецЕсли;
		
		//Если нет контрагента и работаем в режиме автоматического создания карточек номенклатуры
		Если	РежимНоменклатуры = 1
			И	Найти(СтрокаТаблДок.Статус," Не найден контрагент.") Тогда 
			Если Кэш.ТихийРежим Тогда
				СтрокаТаблДок.МожемЗагрузитьВ1С		= Ложь;
				СтрокаРезультат.Состояние = "Не заполнен контрагент.";
				СтрокаРезультат.Сообщение = "Отсутствует контрагент для автоматического сопоставления и загрузки номенклатуры.";
				РезультатДетализация.ГлобальнаяОшибка.Текст = СтрокаРезультат.Сообщение;
				РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
			КонецЕсли;
			СтрокаПоУмолчанию = ?(ДополнительныеПараметры.Свойство("СтрокаПоУмолчанию"), ДополнительныеПараметры.СтрокаПоУмолчанию, СтрокаТаблДок); 
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,Кэш); 
			фрм.ЗаполнитьИзФайла(СтрокаПоУмолчанию, СоставПакета, Кэш); // alo загрузка из 3,03
		КонецЕсли;	
		
		//Если заходим в условие, то значит с номенклатурой не всё в порядке и необходимо выполнить ряд действий для загрузки документа в зависимости от выбранного способа.
		//Тогда в строке результата будут записи с описанием того, что было проделано с номенклатурой.
		//Если не заходим, то в номенклатуре будет пусто и это значит, что ориентироваться надо на детализацию ошибок, если с номенклатурой что-то пошло не так.
		Если	НЕ СоставПакета.НоменклатураСопоставлена
			И	НЕ Найти(СтрокаТаблДок.Статус,"Сопоставление не требуется. ") Тогда			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("фрмСозданияНоменклатуры",	ГлавноеОкно.сбисНайтиФормуФункции("СоздатьНоменклатуруПоДаннымПоставщика","РаботаСДокументами1С","", Кэш));
			ПараметрыЗаполнения.Вставить("фрмНоменклатуры",			ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",Кэш.ФормаРаботыСНоменклатурой,"", Кэш));
			ПараметрыЗаполнения.Вставить("ПараметрыРезультат",		Результат.Параметры);
			ПараметрыЗаполнения.Вставить("СтрКонтрагента",			РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьКонтрагента, Вложение.СтруктураФайла));
			ПараметрыЗаполнения.Вставить("Вложение",				Вложение);
			ПараметрыЗаполнения.Вставить("РежимНоменклатуры",		РежимНоменклатуры);
			ПараметрыЗаполнения.Вставить("НашаНоменклатура",		РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, Кэш));
			ПараметрыЗаполнения.Вставить("ДанныеНоменклатуры",		Неопределено);
			ПараметрыЗаполнения.Вставить("СтрокаДетализации",		СтрокаРезультат);
			
			ТаблДок = Неопределено;
			Если		ФормаВызова = "ФормаПросмотрДокумента"
				Или	Не	СтрокаТаблДок.Свойство("ТаблДок",ТаблДок) Тогда//Если есть расчитанный ТаблДок, то берём его
				ТаблДок = РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьТаблДок, Вложение.СтруктураФайла);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТаблДок) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				стрТаблДок = ПараметрыЗаполнения.фрмНоменклатуры.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(ПараметрыЗаполнения.СтрКонтрагента, ТаблДок, Кэш.Парам.КаталогНастроек, Кэш.Ини);
			Исключение
				//Тут пробрасываем ошибку, не формируя документ, так как упало в исключение.
				ОшибкаСопоставления = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "РаботаСДокументами1С.НайтиНоменклатуруПоставщикаПоТабличнойЧасти");
				СтрокаРезультат.Состояние = "Ошибка поиска номенклатуры.";
				СтрокаРезультат.Сообщение = ОшибкаСопоставления.details;
				РезультатДетализация.ГлобальнаяОшибка.Текст		= СтрокаРезультат.Сообщение;
				РезультатДетализация.ГлобальнаяОшибка.Вложение	= Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
			КонецПопытки;
			
			//Так передаем данные детализации и информации об ошибке в функцию создания номенклатуры. Ниже что не заполнилось, заполняем тем, что есть.
			ДанныеДозаполнить = Новый Структура("СтрокаДетализации, ЗаполнитьДетализацию, Отказ", СтрокаРезультат, Истина, Ложь);
			Результат.Вставить("ВременныеДанные", ДанныеДозаполнить);
			Для СчСтр = 0 По ТаблДок.Количество()-1 Цикл
				СтрТабл = ТаблДок[СчСтр];
				Если стрТаблДок.Свойство("СтрТабл_"+Формат(СчСтр, "ЧН=0; ЧГ=0"),ПараметрыЗаполнения.ДанныеНоменклатуры) Тогда//AU берём предварительно найденные данные					
					ПараметрыЗаполнения.ДанныеНоменклатуры = ПараметрыЗаполнения.ДанныеНоменклатуры.НоменклатураПоставщика;			
				КонецЕсли;
				СтрокаНоменклатуры = ЗаполнитьСопоставитьНоменклатуру(Кэш, СтрТабл, ПараметрыЗаполнения, ОшибкаЗаполненияНоменклатуры);
				
				//Здесь считаем это ошибкой, так как номенклатура должна была создаться
				Если	ОшибкаЗаполненияНоменклатуры Тогда 
					СтрокаРезультат.Состояние = "Ошибка автоматического сопоставления/создания номенклатуры.";
					Если ДанныеДозаполнить.Отказ Тогда
						СтрокаРезультат.Сообщение = "Автоматическое создание номенклатуры не поддерживается для текущей конфигурации.";
					Иначе //Если в переданных данных не проставился отказ, значит в стандартный метод создания не заходили, а значит надо проставить сообщение из того, что вернулось.
						СтрокаРезультат.Сообщение = СтрокаНоменклатуры.ТекстОшибки;
					КонецЕсли;
					РезультатДетализация.ГлобальнаяОшибка.Текст		= " при автоматическом сопоставление и создании номенклатуры возникла ошибка: " + СтрокаРезультат.Сообщение;
					РезультатДетализация.ГлобальнаяОшибка.Вложение	= Вложение;
					РезультатДетализация.Отказ = Истина;
					РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
					Прервать;
				КонецЕсли;
				СтрТабл.Вставить("Номенклатура", СтрокаНоменклатуры.Номенклатура);
				Если СтрокаНоменклатуры.НеЗагружать Тогда
					СтрТабл.Вставить("НеЗагружать", СтрокаНоменклатуры.НеЗагружать);
				КонецЕсли;
				Если СтрокаНоменклатуры.Свойство("ХарактеристикаНоменклатуры") Тогда
					СтрТабл.Вставить("ХарактеристикаНоменклатуры", СтрокаНоменклатуры.ХарактеристикаНоменклатуры);
				КонецЕсли;
				ТаблДок[СчСтр] = СтрТабл;
			КонецЦикла;
			Результат.Удалить("ВременныеДанные");
			
			Если ОшибкаЗаполненияНоменклатуры Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Вес = Кэш.ГлавноеОкно.сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение("Вес",Новый Структура("Ини", Вложение.СтруктураИниФайла), Кэш);
		Попытка
			Вес = Число(Вес);
		Исключение
			Вес = 0;
		КонецПопытки;
		Если СписокВесов.НайтиПоЗначению(Вес)=Неопределено Тогда
			СписокВесов.Добавить(Вес);
		КонецЕсли;
		Вложение.Вставить("Вес", Вес);
		Вложение.Вставить("ТипДокумента", сбисСообщитьИмяРеквизита(РассчитатьЗначение("Документ", Вложение.СтруктураИниФайла, Кэш)));	
		РезультатДетализация.Строки.Выполнено.Вставить(Вложение.Идентификатор, СтрокаРезультат);
	КонецЦикла;
	
	сбисПараметрыСчетчика	= Новый Структура;
	СообщениеВоВложения		= "";
	Если РезультатДетализация.Отказ Тогда
		//Если были ошибки, не дающие загрузить пакет целиком, то все вложения, которые могли бы загрузить добавляем в детализацию как не выполненные.
		СообщениеВоВложения = "В " + РезультатДетализация.ГлобальнаяОшибка.Вложение.Название + " " + РезультатДетализация.ГлобальнаяОшибка.Текст;
		Для Каждого КлючИЗначение Из РезультатДетализация.Строки.Ошибки Цикл
			СтрокаРезультат = КлючИЗначение.Значение;
			ОшибкаИтог = МодульОбъектаКлиент().НовыйСбисИсключение(773, "ОбщиеФункции.СоздатьПерезаполнитьДокументы",,СтрокаРезультат.Состояние, СтрокаРезультат.Сообщение);
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаРезультат, ОшибкаИтог, Новый Структура("ТипОшибки", "Подготовка"));
		КонецЦикла;
		Для Каждого КлючИЗначение Из РезультатДетализация.Строки.Выполнено Цикл
			СтрокаРезультат = КлючИЗначение.Значение;
			СтрокаРезультат.Сообщение = СообщениеВоВложения;
			СтрокаРезультат.Состояние = "Ошибки в связанном документе.";
			ПараметрыВыполнения = Новый Структура("Выполнено, КлючГруппировки, ПараметрыСчетчика", Ложь, СтрокаРезультат.Состояние, сбисПараметрыСчетчика);
			РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, ПараметрыВыполнения);
		КонецЦикла;
		СписокВесов.Очистить();
	КонецЕсли;
	//Получим список документов к загрузке
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		Для каждого СтрокаТаблДок из СписокВложений Цикл
			Если СтрокаТаблДок.МожемЗагрузитьВ1С <=0 или СтрокаТаблДок.Отмечен = Ложь Тогда   
				Продолжить;
			КонецЕсли;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Вложение.Свойство("Вес") И Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Не выполненые добавляем в детализацию. Считаем не выполненным весь пакет только если все вложения не загружаются.
	Для Каждого КлючИЗначение Из РезультатДетализация.Строки.НеВыполнено Цикл
		СтрокаРезультат = КлючИЗначение.Значение;
		Если	ПустаяСтрока(СтрокаРезультат.Сообщение)
			И	СтрокаРезультат.Состояние = "Ошибки в связанном документе." Тогда
			СтрокаРезультат.Сообщение = СообщениеВоВложения;
		КонецЕсли;
		ПараметрыВыполнения = Новый Структура("Выполнено, КлючГруппировки, ПараметрыСчетчика", Ложь, СтрокаРезультат.Состояние, сбисПараметрыСчетчика);
		//Если загрузка не поддерживается, не считаем это как не выполнено.
		//НО только если есть другие вложения к загрузке, оценка успешности/не удачи будет тогда проходить по ним.
		Если СтрокаРезультат.Состояние = СтатусНеПоддерживается Тогда
			ПараметрыВыполнения.Вставить("Считать", (Не УпорядоченныйСоставПакета.Количество()));
		КонецЕсли;
		РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, ПараметрыВыполнения);
	КонецЦикла;
	
	Если Не РезультатДетализация.Количество() Тогда
		РезультатДетализация = Неопределено;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("Кэш",						Кэш);
	ПараметрыЗагрузки.Вставить("ДополнительныеПараметры",	ДополнительныеПараметры);
	ПараметрыЗагрузки.Вставить("СоздаемНовый",				СоздаемНовый);
	ПараметрыЗагрузки.Вставить("ПараметрыСчетчика",			сбисПараметрыСчетчика);
	ПараметрыЗагрузки.Вставить("УпорядоченныйСоставПакета",	УпорядоченныйСоставПакета);
	ПараметрыЗагрузки.Вставить("ИсходящиеДокументы1С",		ИсходящиеДокументы1С);
	ПараметрыЗагрузки.Вставить("СоставПакета",				СоставПакета);
	
	Возврат ЗагрузитьУпорядоченныйСоставПакета(РезультатДетализация, ПараметрыЗагрузки);
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьУпорядоченныйСоставПакета(Результат, ПараметрыЗагрузки) 
	
	Кэш = ПараметрыЗагрузки.Кэш;
	УпорядоченныйСоставПакета = ПараметрыЗагрузки.УпорядоченныйСоставПакета;
	ИсходящиеДокументы1С = ПараметрыЗагрузки.ИсходящиеДокументы1С;
	СоздаемНовый = ПараметрыЗагрузки.СоздаемНовый;
	СоставПакета = ПараметрыЗагрузки.СоставПакета;
	МассивОснований = Новый Массив;
	ДополнительныеПараметры = Неопределено;
	//Если в дополнительных параметрах указан обработчик результата(описание оповещения, куда надо попасть после не модального диалога), то передаём его дальше 
	Если	ПараметрыЗагрузки.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработчикРезультата") Тогда 
			ПараметрыЗагрузки.Вставить("ОбработчикРезультата",ДополнительныеПараметры.ОбработчикРезультата);
		КонецЕсли;
		ПараметрыЗагрузки.Вставить("ВыполнитьОбработчик", Ложь);
		ПараметрыЗагрузки.Удалить("ДополнительныеПараметры");
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	//Дальше результат передаётся как параметр
	ПараметрыЗагрузки.Вставить("Результат", Результат);
	Ответ = Неопределено;
	Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",Кэш);
		ПродолжитьПеребор = Истина;
		Если Вложение.Документы1С.Количество()=0 Тогда
			ТекущийДокумент1С = Неопределено;
			Если ИсходящиеДокументы1С.Количество()>0 Тогда
				Для Каждого Док1С Из ИсходящиеДокументы1С Цикл
					ТипДок1С = ПолучитьРеквизитМетаданныхОбъекта(Док1С.Значение, "Имя");
					Если ТипДок1С = Вложение.ТипДокумента Тогда
						Если ДополнительныеПараметры.Свойство("ОтветНаИзмененияВИсходныйДокумент") Тогда
							Ответ = ДополнительныеПараметры.ОтветНаИзмененияВИсходныйДокумент;
						Иначе
							ТекстВопроса = "Внести изменения в исходный документ "+строка(Док1С.Значение)+"?";
							КнопкиВопроса = РежимДиалогаВопрос.ОКОтмена; 
							ПараметрыЗагрузки.Вставить("ВыполнитьОбработчик", Истина);
							#Если ТолстыйКлиентОбычноеПриложение Тогда
								Ответ = Вопрос(ТекстВопроса,КнопкиВопроса,0);
							#Иначе
								ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом",ЭтаФорма, ПараметрыЗагрузки),ТекстВопроса, КнопкиВопроса, 0);
								Возврат Неопределено;
							#КонецЕсли
							//Возвращаем неопределено, так как в дилог в дополнительных параметрах должен быть передан обработчик результата, куда попадём после выбора способа загрузки
						КонецЕсли;
						ПродолжитьПеребор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Не ПродолжитьПеребор Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом(Ответ, ПараметрыЗагрузки);	
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом(РезультатВопроса, ПараметрыЗагрузки) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат Неопределено;
	КонецЕсли;
	Кэш = ПараметрыЗагрузки.Кэш;
	Результат = Кэш.РезультатДействия;//Как результат идёт структура из Кэша. В его детализацию добрасываем либо выполненный результат, либо ошибку.
	РезультатСоответствие = ПараметрыЗагрузки.Результат;
	УпорядоченныйСоставПакета = ПараметрыЗагрузки.УпорядоченныйСоставПакета;
	ИсходящиеДокументы1С = ПараметрыЗагрузки.ИсходящиеДокументы1С;	
	СоздаемНовый = ПараметрыЗагрузки.СоздаемНовый;
	СоставПакета = ПараметрыЗагрузки.СоставПакета;
	
	ОшибкиЗагрузки = Ложь;
	МассивОснований = Новый Массив;
	сбисПараметрыСчетчика = ПараметрыЗагрузки.ПараметрыСчетчика;//Если уже упало на стадии подготовки, то весь результат был обработан и посчитан. Сюда приходим только для вызова ОбработчикРезультата
	Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
		СтрокаРезультат = РезультатСоответствие.Строки.Выполнено.Получить(Вложение.Идентификатор);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",Кэш);
		Если Вложение.Документы1С.Количество()>0 Тогда
			ТекущийДокумент1С = сбисВыбратьПодходящийДокумент(Вложение.Документы1С,Вложение.ТипДокумента);
		Иначе
			ТекущийДокумент1С = Неопределено;
			Если ИсходящиеДокументы1С.Количество()>0 и РезультатВопроса = КодВозвратаДиалога.ОК Тогда
				Для Каждого Док1С Из ИсходящиеДокументы1С Цикл
					ТипДок1С = ПолучитьРеквизитМетаданныхОбъекта(Док1С.Значение, "Имя");
					Если ТипДок1С = Вложение.ТипДокумента Тогда
						ТекущийДокумент1С = Док1С.Значение;
						СоздаемНовый = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Так передаем данные детализации и информации об ошибке в функцию создания документа. Ниже что не заполнилось, заполняем тем, что есть.
		ДанныеДозаполнить = Новый Структура("СтрокаДетализации, ЗаполнитьДетализацию, Отказ", СтрокаРезультат, Истина, Ложь);
		Результат.Вставить("ВременныеДанные", ДанныеДозаполнить);
		Документ1С = фрм.СоздатьДокумент(Кэш, Вложение, Вложение.СтруктураИниФайла, СоставПакета, МассивОснований, ?(Не СоздаемНовый, ТекущийДокумент1С, Неопределено));
		Если	ДанныеДозаполнить.Отказ
			Или	Документ1С = Неопределено Тогда
			//Были ошибки формирования документа(ов), дозаполнить состяние и сообщение, если в функциях что-то упущено
			Если ПустаяСтрока(СтрокаРезультат.Состояние) Тогда
				СтрокаРезультат.Состояние = "Ошибка формирования документа.";
			КонецЕсли;
			Если ПустаяСтрока(СтрокаРезультат.Сообщение) Тогда
				СтрокаРезультат.Сообщение = "Не удалось " + ?(СоздаемНовый, "создать новый документ " + СтрокаРезультат.Название, "перезаполнить " + ТекущийДокумент1С);
			КонецЕсли;
			ПараметрыОшибки = Новый Структура("message,details", СтрокаРезультат.Состояние, СтрокаРезультат.Сообщение);
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаРезультат, ПараметрыОшибки, Новый Структура("ПараметрыСчетчика", сбисПараметрыСчетчика),ОшибкиЗагрузки);
		Иначе
			СтрокаРезультат.Состояние = "Обработан";
			РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, Новый Структура("КлючГруппировки, ПараметрыСчетчика", СтрокаРезультат.Состояние, сбисПараметрыСчетчика));
			
			ДобавитьОснование = Истина;
			Для каждого ОснованиеСтруктура Из МассивОснований Цикл
				Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
					Если ОснованиеСтруктура.ДокОснование = Документ1С Тогда
						Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
							Для каждого мТаблДок Из Вложение.СтруктураИниФайла.мТаблДок Цикл
								Если ОснованиеСтруктура.МассивТабЧастей.Найти(мТаблДок.Ключ) = Неопределено
									И Вложение.Свойство("СтруктураДокумента1С")
									И Вложение.СтруктураДокумента1С.Свойство(мТаблДок.Ключ) Тогда
									ОснованиеСтруктура.МассивТабЧастей.Добавить(мТаблДок.Ключ);
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;
						ДобавитьОснование = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли ОснованиеСтруктура = Документ1С Тогда
					ДобавитьОснование = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ДобавитьОснование Тогда
				МассивТабЧастей = Новый Массив;
				Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
					Для каждого мТаблДок Из Вложение.СтруктураИниФайла.мТаблДок Цикл
						Если Вложение.Свойство("СтруктураДокумента1С")
								И Вложение.СтруктураДокумента1С.Свойство(мТаблДок.Ключ) Тогда
							МассивТабЧастей.Добавить(мТаблДок.Ключ);	
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				МассивОснований.Добавить(Новый Структура("ДокОснование, МассивТабЧастей", Документ1С, МассивТабЧастей));
			КонецЕсли;
		КонецЕсли;
		Результат.Удалить("ВременныеДанные");
	КонецЦикла;
	Если Не ОшибкиЗагрузки Тогда
		Выполнено = Булево(УпорядоченныйСоставПакета.Количество());
		РезультатДействия_ДобавитьРезультат(Кэш, Результат, Неопределено, Новый Структура("Выполнено, ПараметрыСчетчика", Выполнено, сбисПараметрыСчетчика));
		//AU tda//Если все документы были загружены успешно, то удаляем файл
		Если Выполнено И Кэш.ИнтеграцияИмя = "ИнтеграцияКаталог"  Тогда
			Кэш.Интеграция.УдалитьФайлПакетаДокументов(УпорядоченныйСоставПакета[0].Файл.СсылкаНаФайл);
		КонецЕсли;
	КонецЕсли;
	сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие, Результат", "Загрузка", Кэш.РезультатДействия), Ложь);
	
	ОписаниеОповещенияРезультат = Неопределено;
	Если	ПараметрыЗагрузки.Свойство("ОбработчикРезультата",ОписаниеОповещенияРезультат)
		И	ПараметрыЗагрузки.ВыполнитьОбработчик Тогда 
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			РезультатВычислить = Вычислить(ОписаниеОповещенияРезультат.Модуль + "." + ОписаниеОповещенияРезультат.Функция + "(Результат, ОписаниеОповещенияРезультат.Параметры)");
		#Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияРезультат, Результат);
		#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

