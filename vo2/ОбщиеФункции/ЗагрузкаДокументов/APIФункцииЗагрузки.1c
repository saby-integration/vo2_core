
////////////////////////////////////////////////////
///////////////API функции загрузки/////////////////
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//////////////////////Шапка/////////////////////////

//Функция заполняет валюту в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьВалютуУНФ(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Валюты", Контекст.Документ.ВалютаДокумента); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = сбисПолучитьВалюту_Сервер(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

// Функция заполняет договор в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьДоговор(Контекст) Экспорт
	Если	Контекст.Свойство("Вложение")
		И	Контекст.Вложение.Свойство("РучноеИзменение")
		И	Контекст.Вложение.РучноеИзменение = Истина
		И	Контекст.Вложение.Свойство("Договор1С")
		И	ЗначениеЗаполнено(Контекст.Вложение.Договор1С) Тогда
		// Если договор выбран вручную в форме просмотра, то возвращаем его
		Результат = Контекст.Вложение.Договор1С;
	ИначеЕсли	Не Контекст.Документ.Свойство("Контрагент")
		Или Не ЗначениеЗаполнено(Контекст.Документ.Контрагент) Тогда
		//Нет контрагента, пустая ссылка договора. Чтоб лишний раз не дергать сервер, храним в кэше.
		СбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочник.ДоговорыКонтрагентов", "ПустаяСсылка"); 
		СбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		Если СбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			СбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(СбисОписаниеПустойСсылкиОбъекта, СбисОписаниеПустойСсылкиОбъекта.Ключ);
			СбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Результат = СбисОписаниеПустойСсылкиОбъекта.Значение;
	Иначе
		Результат = СбисНайтиДоговорНаСервере(Контекст);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции   

//Функция заполняет договор в загружаемых документах для конфигурации БГУ2
&НаКлиенте
Функция ЗаполнитьДоговорБГУ(Контекст) Экспорт
     Если	Контекст.Свойство("Вложение")
		И	Контекст.Вложение.Свойство("РучноеИзменение")
		И	Контекст.Вложение.РучноеИзменение = Истина
		И	Контекст.Вложение.Свойство("Договор1С")
		И	ЗначениеЗаполнено(Контекст.Вложение.Договор1С) Тогда
		// Если договор выбран вручную в форме просмотра, то возвращаем его
		Результат = Контекст.Вложение.Договор1С;
	ИначеЕсли	Не Контекст.Документ.Свойство("Контрагент")
		Или Не ЗначениеЗаполнено(Контекст.Документ.Контрагент) Тогда
		//Нет контрагента, пустая ссылка договора. Чтоб лишний раз не дергать сервер, храним в кэше.
		СбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочник.Договоры", "ПустаяСсылка"); 
		СбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		Если СбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			СбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(СбисОписаниеПустойСсылкиОбъекта, СбисОписаниеПустойСсылкиОбъекта.Ключ);
			СбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Результат = СбисОписаниеПустойСсылкиОбъекта.Значение;
	Иначе
		Результат = СбисНайтиДоговорБГУНаСервере(Контекст);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция заполняет договор в загружаемых документах для конфигурации УТ11	
&НаКлиенте
Функция ЗаполнитьДоговорУТ11(Контекст) Экспорт
	// Если договор выбран вручную в форме просмотра, то возвращаем его
	Договор1С = Контекст;
	Если	Договор1С.Свойство("Вложение",	Договор1С)
		И	Договор1С.Свойство("РучноеИзменение")
		И	Договор1С.РучноеИзменение = Истина
		И	Договор1С.Свойство("Договор1С",	Договор1С)
		И	ЗначениеЗаполнено(Договор1С) Тогда
		Возврат Договор1С;
	КонецЕсли;
	сбисКонтекстСервера	= Новый Структура("Документ", Контекст.Документ);
	Возврат сбисПолучитьДоговорУТ11_Сервер(сбисКонтекстСервера);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДоговорАА(Контекст) Экспорт
	// Функция заполняет договор в загружаемых документах
	НовыйДоговор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Контрагент = Контекст.Документ.Контрагент;
	Попытка  // Сначала пытаемся найти договор по дате, номеру
		ДатаДоговора = Дата(Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорДата+" 00:00:00");
		НомерДоговора = Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорНомер;       
		
		
		//Поиск договора по номеру дате
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ДоговорыВзаиморасчетов.Ссылка
		|ИЗ
		| Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		| ДоговорыВзаиморасчетов.Владелец = &Владелец И
		| ДоговорыВзаиморасчетов.ДатаНачала = &Дата
		| И ДоговорыВзаиморасчетов.НомерДоговора = &Номер";
		Запрос.УстановитьПараметр("Дата", ДатаДоговора);
		Запрос.УстановитьПараметр("Номер", НомерДоговора);
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовыйДоговор = Выборка.Ссылка;
			Возврат НовыйДоговор; 
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	
	//++ Описание из Альфа-авто
	// В первую очередь необходимо получить договор, удовлетворяющий
	// всем условиям, в т.ч. у которого совпадают реквизиты "Подразделение компании" и "Организация".
	// Если такого договора нет, то необходимо попытаться получить договор, у которого хотя бы организация совпадет.
	// Если и такого договора нет, то пытаемся получить договор, у которого подразделение совпадает.
	// Если и такого нет, то получаем любой договор (в пределах подчинения, разумеется).
	Попытка
		Организация = Контекст.Документ.Организация;
		ПодразделениеКомпании = Неопределено;
		ДатаДоговора = ТекущаяДата();
		ПустаяДата = Дата("00010101");
		ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		| ДоговорыВзаиморасчетов.Ссылка КАК Договор,
		| ВЫБОР
		|  КОГДА ДоговорыВзаиморасчетов.Организация = &Организация
		|   И ДоговорыВзаиморасчетов.Подразделение = &Подразделение ТОГДА
		|   0
		|  КОГДА ДоговорыВзаиморасчетов.Организация = &Организация ТОГДА
		|   1
		|  КОГДА ДоговорыВзаиморасчетов.Подразделение = &Подразделение ТОГДА
		|   2
		|  ИНАЧЕ
		|   3
		| КОНЕЦ КАК ПорядокПоПринадлежности,
		| ДоговорыВзаиморасчетов.Основной КАК Основной,
		| ДоговорыВзаиморасчетов.ДатаКонца КАК ДатаКонца,
		| ДоговорыВзаиморасчетов.ДатаНачала КАК ДатаНачала
		|ИЗ
		| Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		| ДоговорыВзаиморасчетов.Владелец = &Владелец И
		| ДоговорыВзаиморасчетов.ЭтоГруппа = ЛОЖЬ И
		| ДоговорыВзаиморасчетов.ВидДоговора = &ВидДоговора
		| И (ДоговорыВзаиморасчетов.ДляАвтосалона = ИСТИНА
		| ИЛИ ДоговорыВзаиморасчетов.ДляАвтосервиса = ИСТИНА
		| ИЛИ ДоговорыВзаиморасчетов.Внутренний = ИСТИНА)
		| И (ДоговорыВзаиморасчетов.ДатаКонца = &ПустаяДата
		|    И ДоговорыВзаиморасчетов.ДатаНачала <= &ДатаДоговора
		|   ИЛИ &ДатаДоговора МЕЖДУ ДоговорыВзаиморасчетов.ДатаНачала И ДоговорыВзаиморасчетов.ДатаКонца)
		| И ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		| ПорядокПоПринадлежности ВОЗР,
		| Основной УБЫВ,
		| ДатаКонца ВОЗР,
		| ДатаНачала УБЫВ";
		
		
		Запрос.УстановитьПараметр("ВидДоговора",          ВидДоговора);
		Запрос.УстановитьПараметр("Владелец",             Контрагент);
		Запрос.УстановитьПараметр("Организация",          ?(ЗначениеЗаполнено(Организация), Организация, ПараметрыСеанса.Организация));
		Запрос.УстановитьПараметр("Подразделение",        ПараметрыСеанса.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("ДатаДоговора",         ДатаДоговора);
		Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
		Результат = Запрос.Выполнить();
		
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Договор;
		КонецЕсли; 
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	
	Возврат НовыйДоговор;
КонецФункции

// функция ищет по коду единицу измерения, кэширует её. Если по классификатору, не должно быть много значений.	
&НаКлиенте
Функция ЗаполнитьЕдиницуИзмеренияНовойНоменклатуры(Контекст) Экспорт
	СправочникЕдИзм = РассчитатьЗначение("ЕдиницаИзмерения", Контекст.Ини);  //Определяем объект справочника единиц измерения
	Если СправочникЕдИзм = Неопределено Тогда
		Сообщить("В настройках не указан справочник для загрузки/создания единиц измерения");
		Возврат Неопределено;
	КонецЕсли;
	ЗначениеОКЕИ = Контекст.Ини.Номенклатура_ОКЕИ;
	Если Не ЗначениеОКЕИ.Свойство("РассчитанноеЗначение", ЗначениеОКЕИ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", СправочникЕдИзм, ЗначениеОКЕИ); 
	СбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		СбисОписаниеОбъекта.Значение = Объект1СПоОписанию(СбисОписаниеОбъекта,,Истина);
		СбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеОбъекта);
	КонецЕсли;
	Возврат СбисОписаниеОбъекта.Значение;
КонецФункции

// функция заполняет приложения в приходных/расходных ордерах	
&НаКлиенте
Функция ЗаполнитьПриложениеКО(Контекст) Экспорт 
	Приложения = "";
	Попытка
		Для Каждого Элемент Из Контекст.Приложения Цикл
			Приложения = Приложения + Элемент.Название + ", ";
		КонецЦикла;
		Приложения = Лев(Приложения, СтрДлина(Приложения)-2);
	Исключение
	КонецПопытки;
	Возврат Приложения;
КонецФункции

// Функция определяет название табличной части акта сверки, в которую нужно загружать данные (для УТ11)	
&НаКлиенте
Функция ИмяТЧВзаиморасчетов(Контекст) Экспорт
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ДанныеКонтрагента";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Функция определяет название табличной части акта сверки, в которую нужно загружать данные	
&НаКлиенте
Функция ИмяТЧАктаСверки(Контекст) Экспорт
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ПоДаннымКонтрагента";
	КонецЕсли;
	Возврат "ПоДаннымОрганизации";
КонецФункции

//TODO42 удалить Не использовать эту функцию. Оставлено для совместимости!
&НаКлиенте
функция ПолучитьСклад(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Попытка
			сбисОписаниеОбъекта.Значение = Вычислить("ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")");
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
функция ПолучитьСкладТекущегоПользователя(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Попытка
			сбисОписаниеОбъекта.Значение = Вычислить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""),""ОсновнойСклад"")");
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции       

&НаКлиенте
функция ПолучитьСкладБГУ(Контекст) Экспорт
	Перем СкладКод, СкладНаименование;
	Если Контекст.Ини.Свойство("СкладКод", СкладКод) И ЗначениеЗаполнено(СкладКод.РассчитанноеЗначение) Тогда
		сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочник.ЦМО", СкладКод.РассчитанноеЗначение); 
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
			сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоКоду");
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		КонецЕсли;
		Результат = сбисОписаниеОбъекта.Значение;
	ИначеЕсли Контекст.Ини.Свойство("СкладНаименование", СкладНаименование) И ЗначениеЗаполнено(СкладНаименование.РассчитанноеЗначение) Тогда
		сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочник.ЦМО", СкладНаименование.РассчитанноеЗначение); 
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
			сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		КонецЕсли;
		Результат = сбисОписаниеОбъекта.Значение;
	Иначе 
		Результат = ПолучитьСкладБГУНаСервере();
	КонецЕсли;	
	
	Возврат Результат;  
КонецФункции

//Переделана функция с кэшированием кассы
&НаКлиенте
Функция ПолучитьКассу(Контекст) Экспорт
	Перем КассаНазвание;
	Если	Не	Контекст.Ини.Свойство("КассаНазвание")
		Или	Не	Контекст.Ини.КассаНазвание.Свойство("РассчитанноеЗначение", КассаНазвание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если КассаНазвание = Неопределено Тогда
		КассаНазвание = "";
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Кассы", КассаНазвание); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
Функция ПолучитьХозрасчетныйСчетПоКоду(Контекст) Экспорт
	ХозрасчетныйСчет = Неопределено;
	//AU Берем счет из ини из расчитанного значения, по аналогии с плагином. Делаем соответствие счетов.
	Если	Не Контекст.Ини.Свойство("ХозрасчетныйСчет", ХозрасчетныйСчет)
		Или	Не ХозрасчетныйСчет.Свойство("РассчитанноеЗначение", ХозрасчетныйСчет)
		Или Не ЗначениеЗаполнено(ХозрасчетныйСчет) Тогда
		Возврат Неопределено;
	ИначеЕсли	ХозрасчетныйСчет = "58-03-01" Тогда
		ХозрасчетныйСчет = "58.03";
	ИначеЕсли   ХозрасчетныйСчет = "71" Тогда
		ХозрасчетныйСчет = "71.01";
	ИначеЕсли   ХозрасчетныйСчет = "76-ПРОЧ" Тогда
		ХозрасчетныйСчет = "76.05";
	ИначеЕсли   ХозрасчетныйСчет = "90-01" Тогда
		ХозрасчетныйСчет = "90.01.1";
	Иначе
		ХозрасчетныйСчет = СтрЗаменить(ХозрасчетныйСчет,"-",".")
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПланыСчетов.Хозрасчетный", ХозрасчетныйСчет); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция определяет параметры учета НДС по данным электронного документа
&НаКлиенте
Функция СбисПараметрыНДСДокумента(Контекст) Экспорт
	Перем ТаблЧасть;
	
	СбисРезультат = Новый Структура("СуммаВключаетНДС, УчитыватьНДС", Ложь, Ложь);
	
	Для Каждого ИмяТаблЧасть из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		Если Не Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ, ТаблЧасть) Тогда
			Продолжить;
		КонецЕсли;
		//выбираем строки из табличной части
		Для Каждого Стр Из ТаблЧасть Цикл
			Если Стр.Свойство("СтавкаНДС") И НРег(Стр.СтавкаНДС) <> "без ндс" Тогда
				СбисРезультат.УчитыватьНДС = Истина;
			КонецЕсли;
			Если	Стр.Свойство("Сумма")
				И	Стр.Свойство("СуммаНДС")
				И	Стр.Сумма = Стр.СуммаСНДС Тогда
				СбисРезультат.СуммаВключаетНДС = Истина;
			КонецЕсли;
			Если СбисРезультат.УчитыватьНДС Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если СбисРезультат.УчитыватьНДС Тогда
			//если уже нашли строки в которых ставка <> "без ндс", то остальные табличные части не проверяем
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат СбисРезультат;
	
КонецФункции

//Функция возвращает вид операции
&НаКлиенте
Функция сбисЗаполнитьВидОперации(Контекст) Экспорт
	Перем ДокументВидОперации;
	Если	Не	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр", ДокументВидОперации)
		Или	Не	ДокументВидОперации.Свойство("ДокументВидОперации", ДокументВидОперации) Тогда
		Возврат Неопределено;
	ИначеЕсли ДокументВидОперации = "Исправление" Тогда
		ДокументВидОперации = "ИсправлениеОшибки";
	ИначеЕсли ДокументВидОперации = "Корректировка" Тогда
		ДокументВидОперации = "СогласованноеИзменение";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Перечисления.ВидыОперацийИсправленияПоступленияРеализации", ДокументВидОперации); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
Функция сбисЗаполнитьДанныеНоменклатуры(Контекст) Экспорт
	Попытка
		НашаНоменклатура = РассчитатьЗначение("НашаНоменклатура", Контекст.Ини);
		Идентификатор = РассчитатьЗначениеИзСтруктуры(НашаНоменклатура, Контекст.СтрокаФайла);
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат сбисЗаполнитьДанныеНоменклатурыНаСервере(Идентификатор);
		КонецЕсли;
	Исключение
	КонецПопытки
КонецФункции   

&НаКлиенте
Функция ЗаполнитьДокументОснованиеКСчФБГУ2(Контекст) Экспорт
	Перем ДокументПоступленияНомер, ДокументПоступленияДата;
	
	Отказ = Ложь;
	КонтекстСервера = Новый Структура;
	Если Контекст.Документ.Контрагент = Ложь Тогда 
		Сообщить("Не найден исходный документ"); 
		Отказ = Истина;
	ИначеЕсли Контекст.СтруктураФайла.Файл.Формат = "счФактКор" Тогда
		Если	Контекст.СтруктураФайла.Файл.Документ.Свойство("Основание") И ТипЗнч(Контекст.СтруктураФайла.Файл.Документ.Основание)=Тип("Массив")
			И 	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Номер", ДокументПоступленияНомер)
			И	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Дата", ДокументПоступленияДата) Тогда
		Иначе
			Сообщить("Не указаны номер или дата исходного документа"); 
			Отказ = Истина
		КонецЕсли;
	КонецЕсли;	
	КонтекстСервера.Вставить("Контрагент",				Контекст.Документ.Контрагент);
	КонтекстСервера.Вставить("Файл_Формат",				Контекст.СтруктураФайла.Файл.Формат);
	КонтекстСервера.Вставить("ДокументПоступленияНомер",ДокументПоступленияНомер);
	КонтекстСервера.Вставить("ДокументПоступленияДата",	ДокументПоступленияДата); 
	
	РезультатЗаполнения = ЗаполнитьДокументОснованиеКСчФБГУ2НаСервере(КонтекстСервера, Отказ);
	Если Отказ Тогда
		Сообщить(РезультатЗаполнения.details);
		сбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Документ.СчетФактураПолученный", "ПустаяСсылка"); 
		сбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		Если сбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			сбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеПустойСсылкиОбъекта, сбисОписаниеПустойСсылкиОбъекта.Ключ);
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Возврат сбисОписаниеПустойСсылкиОбъекта.Значение;
	КонецЕсли;
	Возврат РезультатЗаполнения;
КонецФункции

&НаКлиенте
Функция сбисЗаполнитьДанныеИсходногоДокумента(Контекст) Экспорт
	
	ДопПараметрыФормированияКОнтекста = Новый Структура("Отказ", Ложь);
    КонтекстДляСервера = СформироватьКонтекстЗаполненияДанныхИсходногоДокумента(Контекст, ДопПараметрыФормированияКОнтекста);

	Если ДопПараметрыФормированияКОнтекста.Отказ Тогда
		Сообщить(КонтекстДляСервера.details);
		ДокументПоступленияТип = Неопределено;
		Если Не Контекст.Переменные.Свойство("ТипДокументаОснования", ДокументПоступленияТип) Тогда
			ДокументПоступленияТип = "ПоступлениеТоваровУслуг";
		КонецЕсли;

		сбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Документ." + ДокументПоступленияТип, "ПустаяСсылка"); 
		сбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		Если сбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			сбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеПустойСсылкиОбъекта, сбисОписаниеПустойСсылкиОбъекта.Ключ);;
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Возврат сбисОписаниеПустойСсылкиОбъекта.Значение;
	КонецЕсли;
	
	РезультатЗаполнения = сбисЗаполнитьДанныеИсходногоДокументаНаСервере(КонтекстДляСервера, ДопПараметрыФормированияКОнтекста.Отказ);
	Если ДопПараметрыФормированияКОнтекста.Отказ Тогда
		Сообщить(РезультатЗаполнения.details);
		сбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Документ." + КонтекстДляСервера.ТипОснования, "ПустаяСсылка"); 
		сбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		Если сбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			сбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеПустойСсылкиОбъекта, сбисОписаниеПустойСсылкиОбъекта.Ключ);
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Возврат сбисОписаниеПустойСсылкиОбъекта.Значение;
	КонецЕсли;
	Для Каждого ТабЧастьЗаполнена Из РезультатЗаполнения.ТЧ Цикл
		Контекст.Документ[ТабЧастьЗаполнена.Ключ] = ТабЧастьЗаполнена.Значение;
	КонецЦикла;
	Возврат РезультатЗаполнения.ОснованиеСсылка;
КонецФункции

&НаКлиенте
Функция СформироватьКонтекстЗаполненияДанныхИсходногоДокумента(Контекст, ДопПараметры)
	Перем ДокументПоступленияНомер, ДокументПоступленияДата, ДокументПоступленияТип, ТЧРеквизитОснований;
	
	КонтекстСервера = Новый Структура;
	Если Контекст.Документ.Контрагент = Ложь Тогда
		ДопПараметры.Отказ = Истина;
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ОбщиеФункции.СформироватьКонтекстЗаполненияДанныхИсходногоДокумента",,,"Не найден исходный документ");
	ИначеЕсли Контекст.СтруктураФайла.Файл.Формат = "счФактКор" Или Контекст.СтруктураФайла.Файл.Формат = "УкдКсчфДис" Тогда
		//KES первое основание. Теперь основания - это массив
		Если	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("НомерСчФ",	ДокументПоступленияНомер)
				И	Контекст.СтруктураФайла.Файл.Документ.Свойство("ДатаСчФ",	ДокументПоступленияДата))
			Или	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("Основание") И ТипЗнч(Контекст.СтруктураФайла.Файл.Документ.Основание)=Тип("Массив")
				И 	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Номер",	ДокументПоступленияНомер)
				И	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Дата",		ДокументПоступленияДата)) Тогда
		Иначе
			ДопПараметры.Отказ = Истина;
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ОбщиеФункции.СформироватьКонтекстЗаполненияДанныхИсходногоДокумента",,,"Не указаны номер или дата исходного документа");
		КонецЕсли;
	ИначеЕсли	Контекст.СтруктураФайла.Файл.Формат = "ЭДОНакл"
			Или Контекст.СтруктураФайла.Файл.Формат = "АктВР" 
			Или Контекст.СтруктураФайла.Файл.Формат = "УкдДис" Тогда 
		Попытка
			ДокументПоступленияНомер = Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументНомер;
			ДокументПоступленияДата = Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументДата;
		Исключение
			Если Контекст.СтруктураФайла.Файл.Формат = "УкдДис" И Контекст.СтруктураФайла.Файл.Документ.Свойство("Основание")  // в УкдДис в первом основании дата и номер исходного поступления
				И ТипЗнч(Контекст.СтруктураФайла.Файл.Документ.Основание)=Тип("Массив")
				И Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Номер", ДокументПоступленияНомер)
				И Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Дата", ДокументПоступленияДата) Тогда 
			Иначе
				ДопПараметры.Отказ = Истина;
				Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ОбщиеФункции.СформироватьКонтекстЗаполненияДанныхИсходногоДокумента",,,"Не указаны номер или дата исходного документа");
			КонецЕсли;
		КонецПопытки;  
	Иначе
		ДопПараметры.Отказ = Истина;
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ОбщиеФункции.СформироватьКонтекстЗаполненияДанныхИсходногоДокумента",,,"Неизвестный формат файла для поиска исходного документа");
	КонецЕсли;
	
	//Запрос для подбора основания

	Если	Не ДопПараметры.Отказ
		И	(	Не ЗначениеЗаполнено(ДокументПоступленияНомер)
		Или Не ЗначениеЗаполнено(ДокументПоступленияДата)) Тогда 
		ДопПараметры.Отказ = Истина;
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(, "ОбщиеФункции.СформироватьКонтекстЗаполненияДанныхИсходногоДокумента",,,"Не заполнены номер или дата исходного документа");
	КонецЕсли;
	
	КонтекстСервера.Вставить("Контрагент",				Контекст.Документ.Контрагент);
	КонтекстСервера.Вставить("Файл_Формат",				Контекст.СтруктураФайла.Файл.Формат);
	КонтекстСервера.Вставить("ТЧ",						Новый Структура);
	КонтекстСервера.Вставить("ДокументПоступленияНомер",ДокументПоступленияНомер);
	КонтекстСервера.Вставить("ДокументПоступленияДата",	ДокументПоступленияДата);
	Если Контекст.Документ.Свойство("Товары") Тогда
		КонтекстСервера.ТЧ.Вставить("Товары", Контекст.Документ.Товары);
	КонецЕсли;
	Если Контекст.Документ.Свойство("Услуги") Тогда
		КонтекстСервера.ТЧ.Вставить("Услуги", Контекст.Документ.Услуги);
	КонецЕсли;
	Если Не Контекст.Переменные.Свойство("ТипДокументаОснования", ДокументПоступленияТип) Тогда
		ДокументПоступленияТип = "ПоступлениеТоваровУслуг";
	КонецЕсли;
	КонтекстСервера.Вставить("ТипОснования", ДокументПоступленияТип);
	
	Если Контекст.Переменные.Свойство("ЗапросДокументаОснования") Тогда
		КонтекстСервера.Вставить("ТекстЗапросаШаблон", Контекст.Переменные.ЗапросДокументаОснования);
	КонецЕсли;
	
	Возврат КонтекстСервера;
КонецФункции

//Функция формирует табличную часть акта сверки для конфигураций УТ11-KА2	
&НаКлиенте
функция сбисПолучитьДанныеВзаиморасчетов(Контекст) Экспорт
	сбисОписаниеНастроек = Новый Структура("Тип, Ключ, Значение", "РассчитанныеЗначения.НастройкиСверки", "ПечатьСверкиВзаиморасчетов"); 
	сбисОписаниеНастроек.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеНастроек);
	Если сбисОписаниеНастроек.Значение = Неопределено Тогда
		фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПолучитьНастройкиАктаСверки", "Файл_АктСвер_3_01", "РаботаСДокументами1С");
		сбисОписаниеНастроек = фрм.сбисПолучитьНастройкиАктаСверки(Контекст, сбисОписаниеНастроек);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеНастроек);
	КонецЕсли;
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контекст.Документ);
	сбисКонтекстСервер = Новый Структура("Настройки, Объекты", сбисОписаниеНастроек.Значение, МассивОбъектов);
	
	Возврат сбисПолучитьДанныеВыборки(сбисКонтекстСервер);
КонецФункции

&НаКлиенте
Функция сбисПолучитьНачСальдоПоДоговорам(Контекст) Экспорт
	Возврат сбисПолучитьНачСальдоПоДоговорамНаСервере(Контекст.Документ);		
КонецФункции

//Функция формирует начальное сальдо по договорам акта сверки для конфигурации БУХ3 
&НаСервереБезКонтекста              
Функция сбисПолучитьНачСальдоПоДоговорамНаСервере(ДанныеДокумента)

	ЗапросОстаткиДоговоров = Новый Запрос;
	Результат = Новый Массив;

	Если Не ДанныеДокумента.РазбитьПоДоговорам Тогда 
		ТекСтрока = Новый Структура("Договор, НачОстатокПоДоговоруДт, НачОстатокПоДоговоруКт");
		ТекСтрока.Договор = ДанныеДокумента.ДоговорКонтрагента; 
		Если ДанныеДокумента.ОстатокНаНачало > 0 Тогда
			ТекСтрока.НачОстатокПоДоговоруДт = ДанныеДокумента.ОстатокНаНачало;
			ТекСтрока.НачОстатокПоДоговоруКт = 0;
		Иначе
			ТекСтрока.НачОстатокПоДоговоруДт = 0;
			ТекСтрока.НачОстатокПоДоговоруКт = -ДанныеДокумента.ОстатокНаНачало;
        КонецЕсли;
		Результат.Добавить(ТекСтрока);
		Возврат Результат;		
	КонецЕсли;
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из ДанныеДокумента.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДоговоров = ДанныеДокумента.ПоДаннымОрганизации.Выгрузить(,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Дополним массив договорами из табличной части контрагента.
	ТаблицаДоговоровКонтрагента = ДанныеДокумента.ПоДаннымКонтрагента.Выгрузить(,"Договор");
	ТаблицаДоговоровКонтрагента.Свернуть("Договор");
	МассивДоговоровКонтрагента = ТаблицаДоговоровКонтрагента.ВыгрузитьКолонку("Договор");  
	
	УникальныеЗначения = Новый Соответствие;	
	Для Каждого Значение Из МассивДоговоров Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для Каждого Значение Из МассивДоговоровКонтрагента Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			МассивДоговоров.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросОстаткиДоговоров.УстановитьПараметр("Организация",   ДанныеДокумента.Организация);
	ЗапросОстаткиДоговоров.УстановитьПараметр("НачалоПериода", ДанныеДокумента.ДатаНачала);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаРасчета",  ФильтрСписокСчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Контрагент",    ДанныеДокумента.Контрагент);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Валюта",
		?(ДанныеДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета, Неопределено, ДанныеДокумента.ВалютаДокумента));
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("ГоловнаяОрганизация",
		?(ЗначениеЗаполнено(ДанныеДокумента.Организация.ГоловнаяОрганизация), ДанныеДокумента.Организация.ГоловнаяОрганизация, ДанныеДокумента.Организация));
		
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ЗапросОстаткиДоговоров.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("АктСверкиВВалюте",
		ДанныеДокумента.ВалютаДокумента <> ВалютаРегламентированногоУчета);   
		
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();   
	СчетаИсключенияДоп = ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам();
	Для Каждого Значение Из СчетаИсключенияДоп Цикл
		СчетаИсключения.Добавить(Значение);
	КонецЦикла;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);

	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
		
	ЗапросОстаткиДоговоров.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаРасчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОстальныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.Ссылка В (&Договоры)
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &ГоловнаяОрганизация
	|	И (&Валюта = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоДоговорамАкта
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В (&Договоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоОстальнымДоговорам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ОстальныеДоговоры.Ссылка
	|					ИЗ
	|						ОстальныеДоговоры КАК ОстальныеДоговоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДоговорамАкта.Договор КАК Договор,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоДоговорамАкта КАК ОстаткиПоДоговорамАкта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДоговорамАкта.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоОстальнымДоговорам.Договор КАК Договор,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоОстальнымДоговорам КАК ОстаткиПоОстальнымДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОстаткиПоОстальнымДоговорам.Договор = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоОстальнымДоговорам.Договор,
	|	ДоговорыКонтрагентов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Наименование";
	РезультатЗапроса = ЗапросОстаткиДоговоров.ВыполнитьПакет();
	РезультатЗапросаа = ЗапросОстаткиДоговоров.Выполнить();
	ВыборкаЗапроса4 = РезультатЗапроса[4].Выбрать();
	ВыборкаЗапроса5 = РезультатЗапроса[5].Выбрать();
		
	Пока ВыборкаЗапроса4.Следующий() Цикл
		
		ТекСтрока = Новый Структура("Договор, НачОстатокПоДоговоруДт, НачОстатокПоДоговоруКт");
		ТекСтрока.Договор = ВыборкаЗапроса4.Договор;
		ТекСтрока.НачОстатокПоДоговоруДт = ВыборкаЗапроса4.НачОстатокПоДоговоруДт;
		ТекСтрока.НачОстатокПоДоговоруКт = ВыборкаЗапроса4.НачОстатокПоДоговоруКт;
		Результат.Добавить(ТекСтрока);
		
	КонецЦикла; 
	
	Пока ВыборкаЗапроса5.Следующий() Цикл
		
		ТекСтрока = Новый Структура("Договор, НачОстатокПоДоговоруДт, НачОстатокПоДоговоруКт");
		ТекСтрока.Договор = ВыборкаЗапроса5.Договор;
		ТекСтрока.НачОстатокПоДоговоруДт = ВыборкаЗапроса5.НачОстатокПоДоговоруДт;
		ТекСтрока.НачОстатокПоДоговоруКт = ВыборкаЗапроса5.НачОстатокПоДоговоруКт;
		Результат.Добавить(ТекСтрока);
		
	КонецЦикла; 
	
	Возврат Результат;	
	
КонецФункции
	
&НаСервереБезКонтекста              
Функция сбисПолучитьНастройкиАктаСверки(Знач Контекст, Знач сбисОписаниеНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	сбисОписаниеНастроек.Значение = Документы.СверкаВзаиморасчетов.НастройкиПечатиПоУмолчанию();	
	сбисОписаниеНастроек.Значение.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Если Контекст.Свойство("Детализация") и Контекст.Детализация = "Договор" Тогда
		сбисОписаниеНастроек.Значение.ДетализацияВзаиморасчетов = 1;
		Если сбисОписаниеНастроек.Значение.Свойство("ДетализацияФинансовыхИнструментов") Тогда
			сбисОписаниеНастроек.Значение.ДетализацияФинансовыхИнструментов = 1;	
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат сбисОписаниеНастроек;
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДанныеВыборки(Знач Контекст)
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ДанныеЗапроса = Документы.СверкаВзаиморасчетов.ВыборкаДанныхДокумента(Контекст.Объекты, Контекст.Настройки);
	Исключение
		ЗапросДанныеНаПечать = Документы.СверкаВзаиморасчетов.ЗапросДанныеНаПечать(Контекст.Объекты, Контекст.Настройки);
		ДанныеЗапроса = ЗапросДанныеНаПечать.Выполнить();
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабЧастьДокумента	= Новый Массив;    
	ДанныеПоОстакам		= Новый Структура("НачальныйОстатокДебет, НачальныйОстатокКредит, НачальныйОстатокДебетКонтрагент, НачальныйОстатокКредитКонтрагент", 0,0,0,0);	
	ДанныеПоОстакамТекущее = Новый Структура("НачальныйОстатокДебет, НачальныйОстатокКредит, НачальныйОстатокДебетКонтрагент, НачальныйОстатокКредитКонтрагент", 0,0,0,0);	
	Если НЕ ДанныеЗапроса.Пустой() Тогда
		ДанныеДокумента = ДанныеЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		Возврат Новый Структура("ТабЧастьДокумента, Остатки",ТабЧастьДокумента, Неопределено);
	КонецЕсли;
	Если Не ДанныеДокумента.Следующий() Тогда
		Возврат Новый Структура("ТабЧастьДокумента, Остатки",ТабЧастьДокумента, Неопределено);
	КонецЕсли;
	
	ДанныеПоТипуРасчетов = ДанныеДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ДанныеПоТипуРасчетов.Следующий() Цикл		
		ВыборкаПоДетальнымРасчетам = ДанныеПоТипуРасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
			Если	ВыборкаПоДетальнымРасчетам.НачальноеСальдоДт <> 0
				Или ВыборкаПоДетальнымРасчетам.НачальноеСальдоКт <> 0
				Или ВыборкаПоДетальнымРасчетам.ЕстьОбороты Тогда
				сбисЗаполнитьДанныеПоНачальнымОстаткам(ВыборкаПоДетальнымРасчетам, ДанныеПоОстакамТекущее, Контекст.Настройки);
				
				Для Каждого КлючЗнач Из ДанныеПоОстакамТекущее Цикл
					
					ДанныеПоОстакам[КлючЗнач.Ключ] = ДанныеПоОстакам[КлючЗнач.Ключ] + КлючЗнач.Значение;
					
				КонецЦикла;
				
				сбисСформироватьДетальнуюЗаписьВзаиморасчетов(ТабЧастьДокумента, ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ДанныеПоОстакам, Контекст.Настройки);
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	Возврат Новый Структура("ТабЧастьДокумента, Остатки", ТабЧастьДокумента, ДанныеПоОстакам);	
КонецФункции

&НаСервереБезКонтекста
Процедура сбисЗаполнитьДанныеПоНачальнымОстаткам(ВыборкаДетальныхЗаписей, ДанныеПоОстакам, НастройкиПечати)
	
	ДанныеПоОстакам.НачальныйОстатокДебет = ВыборкаДетальныхЗаписей.НачальноеСальдоДт;
	ДанныеПоОстакам.НачальныйОстатокКредит = Мин(-ВыборкаДетальныхЗаписей.НачальноеСальдоКт, ВыборкаДетальныхЗаписей.НачальноеСальдоКт);//Для совместимости со старыми функциями, должно быть отрицательное значение
	
	ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдоКт;
	ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = Мин(-ВыборкаДетальныхЗаписей.НачальноеСальдоДт, ВыборкаДетальныхЗаписей.НачальноеСальдоДт);//Для совместимости со старыми функциями, должно быть отрицательное значение
	
	Если НЕ ВыборкаДетальныхЗаписей.ФинансовыеИнструменты И НЕ НастройкиПечати.ДолгКакДебет Тогда
		Если ВыборкаДетальныхЗаписей.НачальноеСальдо > 0 Тогда
			ДанныеПоОстакам.НачальныйОстатокДебет = ВыборкаДетальныхЗаписей.НачальноеСальдо;
			ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдо;
		Иначе
			ДанныеПоОстакам.НачальныйОстатокКредит = -ВыборкаДетальныхЗаписей.НачальноеСальдо;
			//ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = -ВыборкаДетальныхЗаписей.НачальноеСальдо;
			ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдо;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = 0;
		ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = 0;
	КонецЕсли;
КонецПроцедуры

// Функция заполняет данные по строкам акта сверки для конфигурации УТ11.4.8 и выше	
&НаСервереБезКонтекста
Функция сбисСформироватьДетальнуюЗаписьВзаиморасчетов(ТабЧастьДокумента, ВыборкаДетальныхЗаписей, ДанныеДокумента, ДанныеПоОстакам, НастройкиПечати)
	Перем ДетальныеЗаписи;
	Если ВыборкаДетальныхЗаписей.ЕстьОбороты Тогда
		ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
		Пока ДетальныеЗаписи.Следующий() Цикл
			Если ДетальныеЗаписи.ОписаниеДокумента = NULL Тогда
				Продолжить;
			КонецЕсли;
			ДатаДокумента		= Формат(ДетальныеЗаписи.ДатаДокумента, "ДФ='дд.ММ.гггг'");
			НомерДокумента		= ДетальныеЗаписи.НомерДокумента;			
			НазваниеДокумента	= ?(ДетальныеЗаписи.ОписаниеДокумента = NULL, "", ДетальныеЗаписи.ОписаниеДокумента);
			мПараметр		= Новый Структура("Дата, Номер", Новый Структура("Параметр_Имя, Параметр_Значение", "Дата", ДатаДокумента), Новый Структура("Параметр_Имя, Параметр_Значение", "Номер", ДетальныеЗаписи.НомерДокумента));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("ТаблДок_Дата",		ДатаДокумента); 
			НоваяСтрока.Вставить("ТаблДок_Номер",		НомерДокумента);
			НоваяСтрока.Вставить("ТаблДок_Примечание",	НазваниеДокумента); 
			НоваяСтрока.Вставить("ДокументТабл",		ДетальныеЗаписи.РасчетныйДокумент);
			НоваяСтрока.Вставить("ТаблДок_Дебет",		ДетальныеЗаписи.СуммаДебет);
			НоваяСтрока.Вставить("ТаблДок_Кредит",		ДетальныеЗаписи.СуммаКредит);
			НоваяСтрока.Вставить("ТаблДок_Раздел",		"Отправитель");
			НоваяСтрока.Вставить("мОснование",			Новый Структура);
			НоваяСтрока.Вставить("мПараметр",			мПараметр);
			Основание = Неопределено;
			
			НоваяСтрокаПоДаннымКонтрагента = Новый Структура;
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дата",			ДатаДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Номер",		НомерДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Примечание",	НазваниеДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ДокументТабл",			ДетальныеЗаписи.РасчетныйДокумент); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дебет",		ДетальныеЗаписи.СуммаДебетКонтрагент);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Кредит",		ДетальныеЗаписи.СуммаКредитКонтрагент);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Раздел",		"Получатель");
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мОснование",			Новый Структура);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мПараметр",			мПараметр); 
			
			КлючДетализации = "Договор";
			Если НастройкиПечати.ДетализацияВзаиморасчетов = "Договор" Тогда 
				мОснование = ДетальныеЗаписи.ОбъектГруппировки;
				Если мОснование = Неопределено Тогда
					мОснование = ДетальныеЗаписи.Договор;
				КонецЕсли;
			Иначе
				мОснование = ДетальныеЗаписи.ДокументСсылка;
				КлючДетализации = "Документ";
			КонецЕсли;
			сбисОснование = Новый Структура;
			сбисОснование.Вставить("Основание",			мОснование);
			сбисОснование.Вставить("Основание_Название",Строка(мОснование));
			сбисОснование.Вставить("Основание_Номер",	мОснование.Номер);
			сбисОснование.Вставить("Основание_Дата",	Формат(мОснование.Дата,"ДФ=dd.MM.yyyy"));
			сбисОснование.Вставить("НачальноеСальдоДт",	ДетальныеЗаписи.НачальноеСальдоДт);
			сбисОснование.Вставить("НачальноеСальдоКт", ДетальныеЗаписи.НачальноеСальдоКт);
			сбисОснование.Вставить("КонечноеСальдоДт",	ДетальныеЗаписи.КонечноеСальдоДт);
			сбисОснование.Вставить("КонечноеСальдоКт",	ДетальныеЗаписи.КонечноеСальдоКт);

			НоваяСтрока.мОснование.Вставить(КлючДетализации, сбисОснование);
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Вставить(КлючДетализации, сбисОснование);
			ТабЧастьДокумента.Добавить(НоваяСтрока);
			ТабЧастьДокумента.Добавить(НоваяСтрокаПоДаннымКонтрагента);		
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТабЧастьДокумента;
	
КонецФункции

//Функция заполняет договор в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьДоговорУНФ(Контекст) Экспорт
	
	ОшибкаПоиска = Ложь;
	сбисРезультат = сбисПолучитьДоговорУНФ_Сервер(Контекст.Документ, Контекст.СтруктураФайла, ОшибкаПоиска);
	Если ОшибкаПоиска Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат сбисРезультат;
	
КонецФункции

&НаКлиенте
функция ПолучитьСкладУНФ(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеПользователяПоУмолчанию_УНФ_Сервер(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции	

&НаСервереБезКонтекста
Функция СуммаВключаетНДС_УНФ(Знач Контекст) Экспорт
	Если Не Контекст.Документ.Свойство("НалогообложениеНДС") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Контекст.Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
КонецФункции

&НаКлиенте
Функция УчитыватьНДС(Контекст) Экспорт
	//Функция определяет необходимость учитывать НДС в загружаемых документах	
	УчитыватьНДС = Ложь;
	Для каждого ИмяТаблЧасть из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		Если Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ) Тогда
			ТаблЧасть = Контекст.Документ[ИмяТаблЧасть.Ключ];
			//выбираем строки из табличной части
			Для каждого Стр из ТаблЧасть Цикл
				Если Стр.Свойство("СтавкаНДС") и нрег(Стр.СтавкаНДС) <> "без ндс" Тогда
					УчитыватьНДС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если УчитыватьНДС Тогда
			//если уже нашли строки в которых ставка <> "без ндс", то остальные табличные части не проверяем
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат УчитыватьНДС;
КонецФункции

//Функция определяет необходимость учитывать НДС в загружаемых документах	
&НаСервереБезКонтекста
Функция УчитыватьНДС_УНФ(Знач Контекст) Экспорт
	Для Каждого ИмяТаблЧасть Из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		ТаблЧасть = Неопределено;
		Если Не Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ, ТаблЧасть) Тогда
			Продолжить;
		КонецЕсли;
		//выбираем строки из табличной части
		Для Каждого Стр Из ТаблЧасть Цикл
			Если Стр.Свойство("СтавкаНДС") И НРег(Стр.СтавкаНДС) <> "без ндс" Тогда
				Возврат Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	Возврат Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
КонецФункции

&НаКлиенте
Функция ПолучитьИННКППСтороны(Контекст) Экспорт
	Перем Сторона;
	МассивПолей = РазбитьСтрокуВМассивНаКлиенте("ИНН,КПП", ",");
	Если Не Контекст.ТекущееПолеИни.Свойство("РассчитанноеЗначение", Сторона) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	ФЮЛ = ?(Сторона.Свойство("СвЮЛ") И ЗначениеЗаполнено(Сторона.СвЮЛ), "СвЮЛ", 
		?(Сторона.Свойство("СвФЛ") И ЗначениеЗаполнено(Сторона.СвФЛ), "СвФЛ", ""));
	Для Каждого Поле Из МассивПолей Цикл
		Результат.Вставить(Поле);
		Если ЗначениеЗаполнено(ФЮЛ) Тогда
			Сторона[ФЮЛ].Свойство(Поле, Результат[Поле]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
	
////////////////////////////////////////////////////
/////////////////Табличная часть////////////////////

&НаКлиенте
Функция ЗаполнитьЕдиницуИзмеренияУНФ(Контекст) Экспорт
	Если Контекст.СтрТабл.ЕдиницаИзмерения = Неопределено Тогда
		сбисКонтекстСервер = Новый Структура("Ссылка, ИмяРеквизита", Контекст.СтрТабл.Номенклатура, "ЕдиницаИзмерения");
		Возврат СбисПолучитьРеквизит(сбисКонтекстСервер);
	КонецЕсли;
	Возврат ЗаполнитьЕдиницуИзмерения(Контекст);
КонецФункции

//Функция заполняет ставку НДС в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьСтавкуНДС(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Перечисления.СтавкиНДС"); 
	Если	Не Контекст.СтрТабл.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
		Если	Не Контекст.Переменные.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
			Если Контекст.Свойство("СтрокаФайла") тогда
				сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрокаФайла);
			Иначе
				сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрТабл);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если сбисОписаниеОбъекта.Ключ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьСтавкуНДС_Перечисление_НаСервере(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция заполняет ставку НДС в загружаемых документах если это справочник со значениями ставок	
&НаКлиенте
Функция ЗаполнитьСтавкуНДСИзСправочника(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.СтавкиНДС"); 
	Если	Не Контекст.СтрТабл.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
		Если	Не Контекст.Переменные.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
			сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрокаФайла);
		КонецЕсли;
	КонецЕсли;
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьСтавкуНДС_Справочник_НаСервере(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция определяет название табличной части документа поступления, в которую нужно загружать данные	
&НаКлиенте
Функция сбисИмяТЧ(Контекст) Экспорт
	сбисСтрТабл	= Неопределено;
	сбисИмяТЧ	= "Товары";
	Если	Не Контекст.Свойство("СтрТабл", сбисСтрТабл)
		Или	Не сбисСтрТабл.Свойство("Номенклатура") Тогда
		//Что-то не заполнено, считаем что это товары (старая логика)
	ИначеЕсли сбисНоменклатураУслуга(Контекст) Тогда
		//UAA Немного меняется логика: теперь сперва проверяем формат и тип и если ничего не соответсвует, то проверяем признак услуги
		сбисИмяТЧ = "Услуги";	
	ИначеЕсли сбисНоменклатура1СУслуга_Сервер(Новый Структура("Номенклатура", сбисСтрТабл.Номенклатура)) Тогда
		сбисИмяТЧ = "Услуги";	
	КонецЕсли;	
	Возврат сбисИмяТЧ;
КонецФункции

//Функция определяет название табличной части документа поступления, в которую нужно загружать данные	
&НаКлиенте
Функция сбисИмяТЧ_УНФ(Контекст) Экспорт
	Если	Контекст.Свойство("СтрТабл")
		И	Контекст.СтрТабл.Свойство("Номенклатура")
		И	сбисНоменклатура1СЗапас_УНФ_Сервер(Новый Структура("Номенклатура", Контекст.СтрТабл.Номенклатура))Тогда
		Возврат "Запасы";
	Иначе
		Возврат "Расходы";
	КонецЕсли;
КонецФункции

//Функция возвращает вид номенклатуры по признаку услуги позиции
&НаКлиенте
Функция сбисНоменклатураВид(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.ВидыНоменклатуры", "Товары"); 
	Если сбисНоменклатураУслуга(Контекст) Тогда
		сбисОписаниеОбъекта.Ключ = "Услуги";
	КонецЕсли;
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция возвращает признак номенклатуры услуга по данным файла
&НаКлиенте
Функция сбисНоменклатураУслуга(Контекст) Экспорт
	Перем ВидОперации;
	Возврат	(	Контекст.СтруктураФайла.Файл.Формат = "АктВР"
		И	Не	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр", ВидОперации)
		И	ВидОперации.Свойство("ДокументВидОперации", ВидОперации)
		И	ВидОперации = "АктПП"))
			Или (	Контекст.Свойство("СтрТабл")
				И	Контекст.СтрТабл.Свойство("Тип")
				И	(	Контекст.СтрТабл.Тип = "2" 
					Или	Контекст.СтрТабл.Тип = "3"));
КонецФункции

//Функция возвращает тип номенклатуры по признаку услуги позиции для БГУ2
&НаКлиенте
Функция сбисТипНоменклатурыБГУ(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Перечисления.ТипыНоменклатуры", "ПрочиеМЗ"); 
	Если сбисНоменклатураУслуга(Контекст) Тогда
		сбисОписаниеОбъекта.Ключ = "Услуга";
	КонецЕсли;
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции


&НаКлиенте
Функция сбисПроверитьЗаполнитьШтрихкод(Контекст) Экспорт
	
	сбисКонтекстСервер = Новый Структура("Ини, Документ, СтрТабл, СтрокаФайла");
	ЗаполнитьЗначенияСвойств(сбисКонтекстСервер, Контекст);
	сбисПроверитьЗаполнитьШтрихкод_Сервер(сбисКонтекстСервер);
	
КонецФункции

//Функция рассчитывает цену из суммы и количества
&НаКлиенте
Функция сбисРассчитатьЦену(Контекст) Экспорт
	Попытка
		СтрТабл = Контекст.СтрТабл;
		СуммаСНДС = Число(?(СтрТабл.Свойство("СуммаСНДС"), СтрТабл.СуммаСНДС, ?(СтрТабл.Свойство("Сумма"), СтрТабл.Сумма, ?(СтрТабл.Свойство("СуммаБезНал"), СтрТабл.СуммаБезНал, 0))));
		Если Не ЗначениеЗаполнено(СуммаСНДС) Тогда
			Строкафайла = Контекст.СтрокаФайла;
			СуммаСНДС = Число(?(СтрокаФайла.Свойство("СуммаСНДС"), СтрокаФайла.СуммаСНДС, ?(СтрокаФайла.Свойство("Сумма") И Число(СтрокаФайла.Сумма) <> 0, СтрокаФайла.Сумма, СтрокаФайла.СуммаБезНал)));
		КонецЕсли;
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И СуммаСНДС = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			Цена = ПолучитьЗначениеПоФункцииНаКлиентеНаСервереБезКонтекста(Контекст, Контекст.Переменные.ФункцияРасчетаЦенПоДанным1С);
		Иначе
			Цена = ?(НЕ СтрТабл.Свойство("Количество") ИЛИ СтрТабл.Количество = Неопределено ИЛИ Число(СтрТабл.Количество) = 0, Окр(СуммаСНДС, 2), Окр(СуммаСНДС / Число(СтрТабл.Количество), 2));
		КонецЕсли;
		Возврат Цена;
	Исключение
	КонецПопытки;
КонецФункции

// Рассчитывает функцию на сервере без контекста, вычленяя параметры, которые формируются из контекста
// Учитывайте, что параметрами функции должен быть возможен обмен с сервером
&НаКлиенте
Функция ПолучитьЗначениеПоФункцииНаКлиентеНаСервереБезКонтекста(Контекст, ФункцияСПараметрамиСтрокой) Экспорт
	Попытка
		ФункцияСтрокой = "";
		ИмяФункцииЗаполнено = Ложь;
		МассивПараметровКонтекста = Новый Массив;
		ПараметрСтрокой = "";
		СчетчикПараметров = 0;
		ЭтоСтрокаПараметр = Ложь;
		
		Для i = 1 По СтрДлина(ФункцияСПараметрамиСтрокой) Цикл
			Символ = Сред(ФункцияСПараметрамиСтрокой, i, 1);
			Если НЕ ИмяФункцииЗаполнено Тогда
				ФункцияСтрокой = ФункцияСтрокой + Символ;
				Если Символ = "(" Тогда
					ИмяФункцииЗаполнено = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если Символ = """" ИЛИ ЭтоСтрокаПараметр Тогда
				Если НЕ ЭтоСтрокаПараметр Тогда
					ФункцияСтрокой = ФункцияСтрокой + ПараметрСтрокой;
					ПараметрСтрокой = "";
				КонецЕсли;
				Если НЕ ЭтоСтрокаПараметр ИЛИ Символ = """" Тогда
					ЭтоСтрокаПараметр = НЕ ЭтоСтрокаПараметр;
				КонецЕсли;
				ФункцияСтрокой = ФункцияСтрокой + Символ;
			ИначеЕсли Символ <> "," И Символ <> ")" Тогда
				ПараметрСтрокой = ПараметрСтрокой + Символ;
				Если Символ = "(" Тогда
					ФункцияСтрокой = ФункцияСтрокой + ПараметрСтрокой;
					ПараметрСтрокой = "";
				КонецЕсли;
			ИначеЕсли ПустаяСтрока(ПараметрСтрокой) Тогда 
				ФункцияСтрокой = ФункцияСтрокой + Символ;
			Иначе
				ФункцияСтрокой = ФункцияСтрокой + "МассивПараметровКонтекста[" + СчетчикПараметров + "]" + Символ;
				Попытка
					Параметр = Вычислить(СокрЛП(ПараметрСтрокой));
				Исключение
					МассивПараметр = РазбитьСтрокуВМассивНаКлиенте(СокрЛП(ПараметрСтрокой), ".");
					Для k = 0 По МассивПараметр.ВГраница() Цикл
						Если k = 0 Тогда
							Параметр = Контекст[МассивПараметр[k]];
						Иначе
							Параметр = Параметр[МассивПараметр[k]];
						КонецЕсли;
					КонецЦикла;	
				КонецПопытки;
				МассивПараметровКонтекста.Добавить(Параметр);
				СчетчикПараметров = СчетчикПараметров + 1;
				ПараметрСтрокой = "";
			КонецЕсли;
		КонецЦикла;
		
		Возврат ПолучитьЗначениеПоФункцииНаСервереБезКонтекста(ФункцияСтрокой, МассивПараметровКонтекста);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Возвращает рассчитанное значение функции по параметрам на сервере без контекста
// см. ПолучитьЗначениеПоФункцииНаКлиентеНаСервереБезКонтекста
&НаСервереБезКонтекста
Функция ПолучитьЗначениеПоФункцииНаСервереБезКонтекста(ФункцияСтрокой, МассивПараметровКонтекста)
	Попытка
		Возврат Вычислить(ФункцияСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Функция рассчитывает сумму из цены и количества
&НаКлиенте
Функция сбисРассчитатьСумму(Контекст) Экспорт
	Попытка
		Строкафайла = Контекст.СтрокаФайла;
		СуммаСНДС = Число(?(СтрокаФайла.Свойство("СуммаСНДС"), СтрокаФайла.СуммаСНДС, ?(СтрокаФайла.Свойство("Сумма") И Число(СтрокаФайла.Сумма) <> 0, СтрокаФайла.Сумма, СтрокаФайла.СуммаБезНал)));
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И СуммаСНДС = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			СуммаСНДС = ?(НЕ Контекст.СтрТабл.Свойство("Количество") ИЛИ Контекст.СтрТабл.Количество = Неопределено ИЛИ Число(Контекст.СтрТабл.Количество) = 0, Окр(Число(Контекст.СтрТабл.Цена), 2), Окр(Число(Контекст.СтрТабл.Цена) * Число(Контекст.СтрТабл.Количество), 2));
		КонецЕсли;
		
		Возврат СуммаСНДС;
	Исключение
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисПересчитыватьЦеныПоДанным1С(Контекст) Экспорт
	Попытка
		Возврат ?(МестныйКэш.Парам.Свойство("ПересчитыватьЦеныПоДанным1С"),МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С,0);
	Исключение
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисПересчитыватьНДСПоДанным1С(Контекст) Экспорт
	Попытка
		Возврат ?(МестныйКэш.Парам.Свойство("ПересчитыватьНДСПоДанным1С"),МестныйКэш.Парам.ПересчитыватьНДСПоДанным1С,0);
	Исключение
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьКоличество(Контекст) Экспорт
	Попытка
		Количество = Число(Контекст.СтрокаФайла.Кол_во); 
		Если Контекст.СтрокаФайла.Свойство("Коэффициент") и ЗначениеЗаполнено(Контекст.СтрокаФайла.Коэффициент) и Контекст.СтрокаФайла.Коэффициент <> "0" Тогда
			Если Найти(Контекст.СтрокаФайла.Коэффициент, "-") Тогда
				Коэф = Число(Сред(Контекст.СтрокаФайла.Коэффициент, 2, СтрДлина(Контекст.СтрокаФайла.Коэффициент)));
				Если не Коэф = 0 Тогда 
					Количество = Количество/Коэф;   
				КонецЕсли;	
			Иначе
				Коэф = Число(Контекст.СтрокаФайла.Коэффициент);
				Количество = Количество*Коэф;
			КонецЕсли					
		КонецЕсли;
		Возврат Формат(Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
	Исключение
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьЦенуИзАктаПриемки(Контекст) Экспорт
	Цена = 0;
	Попытка
		Если Контекст.СтрокаФайла.ПоФакту.Свойство("Цена") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.Цена) и Число(Контекст.СтрокаФайла.ПоФакту.Цена) <> 0 Тогда
				Цена = Число(Контекст.СтрокаФайла.ПоФакту.Цена);
			КонецЕсли;
		ИначеЕсли Контекст.СтрокаФайла.ПоФакту.Свойство("Сумма") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.Сумма) и Число(Контекст.СтрокаФайла.ПоФакту.Сумма) <> 0 Тогда
				Цена = Число(Контекст.СтрокаФайла.ПоФакту.Сумма) / ?(Контекст.СтрокаФайла.ПоФакту.Кол_во = Неопределено ИЛИ Число(Контекст.СтрокаФайла.ПоФакту.Кол_во) = 0, 1, Число(Контекст.СтрокаФайла.ПоФакту.Кол_во));
			КонецЕсли;
		КонецЕсли;
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И Число(Контекст.СтрокаФайла.ПоФакту.Сумма) = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			Цена = ПолучитьЗначениеПоФункцииНаКлиентеНаСервереБезКонтекста(Контекст, Контекст.Переменные.ФункцияРасчетаЦенПоДанным1С);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат Цена;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьСуммуИзАктаПриемки(Контекст) Экспорт
	Сумма = 0;
	Попытка
		Сумма = Контекст.СтрокаФайла.ПоФакту.Сумма;
		
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И Число(Контекст.СтрокаФайла.ПоФакту.Сумма) = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			Сумма = ?(НЕ Контекст.СтрТабл.Свойство("Количество") ИЛИ Контекст.СтрТабл.Количество = Неопределено ИЛИ Число(Контекст.СтрТабл.Количество) = 0, Окр(Число(Контекст.СтрТабл.Цена), 2), Окр(Число(Контекст.СтрТабл.Цена) * Число(Контекст.СтрТабл.Количество), 2));
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат Сумма;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьЦенуБезНДСИзАктаПриемки(Контекст) Экспорт
	ЦенаБезНДС = 0;
	Попытка
		Если Контекст.СтрокаФайла.ПоФакту.Свойство("ЦенаБезНДС") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.ЦенаБезНДС) и Число(Контекст.СтрокаФайла.ПоФакту.ЦенаБезНДС) <> 0 Тогда
				ЦенаБезНДС = Число(Контекст.СтрокаФайла.ПоФакту.ЦенаБезНДС);
			КонецЕсли;
		ИначеЕсли Контекст.СтрокаФайла.ПоФакту.Свойство("СуммаБезНал") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.СуммаБезНал) и Число(Контекст.СтрокаФайла.ПоФакту.СуммаБезНал) <> 0 Тогда
				ЦенаБезНДС = Число(Контекст.СтрокаФайла.ПоФакту.СуммаБезНал) / ?(Контекст.СтрокаФайла.ПоФакту.Кол_во = Неопределено ИЛИ Число(Контекст.СтрокаФайла.ПоФакту.Кол_во) = 0, 1, Число(Контекст.СтрокаФайла.ПоФакту.Кол_во));
			КонецЕсли;
		КонецЕсли;
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И Число(Контекст.СтрокаФайла.ПоФакту.СуммаБезНал) = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			ЦенаБезНДС = ПолучитьЗначениеПоФункцииНаКлиентеНаСервереБезКонтекста(Контекст, Контекст.Переменные.ФункцияРасчетаЦенПоДанным1С);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат ЦенаБезНДС;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьСуммуБезНДСИзАктаПриемки(Контекст) Экспорт
	СуммаБезНал = 0;
	Попытка
		СуммаБезНал = Контекст.СтрокаФайла.ПоФакту.СуммаБезНал;
		
		Если (МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 0 И Число(Контекст.СтрокаФайла.ПоФакту.СуммаБезНал) = 0	// При незаполненных цене и сумме 
				ИЛИ МестныйКэш.Парам.ПересчитыватьЦеныПоДанным1С = 1)			// Пересчитывать всегда
				И Контекст.Переменные.Свойство("ФункцияРасчетаЦенПоДанным1С") Тогда
			СуммаБезНал = ?(НЕ Контекст.СтрТабл.Свойство("Количество") ИЛИ Контекст.СтрТабл.Количество = Неопределено ИЛИ Число(Контекст.СтрТабл.Количество) = 0, Окр(Число(Контекст.СтрТабл.ЦенаБезНДС), 2), Окр(Число(Контекст.СтрТабл.ЦенаБезНДС) * Число(Контекст.СтрТабл.Количество), 2));
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат СуммаБезНал;
КонецФункции

