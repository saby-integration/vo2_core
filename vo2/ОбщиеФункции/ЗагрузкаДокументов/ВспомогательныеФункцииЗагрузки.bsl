
////////////////////////////////////////////////////
/////////Вспомогательные функции загрузки///////////

//Функция возвращает Основание(СчетФактураПолученный) в корр. счет-фактуру
&НаСервереБезКонтекста
Функция ЗаполнитьДокументОснованиеКСчФБГУ2НаСервере(Знач Контекст, Отказ)
	
	Док = Документы.СчетФактураПолученный.ПустаяСсылка();
	Контрагент = Контекст.Контрагент;
	
	ДокументПоступленияДата = сбисСтрокаВДату(Контекст.ДокументПоступленияДата);
	ДокументПоступленияНомер = Контекст.ДокументПоступленияНомер;
	Если Контекст.Файл_Формат = "счФактКор" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.НомерПервичногоДокумента,
		|	СчетФактураПолученный.ДатаПервичногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДатаПервичногоДокумента МЕЖДУ &ДатаОт И &ДатаДо
		|	И СчетФактураПолученный.НомерПервичногоДокумента В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	КонецЕсли;
	
	ДокументПоступленияНомерСписок = Новый СписокЗначений;
	ДокументПоступленияНомерСписок.Добавить(ДокументПоступленияНомер);
	//Удаление префиксов и лидирующих нулей
	НомерОбъекта = ДокументПоступленияНомер;
	Если Найти(НомерОбъекта,"-")=0 Тогда НомерОбъекта = "000-" + НомерОбъекта; КонецЕсли;
	Ном1 = Лев(НомерОбъекта,Найти(НомерОбъекта,"-")-1);
	Ном2 = Прав(НомерОбъекта,СтрДлина(НомерОбъекта)-Найти(НомерОбъекта,"-"));
	СтрДл = СтрДлина(ном1);т = 1;СтрНом = "";
	Пока т <= СтрДл Цикл
		б = Сред(Ном1, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном1 = СтрНом;
	СтрДл = СтрДлина(Ном2);т = 1;СтрНом = "";
	Пока т <= СтрДл Цикл
		б = Сред(Ном2, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном2 = СтрНом;	
	НомерОбъекта = ?(Ном1="",Ном2,Ном1+"-"+Ном2);
	Если НомерОбъекта <> ДокументПоступленияНомер Тогда ДокументПоступленияНомерСписок.Добавить(НомерОбъекта); КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер",		ДокументПоступленияНомерСписок);
	Запрос.УстановитьПараметр("ДатаОт",		НачалоДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("ДатаДо",		КонецДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
	Запрос.Текст = ТекстЗапроса;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",773,"Неизвестная ошибка при выполнении метода",ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда     
		Результат = Выборка.Ссылка;
	Иначе
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",779,"Не найден объект","Не найден исходный документ");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КорректировкаРеализации_ЗаполнитьТоварыПоИсходнымДанным_УТ11_Сервер(Контекст)  
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Заполнение корректируемых данных по основанию
	Попытка
		Документы.КорректировкаРеализации.СформироватьВременнуюТаблицуИсходныхДанных(МенеджерВременныхТаблиц, Контекст.Основание);
	Исключение
		МодульОбъектаСервер().УТ11_4_СформироватьВременнуюТаблицуИсходныхДанных(МенеджерВременныхТаблиц, Контекст.Основание);
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ ИсходныеДанные КАК ИсходныеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныеДанные.НомерСтроки
	|";
	
	Возврат МодульОбъектаСервер().РезультатЗапросаНаКлиент(Запрос.Выполнить());
	
КонецФункции

&НаСервереБезКонтекста
функция ПолучитьСкладБГУНаСервере()  
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦМО.Ссылка
		|ИЗ
		|	Справочник.ЦМО КАК ЦМО
		|ГДЕ
		|	ЦМО.ПометкаУдаления = ЛОЖЬ";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			НайденОдинЦМО = Выборка.Количество() = 1;
			Если НайденОдинЦМО Тогда
				Возврат Выборка.Ссылка;
			Иначе 
				Возврат Справочники.ЦМО.ПустаяСсылка();
			КонецЕсли;	
		Иначе 
			Возврат Справочники.ЦМО.ПустаяСсылка();	
		КонецЕсли;	
КонецФункции

// Функция заполняет ДокументПоступления в загружаемых документах	
&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеИсходногоДокументаНаСервере(Знач Контекст, Отказ)
	Перем ТипДокументаОснования, ТекстЗапросаШаблон;	
	Если Не Контекст.Свойство("ТипОснования", ТипДокументаОснования) Тогда
    	Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = Контекст.Контрагент;
	
	ДокументПоступленияДата		= сбисСтрокаВДату(Контекст.ДокументПоступленияДата);
	ДокументПоступленияНомер	= Контекст.ДокументПоступленияНомер;
	
	ИмяРеквизитаНомерВходящего	= "НомерВходящегоДокумента";
	ИмяРеквизитаДатаВходящего	= "ДатаВходящегоДокумента";
	ЭтоКорректировка	=	Контекст.Файл_Формат = "счФактКор" 
						Или	Контекст.Файл_Формат = "УкдКсчфДис"
						Или	Контекст.Файл_Формат = "УпдСчфДоп";
						
	Если Контекст.Свойство("ТекстЗапросаШаблон", ТекстЗапросаШаблон) Тогда
		//Берётся переданный шаблон					
	ИначеЕсли ЭтоКорректировка Тогда
		ТекстЗапросаШаблон = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураПолученный.ДокументОснование КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.{РеквизитДатаВх} МЕЖДУ &ДатаОт И &ДатаДо
		|	И СчетФактураПолученный.{РеквизитНомерВх} В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	Иначе
		ТекстЗапросаШаблон = "ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.{ТипДокументаОснования} КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.{РеквизитДатаВх} МЕЖДУ &ДатаОт И &ДатаДо
		|	И ПоступлениеТоваровУслуг.{РеквизитНомерВх} В ИЕРАРХИИ(&Номер)
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстЗапросаШаблон,
					"{РеквизитДатаВх}",			ИмяРеквизитаДатаВходящего),
					"{РеквизитНомерВх}",		ИмяРеквизитаНомерВходящего),
					"{ТипДокументаОснования}",	ТипДокументаОснования);

	ДокументПоступленияНомерСписок = Новый СписокЗначений;
	ДокументПоступленияНомерСписок.Добавить(ДокументПоступленияНомер);
	//Удаление префиксов и лидирующих нулей
	НомерОбъекта = ДокументПоступленияНомер;
	Если Найти(НомерОбъекта,"-")=0 Тогда НомерОбъекта = "000-" + НомерОбъекта; КонецЕсли;
	Ном1 = Лев(НомерОбъекта,Найти(НомерОбъекта,"-")-1);
	Ном2 = Прав(НомерОбъекта,СтрДлина(НомерОбъекта)-Найти(НомерОбъекта,"-"));
	СтрДл = СтрДлина(ном1);т = 1;СтрНом = "";
   	Пока т <= СтрДл Цикл
		б = Сред(Ном1, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном1 = СтрНом;
	СтрДл = СтрДлина(Ном2);т = 1;СтрНом = "";
	Пока т <= СтрДл Цикл
		б = Сред(Ном2, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном2 = СтрНом;	
	НомерОбъекта = ?(Ном1="",Ном2,Ном1+"-"+Ном2);
	Если НомерОбъекта <> ДокументПоступленияНомер Тогда ДокументПоступленияНомерСписок.Добавить(НомерОбъекта); КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер",		ДокументПоступленияНомерСписок);
	Запрос.УстановитьПараметр("ДатаОт",		НачалоДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("ДатаДо",		КонецДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
	Запрос.Текст = ТекстЗапроса;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",773,"Неизвестная ошибка при выполнении метода",ОписаниеОшибки());
	КонецПопытки;
	Если Отказ И ЗначениеЗаполнено(ЭтоКорректировка) Тогда
		ИмяРеквизитаНомерВходящего	= "НомерИсходногоДокумента";
		ИмяРеквизитаДатаВходящего	= "ДатаИсходногоДокумента";
		
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстЗапросаШаблон,
					"{РеквизитДатаВх}",			ИмяРеквизитаДатаВходящего),
					"{РеквизитНомерВх}",		ИмяРеквизитаНомерВходящего),
					"{ТипДокументаОснования}",	ТипДокументаОснования);
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
			Отказ = Ложь;
		Исключение
			Отказ = Истина;
			Результат = Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатТЧ = Новый Структура;
		Док = Выборка.Ссылка;
		Для Каждого КлючИЗначениеТЧ Из Контекст.ТЧ Цикл
			Попытка	                                
				сбисЗаполнитьДанныеИсходнойТЧДокументаНаСервере(Док, КлючИЗначениеТЧ.Значение, КлючИЗначениеТЧ.Ключ, Отказ);
			Исключение
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", ОписаниеОшибки());
			КонецПопытки;
			РезультатТЧ.Вставить(КлючИЗначениеТЧ.Ключ, КлючИЗначениеТЧ.Значение);
		КонецЦикла;
		Результат = Новый Структура("ОснованиеСсылка, ТЧ", Док, РезультатТЧ);
	Иначе
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",779,"Не найден объект","Не найден исходный документ");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеИсходнойТЧДокументаНаСервере(ДокументОснованиеСсылка, СбисЗначениеТЧ, СбисКлючТЧ, Отказ)
	КлючиТчЗаполнить = СтрЗаменить("Количество,Сумма,Цена,СуммаНДС,СтавкаНДС", ",", Символы.ПС);
	Для Каждого СбисСтрокаТЧ Из СбисЗначениеТЧ Цикл
		Отбор = Новый Структура("Номенклатура", СбисСтрокаТЧ.Номенклатура);
		Если		СбисСтрокаТЧ.Свойство("ХарактеристикаНоменклатуры")
			И Не	СбисСтрокаТЧ.ХарактеристикаНоменклатуры = Неопределено Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СбисСтрокаТЧ.ХарактеристикаНоменклатуры);
		КонецЕсли;
		СтрокиТовараОснования = ДокументОснованиеСсылка[СбисКлючТЧ].НайтиСтроки(Отбор);
		Если Не СтрокиТовараОснования.Количество() Тогда
			//Нет строк, нечего обрабатывать.
			Продолжить;
		КонецЕсли;
		Для НомерСтрЗамены = 1 По СтрЧислоСтрок(КлючиТчЗаполнить) Цикл
			КлючТчЗамены = СтрПолучитьСтроку(КлючиТчЗаполнить, НомерСтрЗамены);
			Если СбисСтрокаТЧ.Свойство(КлючТчЗамены+"ДоИзменения") Тогда
				Попытка
					СбисСтрокаТЧ[КлючТчЗамены+"ДоИзменения"] = СтрокиТовараОснования[0][КлючТчЗамены];
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеНоменклатурыНаСервере(Знач Идентификатор) Экспорт
	Попытка
		Результат = Новый Структура("Номенклатура, Характеристика");
		Если Найти(Идентификатор,"#")>0 Тогда   // Ид номенклатуры, характеристики, упаковки, разделенные #
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,"#");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДТовара));	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХарактеристики));	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		ИначеЕсли Найти(Идентификатор,":")>0 Тогда   // Код номенклатуры, характеристики, упаковки, разделенные :
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,":");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ИДТовара);	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ИДХарактеристики);	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 и НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		Иначе   // код номенклатуры
			Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Идентификатор);	
			Если НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки
КонецФункции

// Функция возвращает договор после поиска.
&НаСервереБезКонтекста
Функция СбисНайтиДоговорНаСервере(Знач Контекст)
	Перем ДатаДоговора, НомерДоговора;
	
	Отказ = Ложь;
	НаименованиеРеквизитаОрганизация = РассчитатьЗначениеНаСервере("НаименованиеРеквизитаОрганизация",Контекст);	
	
	Если НаименованиеРеквизитаОрганизация = Неопределено Тогда
		НаименованиеРеквизитаОрганизация = "Организация";
	КонецЕсли;
	Организация = Контекст.Документ[НаименованиеРеквизитаОрганизация];
	Контрагент = Контекст.Документ.Контрагент;
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	Если	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр")
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорДата",	ДатаДоговора)
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорНомер", НомерДоговора) Тогда
		//Возможность поиска по дате и номеру договора
		Попытка
			ДатаДоговора = Дата(ДатаДоговора + " 00:00:00");
		Исключение
			ДатаДоговора = Неопределено;
			НомерДоговора = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не	(	ДатаДоговора = Неопределено
		И 	НомерДоговора = Неопределено) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Дата = &Дата
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
		Запрос.УстановитьПараметр("ВладелецДоговора",		Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора",	Организация);
		Запрос.УстановитьПараметр("Дата",					ДатаДоговора);
		Запрос.УстановитьПараметр("Номер",					НомерДоговора);	
		Попытка
			//Сначала пытаемся найти договор по дате, номеру
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	ИспользоватьОрганизациюВДоговоре = РассчитатьЗначениеНаСервере("ИспользоватьОрганизациюВДоговоре",Контекст);
	
	Если ВидДоговора = Неопределено Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		СписокВидовДоговора.Добавить(ВидДоговора);
	КонецЕсли;
	
	Если ИспользоватьОрганизациюВДоговоре = Неопределено Тогда
		ИспользоватьОрганизациюВДоговоре = Истина;
	КонецЕсли;
	
	СтруктураПараметров = Неопределено;
	
	Запрос = Новый Запрос;
	
	Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда
		ИмяРеквизитаОсновногоДоговора = "ОсновнойДоговорКонтрагента";
	ИначеЕсли Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ДоговорПоУмолчанию") <> Неопределено Тогда
		ИмяРеквизитаОсновногоДоговора = "ДоговорПоУмолчанию";
	Иначе
		ИмяРеквизитаОсновногоДоговора = "";
	КонецЕсли;
	
	Если ИмяРеквизитаОсновногоДоговора <> "" Тогда    // основной договор в реквизите контрагента
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
		|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
		| И ДоговорыКонтрагентов.Ссылка = СправочникВладелец."+ИмяРеквизитаОсновногоДоговора+"
		|ГДЕ
		|	&ТекстФильтра
		|
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ";
	Иначе   // основные договора в регистре сведений
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
		|			И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" = ОсновныеДоговорыКонтрагента.Организация
		|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
		|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
		|ГДЕ
		|	&ТекстФильтра
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ"
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецДоговора", Контрагент);
	Если ИспользоватьОрганизациюВДоговоре = Истина Тогда
		Запрос.УстановитьПараметр("ОрганизацияДоговора", Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	| И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","")
	+?(ИспользоватьОрганизациюВДоговоре = Истина,"
	| И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" В (&ОрганизацияДоговора)","");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Основной;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйДоговор;
	
КонецФункции	

&НаСервереБезКонтекста
Функция СбисНайтиДоговорБГУНаСервере(Знач Контекст)
	Перем ДатаДоговора, НомерДоговора;
	
	Отказ = Ложь;
	НаименованиеРеквизитаОрганизация = "Организация";
	Организация = Контекст.Документ[НаименованиеРеквизитаОрганизация];
	Контрагент = Контекст.Документ.Контрагент;  
	
	СписокВидовДоговора = Новый СписокЗначений;
	ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	ИспользоватьОрганизациюВДоговоре = РассчитатьЗначениеНаСервере("ИспользоватьОрганизациюВДоговоре",Контекст);
	
	Если ВидДоговора = Неопределено Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		СписокВидовДоговора.Добавить(ВидДоговора);
	КонецЕсли;
	
	НовыйДоговор = Справочники.Договоры.ПустаяСсылка();		
	Если	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр")
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорДата",	ДатаДоговора)
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорНомер", НомерДоговора) Тогда
		//Возможность поиска по дате и номеру договора
		Попытка
			ДатаДоговора = Дата(ДатаДоговора + " 00:00:00");
		Исключение
			ДатаДоговора = Неопределено;
			НомерДоговора = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не	(	ДатаДоговора = Неопределено
		И 	НомерДоговора = Неопределено) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.Договоры КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ДатаДоговора = &Дата
		|	И ДоговорыКонтрагентов.НомерДоговора = &Номер
		|	И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Контрагент = &ВладелецДоговора
		|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
		Запрос.УстановитьПараметр("ВладелецДоговора",		Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора",	Организация);
		Запрос.УстановитьПараметр("Дата",					ДатаДоговора);
		Запрос.УстановитьПараметр("Номер",					НомерДоговора);	 
		Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
		Попытка
			//пытаемся найти договор по дате, номеру, виду договора
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйДоговор = Выборка.Ссылка;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Возврат НовыйДоговор;
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьВалюту_Сервер(Знач сбисКодВалютыДокумента) Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду(сбисКодВалютыДокумента);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорСКлиентомУТ11_Сервер(Контекст)
	ДоговорПоУмолчанию = Неопределено;
	Попытка
		Контекст.Документ.Вставить("Партнер", Контекст.Документ.Контрагент.Партнер);
		Контекст.Документ.Вставить("Договор", ДоговорПоУмолчанию);
		ДоговорПоУмолчанию = Вычислить("ПродажиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,Перечисления.ХозяйственныеОперации.РеализацияКлиенту)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат ДоговорПоУмолчанию;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЗначениеПользователяПоУмолчанию_УНФ_Сервер(Знач сбисОписаниеОбъекта) Экспорт
	Попытка
		Возврат Вычислить("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(),сбисОписаниеОбъекта.Ключ)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьСоглашениеСКлиентомУТ11_Сервер(Знач Контекст)
	Соглашение = Неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", Истина, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Документы.ЗаказКлиента.ПустаяСсылка());
		Соглашение = Вычислить("ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Контекст.Контрагент.Партнер, ПараметрыОтбора)").Соглашение;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорУНФ_Сервер(Знач Документ, Знач СтруктураФайла, Отказ)
	ДоговорУНФ = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Контрагент = Документ.Контрагент;
	Организация = Документ.Организация;
	
	ДатаДоговора = Неопределено;
	НомерДоговора = Неопределено;
	мПараметр = СтруктураФайла;
	
	Запрос = Новый Запрос;
	
	Если	мПараметр.Свойство("Файл",			мПараметр)
		И	мПараметр.Свойство("Документ",		мПараметр)
		И	мПараметр.Свойство("Параметр",		мПараметр)
		И	мПараметр.Свойство("ДоговорДата",	ДатаДоговора)
		И	мПараметр.Свойство("ДоговорНомер",	НомерДоговора) Тогда
		Попытка
			ДатаДоговора = Дата(ДатаДоговора + " 00:00:00");
		Исключение
			Отказ = Истина;
			Возврат ОписаниеОшибки();
		КонецПопытки;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ДатаДоговора = &Дата
		|	И ДоговорыКонтрагентов.НомерДоговора = &Номер
		|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
		Запрос.УстановитьПараметр("ВладелецДоговора",		Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора",	Организация);
		Запрос.УстановитьПараметр("Дата",					ДатаДоговора);
		Запрос.УстановитьПараметр("Номер",					НомерДоговора);	
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;		
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	//ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	//Если ВидДоговора = Неопределено Тогда
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	//Иначе
	//	СписокВидовДоговора.Добавить(ВидДоговора);
	//КонецЕсли;
	СтруктураПараметров = Неопределено;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Приоритет,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДоговорУНФ = Выборка.Ссылка;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДоговорУНФ;
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорУТ11_Сервер(Контекст)
	Перем ХозяйственнаяОперацияПоиска, ДоговорПоУмолчанию;
	
	Контекст.Документ.Вставить("Партнер", Контекст.Документ.Контрагент.Партнер);
	Контекст.Документ.Вставить("Договор", Неопределено);

	СтрокаПолучитьДоговор = "ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,{ХозяйственнаяОперация}{ДополнительныеПараметрыОтбора})";
	
	// Расширение длявозможности настроить поиск
	// Хоз. операция
	Если Контекст.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперацияПоиска) Тогда
		
		СтрокаОперацияДоговора = "ХозяйственнаяОперацияПоиска";
		
	Иначе
		
		СтрокаОперацияДоговора = "Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика";
		
	КонецЕсли;
	
	// Доп. параметры
	СтрокаДополнительныеПараметры = "";
	Если Контекст.Свойство("ВалютаВзаиморасчетов") Тогда
		
		ДополнительныеПараметрыОтбора = Вычислить("ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров()");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыОтбора, Контекст);
		СтрокаДополнительныеПараметры = ", ДополнительныеПараметрыОтбора";
		
	КонецЕсли;
	
	СтрокаПолучитьДоговор = СтрЗаменить(СтрЗаменить(СтрокаПолучитьДоговор,	"{ХозяйственнаяОперация}",			СтрокаОперацияДоговора),
																			"{ДополнительныеПараметрыОтбора}",	СтрокаДополнительныеПараметры);
	
	Попытка
		
		ДоговорПоУмолчанию = Вычислить(СтрокаПолучитьДоговор);
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат ДоговорПоУмолчанию;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьСоглашениеУТ11_Сервер(Знач Контекст)
	Соглашение = Неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов, ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение", Истина, Истина, Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		РезультатЗапроса = Вычислить("ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Контекст.Контрагент.Партнер, ПараметрыОтбора)");
		Если Не РезультатЗапроса = Неопределено Тогда
			Соглашение = РезультатЗапроса.Соглашение;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьМенеджераУТ11_Сервер(Знач Контекст=Неопределено)
	ИдПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдПользователяИБ);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЕдиницуИзмерения_Справочник_НаСервере(Знач Контекст)
	СправочникМенеджерЕдиниц = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения", Контекст);
	Возврат СправочникМенеджерЕдиниц.НайтиПоКоду(Контекст.ОписаниеОбъекта.Ключ, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЕдиницуИзмеренияПоНаименованию_Справочник_НаСервере(Знач Контекст)
	СправочникМенеджерЕдиниц = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения", Контекст);
	Рез = СправочникМенеджерЕдиниц.НайтиПоНаименованию(Контекст.ОписаниеОбъекта.Ключ, Истина);
	Если Не ЗначениеЗаполнено(Рез) Тогда
		Рез = СправочникМенеджерЕдиниц.НайтиПоНаименованию(Контекст.ОписаниеОбъекта.Ключ);	
	КонецЕсли;
	Возврат Рез;
КонецФункции

//Получает ссылку объекта 1С (Справочник/ПланСчетов/Перечисление) по его описанию
&НаСервереБезКонтекста
Функция Объект1СПоОписанию(Знач СбисОбъект, Знач Режим="ПоКоду", Знач ТочноеСоответствие=Ложь, Знач Родитель=Неопределено, Знач Владелец=Неопределено)
	СбисТипОбъекта = "Справочник";
	СбисИмяОбъекта = СбисОбъект.Тип;
	Если Найти(СбисИмяОбъекта, ".") Тогда
		ИмяОбъекта = СтрЗаменить(СбисИмяОбъекта,".",Символы.ПС);
		СбисТипОбъекта = СтрПолучитьСтроку(ИмяОбъекта, 1);
		СбисИмяОбъекта = СтрПолучитьСтроку(ИмяОбъекта, 2);
	КонецЕсли;
	Если Лев(СбисТипОбъекта, 10) = "Справочник" Тогда
		Если		Режим = "ПоНаименованию" Тогда
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].НайтиПоНаименованию(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		ИначеЕсли	Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "ПланыСчетов" Тогда
		Если		Режим = "ПоНаименованию" Тогда
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].НайтиПоНаименованию(СбисОбъект.Ключ, ТочноеСоответствие, Родитель)";
		ИначеЕсли	Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, Родитель)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "Документ" Тогда
		Если Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "Документы[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе//Сделать запрос
			СтрокаВычислить = "Документы[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "Перечисление" Или СбисТипОбъекта = "Перечисления" Тогда
		СтрокаВычислить = "Перечисления[СбисИмяОбъекта][СбисОбъект.Ключ]";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Вычислить(СтрокаВычислить);
КонецФункции

&НаСервереБезКонтекста
Функция СбисЗначениеПеречисления(Знач ИмяПеречисления, Знач КлючПеречисления)
	Если Найти(ИмяПеречисления, ".") Тогда
		ИмяПеречисления = СтрПолучитьСтроку(СтрЗаменить(ИмяПеречисления,".",Символы.ПС), 2);
	КонецЕсли;
	Возврат Перечисления[ИмяПеречисления][КлючПеречисления];
	
КонецФункции

//Функция возвращает реквизит элемента с сервера, когда уже по-другому никак.
&НаСервереБезКонтекста
Функция СбисПолучитьРеквизит(Знач Контекст) Экспорт 
	Возврат Контекст.Ссылка[Контекст.ИмяРеквизита];
КонецФункции

//Функция возвращает значение перечисления ставки НДС по строковому представлению
&НаСервереБезКонтекста
Функция сбисПолучитьСтавкуНДС_Перечисление_НаСервере(Знач сбисСтавка)
	Если		(Найти(сбисСтавка,"20/120") = 1) Или (сбисСтавка = "17") Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли	(Найти(сбисСтавка,"10/110") = 1) Или (сбисСтавка = "9") Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли	(Найти(сбисСтавка,"18/118") = 1) Или (сбисСтавка = "15") Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли	Найти(сбисСтавка,"20") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли	Найти(сбисСтавка,"10") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли	Найти(сбисСтавка,"18") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли	Найти(сбисСтавка,"0") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли	НРег(сбисСтавка) = "без ндс" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Возврат Неопределено
КонецФункции

// Функция заполняет ставку НДС в загружаемых документах	
&НаСервереБезКонтекста
Функция сбисПолучитьСтавкуНДС_Справочник_НаСервере(Знач сбисСтавка)
	Если		(Найти(сбисСтавка,"20/120") = 1) Или (сбисСтавка = "17") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("20/120");
	ИначеЕсли	(Найти(сбисСтавка,"10/110") = 1) Или (сбисСтавка = "9") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("10/110");
	ИначеЕсли	(Найти(сбисСтавка,"18/118") = 1) Или (сбисСтавка = "15") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("18/118");
	ИначеЕсли	Найти(сбисСтавка,"20") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("20");
	ИначеЕсли	Найти(сбисСтавка,"10") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("10");
	ИначеЕсли	Найти(сбисСтавка,"18") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("18");
	ИначеЕсли	Найти(сбисСтавка,"0") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("0");
	ИначеЕсли	НРег(сбисСтавка) = "без ндс" Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("безндс");
	КонецЕсли;
	Возврат Неопределено
КонецФункции

&НаСервереБезКонтекста
Процедура сбисПроверитьЗаполнитьШтрихкод_Сервер(Знач Контекст)
	сбисШтрихкодыНоменклатуры = Неопределено;
	Если	Контекст.СтрТабл.Номенклатура = Неопределено
		Или	Не Контекст.Ини.Свойство("ШтрихкодыНоменклатуры", сбисШтрихкодыНоменклатуры)
		Или	Не сбисШтрихкодыНоменклатуры.Свойство("Отбор")
		Или	Не Лев(сбисШтрихкодыНоменклатуры.Значение, 16) = "РегистрыСведений"
		Или	Не Контекст.СтрокаФайла.Свойство("GTIN") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра		= Сред(сбисШтрихкодыНоменклатуры.Значение, 18);
	ИмяРекШтрихкод	= Сред(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение, Найти(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение,".")+1);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|   РегистрСведений." + ИмяРегистра + " КАК Рег
	|ГДЕ
	| ";
	ТекстСообщения = "";
	Отбор = Новый Структура;
	Для Каждого Элемент Из Контекст.Ини.ШтрихкодыНоменклатуры.Отбор Цикл
		ЗначениеОтбора = РассчитатьЗначениеНаСервере(Элемент.Значение,Контекст);
		Если ЗначениеОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Вставить(Элемент.Ключ, ЗначениеОтбора);
		Запрос.УстановитьПараметр(Элемент.Ключ, ЗначениеОтбора);
		Запрос.Текст = Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
		ТекстСообщения = ТекстСообщения + Элемент.Ключ + " = " + строка(ЗначениеОтбора) + ", ";
	КонецЦикла;
	ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-2);
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
	НаборЗаписей = Запрос.Выполнить().Выбрать();
	Если Не НаборЗаписей.Количество() Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Для Каждого ЭлементИни Из Контекст.Ини Цикл
			Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
				ИмяРек = Сред(ЭлементИни.Ключ,23);
				Если Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти(ИмяРек)<>Неопределено Тогда
					Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
						НаборЗаписей.Отбор[ИмяРек].Установить(ЭлементИни.Значение.РассчитанноеЗначение);
					ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
						ЗначениеРеквизита = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
						НаборЗаписей.Отбор[ИмяРек].Установить(ЗначениеРеквизита);
						ЭлементИни.Значение.Вставить("РассчитанноеЗначение",ЗначениеРеквизита);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Прочитать();	
		Если НаборЗаписей.Количество() Тогда
			Сообщить("Штрихкод "+Контекст.СтрокаФайла.GTIN+ " указан у другой номенклатуры/характеристики/единицы измерения");
			Возврат;
		КонецЕсли;
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		Для Каждого ЭлементИни Из Контекст.Ини Цикл
			Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
				ИмяРек = Сред(ЭлементИни.Ключ,23);
				Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
					НоваяЗаписьНабора[ИмяРек] = ЭлементИни.Значение.РассчитанноеЗначение;
				ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
					НоваяЗаписьНабора[ИмяРек] = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		Сообщить("Создана запись в регистре сведений "+ ИмяРегистра+" для штрихкода "+Контекст.СтрокаФайла.GTIN);
	ИначеЕсли НаборЗаписей.Количество()>1 Тогда
		Сообщить("Для набора данных "+ ТекстСообщения+ " указано несколько штрихкодов. Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
	Иначе
		Пока НаборЗаписей.Следующий() Цикл
			Если НаборЗаписей[ИмяРекШтрихкод]<>Контекст.СтрокаФайла.GTIN Тогда
				Сообщить("Для набора данных "+ ТекстСообщения+ " указан штрихкод "+НаборЗаписей[ИмяРекШтрихкод]+", а во входящем документе "+Контекст.СтрокаФайла.GTIN+". Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Функция сбисНоменклатура1СЗапас_УНФ_Сервер(Знач Контекст)
	Возврат Контекст.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
КонецФункции

//Функция рассчитывает ставку НДС из строки по сопоставлению сумм
&НаКлиенте
Функция сбисРассчитатьСтавкуНДС(СтрокаФайла)
	Попытка
		Возврат Строка(Окр(Число(СтрокаФайла.НДС.Сумма) / (Число(СтрокаФайла.Сумма) - Число(СтрокаФайла.НДС.Сумма)) * 100));
	Исключение
		Возврат  Неопределено;// до появления функционала заполнения по данным 1С было "без ндс"; (1183241542)
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ПоискСтавкиНДСВСправочникеПоНазванию(Знач Строка)
	Выборка = Справочники.СтавкиНДС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (СтрЗаменить(СтрЗаменить(Выборка.Наименование,	" ", ""), 
			"%", "") = Строка) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("без ндс");
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьНалогообложениеНДСБезДоговораУТ11_Сервер(Знач Контекст)
	НалогообложениеНДС = Неопределено;
	Попытка
		ПараметрыУчетаОрганизации = Вычислить("УчетНДСУП.ПараметрыУчетаПоОрганизации(Контекст.Организация,Контекст.Дата)");
		Если ПараметрыУчетаОрганизации.ПрименяетсяПСН Тогда
			НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
		ИначеЕсли ПараметрыУчетаОрганизации.НалогообложениеНДСРозничнойПродажи = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			НалогообложениеНДС = ПараметрыУчетаОрганизации.НалогообложениеНДСРозничнойПродажи;
		Иначе
			НалогообложениеНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи;
		КонецЕсли;
	Исключение
	    Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат НалогообложениеНДС;
КонецФункции

&НаКлиенте
Функция ОпределитьСторонуДокумента(Контекст) Экспорт  
	Перем ВходящийКонтекст, Результат, Ключ;
	
	МодульОбъектаКлиент	= МодульОбъектаКлиент();
	Документ_Шаблон		= МодульОбъектаКлиент.ПолучитьФормуОбработки("Документ_Шаблон");
	ВложениеСбис		= Контекст.Вложение;
	
	Роль	= Документ_Шаблон.РассчитатьЗначение("Роль", Контекст, МестныйКэш);
    Ключ	= ВложениеСбис.Стороны.Синонимы.Получить(Роль);
	
	// Работаем по проекту контрагентов только если во входящем контексте заполнены Организация и Контрагент
	// В противном случае заполняем по ИНН/КПП из вложения	
	ОрганизацияПоПакету	= Документ_Шаблон.РассчитатьЗначение("[ВходящийКонтекст].ОрганизацияПоПакету",	Контекст);
	КонтрагентПоПакету	= Документ_Шаблон.РассчитатьЗначение("[ВходящийКонтекст].КонтрагентПоПакету",	Контекст);

	БратьСтороныСПакета = ЗначениеЗаполнено(Ключ)
				И	ЗначениеЗаполнено(ОрганизацияПоПакету)
				И	ЗначениеЗаполнено(КонтрагентПоПакету);
	
	Если БратьСтороныСПакета Тогда
		
		КлючСтороныРассчитать	= "[ВходящийКонтекст]." + Ключ + "ПоПакету";
		Результат				= Документ_Шаблон.РассчитатьЗначение(КлючСтороныРассчитать,	Контекст);

	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Контекст.ТекущееПолеИни.Свойство("РассчитанноеЗначение", Результат);
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

