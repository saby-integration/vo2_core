
//////////////////Разбор документов/////////////////

// функция формирует структуру данных по пакету электронных документов, необходимую для его загрузки в 1С
&НаКлиенте
Функция РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш, ИмяРеквизитаВложений = "Вложение") Экспорт
	Если Не ПолныйСоставПакета.Свойство(ИмяРеквизитаВложений) Тогда
		Сообщить("В пакете " + ПолныйСоставПакета.Название + " отсутствуют вложения.");
		Возврат ПолныйСоставПакета
	КонецЕсли;
	ПараметрыРазбора = Новый Структура;
	
	ИндексВложенияВПакете	= 0;
	ОшибкиРазбораВложений	= Ложь;
	
	Кэш.Вставить("ЕстьОшибкиРасшифровки", Ложь);
	Для Каждого Вложение Из ПолныйСоставПакета[ИмяРеквизитаВложений] Цикл
		РазобранныеДанныеВложения = ПолучитьРазобранныеДанныеВложенияСбис(Кэш, ПолныйСоставПакета, Вложение, ПараметрыРазбора, ОшибкиРазбораВложений);
		Если ОшибкиРазбораВложений Тогда
			Прервать;
		КонецЕсли;
		// UAA38 Так, как нельзя гарантировать что переданное вложение не прокатится до сервера и взад через пользовательские функции
		//считаем что Вложение - уже может быть другим объектом. Чтоб не поломалась ссылочность на форме просмотра, костыль с дозаполнением.
		Для Каждого КлючИЗначениеДанных Из РазобранныеДанныеВложения Цикл
			ПолныйСоставПакета[ИмяРеквизитаВложений][ИндексВложенияВПакете].Вставить(КлючИЗначениеДанных.Ключ, КлючИЗначениеДанных.Значение);
		КонецЦикла;
		ИндексВложенияВПакете = ИндексВложенияВПакете + 1;
	КонецЦикла;	
	Кэш.Удалить("ЕстьОшибкиРасшифровки");
	Возврат ПолныйСоставПакета;
	
КонецФункции

//Функция возвращает разобрынные данные вложения XMLДокумента, СтруктураФайла, ФорматДляЗагрузки, ВерсияФорматаДляЗагрузки
&НаКлиенте
Функция ПолучитьРазобранныеДанныеВложенияСбис(Кэш, ПолныйСоставПакета, Вложение, ДополнительныеПараметры, Отказ) Экспорт
	Перем Файл_Формат, Файл_ВерсияФормата;
	
	Результат = Новый Структура("XMLДокумента", "");
	ИдентификаторВложения = Вложение.Файл.Ссылка;
	Если Кэш.Парам.СпособОбмена = 1 Тогда
		//Если интеграция через каталог, передаём не идентификатор, а само вложение
		ИдентификаторВложения = Вложение.Файл;
	КонецЕсли;
	
	Если Вложение.Зашифрован = "Да" Тогда
		ДвоичныеДанныеBase64 = Кэш.Интеграция.ПолучитьДанныеЗашифрованногоФайла(Кэш,ИдентификаторВложения);
		Вложение.Файл.Вставить("ДвоичныеДанные", ДвоичныеДанныеBase64);
		XMLФайла = сбисТекстИзBase64(ДвоичныеДанныеBase64, Кэш.КэшЗначенийИни);
	Иначе
		XMLФайла = Кэш.Интеграция.ПолучитьДанныеФайла(Кэш, ИдентификаторВложения);
	КонецЕсли;
	XMLИсходногоФайла = XMLФайла;
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""SFAKT""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""OTORG12""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""IAKTPRM""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xs=""http://www.w3.org/2001/XMLSchema""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""urn:schemas-microsoft-com:office:spreadsheet""","");
	
	ЕстьXSLT= Ложь;
	ИмяXSLT	= "";
	
	ПодТип				= ?(Вложение.Свойство("ПодТип"), сбисЗаменитьНедопустимыеСимволы(Вложение.ПодТип), "");
	Файл_Формат			= сбисЗаменитьНедопустимыеСимволы(Вложение.Тип);
	Файл_ВерсияФормата	= сбисЗаменитьНедопустимыеСимволы(Вложение.ВерсияФормата);		
	СтруктураФайла		= Новый Структура;
	Если ЗначениеЗаполнено(Файл_Формат) и ЗначениеЗаполнено(XMLФайла) Тогда
		ИмяXSLT	= СбисФорматСтроки(Файл_Формат + "_" + ПодТип + "_" + Файл_ВерсияФормата, "КлючСтруктуры");
		ЕстьXSLT= Кэш.XSLT.Свойство(ИмяXSLT);
		
		ОшибкаПреобразования= Ложь;
		ДопПараметрыXSLT	= Неопределено;
		Если Кэш.Парам.РежимОтладки Тогда
			ДопПараметрыXSLT = Новый Структура;
			ДопПараметрыXSLT.Вставить("Название", сбисФорматКаталога("Загрузка", Кэш.ПараметрыСистемы.Клиент));
			Если ПолныйСоставПакета.Свойство("Название") Тогда
				ДопПараметрыXSLT.Название = ДопПараметрыXSLT.Название + ПолныйСоставПакета.Название;
			КонецЕсли;
		КонецЕсли;
		XMLФайла = сбисПрименитьXSLT(Кэш, XMLФайла, ИмяXSLT, ДопПараметрыXSLT, ОшибкаПреобразования);
		Если ОшибкаПреобразования Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, XMLФайла);
			XMLФайла = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Файл_ВерсияФормата) Тогда
			Результат.Вставить("XMLДокумента", XMLИсходногоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(XMLФайла) Тогда
			Попытка
				СтруктураФайла	= ЗаполнитьСтруктуруФайла(XMLФайла);
			Исключение
				//Возможна ошибка транспорта строки не XML вложений на УФ
				СтруктураФайла	= Новый Структура;
				XMLФайла		= "";
			КонецПопытки;
		КонецЕсли;
	Иначе
		XMLФайла= "";
	КонецЕсли;
	
	//Пробуем преобразовать XML только если он есть, дабы избежать лишних вызовов сервера
	Результат.Вставить("СтруктураФайла", СтруктураФайла);
	Если	ЕстьXSLT 
		И	СтруктураФайла.Свойство("Файл")
		И	СтруктураФайла.Файл.Свойство("Формат")
		И	СтруктураФайла.Файл.Свойство("ВерсияФормата") Тогда
		Файл_Формат			= сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Файл.Формат);
		Файл_ВерсияФормата	= сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Файл.ВерсияФормата);
	ИначеЕсли ЗначениеЗаполнено(XMLФайла) Тогда	// XMLФайла может быть пустым, если вложение не удалось расшифровать
		Файл_Формат			= сбисЗаменитьНедопустимыеСимволы(Вложение.Тип);
		Файл_ВерсияФормата	= сбисЗаменитьНедопустимыеСимволы(Вложение.ВерсияФормата);
	Иначе
		Возврат Результат;
	КонецЕсли;					
	Результат.Вставить("ФорматДляЗагрузки",			Файл_Формат);
	Результат.Вставить("ВерсияФорматаДляЗагрузки",	Файл_ВерсияФормата);
	
	//AU Вынесено определение ини для загрузки.
	Если	Вложение.Свойство("Направление") 
		И	ЗначениеЗаполнено(Файл_Формат) Тогда
		ИмяИни = "";
		Если Вложение.Направление = "Входящий" Тогда
			ИмяИни = Файл_Формат+"_"+Файл_ВерсияФормата;
			Если НЕ Кэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
				ИмяИни = "Загрузка_" + Вложение.Направление + "_" + Файл_Формат + "_" + Файл_ВерсияФормата;
			КонецЕсли;
		ИначеЕсли Вложение.Направление = "Исходящий" Тогда 
			ИмяИни = "Загрузка_" + Вложение.Направление + "_" + Файл_Формат + "_" + Файл_ВерсияФормата;
		КонецЕсли;
		ИмяИни = СбисФорматСтроки(ИмяИни, "КлючСтруктуры");
		Если Не	(	ЗначениеЗаполнено(ИмяИни) 
			И	Кэш.Ини.Свойство(ИмяИни)) Тогда
			Возврат Результат;
		КонецЕсли; 
		Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
		Результат.Вставить("ИмяИни", ИмяИни);
		Если Вложение.Свойство("СтруктураИниФайла") Тогда
			Возврат Результат;
		КонецЕсли;
		Результат.Вставить("СтруктураИниФайла", Новый Структура);
		Если Не Ини.Свойство("мДокумент") Тогда
			Возврат Результат;
		КонецЕсли;
		//По-дефолту берётся первый мДокумент из Ини
		Для Каждого ИниДокумент Из Ини.мДокумент Цикл
			Результат.СтруктураИниФайла = ИниДокумент.Значение;
			Прервать;
		КонецЦикла;	
		
		//НГС Выбор мДокумента из инишки
		// KES 1178492498 Загрузка входящего, созданного вручную -->
		//значения по умолчанию
		РегламентВоВложении = РассчитатьЗначениеИзСтруктуры("Файл.Документ.Параметр.ДокументВидОперации", СтруктураФайла); 
		РегламентНаПакете = ПолныйСоставПакета.Регламент.Название; 
		
		ДокументПриоритетЗагрузки = Новый СписокЗначений;
		
		Для Каждого ИниДокумент из Ини.мДокумент Цикл
			
			РеглНаПакетеСовпал = Ложь; 
			Если ИниДокумент.Значение.Свойство("РеестрСБИС_Операция") Тогда
				РегламентПакет_мДокумент = РассчитатьЗначение("РеестрСБИС_Операция", ИниДокумент.Значение,Кэш);
				РеглНаПакетеСовпал = ( НРег(РегламентПакет_мДокумент) = НРег(РегламентНаПакете) );
			КонецЕсли;
			
			РеглНаВложенииСовпал = Ложь;
			Если ИниДокумент.Значение.Свойство("ДокументВидОперации") Тогда
				
				Если ИниДокумент.Значение.ДокументВидОперации.Свойство("Данные") Тогда
					РегламентВоВложении = РассчитатьЗначениеИзСтруктуры(ИниДокумент.Значение.ДокументВидОперации.Данные, СтруктураФайла);
				КонецЕсли;
				
				РегламентВложение_мДокумент = РассчитатьЗначение("ДокументВидОперации", ИниДокумент.Значение,Кэш);
				Если ЗначениеЗаполнено(РегламентВложение_мДокумент) Тогда
					РегламентВложение_мДокумент = РазбитьСтрокуВМассивНаКлиенте(РегламентВложение_мДокумент,",");
					Для Каждого Регл Из РегламентВложение_мДокумент Цикл
						Если ( НРег(Регл) = НРег(РегламентВоВложении) )  Тогда
							РеглНаВложенииСовпал = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если РеглНаПакетеСовпал И РеглНаВложенииСовпал Тогда
				//Регламент на пакете и вложении совпадают - наивысший приоритет
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,0);
			ИначеЕсли РеглНаВложенииСовпал Тогда    
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,1);
			ИначеЕсли РеглНаПакетеСовпал Тогда     //на пакете совпал, на вложении нет
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,2);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДокументПриоритетЗагрузки.Количество() Тогда
			ДокументПриоритетЗагрузки.СортироватьПоПредставлению();
			Результат.СтруктураИниФайла = Ини.мДокумент[ДокументПриоритетЗагрузки[0].Значение];
		КонецЕсли;
		//<-- KES 1178492498 Загрузка входящего, созданного вручную
		//КНГС-------------------------
		
		фрмПольз = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ОпределитьТипЗагружаемогоДокумента","Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата,"", Кэш);
		Если фрмПольз<>Ложь Тогда
			ТипДок = фрмПольз.ОпределитьТипЗагружаемогоДокумента(Новый Структура("СоставПакета,Вложение,Ини,Кэш",ПолныйСоставПакета,Вложение,Ини,Кэш));
			Результат.СтруктураИниФайла = Ини.мДокумент[ТипДок];
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

