
////////////////////////////////////////////////////
///////////////Загрузка номенклатуры////////////////
////////////////////////////////////////////////////

//Функция вынесена из СоздатьПерезаполнитьДокументы. Сопоставляет, либо загружает не сопоставленную номенклатуру в зависимости от выбранного режима:
//	Режим 0 Документ не загружается, если нет сопоставления.
//	Режим 1 Для несопоставленных позиций создавать карточки номенклатуры и контрагента.
//	Режим 2 В табличную часть загружать только сопоставленную номенклатуру.
//	режим 3 Для несопоставленной номенклатуры в табличной части не заполнять поле Номенклатура.
//Как результат идёт структура с описанием выполненного действия с номенклатурой. 
&НаКлиенте
Функция ЗаполнитьСопоставитьНоменклатуру(Кэш, СтрТабл, ПараметрыЗаполнения, Отказ) Экспорт
	
	СтрТаблНазвание = ?(СтрТабл.Свойство("Название"), СтрТабл.Название, "");
	Результат = Новый Структура("Название, Номенклатура, Новый, НеЗагружать", СтрТаблНазвание, Неопределено, Ложь, Ложь);
	
	НашаНоменклатура	= ПараметрыЗаполнения.НашаНоменклатура;
	СтруктураИниФайла	= ПараметрыЗаполнения.Вложение.СтруктураИниФайла;
	СтруктураФайла		= ПараметрыЗаполнения.Вложение.СтруктураФайла;
	
	//1189546150
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтруктураИниФайла",СтруктураИниФайла);
	
	Если Не ЗначениеЗаполнено(СтрТаблНазвание) И ПараметрыЗаполнения.РежимНоменклатуры <> 0 Тогда // Если отсутствует атрибут Название, 
		РежимНоменклатуры = 3;                                                                 // то номенклатуру не добавляем, а в табличной части оставляем номенклатуру пустой
	Иначе
		РежимНоменклатуры = ПараметрыЗаполнения.РежимНоменклатуры;
	КонецЕсли;
	СтрКонтрагента		= ПараметрыЗаполнения.СтрКонтрагента;
	ПараметрыРезультат	= ПараметрыЗаполнения.ПараметрыРезультат;
	
	Если	Не СтрТабл.Свойство("Номенклатура", Результат.Номенклатура)
		Или	Не ЗначениеЗаполнено(Результат.Номенклатура) Тогда
		ДанныеНоменклатуры = Неопределено;
		Если ЗначениеЗаполнено(НашаНоменклатура) И СтрТабл.Свойство(НашаНоменклатура) Тогда
			ДанныеНоменклатуры = Кэш.ГлавноеОкно.сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),Кэш);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			Если ПараметрыЗаполнения.ДанныеНоменклатуры = Неопределено Тогда
				Попытка
					НоменклатураКонтрагентаИнфо = Новый Структура;
					Для Каждого Узел Из СтрТабл Цикл
						НоменклатураКонтрагентаИнфо.Вставить(Узел.Ключ, Узел.Значение);
					КонецЦикла;
					ДанныеНоменклатуры = ПараметрыЗаполнения.фрмНоменклатуры.НайтиНоменклатуруПоставщика(СтрКонтрагента, НоменклатураКонтрагентаИнфо, Кэш.Парам.КаталогНастроек, Кэш.Ини);
				Исключение
				КонецПопытки;
			Иначе//Берем предварительно найденное значение, если не удалось рассчитать. 
				ДанныеНоменклатуры = ПараметрыЗаполнения.ДанныеНоменклатуры;
			КонецЕсли;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			Результат.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			ПараметрыРасшифровки = Новый Структура("Название, Ссылка, Тип, Состояние, Сообщение", СтрТаблНазвание, Результат.Номенклатура, Кэш.Ини.Конфигурация.НоменклатураПоставщиков.Значение, "Найден.", "Для позиции " + СтрТаблНазвание + " найдена подходящая номенклатура.");
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ПараметрыЗаполнения.СтрокаДетализации, ПараметрыРасшифровки);
		Иначе
			Результат.Номенклатура = Неопределено;
		КонецЕсли;
		Если РежимНоменклатуры = 2 И Результат.Номенклатура=Неопределено Тогда 
			Результат.Вставить("НеЗагружать", Истина);
		Иначе                                         
			Если ЗначениеЗаполнено(ДанныеНоменклатуры) и ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
				Результат.Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Результат.Номенклатура = Неопределено Тогда
		Если РежимНоменклатуры = 1 Тогда
			НоменклатураНов = ПараметрыЗаполнения.фрмСозданияНоменклатуры.СоздатьНоменклатуруПоДаннымПоставщика(Кэш,СтрТабл,СтруктураФайла, ДопПараметры);
			Если Не НоменклатураНов = Неопределено Тогда
				НазваниеНоменклатуры = Неопределено;
				Идентификатор = Неопределено;
				КодПокупателя = Неопределено;
				Если Не СтрТабл.Свойство("Название", НазваниеНоменклатуры) Тогда
					НазваниеНоменклатуры = "";
				КонецЕсли;
				Если Не СтрТабл.Свойство("Идентификатор", Идентификатор) Тогда
					Идентификатор = "";
				КонецЕсли;
				Если Не СтрТабл.Свойство("КодПокупателя", КодПокупателя) Тогда
					КодПокупателя = "";
				КонецЕсли;
				ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,КодПокупателя,Номенклатура,Характеристика",НазваниеНоменклатуры,Идентификатор,КодПокупателя,НоменклатураНов,"");
				//Записываем соответствие
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
				фрм.УстановитьСоответствиеНоменклатуры(СтрКонтрагента, ДанныеНоменклатуры, Кэш.Парам.КаталогНастроек, Кэш.Ини);
				
				Результат.Номенклатура = НоменклатураНов;
				Результат.Новый = Истина;			
			Иначе
				//ПараметрыЗаполнения.РежимНоменклатуры = 1;
				Результат.Вставить("ТекстОшибки", "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации");
				Отказ = Истина;//Не переключаем режим номенклатуры, а даём понять, что с номенклатурой что-то не так. Тогда вложение мы не обрабатываем и добавляем ошибку.
			КонецЕсли;
		ИначеЕсли РежимНоменклатуры = 0 Тогда
			Результат.Вставить("ТекстОшибки", "Не вся номенклатура сопоставлена." + ?(Не ПараметрыРезультат.ФормаВызова="ФормаПросмотрДокумента", " Для сопоставления откройте карточку документа.", ""));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Функция СоздатьНоменклатуруПоДаннымПоставщика(Кэш, СтрТабл, СтруктураФайла, ДопПараметры = Неопределено) Экспорт  	// сбисНикифоров  Функция создает Карточку номенклатуры по данным из файла
	//Проверяем вызов: если есть необходимость заполнения детализции, то формируем структуру ответа с детальным описанием обработчки карточки.
	Результат = Новый Структура("Название, Ссылка, Тип, Состояние, Сообщение, Ошибки", ?(СтрТабл.Свойство("Название"), СтрТабл.Название, ""), Неопределено, Неопределено,"", "", Ложь);
	ОшибкаСостояние = "Ошибка автоматического сопоставления/создания номенклатуры.";
	ОшибкаСообщение = "";
	//ОшибкаСообщение = "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации.";
	ДанныеДетализации = РезультатДействия_ИзвлечьВременныеДанные(Кэш);
	//1189546150
	Если НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("СтруктураИниФайла") Тогда
		СтруктураИниФайла = ДопПараметры.СтруктураИниФайла;
	Иначе
		СтруктураИниФайла = Новый Структура;
	КонецЕсли;
	
	Если Кэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда  
		СоставОграниченийТипов = ТипыСправочниковНоменклатуры(СтруктураИниФайла);
		Результат.Тип = ОпределитьИмяТипаОбъекта(СоставОграниченийТипов[0]); 	
		СправочникНоменклатура = Результат.Тип;
	Иначе
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			ДанныеДетализации.Отказ = Истина;
			ДанныеДетализации.СтрокаДетализации.Состояние = ОшибкаСостояние;
			ДанныеДетализации.СтрокаДетализации.Сообщение = ОшибкаСообщение;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Ссылка = сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, ?(СтрТабл.Свойство("Название"), СтрТабл.Название, ""));	//Пытаемся найти уже имеющуюся в базе по наименованию
	Если ЗначениеЗаполнено(Результат.Ссылка) Тогда
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			Результат.Состояние = "Найден.";
			Результат.Сообщение = "Для позиции " + Результат.Название + " найдена карточка номенклатуры с таким же названием.";
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		КонецЕсли;
		Возврат Результат.Ссылка;             										//Если находим то возвращаем уже существующую карточку
	КонецЕсли;
	
	//Иначе создаем новый элемент справочника
	СтруктураСправочника = Новый Структура();               		//Создаем структуру, где ключ - название реквизита справочника, а значение - значение из файла
	ЗаполнитьСтруктуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураСправочника); //Заполняем ее
	РезультатСоздания = СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника, ДанныеДетализации.Отказ);
	Если ДанныеДетализации.Отказ Тогда
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			//Если не удаётся создать карточку номенклатуры, то не поддерживаем (как было раньше)
			ДанныеДетализации.СтрокаДетализации.Состояние = ОшибкаСостояние;
			ДанныеДетализации.СтрокаДетализации.Сообщение = ОшибкаСообщение;
			Результат.Состояние = РезультатСоздания.message;
			Результат.Сообщение = РезультатСоздания.details;
			Результат.Ошибки	= Истина;
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		Иначе
			Сообщить(РезультатСоздания.details);
		КонецЕсли;
		Возврат Неопределено;
	Иначе
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			Результат.Состояние = "Создан.";
			Результат.Сообщение = "Создана карточка номенклатуры " + РезультатСоздания;
			Результат.Ссылка	= РезультатСоздания;
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		КонецЕсли;
		Возврат РезультатСоздания;                                  	//Возвращаем ее
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, Название)
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка Из Справочник."+СправочникНоменклатура+" ГДЕ Наименование = &Наим и Не ЭтоГруппа");
	Запрос.УстановитьПараметр("Наим", Название);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Возврат Рез.Ссылка;		
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника, Отказ)
	// Функция заполняет реквизиты документа 1С из одноименных полей структуры	
	Номенклатура = Справочники[СправочникНоменклатура].СоздатьЭлемент();
	Для Каждого Элемент Из СтруктураСправочника Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Номенклатура[Элемент.Ключ] = Элемент.Значение;
		Иначе
			Номенклатура[Элемент.Ключ].Очистить();
			Для Каждого Строка Из Элемент.Значение Цикл
				НоваяСтрока = Номенклатура[Элемент.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Попытка
		Номенклатура.Записать();    								//Если карточка нормально записалась
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Ошибка записи номенклатуры.", "При записи карточки номенклатуры " + Номенклатура.Наименование + " возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Номенклатура.Ссылка;
КонецФункции

// Функция возвращает список типов справочников для сопоставления номенклатуры
//
// Параметры:
//  СтруктураИниФайла - Структура - ини файл, разложенный в структуру значений  
// 
// Возвращаемое значение:
//  Массив - список типов справочников
//
&НаКлиенте
Функция ТипыСправочниковНоменклатуры(СтруктураИниФайла) Экспорт

	ВидыСправочниковНоменклатуры = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ВидыСправочниковНоменклатуры",СтруктураИниФайла, МестныйКэш); 
	СоставОграниченийТипов = Новый Массив;
	Если ВидыСправочниковНоменклатуры = Неопределено Тогда
		Если МестныйКэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
			ИмяСправочникаНоменклатуры = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(МестныйКэш.Ини.Конфигурация.Номенклатура.Значение);
			ТипСправочникаНоменклатуры = "СправочникСсылка."+ИмяСправочникаНоменклатуры;
		Иначе
			ТипСправочникаНоменклатуры = "СправочникСсылка.Номенклатура";
		КонецЕсли;   
		СоставОграниченийТипов.Добавить(Тип(ТипСправочникаНоменклатуры));
	Иначе
		СписокИменСправочниковНоменклатуры = МестныйКэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ВидыСправочниковНоменклатуры, ",");
		Для Каждого ТипСправочникаНоменклатуры Из СписокИменСправочниковНоменклатуры Цикл
			СоставОграниченийТипов.Добавить(Тип(ТипСправочникаНоменклатуры));
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СоставОграниченийТипов;  
	
КонецФункции

// Функция возвращает тип справочника единиц для сопоставления номенклатуры по метаданным конфигурации
//
// 
// Возвращаемое значение:
//  Строка - тип справочника единиц
//
&НаСервереБезКонтекста
Функция ТипСправочникаЕдиницПоМетаданным() Экспорт

	Если НЕ Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда  // ЕРП, КА2, УТ11
		
		ТипСправочникаЕдиниц	= "УпаковкиЕдиницыИзмерения";
		
	ИначеЕсли НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда // УПП, УТ10, УНФ, ШТРИХ
		
		ТипСправочникаЕдиниц	= "ЕдиницыИзмерения"; 

	Иначе	
		
		ТипСправочникаЕдиниц	= "КлассификаторЕдиницИзмерения"; // БП
		
	КонецЕсли;		

	
	Возврат ТипСправочникаЕдиниц;  
	
КонецФункции

