
////////////////////////////////////////////////////
////////////////////Подсистемы//////////////////////
////////////////////////////////////////////////////

//Функция ищет выбранную функцию с учетом версии подсистемы 1С и форм обработки 
&НаКлиенте
Функция сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	КлючПодсистемы		= ПараметрыПоиска.КлючФорм; 
	Инициировать		= Ложь;
	ПараметрыПодсистемы	= Неопределено;
	Если		Не Кэш.ТекущийСеанс.Свойство("Подсистемы",ПараметрыПодсистемы) Тогда
		Кэш.ТекущийСеанс.Вставить("Подсистемы", Новый Структура);
		Инициировать = Истина;
	ИначеЕсли	Не ПараметрыПодсистемы.Свойство(КлючПодсистемы, ПараметрыПодсистемы)
		Или	Не ПараметрыПодсистемы.Инициирована Тогда
		Инициировать = Истина;
	КонецЕсли;
	Если Инициировать Тогда
		ПараметрыПодсистемы = сбисИнициироватьПодсистему(Кэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ПараметрыПодсистемы);
			Возврат Ложь;
		КонецЕсли;
		Кэш.ТекущийСеанс.Подсистемы.Вставить(КлючПодсистемы, ПараметрыПодсистемы);
	КонецЕсли;
	НаборФорм = Новый Массив;
	НаборФорм.Добавить(ПараметрыПодсистемы.Объекты.ФормаОсновная);
	НаборФорм.Добавить(ПараметрыПодсистемы.Объекты.ФормаБазовая);
	
	Попытка
		Возврат МодульОбъектаКлиент().НайтиФункциюСеансаОбработки(ПараметрыПоиска.ИмяФункции, НаборФорм);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", "ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы"));	
	КонецПопытки;
	
КонецФункции

//Функция формирует структуру для взаимодействия с подсистемой 1С. Проверяет доступные формы по ключу и выбирает наиболее подходящие по версии.
&НаКлиенте
Функция сбисИнициироватьПодсистему(Кэш, ПараметрыИнициации, Отказ) Экспорт
	
	ИмяПодсистемы = сбисСоответствиеПодсистем(Кэш).Получить(ПараметрыИнициации.КлючФорм);
	Если ИмяПодсистемы = Неопределено Тогда 
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Отсутствует подсистема 1С для формы " + ПараметрыИнициации.КлючФорм);
	КонецЕсли;	
	
	СтруктураПодсистемы = Новый Структура("Параметры, Инициирована, Объекты", Новый Структура("Имя,Версия", ИмяПодсистемы), Ложь, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура;
	РезультатЗапроса = сбисПолучитьВерсиюПодсистемы(ИмяПодсистемы,ДополнительныеПараметры,Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	ПараметрыИнициации.Вставить("УправляемоеПриложение", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение);
	
	СтруктураПодсистемы.Параметры.Версия = РезультатЗапроса;
	ВерсияПодсистемы = СериализоватьВерсию(СтруктураПодсистемы.Параметры.Версия, "СтрокуВЧисло");
	//Получим доступные формы для выбранной подсистемы и определим основную и базовую
	СписокФормПодсистемы = сбисПолучитьСписокДоступныхФормОбработки(ПараметрыИнициации, Отказ);
	СписокФормФункций = сбисПолучитьСписокДоступныхФормФункций(Кэш, ПараметрыИнициации, Отказ);
	//Составим общий список доступных форм для работы с подсистемой.
	ПараметрыЗаполненияВерсии = Новый Структура("ВспомогательныйРазделитель", ".");
	Для Каждого ФормаПодсистемы Из СписокФормПодсистемы Цикл
		ФормаПодсистемы.Значение = СериализоватьВерсию(СериализоватьВерсию(ФормаПодсистемы.Значение, "Дозаполнить", ПараметрыЗаполненияВерсии), "СтрокуВЧисло");
	КонецЦикла;
	Для Каждого ФормаПодсистемы Из СписокФормФункций Цикл
		ЧислоВерсии = СериализоватьВерсию(СериализоватьВерсию(ФормаПодсистемы.Значение, "Дозаполнить", ПараметрыЗаполненияВерсии), "СтрокуВЧисло");
		ЭлементСписка = СписокФормПодсистемы.НайтиПоЗначению(ЧислоВерсии);
		Если ЭлементСписка = Неопределено Тогда
			СписокФормПодсистемы.Добавить(ЧислоВерсии, ФормаПодсистемы.Представление);
		Иначе
			ЭлементСписка.Представление = ФормаПодсистемы.Представление;
		КонецЕсли;
	КонецЦикла;
	//И отберем из списка наиболее подходящую по версии форму. Как запасная остаётся форма с 0 версией.	
	СписокФормПодсистемы.СортироватьПоЗначению();
	Для шаг=0 По СписокФормПодсистемы.Количество()-1 Цикл
		Если СписокФормПодсистемы[шаг].Значение > ВерсияПодсистемы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураПодсистемы.Объекты.Вставить("ФормаБазовая", СписокФормПодсистемы[0].Представление);
	СтруктураПодсистемы.Объекты.Вставить("ФормаОсновная", СписокФормПодсистемы[шаг-1].Представление);
	СтруктураПодсистемы.Инициирована = Истина;
	Возврат СтруктураПодсистемы;
	
КонецФункции

//Функция возвращает соответствие подсистем 1С формам обработки
&НаКлиенте
Функция сбисСоответствиеПодсистем(Кэш)
	Результат = Новый Соответствие;
	Подсистема_Статусы = РассчитатьЗначение("Подсистема_Статусы_СостоянияЭД", Кэш.ини.Конфигурация, Кэш);
	Если Не ЗначениеЗаполнено(Подсистема_Статусы) Тогда
		Подсистема_Статусы = "БиблиотекаЭлектронныхДокументов";	
	КонецЕсли;
	Результат.Вставить("Статусы_СостоянияЭД", Подсистема_Статусы);
	Возврат Результат;
КонецФункции

//Функция получает версию указанной подсистемы 1С
&НаСервереБезКонтекста
Функция сбисПолучитьВерсиюПодсистемы(Знач ИмяПодсистемы, Знач ДополнительныеПараметры=Неопределено, Отказ);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИмяПодсистемы);
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Результат = Запрос.Выполнить().Выбрать();
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		Если Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") = Неопределено Тогда
			//Подсистем нет
			Возврат "0.0.0.1";
		КонецЕсли;
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Следующий() Тогда
		Возврат Результат.Версия;
	КонецЕсли;
	Возврат "0.0.0.1";
КонецФункции

//Получает список форм по ключу имен
&НаСервере
Функция сбисПолучитьСписокДоступныхФормОбработки(Знач ПараметрыПолучения, Отказ)
	Если ПараметрыПолучения.УправляемоеПриложение Тогда
		ОбработкаОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");
	КонецЕсли;
	СписокФорм = ОбработкаОбъект.Метаданные().Формы;
	
	КлючФормы = СокрЛП(НРег(ПараметрыПолучения.КлючФорм));
	ДлинаКлюча = СтрДлина(КлючФормы);
	Результат = Новый СписокЗначений;
	Для Каждого Фрм Из СписокФорм Цикл
		_ИмяФормы = Фрм.Имя;
		Если Не НРег(Лев(_ИмяФормы, ДлинаКлюча)) = КлючФормы Тогда
			Продолжить;
		КонецЕсли;
		Версия = СтрПолучитьСтроку(СтрЗаменить(НРег(_ИмяФормы), КлючФормы + "_", Символы.ПС), 2);
		
		Результат.Добавить(СтрЗаменить(Версия, "_", "."), _ИмяФормы);	
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Получает список клиентских форм по ключу имен
&НаКлиенте
Функция сбисПолучитьСписокДоступныхФормФункций(Кэш, ПараметрыПолучения, Отказ)
	
	Результат = Новый СписокЗначений;
	Если Кэш.Заплатки = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	КлючФормы = СокрЛП(НРег(ПараметрыПолучения.КлючФорм));
	ДлинаКлюча = СтрДлина(КлючФормы);
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		СписокКлиентскихФорм = Кэш.ТекущийСеанс.Формы.Клиентские;
		КлючИмени = "Значение";
	Иначе
		СписокКлиентскихФорм = Кэш.Заплатки.Метаданные().Формы;
		КлючИмени = "Имя";
	КонецЕсли;
	Для Каждого ФормаФункций Из СписокКлиентскихФорм Цикл
		_ИмяФормы = ФормаФункций[КлючИмени];
		Если Не НРег(Лев(_ИмяФормы, ДлинаКлюча)) = КлючФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Версия = СтрПолучитьСтроку(СтрЗаменить(НРег(_ИмяФормы), КлючФормы + "_", Символы.ПС), 2);
		
		Результат.Добавить(СтрЗаменить(Версия, "_", "."), _ИмяФормы);	
	КонецЦикла;
	Возврат Результат;
КонецФункции

