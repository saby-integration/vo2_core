
&НаСервереБезКонтекста
Функция ПолучитьРеквизитМетаданныхОбъекта(Объект1С, ИмяРеквизита) Экспорт
	Возврат Объект1С.Метаданные()[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбис(СтрокаСпискаДокументов, Кэш) Экспорт
	// функция формирует структуру данных по пакету электронных документов, необходимую для его предварительного просмотра и загрузки в 1С
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоПакетуСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ИдентификаторПакета = Строка.Значение.Идентификатор;
		//+tda//Если интеграция через каталог, передаём не идентификатор, а сам пакет
		Если Кэш.Парам.СпособОбмена = 1 Тогда
			ИдентификаторПакета = Строка.Значение;
		КонецЕсли;
		//-tda//
		ОшибкаЧтения = Ложь;
		ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ИдентификаторПакета,,ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			фрм.НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, Кэш.Ини, Кэш.Парам.КаталогНастроек, МассивСлужебных);
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		ИначеЕсли	ТипЗнч(СтрокаСпискаДокументов) = Тип("Структура") 
			И	СтрокаСпискаДокументов.Свойство("ВернутьПустойСоставПакета")
			И	СтрокаСпискаДокументов.ВернутьПустойСоставПакета Тогда
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			Сообщить("В пакете "+ПолныйСоставПакета.Название+" отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции
&НаКлиенте
Функция сбисТекстИзBase64(ДвоичныеДанныеBase64, ДополнительныеПараметры=Неопределено) Экспорт
	
	Возврат МодульОбъектаКлиент().XMLСтрокаИзBase64(ДвоичныеДанныеBase64, ДополнительныеПараметры);
	
КонецФункции
&НаКлиенте
Функция УдалитьАтрибутXmlns(ТекстXML) Экспорт 
	Результат = ТекстXML;
	Пока Найти(Результат, "xmlns") > 0 Цикл
		НачалоАтрибута = Найти(Результат, "xmlns");
		ПозицияОткрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута), """");
		ПозицияЗакрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута + ПозицияОткрывающейКавычки), """");
		Результат = СтрЗаменить(Результат, Сред(Результат, НачалоАтрибута, ПозицияОткрывающейКавычки + ПозицияЗакрывающейКавычки), "");
	КонецЦикла;
	Возврат Результат;	
КонецФункции
&НаСервереБезКонтекста
Функция сбисПодтипПоУмолчанию(Тип) Экспорт
	Если Тип = "ЭДОНакл" Тогда
		Возврат "1175010";
	ИначеЕсли Тип = "СчФктр" Тогда
		Возврат "1115125";
	ИначеЕсли Тип = "АктВР" Тогда
		Возврат "1175012";
	ИначеЕсли Тип = "счФактКор" Тогда
		Возврат "1115127";
	ИначеЕсли Тип = "Заказ" Тогда
		Возврат "Заказ";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция УпорядочитьВложенияДляЗагрузки(СписокВесов, ПолныйСоставПакета) Экспорт
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
			Если Вложение.Свойство("Вес") и Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	Возврат УпорядоченныйСоставПакета;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруОтветственного(Кэш,Контекст) Экспорт
	// функция формирует структуру ответственного,который проставляется на пакете документов при отправке
	ОтветственныйСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Ответственный = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ОтветственныйИД = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если Не ЗначениеЗаполнено(ОтветственныйИД) Тогда
				Попытка
					ОтветственныйИД = строка(Ответственный.УникальныйИдентификатор());
				Исключение
					ОтветственныйИД = "";
				КонецПопытки;
			КонецЕсли;
			ОтветственныйФамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Фамилия", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ОтветственныйФамилия) Тогда  // если фио в базе лежит по отдельным полям
				ОтветственныйИмя = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Имя", Контекст.ФайлДанные, Кэш);	
				ОтветственныйОтчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Отчество", Контекст.ФайлДанные, Кэш);
				ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество,Идентификатор", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество, ОтветственныйИД);
				//ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество);
			Иначе  // если фио в базе лежит в одном поле
				ОтветственныйФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_ФИО", Контекст.ФайлДанные, Кэш);
				Если ЗначениеЗаполнено(ОтветственныйФИО) Тогда
					ОтветственныйСтруктура = Кэш.ОбщиеФункции.сбисПолучитьФИО(ОтветственныйФИО);
					ОтветственныйСтруктура.Вставить("Идентификатор", ОтветственныйИД);
				КонецЕсли;
			КонецЕсли;
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ОтветственныйСтруктура.Вставить("Создать", "Да");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруПодразделения(Кэш,Контекст) Экспорт
	// функция формирует структуру подразделения,которое проставляется на пакете документов при отправке    
	ПодразделениеСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Подразделение = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПодразделениеИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ПодразделениеИдентификатор) Тогда
				ПодразделениеИД = ПодразделениеИдентификатор;
			Иначе    
				Попытка
					ПодразделениеИД = строка(Подразделение.УникальныйИдентификатор());
				Исключение
					ПодразделениеИД = "";
				КонецПопытки;
			КонецЕсли;
			ПодразделениеНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Название", Контекст.ФайлДанные, Кэш);
			ПодразделениеСтруктура.Вставить("Название", ПодразделениеНазвание);
			ПодразделениеСтруктура.Вставить("Идентификатор", ПодразделениеИД);
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ПодразделениеСтруктура.Вставить("Создать", "Да");    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПодразделениеСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруРегламента(Кэш,Контекст) Экспорт
	// функция формирует структуру регламента,который проставляется на пакете документов при отправке	
	РегламентСтруктура = Новый Структура;
	РегламентНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Регламент_Название", Контекст.ФайлДанные, Кэш);
	Если ЗначениеЗаполнено(РегламентНазвание) Тогда
		РегламентСтруктура.Вставить("Название", РегламентНазвание);
	КонецЕсли;
	РегламентИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("РегламентИдентификатор", Контекст.ФайлДанные, Кэш);
	Если РегламентИдентификатор<>Неопределено Тогда
		РегламентСтруктура.Вставить("Идентификатор", РегламентИдентификатор);
	КонецЕсли;
	Возврат РегламентСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьМассивОснований(Кэш,Контекст) Экспорт
	// функция формирует массив с данными документов-оснований,которые указываются на пакете документов при отправке	
	ОснованияМассив = Новый Массив;
	Если Контекст.ФайлДанные.Свойство("мДокументОснование") Тогда
		Для Каждого Параметр Из Контекст.ФайлДанные.мДокументОснование Цикл
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Параметр.Значение);
			Основание = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДокументОснование",Контекст.ФайлДанные,Основание);
			Если Основание.Свойство("Дата") и ЗначениеЗаполнено(Основание.Дата) и Основание.Свойство("Номер") и ЗначениеЗаполнено(Основание.Номер) Тогда
				ОснованияМассив.Добавить(Основание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ОснованияМассив;
КонецФункции
&НаКлиенте
Функция сбисПолучитьСвязанныеДокументы1С(Кэш,Контекст) Экспорт
	// функция формирует список документов 1С, по которым формируется текущее вложение и на которых необходимо проставлять статусы электронных документов 
	// например, для УПД необходимо обновлять статусы не только на СФ, но и на реализациях	
	Документы1С = Новый СписокЗначений;
	Если Контекст.ФайлДанные.Свойство("мСвязанныеДокументы1С") Тогда
		Для Каждого Параметр Из Контекст.ФайлДанные.мСвязанныеДокументы1С Цикл
			Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
				Для Каждого Элемент Из Параметр.Значение Цикл
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент);
					Основание = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"СвязанныеДокументы1С",Элемент,Основание);
					Документы1С.Добавить(Основание.Документ1С);	
				КонецЦикла;
			Иначе
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Параметр.Значение);
				Основание = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"СвязанныеДокументы1С",Контекст.ФайлДанные,Основание);
				Документы1С.Добавить(Основание.Документ1С);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Документы1С;
КонецФункции
&НаКлиенте
Функция ЗаполнитьРеквизитыОснованийПакета(СоставПакета, Кэш) Экспорт
	// функция заполняет дату, номер, тип документов-оснований пакета	
	Если СоставПакета.Свойство("ДокументОснование") Тогда
		Для Каждого ДокОснование Из СоставПакета.ДокументОснование Цикл
			Попытка
				Если Не ЗначениеЗаполнено(ДокОснование.Документ.Дата) Тогда
					ПакетОснование = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ДокОснование.Документ.Идентификатор);
					ДокОснование.Документ.Дата = ПакетОснование.Дата;
					ДокОснование.Документ.Номер = ПакетОснование.Номер;
					ДокОснование.Документ.Тип = ПакетОснование.Тип;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат СоставПакета;
КонецФункции
&НаКлиенте
Функция ЗаполнитьАтрибуты(Кэш,Раздел,Ини,СтруктураДокумента) Экспорт
	// Функция используется при формировании структуры файла при выгрузке документа 1С
	// С помощью данной функции в структуру файла добавляются атрибуты, которые описаны в файле настроек в узлах типа "Файл_", "Документ_", "ТаблДок_"
	Раздел = Раздел+"_";
	Длина = СтрДлина(Раздел);
	Для Каждого Параметр Из ини Цикл
		Если  Лев(Параметр.Ключ,Длина)=Раздел Тогда
			ЗначениеПараметра = Кэш.ОбщиеФункции.РассчитатьЗначение(Параметр.Ключ, Ини, Кэш);
			СтруктураДокумента.Вставить(Сред(Параметр.Ключ,Длина+1),ЗначениеПараметра);
			Ини[Параметр.Ключ] = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
КонецФункции	
&НаКлиенте
Процедура ДобавитьОшибкуВРезультатОтправки(Кэш, ТекстОшибки, РасширенноеОписаниеОшибки, Документ1С, КодОшибки = 100) Экспорт
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", Документ1С, РасширенноеОписаниеОшибки, Новый Структура("message,details,code", ТекстОшибки, РасширенноеОписаниеОшибки, КодОшибки));
	ЭлементСоответствия.Добавить(СтрокаВСоответствие);
	
КонецПроцедуры	
&НаКлиенте
Функция сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайла) Экспорт
	Попытка
		// Проверяем возможность загрузки вложения. Из раздела Полученные загружаем только входящие, из Отправленные только исходящие вложения.
		// Если Вложение.Направление = "Входящий" и (Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "8") Тогда//Для сопоставления из раздела задач       // попробуем убрать условие на текущий раздел, так как мешает загружать документы, созданные в кабинете
		Если Вложение.Направление = "Входящий" Тогда
			ИмяИни = ФорматВерсияФайла;
			Если НЕ Кэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
				ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
			КонецЕсли;
			// ИначеЕсли Вложение.Направление = "Исходящий" и (Кэш.Текущий.Раздел = "2" ИЛИ Кэш.Текущий.Раздел = "7") Тогда 
		ИначеЕсли Вложение.Направление = "Исходящий" Тогда
			ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
		Иначе
			ВызватьИсключение("");
		КонецЕсли;
		Если Кэш.Ини.Свойство(ИмяИни) Тогда
			Возврат Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции

Процедура ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект,Документ1С) Экспорт
	
	ПараметрыВычитки	= Новый Структура("ВыгружатьТабличныеЧасти, ВыгружатьСтандартныеРеквизиты", Ложь, Ложь);
	СтруктураДокОбъект	= МодульОбъектаСервер().ВычитатьСтруктуруОбъекта1С(Документ1С, ПараметрыВычитки);

КонецПроцедуры

//Функция заполняет структуру для создания элемента справочника 
&НаКлиенте
Функция ЗаполнитьСтруктуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураНоменклатура)  Экспорт
	
	КлючНоменклатура = "Номенклатура";
	ИниНоменклатуры = Новый Структура;
	//Собираем ини для расчета
	Для Каждого Элемент Из Кэш.Ини.Конфигурация Цикл
		Если Лев(Элемент.Ключ,13) = КлючНоменклатура + "_" Тогда
			ИниНоменклатуры.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	КонтекстЗаполнения = Новый Структура("Ини, ДанныеИсточник, ДанныеИсточникЛокальные", СбисСкопироватьОбъектНаКлиенте(Кэш.Ини.Конфигурация), СтруктураФайла, СтрТабл);
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	ОписаниеОбъектаНоменклатуры = Новый Структура("Ключ, Значение, Ини", КлючНоменклатура, СтруктураНоменклатура, ИниНоменклатуры);
	ПараметрыЗаполнения			= Новый Структура("Кэш, Контекст, ДополнительныеПараметры", Кэш, КонтекстЗаполнения, Новый Структура("ДопАргументыДляФункции", Новый Структура("СтрТабл", СтрТабл)));
	РезультатЗаполнения			= фрм.СбисЗаполнитьСтруктуруОбъекта(ОписаниеОбъектаНоменклатуры, ПараметрыЗаполнения);
	СтруктураНоменклатура		= РезультатЗаполнения.Значение;
	
КонецФункции
&НаСервереБезКонтекста
Функция сбисНомерНаПечать(НомерДок) Экспорт
	// функция обрезает префикс в номере документа	
	НомерНаПечать = НомерДок;
	// удаление ведущих нулей
	Пока Лев(НомерНаПечать, 1)="0" Цикл
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЦикла;
	Если Лев(НомерНаПечать, 1) = "-" Тогда
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЕсли;
	Возврат НомерНаПечать;
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(Кэш)
	// функция формирует структуру фильтров, которые используются в запросе документов 1С при построении списка документов в разделах Продажа и Покупка	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыФильтра = Новый Структура;
	
	ПараметрыФильтра.Вставить( "ФильтрДатаНач", ГлавноеОкно.ФильтрДатаНач); 
	ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ГлавноеОкно.ФильтрДатаКнц); 
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", ГлавноеОкно.ФильтрКонтрагент);
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", ГлавноеОкно.ФильтрКонтрагентПодключен);
	ПараметрыФильтра.Вставить( "ФильтрДокумент", ГлавноеОкно.ФильтрДокумент);
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", ГлавноеОкно.ФильтрОрганизация);
	ПараметрыФильтра.Вставить( "ФильтрСостояние", ГлавноеОкно.ФильтрСостояние);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ГлавноеОкно.ФильтрОтветственный);
	ПараметрыФильтра.Вставить( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице1С ); 
	ПараметрыФильтра.Вставить( "Страница", ГлавноеОкно.ФильтрСтраница );
	ПараметрыФильтра.Вставить( "ВсеДокументы", ГлавноеОкно.ВсеДокументы );
	ПараметрыФильтра.Вставить( "ФильтрМаска", ГлавноеОкно.ФильтрМаска ); // alo СтатусГос
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	// Добавляем пользовательские фильтры
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыФильтра;	
КонецФункции	
&НаКлиенте
Функция сбисОбновитьРеестрДокументов1С(Ини, Кэш) Экспорт
	// функция формирует данные для показа реестров документов 1С в разделах Продажа и Покупка	
	СтруктураДляОбновленияФормы = Новый Структура;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	//ТаблДок = ГлавноеОкно.Таблица_РеестрДокументов;
	//ТаблДок.Очистить();
	ПараметрыФильтра = ПолучитьФильтр(Кэш);
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СбисПолучитьСписокДокументов1С", Кэш.ФормаРаботыСоСтатусами, "" , Кэш);
	Если фрм = Ложь Тогда
		ТекстЗапроса = РассчитатьЗначение("ЗапросСпискаДокументов",Ини, ГлавноеОкно.Кэш);
		МассивДокументов1С = ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, Кэш.Парам.КаталогНастроек);
	Иначе
		МассивДокументов1С = фрм.СбисПолучитьСписокДокументов1С(Новый Структура("Ини, Фильтр", Ини, ПараметрыФильтра), Кэш);
	КонецЕсли;
	ГлавноеОкно.ФильтрЕстьЕще = ПараметрыФильтра.ФильтрЕстьЕще;
	ГлавноеОкно.ФильтрСтраница = ПараметрыФильтра.Страница;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьСтатусыВТаблицеДокументов1С", Кэш.ФормаРаботыСоСтатусами, "" , Кэш);
	Если фрм <> Ложь Тогда
		МассивДокументов1С = фрм.ЗаполнитьСтатусыВТаблицеДокументов1С(МассивДокументов1С, ПараметрыФильтра, Кэш.Ини, Кэш.Парам.КаталогНастроек);
	КонецЕсли;
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов1С);
	Возврат СтруктураДляОбновленияФормы; 
КонецФункции
//Формирование структуры по xml документа
&НаСервереБезКонтекста
Функция ЗаполнитьСтруктуруФайла(Знач СтрокаXML) Экспорт
	// Функция формирует структуру по XML	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		//UAA переделал заколоченные узлы на контекст сериализации.
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		КонтекстВыполнения = Новый Структура("УзелКакМассив", Новый Массив);
		КонтекстВыполнения.УзелКакМассив.Добавить("СтрТабл");
		КонтекстВыполнения.УзелКакМассив.Добавить("ИтогТабл");
		КонтекстВыполнения.УзелКакМассив.Добавить("Основание");
		КонтекстВыполнения.УзелКакМассив.Добавить("ДопСведения");
		КонтекстВыполнения.УзелКакМассив.Добавить("ДопАдрЭл");
		КонтекстВыполнения.УзелКакМассив.Добавить("НомСредИдентТов");
		КонтекстВыполнения.УзелКакМассив.Добавить("НомУпак");
		КонтекстВыполнения.УзелКакМассив.Добавить("КИЗ");
		КонтекстВыполнения.УзелКакМассив.Добавить("СведПрослеж");
		КонтекстВыполнения.УзелКакМассив.Добавить("НомерГТД");
		ПрочитатьУзелDOM(ДокументДОМ.ПервыйДочерний, СтруктураФайла, КонтекстВыполнения);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции
&НаСервереБезКонтекста
Функция ПрочитатьУзелDOM(УзелDOM, Узел, КонтекстВыполнения) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			//Узел.Вставить("Значение", Уз.ПолныйТекст);
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначеесли не Узел.свойство("Параметр") тогда
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.Атрибуты.Количество() <> 0 или Уз.ПервыйДочерний <> Неопределено Тогда
				НоваяСтруктура = Новый Структура;
				Атрибуты = Уз.Атрибуты;
				Для каждого Атрибут из Атрибуты Цикл
					Попытка
						НоваяСтруктура.Вставить(Атрибут.ИмяУзла, Атрибут.ЗначениеУзла);
					Исключение
					КонецПопытки;
				КонецЦикла;	
				Если Не КонтекстВыполнения.УзелКакМассив.Найти(Уз.ИмяУзла) = Неопределено Тогда
				//Если Уз.ИмяУзла = "СтрТабл" или Уз.ИмяУзла = "ИтогТабл" или Уз.ИмяУзла = "Основание" или Уз.ИмяУзла = "ДопСведения" или Уз.ИмяУзла = "ДопАдрЭл" ИЛИ Уз.ИмяУзла = "НомСредИдентТов" ИЛИ Уз.ИмяУзла = "НомУпак" ИЛИ Уз.ИмяУзла = "КИЗ" Тогда//<--KES МОТП ИСМП
					Если Узел.Свойство(Уз.ИмяУзла) = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел[Уз.ИмяУзла];
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "Параметр" Тогда
					Если Узел.Свойство("Параметр") = Ложь Тогда
						//МассивСтрок = Новый Массив;
						Параметр = Новый Структура;    
					Иначе
						Параметр = Узел.Параметр;//сбис Никифоров
					КонецЕсли;    
					//МассивСтрок.Добавить(НоваяСтруктура);
					//Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
					Попытка
						Параметр.Вставить(СтрЗаменить(СтрЗаменить(НоваяСтруктура.Имя,"-","")," ",""), НоваяСтруктура.Значение);
						Узел.Вставить(Уз.ИмяУзла, Параметр);
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(Уз.ИмяУзла, 6) = "Список" Тогда
					Если Уз.ПервыйДочерний <> Неопределено Тогда
						мУз = УЗ.ПервыйДочерний;
						ИмяУзла = мУз.ИмяУзла;
						Если		ИмяУзла = "Параметр" 
							Или	Не	КонтекстВыполнения.УзелКакМассив.Найти(ИмяУзла) = Неопределено Тогда
							Пока мУз<>Неопределено Цикл
								ПрочитатьУзелDOM(мУз, Узел, КонтекстВыполнения);
								мУз = мУз.СледующийСоседний;
							КонецЦикла;
						Иначе
							МассивСтрок = Новый Массив;
							Пока мУз<>Неопределено Цикл
								ДочУзел = Новый Структура;
								ВложениеУзла = Неопределено;
								ПрочитатьУзелDOM(мУз, ДочУзел, КонтекстВыполнения);
								Если ТипЗнч(ДочУзел) = Тип("Структура") Тогда
									Для Каждого Элемент Из ДочУзел Цикл
										ВложениеУзла = Элемент.Значение;
										Прервать;
									КонецЦикла; 
									Если ВложениеУзла<>Неопределено Тогда
										МассивСтрок.Добавить(ВложениеУзла);
									КонецЕсли;
								КонецЕсли;
								мУз = мУз.СледующийСоседний;
							КонецЦикла;
							Узел.Вставить(ИмяУзла, МассивСтрок);
						КонецЕсли;
					КонецЕсли;
				Иначе	
					Узел.Вставить(Уз.ИмяУзла, НоваяСтруктура);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено и Лев(Уз.ИмяУзла, 6) <> "Список" Тогда
			Уз				= УЗ.ПервыйДочерний;
			УзелНаОбработку	= Узел[УЗ.РодительскийУзел.ИмяУзла];
			ДочУзел			= сбисСкопироватьОбъект(УзелНаОбработку);
			//Если это массив, то обрабатываем последнюю строку
			Если ТипЗнч(ДочУзел) = Тип("Массив") Тогда
				УзелНаЗаполнение = ДочУзел[УзелНаОбработку.Количество()-1];
				ПрочитатьУзелDOM(Уз, УзелНаЗаполнение, КонтекстВыполнения);
				ДочУзел[УзелНаОбработку.Количество()-1] = УзелНаЗаполнение;
			Иначе
				ПрочитатьУзелDOM(Уз, ДочУзел, КонтекстВыполнения);
			КонецЕсли;
			Если ТипЗнч(ДочУзел) = Тип("Структура") 
				И	Не	КонтекстВыполнения.УзелКакМассив.Найти(УЗ.РодительскийУзел.ИмяУзла) = Неопределено Тогда
				//И	(	УЗ.РодительскийУзел.ИмяУзла = "СтрТабл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ИтогТабл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "Основание"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ДопСведения"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ДопАдрЭл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "Параметр"
				//Или УЗ.РодительскийУзел.ИмяУзла = "НомСредИдентТов"
				//Или УЗ.РодительскийУзел.ИмяУзла = "НомУпак"
				//Или УЗ.РодительскийУзел.ИмяУзла = "КИЗ") Тогда
				сбисСкопироватьСтруктуру(УзелНаОбработку[УзелНаОбработку.Количество()-1], ДочУзел);
			Иначе	
				Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			КонецЕсли;	
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Если Лев(Уз.РодительскийУзел.ИмяУзла, 6) = "Список" Тогда
			Прервать;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции		
//Блок функций, использующихся при формировании структур документов

// Функция формирует структуру Стороны (отправителя, получателя, поставщика, покупателя) в универсальном формате (3.01).	
&НаКлиенте
Функция ПолучитьСторону(Кэш, знач Контекст) Экспорт  
	
	Участник = Новый Структура;
	
	ДопПараметрыДляСторны		= Новый Соответствие;
	
	ИдентификационныйНомер =  СокрЛП(РассчитатьЗначение("Сторона_ИНН", Контекст, Кэш));
	ТипИдентификационногоНомера = МодульОбъектаКлиент().ОпределитьТипИдентификационногоНомера(ИдентификационныйНомер);
	
	Если  ТипИдентификационногоНомера.БИН Тогда
		БИН	= ИдентификационныйНомер;
		Участник.Вставить("КлючИдентификатора", "БИН");
	ИначеЕсли  ТипИдентификационногоНомера.ИИН Тогда
		ИИН	= ИдентификационныйНомер;
		Участник.Вставить("КлючИдентификатора", "ИИН");
	Иначе
		ИНН	= ИдентификационныйНомер;
		Участник.Вставить("КлючИдентификатора", "ИНН");
	КонецЕсли;	

	СбисКодСтраны				= "643";
	ЭтоИностраннаяОрганизация	= РассчитатьЗначение("ИностраннаяОрганизация", Контекст) = Истина;
	
	ТекКодСтраны = РассчитатьЗначение("КодСтраны", Контекст);
	Если ЗначениеЗаполнено(ТекКодСтраны) Тогда
		СбисКодСтраны				= ТекКодСтраны;
		ЭтоИностраннаяОрганизация	= ЭтоИностраннаяОрганизация Или Не (СбисКодСтраны = "643" Или СбисКодСтраны = "398");
	КонецЕсли;
	Если	Не ЗначениеЗаполнено(ИдентификационныйНомер)
		И	Не ЭтоИностраннаяОрганизация Тогда
		// У иностранной организации может не быть ИНН/КПП
		Возврат Неопределено;
	КонецЕсли;

	
	ИспользоватьКакРоль = Ложь;
	Если	Контекст.Свойство("Роль")
		И	Контекст.Роль = "Получатель" Тогда
		ИспользоватьКакРоль = РассчитатьЗначение("ИспользоватьКакПолучателя",Контекст) = Истина;
		ДопПараметрыДляСторны.Вставить("ИспользоватьКакПолучатель", ИспользоватьКакРоль);
	КонецЕсли;
	
	// добавляем рассчитанные ИНН/КПП в Контекст для правильного расчета Идентификатора (если ИНН/КПП вычисляются функцией)
	// КПП для иностранной организации не заполняем
	Контекст.Сторона_ИНН = ИдентификационныйНомер;
	Если СтрДлина(СокрЛП(Инн))<>12 И НЕ ЭтоИностраннаяОрганизация Тогда
		КПП = РассчитатьЗначение("Сторона_КПП",Контекст, Кэш);
		Если Контекст.Свойство("КПППодразделения") и ЗначениеЗаполнено(Контекст.КПППодразделения) // в счет-фактуре КПП контрагента можно указать прямо на документе (если у контрагента есть филиалы)
				И Не ИспользоватьКакРоль Тогда  
			КПП = РассчитатьЗначение("КПППодразделения",Контекст, Кэш);  
		КонецЕсли;
		Контекст.Сторона_КПП = КПП;
	КонецЕсли;
	
	Название = РассчитатьЗначение("Сторона_Наименование",Контекст, Кэш);
	Если Контекст.Свойство("Сторона_Роль") Тогда
		Участник.Вставить("Роль",РассчитатьЗначение("Сторона_Роль",Контекст, Кэш));
	КонецЕсли;
	Участник.Вставить("Название",Название);
	
	GLN = РассчитатьЗначение("Сторона_GLN",Контекст, Кэш);
	Участник.Вставить("GLN",GLN);
	
	Если Контекст.Свойство("мПараметр") Тогда
		Участник.Вставить("Параметр",Новый Массив);
		Для Каждого Элемент Из Контекст.мПараметр Цикл
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст,Элемент.Значение);
			Параметр = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст,Параметр);
			Участник.Параметр.Добавить(Параметр);
		КонецЦикла;
	КонецЕсли;
	
	АдрМассив = Новый Массив;
	Адрес = РассчитатьЗначение("Сторона_Адрес",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	Адрес = РассчитатьЗначение("Сторона_АдресФакт",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	//Добавляем узлы по алфавиту
	Участник.Вставить("Адрес",АдрМассив); 
	
	БанкРекв = Новый Структура();
	ЗаполнитьАтрибуты(Кэш, "БанкРекв", Контекст, БанкРекв);
	Если БанкРекв.Количество() <> 0 Тогда
		Участник.Вставить("БанкРекв", БанкРекв);
	КонецЕсли;	
	
	//Код = Новый Структура;
	//сбисПолучитьФорму("Файл_Шаблон").ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Код);
	//Если Код.Количество() <> 0 Тогда
	//	Участник.Вставить("Код", Код);
	//КонецЕсли;	
	
	Контакт = Новый Структура;
	ЗаполнитьАтрибуты(Кэш, "Контакт", Контекст, Контакт);
	Если Контакт.Количество() <> 0 Тогда
		Участник.Вставить("Контакт", Контакт);
	КонецЕсли;		
	
	ПодразделениеНазвание = РассчитатьЗначение("Подразделение_Наименование",Контекст,Кэш);
	Если ПодразделениеНазвание<>Неопределено Тогда 
		Участник.Вставить("Подразделение", Новый Структура("Название",ПодразделениеНазвание));
	КонецЕсли;
	
	ПодразделениеИдентификатор = РассчитатьЗначение("Подразделение_Идентификатор",Контекст,Кэш);
	Если ПодразделениеИдентификатор <> Неопределено Тогда
		Если Участник.Свойство("Подразделение") Тогда
			Участник.Подразделение.Вставить("Идентификатор", ПодразделениеИдентификатор);
		Иначе	
			Участник.Вставить("Подразделение", Новый Структура("Идентификатор",ПодразделениеИдентификатор));
		КонецЕсли;	
	КонецЕсли;
	
	Представители = Новый Структура;
	Если Контекст.Свойство("мПредставитель") Тогда
		Для Каждого Элемент Из Контекст.мПредставитель Цикл
			Представитель = Новый Структура;
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст,Элемент.Значение);
			Должность=РассчитатьЗначение("Должность",Контекст,Кэш);
			ИННПредст=РассчитатьЗначение("ИНН",Контекст,Кэш);
			Фамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Фамилия", Контекст, Кэш);
			ЭлементПредставитель = Элемент.Значение;
			
			Основания = Новый Массив;
			Если Элемент.Значение.Свойство("мОснование") Тогда
				Для Каждого ЭлементОснование Из Элемент.Значение.мОснование Цикл
					сбисСкопироватьСтруктуру(ЭлементПредставитель,ЭлементОснование.Значение);
					Основание = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ЭлементПредставитель,Основание);
					Основания.Добавить(Основание);
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Фамилия) Тогда  // если фио в базе лежит по отдельным полям
				Имя = Кэш.ОбщиеФункции.РассчитатьЗначение("Имя", Контекст, Кэш);	
				Отчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Отчество", Контекст, Кэш);
				Представитель = Новый Структура("Должность,СвФЛ", Должность, Новый Структура("Фамилия,Имя,Отчество,ИНН", Фамилия, Имя, Отчество,ИННПредст));
			Иначе  // если фио в базе лежит в одном поле
				ФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("ФИО", Контекст, Кэш);
				Если ЗначениеЗаполнено(ФИО) Тогда
					СвФЛ = Кэш.ОбщиеФункции.сбисПолучитьФИО(ФИО);
					СвФЛ.Вставить("ИНН",ИННПредст);
					Представитель = Новый Структура("Должность,СвФЛ",Должность,СвФЛ)
				КонецЕсли;
			КонецЕсли;
			Если Основания.Количество()>0 Тогда
				Представитель.Вставить("Основание", Основания);
			КонецЕсли;
			Контакт = Новый Структура;
			ЗаполнитьАтрибуты(Кэш, "Контакт", Элемент.Значение, Контакт);
			Если Контакт.Количество() <> 0 Тогда
				Представитель.Вставить("Контакт", Контакт);
			КонецЕсли;
			
			Если Представитель.Количество()>0 Тогда
				Представители.Вставить(Элемент.Ключ,Представитель);
			КонецЕсли;
		КонецЦикла;
		Участник.Вставить("Представители",Представители);
	КонецЕсли;
	
	Если ЭтоИностраннаяОрганизация Тогда
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ",СвЮЛ);
		Участник.СвЮЛ.Вставить("Название",	Название);
		Участник.СвЮЛ.Вставить("ИНН",		ИНН);
		Участник.СвЮЛ.Вставить("КодСтраны",	СбисКодСтраны);
		ДопПараметрыДляСторны.Вставить("ИностраннаяОрганизация", Истина);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	ИначеЕсли СтрДлина(СокрЛП(ИНН))=12 Тогда
		ФИОСтруктура = сбисПолучитьФИОИзНазвания(Название);
		СвФЛ = Новый Структура;
		Участник.Вставить("СвФЛ",СвФЛ);
		Участник.СвФЛ.Вставить("ИНН", ИНН);
		Участник.СвФЛ.Вставить("Фамилия",ФИОСтруктура.Фамилия);
		Участник.СвФЛ.Вставить("Имя",ФИОСтруктура.Имя);
		Участник.СвФЛ.Вставить("Отчество",ФИОСтруктура.Отчество);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвФЛ);
	ИначеЕсли ЗначениеЗаполнено(БИН) Тогда
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ",СвЮЛ);
		Участник.СвЮЛ.Вставить("Название", Название);
		Участник.СвЮЛ.Вставить("БИН", БИН);
		Участник.СвЮЛ.Вставить("КодСтраны",	СбисКодСтраны);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	ИначеЕсли ЗначениеЗаполнено(ИИН) Тогда
		СвФЛ = Новый Структура;		
		Участник.Вставить("СвФЛ",СвФЛ);   
		Участник.СвФЛ.Вставить("Название", Название);
		Участник.СвФЛ.Вставить("ИИН", ИИН);
		Участник.СвФЛ.Вставить("КодСтраны",	СбисКодСтраны);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвФЛ);
	Иначе
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ", СвЮЛ);
		Участник.СвЮЛ.Вставить("Название", Название);
		Участник.СвЮЛ.Вставить("ИНН", ИНН);
		Участник.СвЮЛ.Вставить("КПП", КПП);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	КонецЕсли;
	
	Если Не Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство("мСторона") Тогда
		Кэш.ТекущийСеанс.РасчитанныеЗначения.Вставить("мСторона", Новый Соответствие);
	КонецЕсли;
	
	Идентификатор = РассчитатьЗначение("Сторона_Идентификатор", Контекст, Кэш);
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ДопПараметрыДляСторны.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	КодОператораАбонЯщика = РассчитатьЗначение("Сторона_КодОператораАбонентскогоЯщика", Контекст);
	Если ЗначениеЗаполнено(КодОператораАбонЯщика) Тогда
		ДопПараметрыДляСторны.Вставить("КодОператораАбонентскогоЯщика", КодОператораАбонЯщика);
	КонецЕсли;
	
	КодФилиалаОтправителя = РассчитатьЗначение("ЗначениеКодФилиалаОтправителя", Контекст);
	Если ЗначениеЗаполнено(КодФилиалаОтправителя) Тогда
		ДопПараметрыДляСторны.Вставить("КодФилиалаОтправителя", КодФилиалаОтправителя);
	КонецЕсли;
	МодульОбъектаКлиент().СохранитьДополнительныеПараметрыСтороны(Участник, ДопПараметрыДляСторны);
	
	Возврат Участник;  
	
КонецФункции

//Функция возвращает ключ стороны для получения доп. параметров в кэше
&НаКлиенте
Функция КлючСтороныДляДопПараметров(мСторона, ДопПараметры) Экспорт
	Перем СвФлЮл;
	Если		мСторона.Свойство("СвЮЛ", СвФлЮл) Тогда
		Возврат ?(СвФлЮл.Свойство("КодСтраны") И СвФлЮл.КодСтраны <> "643", "ИО", "") + "_" + СвФлЮл.ИНН + ?(СвФлЮл.Свойство("КПП"), "_" + СвФлЮл.КПП, "");
	ИначеЕсли   мСторона.Свойство("СвФЛ", СвФлЮл) Тогда 
		Возврат "_" + СвФлЮл.ИНН;
	Иначе
		Возврат "_" + мСторона.Название;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьФИОИзНазвания(Название) Экспорт
	Название = СокрЛП(Название);
	ФИО = Название;
	
	Если Сред(Нрег(Название),1,3)="ип " или Сред(Нрег(Название),1,3)="чп " тогда
		ФИО =СокрЛП(Сред(Название,4));
	КонецЕсли;
	Если Сред(Нрег(Название),1,31)="индивидуальный предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,32));
	КонецЕсли;
	Если Сред(Нрег(Название),1,8)="адвокат " тогда
		ФИО =СокрЛП(Сред(Название,9));
	КонецЕсли;
	Если Сред(Нрег(Название),1,9)="нотариус " тогда
		ФИО =СокрЛП(Сред(Название,10));
	КонецЕсли;
	Если Сред(Нрег(Название),1,50)="предприниматель без образования юридического лица " тогда
		ФИО =СокрЛП(Сред(Название,51));
	КонецЕсли;
	Если Сред(Нрег(Название),1,6)="пбоюл " тогда
		ФИО =СокрЛП(Сред(Название,7));
	КонецЕсли;
	Если Сред(Нрег(Название),1,16)="предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,17));
	КонецЕсли;
	
	Пока Найти(ФИО, "  ") Цикл
		ФИО = СтрЗаменить(ФИО, "  ", " ");		
	КонецЦикла;
	
	ФИО = РазбитьСтрокуВМассивНаКлиенте(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия,Имя,Отчество", Фамилия, Имя, Отчество);
КонецФункции
&НаСервереБезКонтекста
Функция сбисПолучитьФИОИзНазванияНаСервере(Название) Экспорт
	ФИО = Название;
	
	Если Сред(Нрег(Название),1,3)="ип " или Сред(Нрег(Название),1,3)="чп " тогда
		ФИО =СокрЛП(Сред(Название,4));
	КонецЕсли;
	Если Сред(Нрег(Название),1,31)="индивидуальный предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,32));
	КонецЕсли;
	Если Сред(Нрег(Название),1,8)="адвокат " тогда
		ФИО =СокрЛП(Сред(Название,9));
	КонецЕсли;
	Если Сред(Нрег(Название),1,9)="нотариус " тогда
		ФИО =СокрЛП(Сред(Название,10));
	КонецЕсли;
	Если Сред(Нрег(Название),1,50)="предприниматель без образования юридического лица " тогда
		ФИО =СокрЛП(Сред(Название,51));
	КонецЕсли;
	Если Сред(Нрег(Название),1,6)="пбоюл " тогда
		ФИО =СокрЛП(Сред(Название,7));
	КонецЕсли;
	Если Сред(Нрег(Название),1,16)="предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,17));
	КонецЕсли;
	
	ФИО = РазбитьСтрокуВМассив(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия,Имя,Отчество", Фамилия, Имя, Отчество);
КонецФункции
//Функция СкопироватьУчастника(Участник,НоваяРоль) Экспорт
//	Копия = Новый Структура;
//	Для Каждого Элемент из Участник Цикл
//		Если Элемент.Ключ = "Роль" Тогда
//			Копия.Вставить("Роль",НоваяРоль);
//		Иначе
//			Копия.Вставить(Элемент.Ключ,Элемент.Значение);
//		КонецЕсли
//	КонецЦикла;
//	
//	Возврат Копия;
//КонецФункции	

// Функция возвращает числовое значение ставки НДС по её строковому представлению
//
// Параметры:
//  СтавкаНДС	 - Строка - строковое представление ставки НДС
// 
// Возвращаемое значение:
//  Число - числовое значение ставки НДС или 0, если значение не соответствует описанию типа 
//
&НаКлиенте
Функция сбисПолучитьСтавкуНДСЧисло(СтавкаНДС) Экспорт
	
	СтавкаРаздельно = СтрЗаменить(СтавкаНДС, "/", Символы.ПС);
	ТипЧисло = Новый ОписаниеТипов("Число");  
	СтрокаПоиска = ТипЧисло.ПривестиЗначение(СтрПолучитьСтроку(СтавкаРаздельно, 1));  
	
	Возврат СтрокаПоиска; 
	
КонецФункции   

&НаКлиенте
Процедура сбисРаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, КлючРаспределения="Сумма") Экспорт
	
	// Определяем сумму базы
	СуммаБазы = 0;
	
	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;
	
	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
			
			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;
			
			// Записываем результат   
			Если Не ТаблицаРезультата[Индекс].Свойство("Рассчитано") Или Не ТаблицаРезультата[Индекс].Рассчитано Тогда
				ТаблицаРезультата[Индекс][КлючРаспределения] = Формат(ШагРаспределения, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
			КонецЕсли;			
			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция сбисРаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
	УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;
	
	Возврат МассивСумм;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивИсходныеНомераСтрок(Документ) Экспорт
	Попытка
		Возврат Документ.КорректируемыеНомераСтрок.ВыгрузитьКолонку("НомерИсходнойСтроки");		
	Исключение
		Возврат Новый Массив;
	КонецПопытки;
КонецФункции

#Область include_core2_vo2_ОбщиеФункции_ОтборПоМассивуСтрок
#КонецОбласти

#Область include_core2_vo2_ОбщиеФункции_Статусы
#КонецОбласти

