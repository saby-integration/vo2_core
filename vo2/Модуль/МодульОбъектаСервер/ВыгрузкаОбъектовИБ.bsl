
// Выгружет все поля переданных записей по переданным ссылкам.
//
// Параметры:
//  ДанныеДляВыгрузки	 - ЛюбаяСсылка, Массив	 - Сыллка на элемент ИБ или массив ссылок
//  ПараметрыВыгрузки	 - Структура	 - Возможные параметры:
//   Глубина (Число = 1 - количество уровней выгрузки подобъектов. 1 - только переданные ссылки)
//   СсылкиКакСтроки (Булево = Ложь - в ответы ссылочные типы преобразовываются в строки)
//   ГлубинаВыгрузкиИзРегистров (Число = 1 - количество уровней выгрузки подобъектов регистров. 0 - не выгружать регистры)
// 
// Возвращаемое значение:
//  Соответствие - ключ-ссылка, значение-структура объекта
//
Функция ВыгрузитьПоляОбъектовИБ(ДанныеДляВыгрузки, ПараметрыВыгрузки) Экспорт
	Перем Глубина, ГлубинаВыгрузкиИзРегистров;
	
	КэшТипов = Новый Соответствие;
	
	Если ТипЗнч(ДанныеДляВыгрузки) = Тип("Массив") Тогда
		Ссылки = ДанныеДляВыгрузки;
	Иначе
	   
		ТипСтрокой = ИмяТаблицыБазы(ДанныеДляВыгрузки, КэшТипов);
		
		Ссылки = Новый Массив;
		Ссылки.Добавить(ДанныеДляВыгрузки);
	
	КонецЕсли;
	
	Объекты = Новый Соответствие;
		
	Для каждого Ссылка Из Ссылки Цикл
	    
		ТипСтрокой = ИмяТаблицыБазы(Ссылка, КэшТипов);
		Если Объекты.Получить(ТипСтрокой) = Неопределено Тогда
			Объекты.Вставить(ТипСтрокой, Новый Массив);
		КонецЕсли;
		Объекты[ТипСтрокой].Добавить(Ссылка);
	
	КонецЦикла;
	
	Если НЕ ПараметрыВыгрузки.Свойство("Глубина", Глубина) Тогда
		Глубина = 1;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ГлубинаВыгрузкиИзРегистров", ГлубинаВыгрузкиИзРегистров) Тогда
		ГлубинаВыгрузкиИзРегистров = 0;
	КонецЕсли;
	
	СтруктурыОбъектов = Новый Соответствие;
	ДопПараметрыПолученияОбъектов = Новый Структура("Уровень, СсылкиКакСтроки", Глубина);
	
	Если ГлубинаВыгрузкиИзРегистров Тогда
		ДопПараметрыПолученияОбъектов.Вставить("Ссылки", Новый Массив);
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("СсылкиКакСтроки", ДопПараметрыПолученияОбъектов.СсылкиКакСтроки) Тогда
		ДопПараметрыПолученияОбъектов.СсылкиКакСтроки = Ложь;
	КонецЕсли;
	
	КонтекстВыгрузки = Новый Структура("Объекты, СтруктурыОбъектов", Объекты, СтруктурыОбъектов);
	ДополнитьСтруктурамиОбъектов(КонтекстВыгрузки, ДопПараметрыПолученияОбъектов);
	
	// Пока не тронуто
	ОписаниеРегистров = ОписаниеРегистровСведений();
	ПараметрыРегистров = Новый Соответствие;
	
	Для каждого Регистр Из ОписаниеРегистров Цикл
			
		Отборы = Новый Массив;
	
		Если Регистр.Значение.Найти("Объект") <> Неопределено Тогда
			
			Условие = Новый Структура;
			Условие.Вставить("Поле", "Объект");
			Условие.Вставить("ВидСравнения", "В");
			Условие.Вставить("Значение", ДопПараметрыПолученияОбъектов.Ссылки);
			Отборы.Добавить(Условие);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Ключи = "";
		
		Для каждого Измерение Из Регистр.Значение Цикл
			Ключи = Ключи + Измерение + ",";
		КонецЦикла;
		
		Ключи = Лев(Ключи, СтрДлина(Ключи) - 1);
		
		ПараметрыРегистров.Вставить(Регистр.Ключ, Новый Структура("Отборы, Ключи", Отборы, Ключи));
	
	КонецЦикла;
	
	КонтекстВыгрузки = Новый Структура("ПараметрыОтбора, СтруктурыОбъектов", ПараметрыРегистров, СтруктурыОбъектов);
	ДопПараметрыВыгрузкиРегисров = Новый Структура;
	ДопПараметрыВыгрузкиРегисров.Вставить("Уровень",			ГлубинаВыгрузкиИзРегистров);
	ДопПараметрыВыгрузкиРегисров.Вставить("СсылкиКакСтроки",	ДопПараметрыПолученияОбъектов.СсылкиКакСтроки);
	
	ДополнитьДопСвойствамиОбъектов(КонтекстВыгрузки, ДопПараметрыВыгрузкиРегисров);
	
	Возврат СтруктурыОбъектов; 
	
КонецФункции

// Процедура - Добавляет в КонтекстВыгрузки.СтруктурыДокументов значения полей указынных ссылок
// НЕ ПРИГОДНА ДЛЯ ВЫЗОВА ВРУЧНУЮ!!!
//
// Параметры:
//  КонтекстВыгрузки - Структура	 - Содержит:
//   Объекты (Соответствие), где ключ - имя таблицы, значение - массив ссылок для выгрузки
//   СтруктурыОбъектов (Соответствие) объект, в который помещается результат запроса
//  ДопПараметры	 - Структура, Неопределено	 - Может содержать:
//   Уровень (Число = 1) итераций выгрузки (P.S уменьшается с каждым рекурсивным вызовом)
//   Ссылки (Массив) для выгрузки из регистров сведений (по умолчанию нет)
//   СсылкиКакСтроки (Булево = Ложь) перед помещением результата преобразовывает ссылки в строки
//
Процедура ДополнитьСтруктурамиОбъектов(КонтекстВыгрузки, ДопПараметры = Неопределено)
	Перем Уровень;
	
	Если ДопПараметры = Неопределено
		ИЛИ НЕ ДопПараметры.Свойство("Уровень", Уровень) Тогда 
		Уровень = 1;
	КонецЕсли;
	
	Объекты = КонтекстВыгрузки.Объекты;
	СтруктурыОбъектов = КонтекстВыгрузки.СтруктурыОбъектов;
		
	Если НЕ Уровень
		ИЛИ НЕ ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Соответствие;
	
	Для каждого ЭлементыВыгрузки Из Объекты Цикл
		
		Отборы = Новый Массив;
		Отборы.Добавить(Новый Структура("Поле, ВидСравнения, Значение", "Ссылка", "В", ЭлементыВыгрузки.Значение));
		
		ПараметрыЗапроса.Вставить(ЭлементыВыгрузки.Ключ, Новый Структура("Отборы", Отборы));
	
	КонецЦикла;
	
	Запрос = СоздатьЗапрос(ПараметрыЗапроса);
	
	МассивыВложенныхОбъектов = Новый Соответствие;
	
	Для каждого РезультатЗапроса Из Запрос.ВыполнитьПакет() Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		КонтекстОбработки = Новый Структура;
		КонтекстОбработки.Вставить("РезультатЗапроса",			РезультатЗапроса);
		КонтекстОбработки.Вставить("Выборка",					Выборка);
		КонтекстОбработки.Вставить("МассивыВложенныхОбъектов",	МассивыВложенныхОбъектов); 
		КонтекстОбработки.Вставить("СтруктурыОбъектов",			СтруктурыОбъектов);  
		КонтекстОбработки.Вставить("КлючЗаписи",				"Ссылка");
				
		ОбработатьВыборкуРезультатаЗапроса(КонтекстОбработки, ДопПараметры);
	
	КонецЦикла;
	
	НовыйКонтекстВыгрузки = Новый Структура("Объекты, СтруктурыОбъектов", МассивыВложенныхОбъектов, СтруктурыОбъектов);
	
	НовыйДопПараметры = Новый Структура;
	
	Для каждого Параметр Из ДопПараметры Цикл
		НовыйДопПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	НовыйДопПараметры.Вставить("Уровень", Уровень - 1);
	
	ДополнитьСтруктурамиОбъектов(НовыйКонтекстВыгрузки, НовыйДопПараметры);

КонецПроцедуры

// Процедура - Добавляет в КонтекстВыгрузки.СтруктурыДокументов строки из указанных регистров
// НЕ ПРИГОДНА ДЛЯ ВЫЗОВА ВРУЧНУЮ!!!
//
// Параметры:
//  КонтекстВыгрузки - Структура	 - Содержит:
//   ПараметрыОтбора (Соответствие), где ключ - имя таблицы, значение - массивы ссылок для выгрузки и ключей группировки
//   СтруктурыОбъектов (Соответствие) объект, в который помещается результат запроса
//  ДопПараметры	 - Структура, Неопределено	 - Может содержать:
//   Уровень (Число = 1) итераций выгрузки (P.S уменьшается с каждым рекурсивным вызовом)
//   СсылкиКакСтроки (Булево = Ложь) перед помещением результата преобразовывает ссылки в строки
//
Процедура ДополнитьДопСвойствамиОбъектов(КонтекстВыгрузки, ДопПараметры = Неопределено)
	Перем Уровень;
	
	Если ДопПараметры = Неопределено
		ИЛИ НЕ ДопПараметры.Свойство("Уровень", Уровень) Тогда 
		Уровень = 1;
	КонецЕсли;
	
	ПараметрыОтбора = КонтекстВыгрузки.ПараметрыОтбора;
	СтруктурыОбъектов = КонтекстВыгрузки.СтруктурыОбъектов;
		
	Если НЕ Уровень
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = СоздатьЗапрос(ПараметрыОтбора);
	КлючиДопТаблиц = Новый Массив;
	
	Для каждого ДанныеПараметра Из ПараметрыОтбора Цикл
		КлючиДопТаблиц.Добавить(Новый Структура("Таблица, Ключи", ДанныеПараметра.Ключ, ДанныеПараметра.Значение.Ключи));
	КонецЦикла;
	
	МассивыВложенныхОбъектов = Новый Соответствие;
	НомерПакета = 0;
	
	Для каждого РезультатЗапроса Из Запрос.ВыполнитьПакет() Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		СтруктурыТаблицы = Новый Соответствие;
		
		КонтекстОбработки = Новый Структура;
		КонтекстОбработки.Вставить("РезультатЗапроса",			РезультатЗапроса);
		КонтекстОбработки.Вставить("Выборка",					Выборка);
		КонтекстОбработки.Вставить("МассивыВложенныхОбъектов",	МассивыВложенныхОбъектов); 
		КонтекстОбработки.Вставить("СтруктурыОбъектов",			СтруктурыТаблицы);  
		КонтекстОбработки.Вставить("КлючЗаписи",				КлючиДопТаблиц[НомерПакета].Ключи);
				
		ОбработатьВыборкуРезультатаЗапроса(КонтекстОбработки, ДопПараметры);
		ЗаписиТаблицы = Новый Массив;
		
		Для каждого КлючЗначениеЗаписи Из СтруктурыТаблицы Цикл
			ЗаписиТаблицы.Добавить(КлючЗначениеЗаписи.Значение);
		КонецЦикла;
		
		СтруктурыОбъектов.Вставить(КлючиДопТаблиц[НомерПакета].Таблица, ЗаписиТаблицы);
		
		НомерПакета = НомерПакета + 1;
	
	КонецЦикла;
	
	ПодобъектыДляПолученияДетально = Новый Соответствие;
	
	Для каждого ТипМетаданных Из МассивыВложенныхОбъектов Цикл
		Для каждого Элемент Из ТипМетаданных.Значение Цикл
			
			Если СтруктурыОбъектов.Получить(Элемент) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодобъектыДляПолученияДетально.Получить(ТипМетаданных.Ключ) = Неопределено Тогда
				ПодобъектыДляПолученияДетально.Вставить(ТипМетаданных.Ключ, Новый Массив);
			КонецЕсли;
			
			ПодобъектыДляПолученияДетально[ТипМетаданных.Ключ].Добавить(Элемент);
			
		КонецЦикла;
	КонецЦикла;
	
	НовыйКонтекстВыгрузки = Новый Структура("Объекты, СтруктурыОбъектов", МассивыВложенныхОбъектов, СтруктурыОбъектов);
	
	НовыйДопПараметры = Новый Структура;
	
	Для каждого Параметр Из ДопПараметры Цикл
		НовыйДопПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	НовыйДопПараметры.Вставить("Уровень", Уровень - 1);
	
	ДополнитьСтруктурамиОбъектов(НовыйКонтекстВыгрузки, НовыйДопПараметры);

КонецПроцедуры

// Процедура - Обработать выборку результата запроса
//
// Параметры:
//  КонтекстОбработки	 - Структура	 - Поля:
//   РезультатЗапроса (РезультатЗапроса)
//   Выборка (ВыборкаРезультатаЗапроса)
//   МассивыВложенныхОбъектов (Соответствие), кде ключ - Тип строкой, значение - массив ссылок
//   СтруктурыОбъектов (Соотвтетствие)
//   КлючЗаписи (Строка) группировка записей. В результат помещается со значением указанного ключа
//  ДопПараметры		 - Структура, Неопределено	 - Параметры:
//   Ссылки (Массив) - массив ссылок для выгрузки пеедачи "наверх" списка найденных ссылок для дальнейшей обработки
//
Процедура ОбработатьВыборкуРезультатаЗапроса(КонтекстОбработки, ДопПараметры = Неопределено)
	
	РезультатЗапроса =			КонтекстОбработки.РезультатЗапроса;
	Выборка = 					КонтекстОбработки.Выборка;
	СтруктурыОбъектов =			КонтекстОбработки.СтруктурыОбъектов;
	КлючЗаписи =				КонтекстОбработки.КлючЗаписи;
	ПоляЗаписи = "";
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ПоляЗаписи = ПоляЗаписи + Колонка.Имя + ",";
	КонецЦикла;
	
	ПоляЗаписи = Лев(ПоляЗаписи, СтрДлина(ПоляЗаписи) - 1);
	
	Пока Выборка.Следующий() Цикл
		
		МассивСсылочныхРеквизитов = Новый Массив;
		СтруктураПодъобъектов = Новый Структура;
		
		Для каждого ПолеВыборки Из РезультатЗапроса.Колонки Цикл

			КонтекстОбработкиПоля = Новый Структура("РезультатЗапроса, Выборка, СтруктурыОбъектов, КлючЗаписи, МассивыВложенныхОбъектов");
			ЗаполнитьЗначенияСвойств(КонтекстОбработкиПоля, КонтекстОбработки);
			КонтекстОбработкиПоля.Вставить("ПолеВыборки", ПолеВыборки.Имя);
			КонтекстОбработкиПоля.Вставить("СтруктураПодъобъектов", СтруктураПодъобъектов);
			КонтекстОбработкиПоля.Вставить("МассивСсылочныхРеквизитов", МассивСсылочныхРеквизитов);

			ОбработатьПолеВыборки(КонтекстОбработкиПоля, ДопПараметры);

		КонецЦикла;
			
		ЗаписьСтруктурой = Новый Структура(ПоляЗаписи);
		ЗаполнитьЗначенияСвойств(ЗаписьСтруктурой, Выборка);
		ЗаполнитьЗначенияСвойств(ЗаписьСтруктурой, СтруктураПодъобъектов);
		
		Для каждого ИмяРеквизита Из МассивСсылочныхРеквизитов Цикл
			ЗаписьСтруктурой[ИмяРеквизита] = ИмяТаблицыБазы(ЗаписьСтруктурой[ИмяРеквизита]) + "." + ЗаписьСтруктурой[ИмяРеквизита]
				+ "(" + ЗаписьСтруктурой[ИмяРеквизита].УникальныйИдентификатор() + ")";
		КонецЦикла;
				
		КлючиЗаписиВРазныеСтроки = СтрЗаменить(КлючЗаписи, ",", Символы.ПС);
		ПрямойИндексЗаписи = "";
		
		Для Индекс = 1 По СтрЧислоСтрок(КлючиЗаписиВРазныеСтроки) Цикл
			
			ИмяКлюча = СтрПолучитьСтроку(КлючиЗаписиВРазныеСтроки, Индекс);
			ПрямойИндексЗаписи = ПрямойИндексЗаписи + ЗаписьСтруктурой[ИмяКлюча] + "_";
		
		КонецЦикла;
		
		ПрямойИндексЗаписи = Лев(ПрямойИндексЗаписи, СтрДлина(ПрямойИндексЗаписи) - 1);
			
		СтруктурыОбъектов.Вставить(ПрямойИндексЗаписи, ЗаписьСтруктурой);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Обработать поля выборки
//
// Параметры:
//  КонтекстОбработки	 - Структура	 - Поля:
//   РезультатЗапроса (РезультатЗапроса)
//   Выборка (ВыборкаРезультатаЗапроса)
//   МассивыВложенныхОбъектов (Соответствие), кде ключ - Тип строкой, значение - массив ссылок
//   СтруктурыОбъектов (Соотвтетствие)
//   КлючЗаписи (Строка) группировка записей. В результат помещается со значением указанного ключа
//   ПолеВыборки (Строка) - Имя поля выборки
//  ДопПараметры		 - Структура, Неопределено	 - Параметры:
//   Ссылки (Массив) - массив ссылок для выгрузки пеедачи "наверх" списка найденных ссылок для дальнейшей обработки
//
Процедура ОбработатьПолеВыборки(КонтекстОбработки, ДопПараметры = Неопределено)
	
	Выборка = 					КонтекстОбработки.Выборка;
	ПолеВыборки =				КонтекстОбработки.ПолеВыборки;
	МассивыВложенныхОбъектов =	КонтекстОбработки.МассивыВложенныхОбъектов;
	СтруктурыОбъектов =			КонтекстОбработки.СтруктурыОбъектов;
	СтруктураПодъобъектов =		КонтекстОбработки.СтруктураПодъобъектов;
	МассивСсылочныхРеквизитов =	КонтекстОбработки.МассивСсылочныхРеквизитов;
		
	Если ТипЗнч(Выборка[ПолеВыборки]) = Тип("РезультатЗапроса") Тогда
		
		ДетальнаяВыборка = Выборка[ПолеВыборки].Выбрать();
		СтруктураПодъобъектов.Вставить(ПолеВыборки, Новый Соответствие);
		
		КонтекстОбработки = Новый Структура;
		КонтекстОбработки.Вставить("РезультатЗапроса",			Выборка[ПолеВыборки]);
		КонтекстОбработки.Вставить("Выборка",					ДетальнаяВыборка);
		КонтекстОбработки.Вставить("МассивыВложенныхОбъектов",	МассивыВложенныхОбъектов); 
		КонтекстОбработки.Вставить("СтруктурыОбъектов",			СтруктураПодъобъектов[ПолеВыборки]);  
		КонтекстОбработки.Вставить("КлючЗаписи",				"НомерСтроки");
		
		ОбработатьВыборкуРезультатаЗапроса(КонтекстОбработки, ДопПараметры);
		
	КонецЕсли;

	ТипПоля = ИмяТаблицыБазы(Выборка[ПолеВыборки]);
	
	Если НЕ ЗначениеЗаполнено(ТипПоля)
		ИЛИ Найти(ТипПоля, "Перечисление") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолеВыборки <> "Ссылка" Тогда
		
		Если МассивыВложенныхОбъектов.Получить(ТипПоля) = Неопределено Тогда
			МассивыВложенныхОбъектов.Вставить(ТипПоля, Новый Массив);
		КонецЕсли;
		
		Если СтруктурыОбъектов.Получить(Выборка[ПолеВыборки]) = Неопределено
			И МассивыВложенныхОбъектов[ТипПоля].Найти(Выборка[ПолеВыборки]) = Неопределено Тогда
			МассивыВложенныхОбъектов[ТипПоля].Добавить(Выборка[ПолеВыборки]);
		КонецЕсли;
		
	КонецЕсли;
		
	Если МассивСсылочныхРеквизитов.Найти(ПолеВыборки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("Ссылки") Тогда
		ДопПараметры.Ссылки.Добавить(Выборка[ПолеВыборки]);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("СсылкиКакСтроки")
		И ДопПараметры.СсылкиКакСтроки Тогда
		МассивСсылочныхРеквизитов.Добавить(ПолеВыборки);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Имя таблицы базы по ссылке
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка	 - Любая ссылка на любой объект
//  КэшТипов - Соответствие	 - Ключ - результат ТипЗнач(ссылка), Значение - имя в метаданных
// 
// Возвращаемое значение:
//  Строка - Полное имя таблицы в метаданных конфигурации
//
Функция ИмяТаблицыБазы(Ссылка, КэшТипов = Неопределено)
	
	Если КэшТипов = Неопределено Тогда
		КэшТипов = Новый Соответствие;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Ссылка);
	
	Если КэшТипов.Получить(ТипОбъекта) = Неопределено Тогда
		
		ОписаниеТаблицы = Метаданные.НайтиПоТипу(ТипОбъекта);
		ТипСтрокой = ?(ОписаниеТаблицы = Неопределено, "", ОписаниеТаблицы.ПолноеИмя());
		КэшТипов.Вставить(ТипОбъекта, ТипСтрокой);
		
		Возврат ТипСтрокой;
		
	Иначе		
		Возврат КэшТипов.Получить(ТипОбъекта);
	КонецЕсли;
	
КонецФункции

// Функция - Описание регистров сведений при их наличии в базе 
// 
// Возвращаемое значение:
//  Соотвтетсивие - Ключ - Имя регистра, Значение - массив измерений
//
Функция ОписаниеРегистровСведений()

	СписокРегистровСведенийДляПоиска = "ДополнительныеСведения
		|ЗначенияСвойствОбъектов
		|КонтактнаяИнформация";
	
	Результат = Новый Соответствие;
	
	Для НомерРегистра = 1 По СтрЧислоСтрок(СписокРегистровСведенийДляПоиска) Цикл
	
		ИмяРегистра = СтрПолучитьСтроку(СписокРегистровСведенийДляПоиска, НомерРегистра);
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
		
		Если МетаданныеРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(МетаданныеРегистра.ПолноеИмя(), Новый Массив);
		
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Результат[МетаданныеРегистра.ПолноеИмя()].Добавить(Измерение.Имя);
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция - Создать запрос для выгрузки данных ИБ
//
// Параметры:
//  ПараметрыОтбора	 - Соответствие	 - Ключ - имя таблицы ИБ
//   Значение (Структура):
//    Отборы (массив) - Со структурами (Поле, ВидСравнения, Значение) 
// 
// Возвращаемое значение:
//  Запрос - Пакетный запрос
//
Функция СоздатьЗапрос(ПараметрыОтбора)

	ШаблонЗапроса = "ВЫБРАТЬ * ИЗ {1} КАК Таблица {2};";
	ШаблонУсловия = "Таблица.{1} {2} (&Параметр{3})";
	НомерПараметра = 0;
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	
	Для каждого ДанныеПараметра Из ПараметрыОтбора Цикл
		
		УсловиеЗапроса = "ГДЕ ";
		
		Для каждого Отбор Из ДанныеПараметра.Значение.Отборы Цикл
			
			ВидСравненияЗапроса = ?(Отбор.Свойство("ВидСравнения"), Отбор.ВидСравнения, "=");
			УсловиеЗапроса = УсловиеЗапроса
				+ СтрЗаменить(СтрЗаменить(СтрЗаменить(ШаблонУсловия, "{1}", Отбор.Поле), "{2}", ВидСравненияЗапроса), "{3}", НомерПараметра)
				+ " И  ";
			Запрос.УстановитьПараметр("Параметр" + НомерПараметра, Отбор.Значение);
			НомерПараметра = НомерПараметра + 1;
		
		КонецЦикла;
		
		УсловиеЗапроса = Лев(УсловиеЗапроса, СтрДлина(УсловиеЗапроса) - 4);
	
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(СтрЗаменить(ШаблонЗапроса, "{1}", ДанныеПараметра.Ключ), "{2}", УсловиеЗапроса) + Символы.ПС;
	
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции

Функция ВыгрузитьОбъектыВJSON(Ссылки, ДопПараметры = Неопределено) Экспорт
	Перем ZIP, ИмяФайла, АдресХранилища;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура("Глубина, ГлубинаВыгрузкиИзРегистров, СсылкиКакСтроки", 3, 2, Истина);
	ОбъектыИБ = ВыгрузитьПоляОбъектовИБ(Ссылки, ПараметрыВыгрузки);
	
	ОбъектыИБВТекст = ПреобразоватьЗначениеВJSON(ОбъектыИБ);
	
	Файл = Новый ТекстовыйДокумент;
	Файл.ДобавитьСтроку(ОбъектыИБВТекст);
	
	Если НЕ ДопПараметры.Свойство("ZIP", ZIP)
		ИЛИ НЕ ЗначениеЗаполнено(ZIP) Тогда
		ZIP = Ложь;
	КонецЕсли;
		
	Если НЕ ДопПараметры.Свойство("ИмяФайла", ИмяФайла)
		ИЛИ НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".json";
	КонецЕсли;
		
	Если НЕ ДопПараметры.Свойство("АдресХранилища", АдресХранилища)
		ИЛИ НЕ ЗначениеЗаполнено(АдресХранилища) Тогда
		АдресХранилища = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура("ДопСведения");
	ОписаниеДанных.Вставить("Тип", "ТекстовыйДокумент");
	ОписаниеДанных.Вставить("Имя", ИмяФайла);
	ОписаниеДанных.Вставить("Значение", Файл);

	Если ZIP Тогда
		
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайла;
		
		Файл.Записать(ИмяФайла);
		
		ЗаписьZipФайла = Новый ЗаписьZipФайла;
		ЗаписьZipФайла.Добавить(ИмяФайла);

		ОписаниеДанных.Тип = "ДвоичныеДанные";
		ОписаниеДанных.Значение = ЗаписьZipФайла.ПолучитьДвоичныеДанные();
		ОписаниеДанных.ДопСведения = Новый Структура("Архив", "ZIP");
		
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
		
	Возврат ПоместитьВоВременноеХранилище(ОписаниеДанных, АдресХранилища);

КонецФункции
