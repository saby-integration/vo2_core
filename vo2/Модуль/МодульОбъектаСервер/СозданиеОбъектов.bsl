
// Функция - вычитывает структуру объекта 1С
//
// Параметры:
//  Объект1ССсылка	 - ДокументСсылка, СправочникСсылка	 - ссылка на объект, который мы вычитываем
//  ДопПараметры	 - Неопределено, Структура	 - расширение метода
//		ВыгружатьТабличныеЧасти - Булево - (Истина) - определяет необходимость вычитать табличные части объекта
//		ВыгружатьСтандартныеРеквизиты - Булево - (Истина) - определяет необходимость вычитывать стандартные реквизиты
// 
// Возвращаемое значение:
//  Структура - идентичная метаданным объекта структура со значениями реквизитов.
//
Функция ВычитатьСтруктуруОбъекта1С(Объект1ССсылка, ДопПараметры = Неопределено) Экспорт
	Перем СтруктураДокОбъект;
	
	Попытка
		
		МетаданныеОбъекта = Объект1ССсылка.Метаданные();	
		
	Исключение
		
		СбисИсключение = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВычитатьСтруктуруОбъекта1С", 709);
		ВызватьИсключение СбисИсключение_ВСтроку(СбисИсключение);
		
	КонецПопытки;

	ЗаполнитьСтруктуруПоДаннымОбъекта1С(СтруктураДокОбъект, МетаданныеОбъекта.Реквизиты, Объект1ССсылка);
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ВыгружатьТабличныеЧасти")
		Или		ДопПараметры.ВыгружатьТабличныеЧасти Тогда
		
		ПараметрыТЧ = Новый Структура("ЭтоТЧ", Истина);
		Для Каждого ТабличнаяЧастьМетаданные Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			
			ЗаполнитьЗначенияВДокОбъект(СтруктураДокОбъект, ТабличнаяЧастьМетаданные, Объект1ССсылка[ТабличнаяЧастьМетаданные.Имя], ПараметрыТЧ);
			
		КонецЦикла;
		
	КонецЕсли;

	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ВыгружатьСтандартныеРеквизиты")
		Или		ДопПараметры.ВыгружатьСтандартныеРеквизиты Тогда
		
		ЗаполнитьСтруктуруПоДаннымОбъекта1С(СтруктураДокОбъект, МетаданныеОбъекта.СтандартныеРеквизиты, Объект1ССсылка);
		
	КонецЕсли;
	
	Возврат СтруктураДокОбъект;
	
КонецФункции

Процедура ЗаполнитьЗначенияВДокОбъект(СтруктураДокОбъект, МетаданныеОбъекта, ЗначениеОбъектаЗаполнить, ДопПараметры)
    Перем ЗначениеВДокОбъектЗаполнить;

	Если СтруктураДокОбъект = Неопределено Тогда
		
		СтруктураДокОбъект = Новый Структура;
		
	КонецЕсли;
	
	Если	ДопПараметры.Свойство("ЭтоТЧ")
		И	ДопПараметры.ЭтоТЧ Тогда
		
		Если Не СтруктураДокОбъект.Свойство(МетаданныеОбъекта.Имя, ЗначениеВДокОбъектЗаполнить) Тогда 
			
			ЗначениеВДокОбъектЗаполнить = Новый Массив;
			СтруктураДокОбъект.Вставить(МетаданныеОбъекта.Имя, ЗначениеВДокОбъектЗаполнить);			
			
		КонецЕсли;
		
		Для Каждого СтрокаТЧЗаполнить Из ЗначениеОбъектаЗаполнить Цикл
			
			НоваяСтрока = Неопределено;
			ЗаполнитьСтруктуруПоДаннымОбъекта1С(НоваяСтрока, МетаданныеОбъекта.Реквизиты, СтрокаТЧЗаполнить);
			ЗначениеВДокОбъектЗаполнить.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	Иначе
	
		ЗаполнитьСтруктуруПоДаннымОбъекта1С(СтруктураДокОбъект, МетаданныеОбъекта, ЗначениеОбъектаЗаполнить);

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПоДаннымОбъекта1С(СтруктураДокОбъект, МетаданныеОбъекта, ЗначениеОбъектаЗаполнить)
	
	Если СтруктураДокОбъект = Неопределено Тогда
		
		СтруктураДокОбъект = Новый Структура;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта Цикл
		
		СтруктураДокОбъект.Вставить(Реквизит.Имя, ЗначениеОбъектаЗаполнить[Реквизит.Имя]);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - создать новый + (пере)заполнить объект по нашим данным
//
// Параметры:
//  НашиДанныеВходящие	 - Структура	 - Идентично заполняемому объекту
//  ДопПараметры		 - Структура	 - 
// 
Процедура СоздатьПерезаполнитьОбъектПоНашимДанным(НашиДанныеВходящие, ДопПараметры) Экспорт
	Перем Объект1СЗначение, Объект1ССсылка;
	
	ЭтоНовый = Ложь;
	
	Если Не НашиДанныеВходящие.Свойство("Ссылка", Объект1ССсылка) Тогда
		
		ОбъектПодТип	= ДопПараметры.ПодТипОбъекта;
		ОбъектТип		= ДопПараметры.ТипОбъекта;
		ОбъектДанные	= НовыйОбъект1С(ОбъектТип, ОбъектПодТип);
		НашиДанныеВходящие.Вставить("Ссылка", ОбъектДанные.Ссылка);
		ЭтоНовый		= Истина;
		
	Иначе
		
		Попытка
			
			ОбъектДанные = Объект1ССсылка.ПолучитьОбъект();
			
		Исключение
			
			ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С", 767));
			 
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры	
	
#Область include_core2_vo2_Модуль_МодульОбъектаСервер_СозданиеОбъектов_temp
#КонецОбласти

Функция НовыйОбъект1С(ОбъектТип, ОбъектПодТип)
	
	Попытка
		
		Если ОбъектТип = "Справочник" Тогда
			
			Попытка
				
				УидСсылки			= Новый УникальныйИдентификатор;
				Объект1СЗначение	= Справочники[ОбъектПодТип].СоздатьЭлемент();
				Объект1СЗначение.УстановитьСсылкуНового(УидСсылки);
				
			Исключение
				
				ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С", 767));
				
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "ПланВидовХарактеристик" Тогда
			
			Попытка
				
				УидСсылки			= Новый УникальныйИдентификатор;
				Объект1СЗначение	= ПланыВидовХарактеристик[ОбъектПодТип].СоздатьЭлемент();
				Объект1СЗначение.УстановитьСсылкуНового(УидСсылки);
				
			Исключение
				
				ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С", 767));
				
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "Документ" Тогда
			
			Попытка
				
				УидСсылки			= Новый УникальныйИдентификатор;
				Объект1СЗначение	= Документы[ОбъектПодТип].СоздатьДокумент();
				Объект1СЗначение.УстановитьСсылкуНового(УидСсылки);
				
			Исключение
				
				ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С", 767));
				
			КонецПопытки;
			
		ИначеЕсли ОбъектТип = "РегистрыСведений" Тогда

			Попытка
				
				Объект1СЗначение = РегистрыСведений[ОбъектПодТип].СоздатьМенеджерЗаписи();
				
			Исключение
				
				ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С", 767));
				
			КонецПопытки;
			
		Иначе
			
			ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(, "МодульОбъектаСервер.НовыйОбъект1С", 779,, "Не поддерживаемый тип 1С"));

		КонецЕсли;
		
	Исключение
		
		СбисДамп = Новый Структура("Тип, ПодТип", ОбъектТип, ОбъектПодТип);
		ВызватьИсключение СбисИсключение_ВСтроку(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.НовыйОбъект1С",,,,СбисДамп));
		
	КонецПопытки;
	
	Возврат Объект1СЗначение;

КонецФункции

// Функция - даёт представление объекта 1С в нужном падеже
//
// Параметры:
//  ОбъектТип	 - Строка	 - склоняемый тип 1С
//  ДопПараметры - Структура	 - (Н) ПризнакПадеж - падеж, ОбъектПодТип - строка, имя метаданных объекта, ЭтоНовый - булево, новый объект или нет
// 
// Возвращаемое значение:
//  Строка - пример: нового справочника "ОбъектПодТип" / записи регистра сведений "ОбъектПодТип"  
//
Функция ПредставлениеОбъекта1С(ОбъектТип, ДопПараметры = Неопределено)
	Перем ПризнакПадеж, ПризнакСклонения2, ПризнакСклонения3, ПризнакСклонения4, ПредставлениеМетаданные, ОбъектПодТип, ЭтоНовый;
	
	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("ПризнакПадеж",	ПризнакПадеж);
		ДопПараметры.Свойство("ОбъектПодТип",	ОбъектПодТип);
		ДопПараметры.Свойство("ЭтоНовый",		ЭтоНовый);
	КонецЕсли;
	
	Если   		ПризнакПадеж = "Р" Тогда
		
		ПризнакСклонения1 = "а";
		ПризнакСклонения2 = "ого";
		ПризнакСклонения3 = "ую";
		ПризнакСклонения4 = "ь";
		
	ИначеЕсли   ПризнакПадеж = "Д" Тогда
		
		ПризнакСклонения1 = "у";
		ПризнакСклонения2 = "ому";
		ПризнакСклонения3 = "ой";
		ПризнакСклонения4 = "и";
		
	ИначеЕсли   ПризнакПадеж = "Т" Тогда
		
		ПризнакСклонения1 = "ом";
		ПризнакСклонения2 = "ым";
		ПризнакСклонения3 = "ой";
		ПризнакСклонения4 = "ью";
		
	ИначеЕсли   ПризнакПадеж = "П" Тогда
		
		ПризнакСклонения1 = "е";
		ПризнакСклонения2 = "ом";
		ПризнакСклонения3 = "ой";
		ПризнакСклонения4 = "и";
		
	Иначе
		
		ПризнакСклонения1 = "";
		ПризнакСклонения2 = "ый";
		ПризнакСклонения3 = "ую";
		ПризнакСклонения4 = "ь";
		
	КонецЕсли;
	
	ЭтоНовый = ТипЗнч(ЭтоНовый) = Тип("Булево") И ЭтоНовый;
	
	Если ОбъектТип = "Справочник" Тогда
		
		ТекстТип				= "справочник{ПризнакСклонения1}";
		ПредставлениеМетаданные = Метаданные.Справочники.Найти(ОбъектПодТип);
		
		Если ЭтоНовый Тогда
			
			ТекстТип = "нов{ПризнакСклонения3} запис{ПризнакСклонения4} " + ТекстТип;
			
		КонецЕсли;
			
	ИначеЕсли ОбъектТип = "ПланВидовХарактеристик" Тогда
		
		ТекстТип				= "план{ПризнакСклонения1} видов характеристик";
		ПредставлениеМетаданные = Метаданные.ПланыВидовХарактеристик.Найти(ОбъектПодТип);
		
		Если ЭтоНовый Тогда
			
			ТекстТип = "нов{ПризнакСклонения3} запис{ПризнакСклонения4} " + ТекстТип;
			
		КонецЕсли;

	ИначеЕсли ОбъектТип = "Документ" Тогда
		
		ТекстТип				= "документ{ПризнакСклонения1}";
		ПредставлениеМетаданные = Метаданные.Документы.Найти(ОбъектПодТип);
		
		Если ЭтоНовый Тогда
			
			ТекстТип = "нов{ПризнакСклонения2} " + ТекстТип;
			
		КонецЕсли;
		
	ИначеЕсли ОбъектТип = "РегистрыСведений" Тогда

		ТекстТип				= "регистр{ПризнакСклонения1} сведений";
		ПредставлениеМетаданные = Метаданные.РегистрыСведений.Найти(ОбъектПодТип);
		
		Если ЭтоНовый Тогда
			
			ТекстТип = "нов{ПризнакСклонения3} запис{ПризнакСклонения4} " + ТекстТип;
			
		КонецЕсли;
		
	Иначе
		
		ТекстТип = "неизвестн{ПризнакСклонения2} объект{ПризнакСклонения1}";
		
	КонецЕсли;
	
	Если Не ПредставлениеМетаданные = Неопределено Тогда
		
		ТекстТип = ТекстТип + " " + ПредставлениеМетаданные.Синоним;
		
	КонецЕсли;
	
	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстТип,	
				"{ПризнакСклонения1}",	ПризнакСклонения1),
				"{ПризнакСклонения2}",	ПризнакСклонения2),
				"{ПризнакСклонения3}",	ПризнакСклонения3),
				"{ПризнакСклонения4}",	ПризнакСклонения4);
	
КонецФункции

//Функция заполняет реквизиты объекта 1С из одноименных полей структуры. Поддерживаемые типы: Документ, Справочник	
Функция СоздатьОбъект1СИзСтруктурыНаСервере(СтруктураДокОбъект, ДопПараметры, Отказ) Экспорт
	
	ОбъектСсылка	= ДопПараметры.ОбъектПерезаполнитьСсылка;
	ОбъектПодТип	= ДопПараметры.ПодТипОбъекта;
	ОбъектТип		= ДопПараметры.ТипОбъекта;
	ДополнятьТабЧасть = ?(ДопПараметры.Свойство("ДополнятьТабЧасть"), ДопПараметры.ДополнятьТабЧасть, Ложь);
	РедактироватьТабЧасть = ?(ДопПараметры.Свойство("РедактироватьТабЧасть"), ДопПараметры.РедактироватьТабЧасть, Ложь);
	ПерезаполнятьТолькоНепроведенные = ?(ДопПараметры.Свойство("ПерезаполнятьТолькоНепроведенные"), ДопПараметры.ПерезаполнятьТолькоНепроведенные, Ложь); 
	ЗаполняемыеТабЧасти = ?(ДопПараметры.Свойство("ЗаполняемыеТабЧасти"), ДопПараметры.ЗаполняемыеТабЧасти, Новый Массив);
	
	ЭтоНовый		= Не ЗначениеЗаполнено(ОбъектСсылка);
	Объект1СЗначение= Неопределено;
	
	Результат	= Новый Структура("Тип, Ссылка, Состояние, Сообщение");
	ТекстТип	= НРег(Лев(ОбъектТип, 1)) + Сред(ОбъектТип, 2);
	ТекстОшибки	= "";
	//Получаем объект для редактирования и записи
	Если ЭтоНовый Тогда
		Если Лев(ОбъектТип, 10) = "Справочник" Тогда
			Попытка	
				ТекстТип = "справочника";
				Объект1СЗначение = Справочники[ОбъектПодТип].СоздатьЭлемент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли Лев(ОбъектТип, 22) = "ПланВидовХарактеристик" Тогда
			Попытка	
				ТекстТип = "плана видов характеристик";
				Объект1СЗначение = ПланыВидовХарактеристик[ОбъектПодТип].СоздатьЭлемент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли Лев(ОбъектТип, 8) = "Документ" Тогда
			Попытка	
				ТекстТип = "документа";
				Объект1СЗначение = Документы[ОбъектПодТип].СоздатьДокумент();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		ИначеЕсли Лев(ОбъектТип, 16) = "РегистрыСведений" Тогда
			Попытка
				ТекстТип = "регистра сведений";
				Объект1СЗначение = РегистрыСведений[ОбъектПодТип].СоздатьМенеджерЗаписи();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
			
		Иначе
			ТекстОшибки = "Не поддерживаемый тип.";
			Отказ = Истина;
		КонецЕсли;
		Результат.Тип = ОбъектТип + "." + ОбъектПодТип;
	Иначе
		Попытка
			Если Лев(ОбъектТип, 8) = "Документ" И ОбъектСсылка.Проведен И ПерезаполнятьТолькоНепроведенные Тогда
				Результат.Состояние = "Ошибка перезаполнения документа.";	    
				Результат.Сообщение = "Документ " + Строка(ОбъектСсылка) + " не перезаполнен, так как проведен. Включить возможность перезаполнения проведенных документов можно на вкладке ""Настройки"" в разделе ""Загрузка документов"".";
				Возврат Результат;
			КонецЕсли;
			Результат.Тип	= ОбъектТип + "." + ОбъектСсылка.Метаданные().Имя;
			Объект1СЗначение= ОбъектСсылка.ПолучитьОбъект();
		Исключение
			Результат.Тип = ОбъектТип + "." + ОбъектПодТип;
			ТекстОшибки = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	Если Отказ Тогда
		Результат.Состояние = "Ошибка формирования " + ТекстТип;
		Если ЭтоНовый Тогда
			Результат.Сообщение = "Не удалось создать " + ?(ОбъектТип = "Документ", "новый документ",  "новую запись " + ТекстТип) + ". " + ТекстОшибки;
		Иначе
			Результат.Сообщение = "Не удалось прочитать объект " + Строка(ОбъектСсылка) + ". " + ТекстОшибки;		
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	//Заполняем объект данными		
	Для Каждого Элемент Из СтруктураДокОбъект Цикл
		Попытка
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Если РедактироватьТабЧасть = Истина Тогда
					КлючиПоиска = РассчитатьЗначениеСервер("КлючСтроки", Новый Структура("ини", ДопПараметры.Ини.мТаблДок[Элемент.Ключ]));		
					Если ЗначениеЗаполнено(КлючиПоиска) Тогда
						сбисДозаполнитьТабличнуюЧасть(Объект1СЗначение, Элемент, КлючиПоиска, ДопПараметры.Ини);	
					КонецЕсли;
				Иначе
					Если Не ДополнятьТабЧасть ИЛИ ЗаполняемыеТабЧасти.Найти(Элемент.Ключ) = Неопределено Тогда
						Объект1СЗначение[Элемент.Ключ].Очистить();
					КонецЕсли;
					Для Каждого Строка Из Элемент.Значение Цикл
						НоваяСтрока = Объект1СЗначение[Элемент.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Объект1СЗначение[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		Конецпопытки;
	КонецЦикла;
	
	Попытка
		// Выполняем обработчики по строкам табличных частей документа
		Если ДопПараметры.Ини.Свойство("мТаблДок") Тогда
			ТабличныеЧастиДокумента = Объект1СЗначение.Метаданные().ТабличныеЧасти;
			Для каждого ТабЧасть Из ТабличныеЧастиДокумента Цикл
				Если	ДопПараметры.Ини.мТаблДок.Свойство(ТабЧасть.Имя)
						И ДопПараметры.Ини.мТаблДок[ТабЧасть.Имя].Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
					Для каждого СтрокаТЧ Из Объект1СЗначение[ТабЧасть.Имя] Цикл
						ДопПараметрыОбработчика = Новый Структура;
						ДопПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(ДопПараметры.Ини.Свойство("ПересчитыватьНДСПоДанным1С"), ДопПараметры.Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));	
						ДопПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(ДопПараметры.Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), ДопПараметры.Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
						сбисВыполнитьОбработчикиПоСтрокеТЧ(ДопПараметры.Ини.мТаблДок[ТабЧасть.Имя].мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, ТабЧасть.Имя,	СтрокаТЧ, ДопПараметрыОбработчика);
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	//Выполняем обработчики по документу
	Попытка
		Если ДопПараметры.Ини.Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
			ДопПараметрыОбработчика = Новый Структура;
			ДопПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(ДопПараметры.Ини.Свойство("ПересчитыватьНДСПоДанным1С"), ДопПараметры.Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));
			ДопПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(ДопПараметры.Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), ДопПараметры.Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
			сбисВыполнитьОбработчикиПоДокументу(ДопПараметры.Ини.мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, ДопПараметрыОбработчика);
		КонецЕсли;							
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	//Записываем изменения
	Попытка
		Объект1СЗначение.Записать();
		Если ОбъектТип <> "РегистрыСведений" Тогда
			ОбъектСсылка = Объект1СЗначение.Ссылка;
		Иначе
			ОбъектСсылка = ОбъектПодТип+" ";
			Для Каждого Измер Из Метаданные.РегистрыСведений[ОбъектПодТип].Измерения Цикл
				Если ЗначениеЗаполнено(Объект1СЗначение[Измер.Имя]) Тогда
					ОбъектСсылка = ОбъектСсылка+Измер.Имя + ": "  + Объект1СЗначение[Измер.Имя]+";";
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Отказ = Истина;
	КонецПопытки;
	//Пробуем заполним документу дату и повторно записать при ошибке.
	Если	Отказ
		И	Лев(ОбъектТип, 8) = "Документ" Тогда
		Отказ = Ложь;
		Попытка
			Объект1СЗначение.Дата = ТекущаяДата();
			Объект1СЗначение.Записать();
			ОбъектСсылка = Объект1СЗначение.Ссылка;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	//Заполняем результат
	Если Отказ Тогда
		Результат.Состояние = "Ошибка формирования " + ТекстТип;
		Результат.Сообщение = "Не удалось записать "  + ?(ОбъектТип = "Документ", "документ",  " элемент " + ТекстТип) + ". " +  ТекстОшибки;
	Иначе
		СостояниеОбъекта	= ?(ЭтоНовый, "Создан", "Перезаполнен"); 
		Результат.Состояние = СостояниеОбъекта + ".";
		Результат.Сообщение = СостояниеОбъекта + ?(ОбъектТип = "Документ", " документ",  " элемент " + ТекстТип) + " " + Строка(ОбъектСсылка);
		Результат.Ссылка	= ОбъектСсылка;		
	КонецЕсли;
	Возврат Результат;
КонецФункции

// функция дозаполняет табличную часть документа данными из электронного документа
Функция сбисДозаполнитьТабличнуюЧасть(Объект1СЗначение, Элемент, КлючиПоиска, Ини)
	// ключи, по которым ищем строки в документе, в которые необходимо внести изменения
	КлючиПоиска = СбисРазложитьСтрокуВМассивПодстрок(КлючиПоиска, ",");
	ЗаменятьТолькоЗаполненные = Ложь;
	// Можно задать в инишке список полей, которые хотим редактировать 
	ПоляДляПерезаполнения = РассчитатьЗначениеСервер("ПоляПерезаполнить", Новый Структура("ини", Ини.мТаблДок[Элемент.Ключ]));
	Если Не ЗначениеЗаполнено(ПоляДляПерезаполнения) Тогда
		ЗаменятьТолькоЗаполненные = Истина;
	КонецЕсли;                                          
	// В СписокОтредактированныхСтрок складываем строки документа, которые уже отредактировали, чтобы второй раз не редактировать одну и ту же строку, а редактировать следующую с такими же ключами 
	// (для случая наличия строк с одинаковыми номенклатурами/характеристиками)
	СписокОтредактированныхСтрок = Новый СписокЗначений;
	Для Каждого Строка Из Элемент.Значение Цикл  
		ПараметрыОтбора = Новый Структура;
		Для каждого Элем Из КлючиПоиска Цикл
			Если ЗначениеЗаполнено(Строка[Элем]) Тогда
				ПараметрыОтбора.Вставить(Элем, Строка[Элем]);				
			КонецЕсли;
		КонецЦикла;
		НайденныеСтроки = Объект1СЗначение[Элемент.Ключ].НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СписокОтредактированныхСтрок.НайтиПоЗначению(НайденнаяСтрока.НомерСтроки)<>Неопределено Тогда
					Продолжить;
				Иначе
					НоваяСтрока = НайденнаяСтрока;
					СписокОтредактированныхСтрок.Добавить(НайденнаяСтрока.НомерСтроки);
					// Если в инишке не указаны поля, то перезаполняем все, которые рассчитались по инишке
					Если ЗаменятьТолькоЗаполненные Тогда
						ПоляДляПерезаполнения = "";
						Для Каждого Элем Из Строка Цикл
							Если Элем.Значение<>Неопределено Тогда
								ПоляДляПерезаполнения = ПоляДляПерезаполнения + Элем.Ключ+",";						
							КонецЕсли;
						КонецЦикла;
						Если Прав(ПоляДляПерезаполнения, 1) = "," Тогда
							ПоляДляПерезаполнения = Лев(ПоляДляПерезаполнения, СтрДлина(ПоляДляПерезаполнения)-1);
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ПоляДляПерезаполнения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект1СЗначение[Элемент.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		КонецЕсли;
		Если Ини.мТаблДок[Элемент.Ключ].Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
			ДопПараметрыОбработчика = Новый Структура;
			ДопПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(Ини.Свойство("ПересчитыватьНДСПоДанным1С"), Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));
			ДопПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
			сбисВыполнитьОбработчикиПоСтрокеТЧ(Ини.мТаблДок[Элемент.Ключ].мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, Элемент.Ключ,	НоваяСтрока, ДопПараметрыОбработчика);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// функция выполняет обработчики по строкам создаваемого документа
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
Функция сбисВыполнитьОбработчикиПоСтрокеТЧ(мОбработчикПередЗаписью, Объект1СЗначение, КлючТЧ, СтрокаТЧ, ДопПараметры)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное", КлючТЧ); 
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить(КлючТЧ,	СтрокаТЧ); 
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДопПараметры);
	ПересчитатьНДСПоДанным1С = Ложь;
	Если ДопПараметры.ПересчитыватьНДСПоДанным1С <> 2 Тогда
		СуммаСтавкаНДС = Новый Структура("СуммаНДС, СтавкаНДС");
		ЗаполнитьЗначенияСвойств(СуммаСтавкаНДС, СтрокаТЧ);
		Если ДопПараметры.ПересчитыватьНДСПоДанным1С = 1
				ИЛИ (ДопПараметры.ПересчитыватьНДСПоДанным1С = 0 
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СуммаНДС)
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СтавкаНДС))Тогда
			ПересчитатьНДСПоДанным1С = Истина;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикСтроки") и Обр.Значение.ОбработчикСтроки.Свойство("Обработчик") Тогда
			Если (Обр.Ключ = "ЗаполнитьСтавкуНДС" ИЛИ Обр.Ключ = "РассчитатьСуммуНДС")
				И НЕ ПересчитатьНДСПоДанным1С Тогда
				Продолжить;
			КонецЕсли;
			
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикСтроки.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции

// функция выполняет обработчики по создаваемому документу
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
Функция сбисВыполнитьОбработчикиПоДокументу(мОбработчикПередЗаписью, Объект1СЗначение, ДопПараметрыОбработчика)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДопПараметрыОбработчика);
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикДокумента") и Обр.Значение.ОбработчикДокумента.Свойство("Обработчик") Тогда
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикДокумента.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции

