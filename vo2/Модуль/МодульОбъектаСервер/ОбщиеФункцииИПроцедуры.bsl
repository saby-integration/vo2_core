
Функция ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры=Неопределено) Экспорт 
	
	РезультатМакет = ПолучитьМакет(ИмяМакета);
	Если	Не	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("Текст")
		И		ДопПараметры.Текст Тогда
		РезультатМакет = РезультатМакет.ПолучитьТекст()
	КонецЕсли;
	
	Возврат РезультатМакет;
	
КонецФункции

Функция ВыполнитьЗапросСПараметрами(ТекстЗапросаВх, ПараметрыЗапросаВх, ДопПараметры = Неопределено) Экспорт
	Перем РазмерВыборки;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Размер", РазмерВыборки) Тогда
		РазмерВыборки = 1;
	КонецЕсли;
	
	//Найти место в запросе для подставноки ограничения выборки
	Если Не РазмерВыборки = Неопределено Тогда
		ИтоговоеВыбрать	= 1;

		Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
			Если	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки), 7) = "ВЫБРАТЬ"
				И	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки - 1), 1) = "/" Тогда
				ИтоговоеВыбрать = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		СтрокаВыбрать = СтрПолучитьСтроку(ТекстЗапросаВх, ИтоговоеВыбрать);
		Если Не Найти(СтрокаВыбрать, "ПЕРВЫЕ") Тогда
			ТекстЗапросаНовый = "";
			Для НомерСтроки = 1 По ИтоговоеВыбрать - 1 Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаНовый = ТекстЗапросаНовый + СтрокаВыбрать + "ПЕРВЫЕ " + РазмерВыборки;
			Для НомерСтроки = ИтоговоеВыбрать + 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаВх = ТекстЗапросаНовый;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВх);
	
	Для Каждого КлючИЗначениеЗапроса Из ПараметрыЗапросаВх Цикл
		
		Запрос.УстановитьПараметр(КлючИЗначениеЗапроса.Ключ, КлючИЗначениеЗапроса.Значение);
		
	КонецЦикла;
	
	Попытка
		
		Возврат РезультатЗапросаНаКлиент(Запрос);
		
	Исключение
		
		ВызватьИсключение(СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами")); 
		
	КонецПопытки;
		
КонецФункции

Функция РезультатЗапросаНаКлиент(Запрос) Экспорт 
	
	Попытка
		
		РезультатЗапроса	= Запрос.Выполнить();
		ВыборкаЗапроса		= РезультатЗапроса.Выбрать();
		
	Исключение
		
		ВызватьИсключение(СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.РезультатЗапросаНаКлиент")); 
		
	КонецПопытки;

	Результат	= Новый Массив;
	НаборКлючей = "";
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		НаборКлючей = НаборКлючей + Колонка.Имя + ","
	КонецЦикла;
	
	НаборКлючей = Лев(НаборКлючей, СтрДлина(НаборКлючей)-1);

	Пока ВыборкаЗапроса.Следующий() Цикл
		НоваяСтр = Новый Структура(НаборКлючей);
		ЗаполнитьЗначенияСвойств(НоваяСтр, ВыборкаЗапроса);
		Результат.Добавить(НоваяСтр);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СбисЭтоТипСтрокой(ЗначениеСравнить, ТипСтрокойСравнить) Экспорт
	
	ТипПривестиКСтроке = Строка(ЗначениеСравнить);
	Возврат Булево(Найти(ТипПривестиКСтроке, ТипСтрокойСравнить));

КонецФункции

Функция СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

// Функция - приводит переданные данные файлов в формат Base64
//
// Параметры:
//  СбисДанныеФайлов - Массив	 - содержит либо объект двоичные данные, либо ПомещенныеФайлы от метода ПоместитьФайлы/НачатьПомещениеФайловНаСервер
// 
// Возвращаемое значение:
//  Массив - Base64 переданных файлов, в соответствии с индексом переданного массива
//
Функция ФайлыВBASE64Сервер(СбисДанныеФайлов) Экспорт
	
	РезультатBase64 = Новый Массив;
	
	Для Каждого СбисДанныеФайла Из СбисДанныеФайлов Цикл
		
		Если Не ТипЗнч(СбисДанныеФайла) = Тип("ДвоичныеДанные") Тогда
			
			СбисДанныеФайла = ПолучитьИзВременногоХранилища(СбисДанныеФайла.Хранение);
			
		КонецЕсли;
		
		РезультатBase64.Добавить(Base64Строка(СбисДанныеФайла));
		
	КонецЦикла;
	
	Возврат РезультатBase64;
	
КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ОбщиеФункцииИПроцедуры_ЗагрузкаДокументов_БлокФункцийИниФайлов
#КонецОбласти

