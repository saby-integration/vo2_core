
Функция ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры=Неопределено) Экспорт 
	
	РезультатМакет = ПолучитьМакет(ИмяМакета);
	Если	Не	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("Текст")
		И		ДопПараметры.Текст Тогда
		РезультатМакет = РезультатМакет.ПолучитьТекст()
	КонецЕсли;
	
	Возврат РезультатМакет;
	
КонецФункции

Функция ВыполнитьЗапросСПараметрами(ТекстЗапросаВх, ПараметрыЗапросаВх, ДопПараметры = Неопределено) Экспорт
	Перем РазмерВыборки;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Размер", РазмерВыборки) Тогда
		РазмерВыборки = 1;
	КонецЕсли;
	
	//Найти место в запросе для подставноки ограничения выборки
	Если Не РазмерВыборки = Неопределено Тогда
		ИтоговоеВыбрать	= 1;

		Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
			Если	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки), 7) = "ВЫБРАТЬ"
				И	Лев(СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки - 1), 1) = "/" Тогда
				ИтоговоеВыбрать = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		СтрокаВыбрать = СтрПолучитьСтроку(ТекстЗапросаВх, ИтоговоеВыбрать);
		Если Не Найти(СтрокаВыбрать, "ПЕРВЫЕ") Тогда
			ТекстЗапросаНовый = "";
			Для НомерСтроки = 1 По ИтоговоеВыбрать - 1 Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрокаВыбрать + " ПЕРВЫЕ " + РазмерВыборки;
			Для НомерСтроки = ИтоговоеВыбрать + 1 По СтрЧислоСтрок(ТекстЗапросаВх) Цикл
				ТекстЗапросаНовый = ТекстЗапросаНовый + Символы.ПС + СтрПолучитьСтроку(ТекстЗапросаВх, НомерСтроки);
			КонецЦикла;
			ТекстЗапросаВх = ТекстЗапросаНовый;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВх);
	
	Для Каждого КлючИЗначениеЗапроса Из ПараметрыЗапросаВх Цикл
		
		Запрос.УстановитьПараметр(КлючИЗначениеЗапроса.Ключ, КлючИЗначениеЗапроса.Значение);
		
	КонецЦикла;
	
	Попытка
		
		Возврат СериализоватьОбъектДляВозвратаНаКлиент(Запрос.Выполнить());
		
	Исключение
		
		ОшибкаЗапроса = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами");
		ВызватьИсключение(СбисИсключение_ВСтроку(ОшибкаЗапроса)); 
		
	КонецПопытки;
		
КонецФункции

// Функция - сериализует объект для возврата на клиент
//
// Параметры:
//  ОбъектСериализации	 - Произвольный	 - объект, который требуется получить на клиенте. 
// 
// Возвращаемое значение:
//  Произвольный - Приводит таблицы и запросы к массиву структур.
//
Функция СериализоватьОбъектДляВозвратаНаКлиент(ОбъектСериализации) Экспорт 
	
	Если ТипЗнч(ОбъектСериализации) = Тип("РезультатЗапроса") Тогда
		
		Результат	= Новый Массив;
		
		Если Не ОбъектСериализации.Пустой() Тогда
			
			Попытка
				
				ВыборкаЗапроса = ОбъектСериализации.Выбрать();
				
			Исключение
				
				ВызватьИсключение(СбисИсключение_ВСтроку(ИнформацияОбОшибке(), "МодульОбъектаСервер.СериализоватьОбъектДляВозвратаНаКлиент")); 
				
			КонецПопытки;

			НаборКлючей = "";
			
			Для Каждого Колонка Из ОбъектСериализации.Колонки Цикл
				НаборКлючей = НаборКлючей + Колонка.Имя + ","
			КонецЦикла;

			НаборКлючей = Лев(НаборКлючей, СтрДлина(НаборКлючей)-1);

			Пока ВыборкаЗапроса.Следующий() Цикл
				
				НоваяСтр = Новый Структура(НаборКлючей);
				ЗаполнитьЗначенияСвойств(НоваяСтр, ВыборкаЗапроса);
				Результат.Добавить(НоваяСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектСериализации) = Тип("ТаблицаЗначений") Тогда
		
		Результат	= Новый Массив;
		
		Если ОбъектСериализации.Количество() Тогда
			
			НаборКлючей = "";
			
			Для Каждого Колонка Из ОбъектСериализации.Колонки Цикл
				
				НаборКлючей = НаборКлючей + Колонка.Имя + ","
				
			КонецЦикла;
			
			НаборКлючей = Лев(НаборКлючей, СтрДлина(НаборКлючей)-1);

			Для Каждого СтрокаТаблицы Из ОбъектСериализации Цикл
				
				НоваяСтр = Новый Структура(НаборКлючей);
				ЗаполнитьЗначенияСвойств(НоваяСтр, СтрокаТаблицы);
				Результат.Добавить(НоваяСтр);
				
			КонецЦикла;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ОбъектСериализации) = Тип("Структура") Тогда
		
		Результат = Новый Структура;
		
		Для Каждого КлючИЗначение Из ОбъектСериализации Цикл
			
			Результат.Вставить(КлючИЗначение.Ключ, СериализоватьОбъектДляВозвратаНаКлиент(КлючИЗначение.Значение));
			
		КонецЦикла;

	Иначе
		
		Результат = ОбъектСериализации;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СбисЭтоТипСтрокой(ЗначениеСравнить, ТипСтрокойСравнить) Экспорт
	
	ТипПривестиКСтроке = Строка(ЗначениеСравнить);
	Возврат Булево(Найти(ТипПривестиКСтроке, ТипСтрокойСравнить));

КонецФункции

Функция СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

// Функция - приводит переданные данные файлов в формат Base64
//
// Параметры:
//  СбисДанныеФайлов - Массив	 - содержит либо объект двоичные данные, либо ПомещенныеФайлы от метода ПоместитьФайлы/НачатьПомещениеФайловНаСервер
// 
// Возвращаемое значение:
//  Массив - Base64 переданных файлов, в соответствии с индексом переданного массива
//
Функция ФайлыВBASE64Сервер(СбисДанныеФайлов) Экспорт
	
	РезультатBase64 = Новый Массив;
	
	Для Каждого СбисДанныеФайла Из СбисДанныеФайлов Цикл
		
		Если Не ТипЗнч(СбисДанныеФайла) = Тип("ДвоичныеДанные") Тогда
			
			СбисДанныеФайла = ПолучитьИзВременногоХранилища(СбисДанныеФайла.Хранение);
			
		КонецЕсли;
		
		РезультатBase64.Добавить(Base64Строка(СбисДанныеФайла));
		
	КонецЦикла;
	
	Возврат РезультатBase64;
	
КонецФункции

// Функция - отбирает документы по типу
//
// Параметры:
//  Документы1С	 - СписокЗначений	 - Список документов, среди которых нужно выбрать подходящие
//  ТипыДокументов - Строка, Массив	 - Тип нужных документов
// 
// Возвращаемое значение:
//  Структура - где ключ - искомый тип, а значение - найденный массив
//
Функция ВыбратьДокументыПоТипам(Документы1С, ТипыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
		Для Каждого ТипВыбрать Из ТипыДокументов Цикл
			
			Результат.Вставить(ТипВыбрать, ВыбратьДокументыПоТипу(Документы1С, ТипВыбрать));
			
		КонецЦикла;
	Иначе
		
		Результат.Вставить(ТипыДокументов, ВыбратьДокументыПоТипу(Документы1С, ТипыДокументов));

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьДокументыПоТипу(Документы1С, ТипДокумента)
	
	Если ТипЗнч(Документы1С) = Тип("СписокЗначений") Тогда
		МассивДокументовПроверить = Документы1С.ВыгрузитьЗначения();
	Иначе
		МассивДокументовПроверить = Документы1С;
	КонецЕсли;
		
	ТипДокументаПроверить	= СбисРазложитьСтрокуВМассивПодстрок(ТипДокумента, ".");
	Если ТипДокументаПроверить.Количество() = 1 Тогда
		ТипДокументаПроверить = ТипДокумента;
	Иначе
		ТипДокументаПроверить = ТипДокументаПроверить[1];
	КонецЕсли;
	Результат = Новый Массив;
	Для Каждого Документ1С Из МассивДокументовПроверить Цикл
		Если Документ1С.Метаданные().Имя = ТипДокументаПроверить Тогда
			Результат.Добавить(Документ1С);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Объединияет объекты в 1
//
// Параметры:
//  ОбъектОсновной		 - Произвольный объект универсальных коллекций	 - основа объединения
//  ОбъектОбъединения	 - Произвольный объект универсальных коллекций	 - что надо влить в основной объект
//  ДопПараметры	 	 - Структура	 								 - контекст дозаполнения: 
//		Копия			- скопировать основной объект только на верхнем уровне
//		ГлубокаяКопия	- скопировать основной объект на всех уровнях
// 
// Возвращаемое значение:
//  ОбъектОсновной с значениями объектов из ОбъектыОбъединения
//
Функция ОбъединитьОбъектыУниверсальныхКоллекций(ОбъектОсновной = Неопределено, ОбъектОбъединения, ДопПараметры)  Экспорт

	КонтекстОбъединить = ДопПараметры;
	
	Если ОбъектОсновной = Неопределено Тогда
		
		ТипПроверка = ТипЗнч(ОбъектОбъединения);
		
	Иначе
		
		ТипПроверка = ТипЗнч(ОбъектОсновной);
		
	КонецЕсли;
		
	Если ТипПроверка = Тип("Структура") Тогда
		
		Результат = ОбъединитьОбъектыУниверсальныхКоллекций_Структура(ОбъектОсновной, ОбъектОбъединения, КонтекстОбъединить);
		
	ИначеЕсли	ТипПроверка = Тип("Строка")
		Или		ТипПроверка = Тип("Булево")
		Или		ТипПроверка = Тип("Число")
		Или		ТипПроверка = Тип("Дата") Тогда
		
		// Простой тип - берётся от второго объекта
		Результат = ОбъектОбъединения;
			
	Иначе
		
		ТекстОшибки = "Неизвестный тип """ + ТипПроверка + """ для объединения.";
		ОшибкаОбъединения = НовыйСбисИсключение(735, "МодульОбъекта.ОбъединитьОбъектыУниверсальныхКоллекций",,,ТекстОшибки);
		ВызватьИсключение СбисИсключение_ВСтроку(ОшибкаОбъединения);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбъединитьОбъектыУниверсальныхКоллекций_Структура(ОбъектОсновной = Неопределено, ОбъектОбъединения, КонтекстОбъединения)
	Перем ЗначениеТекущее;
	
	ГлубокаяКопия	=	КонтекстОбъединения.Свойство("ГлубокаяКопия")
					И	КонтекстОбъединения.ГлубокаяКопия;
				
	Копия			=	ГлубокаяКопия
					Или	(	КонтекстОбъединения.Свойство("Копия")
						И	КонтекстОбъединения.Копия); 
	Если	Копия
		Или	ОбъектОсновной = Неопределено Тогда
		
		Результат = Новый Структура;
		
		Если ГлубокаяКопия Тогда
			
			ОбъединитьОбъектыУниверсальныхКоллекций_Структура(Результат, ОбъектОсновной, Новый ФиксированнаяСтруктура("ГлубокаяКопия", ГлубокаяКопия));
			
		КонецЕсли;
		
	Иначе
		
		Результат = ОбъектОсновной;
		 
	КонецЕсли;
	
	Если	Не	ТипЗнч(ОбъектОбъединения) = Тип("ФиксированнаяСтруктура")
		И	Не	ТипЗнч(ОбъектОбъединения) = Тип("Структура") Тогда 	
		
		Возврат Результат;
		
	КонецЕсли;
	
	КонтекстОбъединения = Новый ФиксированнаяСтруктура("ГлубокаяКопия", ГлубокаяКопия);
	Для Каждого КлючИЗначение Из ОбъектОбъединения Цикл 
		
		Если	Результат.Свойство(КлючИЗначение.Ключ, ЗначениеТекущее)
			Или	ГлубокаяКопия Тогда
			
			ЗначениеВставить = ОбъединитьОбъектыУниверсальныхКоллекций(ЗначениеТекущее, КлючИЗначение.Значение, КонтекстОбъединения);
			
		Иначе 
				
			ЗначениеВставить = КлючИЗначение.Значение;
				
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, ЗначениеВставить)
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

// Процедура - помещает произвольный объект во временную таблицу в запрос
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - куда поместить
//  ОписаниеОбъектаПоместить - Струкутра	 - Имя - имя таблицы, Значение - объект, который требуется преобразовать к таблице и поместить в таблицу
//
Процедура ПоместитьОбъектВоВременнуюТаблицу(МенеджерВременныхТаблиц, ОписаниеОбъектаПоместить) Экспорт
	Перем МенеджерВременныхТаблицФункций, СтрокаПоляВыбрать;
	
	ИмяВременнойТаблицы = ОписаниеОбъектаПоместить.Имя;
	ОбъектПоместить		= ОписаниеОбъектаПоместить.Значение;
	Если ТипЗнч(ОбъектПоместить) = Тип("Массив") Тогда
	
		ОписаниеВТ			= ОбъектПоместить[0];
		ТаблицаДляЗапроса	= Новый ТаблицаЗначений;
		
		ТекстЗапроса = "ВЫБРАТЬ	{ПоляТаблицы}
		|ПОМЕСТИТЬ {ИмяВременойТаблицы}
		|ИЗ
		|	&{ИмяВременойТаблицы} КАК {ИмяВременойТаблицы}";
		Для Каждого КлючИЗначениеВТ Из ОписаниеВТ Цикл
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(КлючИЗначениеВТ.Значение));
			
			ТаблицаДляЗапроса.Колонки.Добавить(КлючИЗначениеВТ.Ключ, Новый ОписаниеТипов(МассивТипов));
			Если СтрокаПоляВыбрать = Неопределено Тогда
				СтрокаПоляВыбрать = Символы.ПС + ИмяВременнойТаблицы + "." + КлючИЗначениеВТ.Ключ
			Иначе
				СтрокаПоляВыбрать = СтрокаПоляВыбрать + "," + Символы.ПС + ИмяВременнойТаблицы + "." + КлючИЗначениеВТ.Ключ
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ОбъектПоместить Цикл
			
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(СтрЗаменить(ТекстЗапроса,	
							"{ПоляТаблицы}",		СтрокаПоляВыбрать),
							"{ИмяВременойТаблицы}", ИмяВременнойТаблицы);
		
		ЗапросСозданиеВТ = Новый Запрос(ТекстЗапроса);
		ЗапросСозданиеВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросСозданиеВТ.УстановитьПараметр(ИмяВременнойТаблицы, ТаблицаДляЗапроса);
		ЗапросСозданиеВТ.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область include_core2_vo2_Модуль_МодульОбъектаСервер_ОбщиеФункцииИПроцедуры_ЗагрузкаДокументов_БлокФункцийИниФайлов
#КонецОбласти

