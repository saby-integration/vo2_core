
Функция ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры=Неопределено) Экспорт 
	
	РезультатМакет = ПолучитьМакет(ИмяМакета);
	Если	Не	ДопПараметры = Неопределено
		И		ДопПараметры.Свойство("Текст")
		И		ДопПараметры.Текст Тогда
		РезультатМакет = РезультатМакет.ПолучитьТекст()
	КонецЕсли;
	Возврат РезультатМакет;
	
КонецФункции

// Функция Осуществляет поиск ВО в переданных местах и опционально выполняет подключение,
// установку, заполняет список форм
// Параметры:
//  ПараметрыФункций		 - 	 Структура с полями ИмяВнешнихФункций, ПараметрыПоследнихВФК*  
//  ДополнительныеПараметры	 - 	 -Структура с полями ПараметрыСистемы, МестаПоиска, Действия*  
//  *Необязательное
// Возвращаемое значение: Структура с полями: СведенияОЗапуске, Заплатки, СписокКлиентскихФорм,Результат  	
//   - 
//
Функция	ПолучитьАдресВнешнихФункцийСервер(Знач ПараметрыФункций, ДополнительныеПараметры)	Экспорт
    Перем ПараметрыПоследнихВФК, Действия;
	
	Результат				= Ложь;
	ИмяВременногоФайла		= ПолучитьИмяВременногоФайла(); 
	УправляемоеПриложение	= ДополнительныеПараметры.ПараметрыСистемы.Клиент.УправляемоеПриложение; 
	КодЯзыка				= ДополнительныеПараметры.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	ИмяВнешнихФункций		= ПараметрыФункций.ИмяВнешнихФункций;
	ПараметрыФункций.Свойство("СведенияПоследнемЗапускеВФК",ПараметрыПоследнихВФК);
	
	Если НЕ ДополнительныеПараметры.Свойство("Действия",Действия) Тогда
		//Если не передали список действий с найденной обработкой, выполним все, кроме создания объекта
		//иначе возврат на клиента вызовет ошибку
		Действия = Новый Структура("Подключить, Создать, ОпределитьФормы, ВернутьОбъект", Истина, Истина, Истина, Ложь);
	Иначе
		//если передали неполный список, действие не выполняем
		Действия = Новый Структура("Подключить, Создать, ОпределитьФормы, ВернутьОбъект", Ложь, Ложь, Ложь, Ложь); 
		Для Каждого Действие Из ДополнительныеПараметры.Действия Цикл
			Действия[Действие.Ключ] = Действие.Значение;	
		КонецЦикла; 	
	КонецЕсли;
	
	ЗаписьМестаПоиска	= Новый Структура();
	ЗаписьМестаПоиска.Вставить("СведенияОЗапуске", Новый Структура);
	ЗаписьМестаПоиска.Вставить("Заплатки",				Ложь);
	ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм",	Новый СписокЗначений);
	
	ВнешняяОбработка	= Неопределено;
	
	Для Каждого МестоПоиска Из ДополнительныеПараметры.МестаПоиска Цикл
		ПутьПоиска		= МестоПоиска.Путь;
		АлгоритмПоиска	= МестоПоиска.Алгоритм;
		СтрокаОшибки	= "Не удалось подключить внешние функции из """ + ПутьПоиска + """ по причине: ";
		Если Не ЗначениеЗаполнено(АлгоритмПоиска) Тогда
			Если Булево(СтрЧислоВхождений(МестоПоиска, "\")) Тогда
				АлгоритмПоиска = "Каталог";
			Иначе
				АлгоритмПоиска = "Запрос";
			КонецЕсли;
		КонецЕсли;
				
		Если АлгоритмПоиска = "Каталог" Тогда//Это каталог, проверить наличие обработки
			ОбластьПоиска = ПутьПоиска + ИмяВнешнихФункций + ".epf";
			Попытка
				ФайлВнешнихФункций = Новый Файл(ОбластьПоиска);
				
				Если Не ФайлВнешнихФункций.Существует() Тогда//Такого файла нет
					Продолжить;
				КонецЕсли;
				Результат = Истина;
				ДатаИзмененияФайла = ФайлВнешнихФункций.ПолучитьВремяИзменения();
				Если	Не	ПараметрыПоследнихВФК = Неопределено
					И		ПараметрыПоследнихВФК.Свойство("ДатаИзменения")
					И		ПараметрыПоследнихВФК.Свойство("ИмяФайла")
					И		ПараметрыПоследнихВФК.ДатаИзменения	= ДатаИзмененияФайла
					И		ПараметрыПоследнихВФК.ИмяФайла		= ОбластьПоиска Тогда
					ЗаписьМестаПоиска.СведенияОЗапуске	= ПараметрыПоследнихВФК;
					ЗаписьМестаПоиска.Заплатки			= "без изменений";
					Возврат ЗаписьМестаПоиска;
				КонецЕсли;
				ЗаписьМестаПоиска.СведенияОЗапуске = Новый Структура("ДатаИзменения, ИмяФайла", ДатаИзмененияФайла, ОбластьПоиска);
				
				Если Действия.Создать Тогда 
					ВнешняяОбработка = ВнешниеОбработки.Создать(ОбластьПоиска, Ложь);
				КонецЕсли;
				
				Если Действия.ВернутьОбъект Тогда
					Результат = ВнешняяОбработка;
				КонецЕсли;
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		Иначе//Найти область по метаданным и проверить наличие обработки.
			МногоСтрочнаяЗапись = СтрЗаменить(ПутьПоиска, ".", Символы.ПС);
			Если СтрЧислоСтрок(МногоСтрочнаяЗапись) = 0 Тогда
				Сообщить(СтрокаОшибки	+ "Неверно передано место поиска!");
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1);
			СтрокаПоиска	= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 2);
			Попытка
				ОбластьПоиска = Метаданные[СтрокаМетаданных];
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбъектМетаданных = ОбластьПоиска.Найти(СтрокаПоиска);
			Если		ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			ИначеЕсли	ОбластьПоиска = Метаданные.Обработки
					И	АлгоритмПоиска = "Метаданные" Тогда//Конфигурация
				ОбработкаФункций = ОбластьПоиска.Найти(ИмяВнешнихФункций);
				Если ОбработкаФункций = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если УправляемоеПриложение Тогда
					ЗаписьМестаПоиска.Вставить("Заплатки", НСтр("ru = 'Обработка.'; en = 'DataProcessor.'",КодЯзыка) + ИмяВнешнихФункций + НСтр("ru = '.Форма.'; en = '.Form.'",КодЯзыка));
				Иначе
					ЗаписьМестаПоиска.Вставить("Заплатки", Обработки[ИмяВнешнихФункций]);
				КонецЕсли;
				
				Если Действия.ОпределитьФормы Тогда
					//Сразу, пока на сервере, определим клиентские формы
					СписокКлиентскихФорм = Новый СписокЗначений;
					Для Каждого Фрм Из ОбработкаФункций.Формы Цикл
						СписокКлиентскихФорм.Добавить(Фрм.Имя);
					КонецЦикла;
					ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);			
				КонецЕсли;
				
				Результат = Истина;
				Прервать;
				
			ИначеЕсли	АлгоритмПоиска = "Запрос"  
					И	ОбластьПоиска = Метаданные.Справочники Тогда
				//Справочник обработок
				ОбластьПоиска = Справочники;
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				| ОбластьПоиска.Ссылка КАК ОбработкаФункций
				|ИЗ
				| " + Лев(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1), СтрДлина(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1))-1) + "." + СтрокаПоиска + " КАК ОбластьПоиска
				|ГДЕ
				| НЕ ОбластьПоиска.ПометкаУдаления
				| И ОбластьПоиска.%РевизитПоиска% ПОДОБНО &ИмяФайла");
				
					
				Если СтрокаПоиска = "ДополнительныеОтчетыИОбработки" Тогда
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций + "%");
					Если Не Метаданные.Перечисления.Найти("ВариантыПубликацииДополнительныхОтчетовИОбработок") = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						| И ОбластьПоиска.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
					КонецЕсли;
					РеквизитПоиска = "ИмяФайла";
				Иначе
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций);
					РеквизитПоиска = "Наименование";
				КонецЕсли;
								
				Если МестоПоиска.Свойство("РеквизитПоиска") Тогда
					РеквизитПоиска = МестоПоиска.РеквизитПоиска 
				КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РевизитПоиска%",РеквизитПоиска);  
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				//Запросом тащим обработки из справочника, вытягиваем из хранилища и пробуем создать
				Пока РезультатЗапроса.Следующий() Цикл
					ОбработкаФункций = РезультатЗапроса.ОбработкаФункций;
					Если ОбработкаФункций = ОбластьПоиска[СтрокаПоиска].ПустаяСсылка() Тогда 
						Продолжить;                                   
					КонецЕсли;
					
					Если Действия.Подключить Тогда
						
						Если ОбработкаФункций.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
							РеквизитХранилище = "ХранилищеОбработки";
						Иначе
							РеквизитХранилище = "ХранилищеВнешнейОбработки";
						КонецЕсли;
					
						Попытка
							Если УправляемоеПриложение Тогда
								ИмяОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(ОбработкаФункций, РеквизитХранилище), ИмяВнешнихФункций,Ложь);
							Иначе
								ДвоичныеДанные = ОбработкаФункций[РеквизитХранилище].Получить();
								ДвоичныеДанные.Записать(ИмяВременногоФайла);
								ИмяОбработки = ИмяВременногоФайла
							КонецЕсли;
							
							Результат = ИмяОбработки;
							
							Если Действия.Создать Тогда
								ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь); 
							КонецЕсли;
							
							Прервать;
						Исключение
							Сообщить(СтрокаОшибки + ОписаниеОшибки());
							Продолжить;
						КонецПопытки;
						
						Если Действия.ВернутьОбъект Тогда
							Результат = ВнешняяОбработка;
						КонецЕсли; 
						
					Иначе
						
						Результат 			= Истина; //Обработка найдена, иное и не надо
						ВнешняяОбработка	= Истина; //Надо что-то положить
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
			Иначе//Неизвестное место
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВнешняяОбработка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УправляемоеПриложение Тогда
			ПолноеИмяФормы = СтрЗаменить(НСтр("ru = 'ВнешняяОбработка.%func%.Форма.'; en = 'ExternalDataProcessor.%func%.Form.'",КодЯзыка), "%func%", ИмяВнешнихФункций);
			ЗаписьМестаПоиска.Вставить("Заплатки", ПолноеИмяФормы);
		Иначе
			ЗаписьМестаПоиска.Вставить("Заплатки", ВнешняяОбработка);
		КонецЕсли;
		
		Если Действия.ОпределитьФормы Тогда		
			//Сразу, пока на сервере, определим клиентские формы
			СписокКлиентскихФорм = Новый СписокЗначений;
			Для Каждого Фрм Из ВнешняяОбработка.Метаданные().Формы Цикл
				СписокКлиентскихФорм.Добавить(Фрм.Имя);
			КонецЦикла;
			ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);
		КонецЕсли;
				
		Прервать;
	КонецЦикла;

	ЗаписьМестаПоиска.Вставить("Результат", Результат);
	Возврат ЗаписьМестаПоиска;
	
КонецФункции

#Если ВебКлиент Тогда

Функция СсылочнйТипСтрокойВзовСервера(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочнйТипСтрокой()

#КонецЕсли

#Область include_core_vo2_Модуль_МодульОбъектаСервер_ОбщиеФункцииИПроцедуры_ЗагрузкаДокументов_БлокФункцийИниФайлов
#КонецОбласти

