
// Функция - Возвращает возможные места поиска ВО. Для сервера это справочники. На клиенте добавляется каталог настроек 
// 
// Возвращаемое значение:
//   - Массив структур
//
Функция ВнешняяОбработка_МестаПоискаПоУмолчаниюСервер()
	
	МестаПоиска = Новый Массив();
	
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоиска.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));	

	Возврат МестаПоиска;
	
КонецФункции

// Функция - Выполняет поиск обработки. Возможные места поиска: файл, справочник, конфигурация. Возвращает путь или ссылку на ВО
//
// Параметры:
//  ПараметрыПоиска	 - 	 Структура(ИмяОбработки, МестаПоиска*) 
//	*Необязательные  
//
// Возвращаемое значение:
//   Строка - путь к файловой обработке
//   СправочникСсылка - на элемент справочника Доп.Обработки
//	 Неопределено - обработка не найдена
Функция ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыПоиска) Экспорт
	Перем Результат;
	
	ИмяОбработки = ПараметрыПоиска.ИмяОбработки;
	
	Если ПараметрыПоиска.Свойство("МестаПоиска") Тогда
		МестаПоиска = ПараметрыПоиска.МестаПоиска;
	Иначе
		МестаПоиска = ВнешняяОбработка_МестаПоискаПоУмолчаниюСервер();
	КонецЕсли;
	
	Для Каждого МестоПоиска Из МестаПоиска Цикл
		
		ПутьПоиска		= МестоПоиска.Путь;
		АлгоритмПоиска	= МестоПоиска.Алгоритм;
		СтрокаОшибки	= "Не удалось подключить внешние функции из """ + ПутьПоиска + """ по причине: ";
		
		Если Не ЗначениеЗаполнено(АлгоритмПоиска) Тогда
			Если Булево(СтрЧислоВхождений(МестоПоиска, "\")) Тогда
				АлгоритмПоиска = "Каталог";
			Иначе
				АлгоритмПоиска = "Запрос";
			КонецЕсли;
		КонецЕсли;
		
		Если АлгоритмПоиска = "Каталог" Тогда//Это каталог, проверить наличие обработки
			
			ОбластьПоиска = ПутьПоиска + ИмяОбработки + ".epf";
			
			Попытка
				ФайлВнешнейОбработки = Новый Файл(ОбластьПоиска);
				
				Если Не ФайлВнешнейОбработки.Существует() Тогда//Такого файла нет
					Продолжить;
				КонецЕсли;
				
				Результат = ФайлВнешнейОбработки;
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
		Иначе//Найти область по метаданным и проверить наличие обработки.
			
			МногоСтрочнаяЗапись = СтрЗаменить(ПутьПоиска, ".", Символы.ПС);
			
			Если СтрЧислоСтрок(МногоСтрочнаяЗапись) = 0 Тогда
				Сообщить(СтрокаОшибки	+ "Неверно передано место поиска!");
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных	= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1);
			СтрокаПоиска		= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 2);
			
			Попытка
				ОбластьПоиска	= Метаданные[СтрокаМетаданных];
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбъектМетаданных = ОбластьПоиска.Найти(СтрокаПоиска);
			
			Если		ОбъектМетаданных = Неопределено Тогда
				
				Продолжить;
				
			ИначеЕсли	ОбластьПоиска = Метаданные.Обработки И АлгоритмПоиска = "Метаданные" Тогда//Конфигурация
				
				ОбработкаФункций = ОбластьПоиска.Найти(ИмяОбработки);
				
				Если ОбработкаФункций = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Результат = ИмяОбработки;
				
			ИначеЕсли	АлгоритмПоиска = "Запрос" И	ОбластьПоиска = Метаданные.Справочники Тогда
				
				//Справочник обработок
				ОбластьПоиска = Справочники;
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				| ОбластьПоиска.Ссылка КАК Обработка
				|ИЗ
				| " + Лев(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1), СтрДлина(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1))-1) + "." + СтрокаПоиска + " КАК ОбластьПоиска
				|ГДЕ
				| НЕ ОбластьПоиска.ПометкаУдаления
				| И ОбластьПоиска.%РевизитПоиска% ПОДОБНО &ИмяФайла");
				
				
				Если СтрокаПоиска = "ДополнительныеОтчетыИОбработки" Тогда
					
					Запрос.УстановитьПараметр("ИмяФайла", "%"+ ИмяОбработки + "%");
					
					Если Не Метаданные.Перечисления.Найти("ВариантыПубликацииДополнительныхОтчетовИОбработок") = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						| И ОбластьПоиска.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
					КонецЕсли;
					
					РеквизитПоиска = "ИмяФайла";
					
				Иначе
					Запрос.УстановитьПараметр("ИмяФайла", "%"+ ИмяОбработки + "%");
					РеквизитПоиска = "Наименование";
				КонецЕсли;
				
				Если МестоПоиска.Свойство("РеквизитПоиска") Тогда
					РеквизитПоиска = МестоПоиска.РеквизитПоиска 
				КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РевизитПоиска%",РеквизитПоиска);  
				
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					Обработка = РезультатЗапроса.Обработка;
					
					Результат = Обработка;
				КонецЕсли;
				
			Иначе//Неизвестное место
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

// Функция - Создает новый экземпляр обработки.
//
// Параметры:
//  ВнешняяОбработка	- ссылка на справочник ДопОбработок или путь к файлу 
// 
// Возвращаемое значение:
//   - ОбработкаОбъект.<Имя обработки>. 
//
Функция ВнешняяОбработка_Создать(ВнешняяОбработка)
	
	Если НЕ ТипЗнч(ВнешняяОбработка) = Тип("Строка") Тогда
		
		Если ВнешняяОбработка.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
			РеквизитХранилище = "ХранилищеОбработки";
		Иначе
			РеквизитХранилище = "ХранилищеВнешнейОбработки";
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда		
			ИмяВременногоФайла		= ПолучитьИмяВременногоФайла();
			ДвоичныеДанные			= ВнешняяОбработка[РеквизитХранилище].Получить();
			ДвоичныеДанные.Записать(ИмяВременногоФайла); 
			АдресОбработки			= ИмяВременногоФайла;
		#Иначе		
			АдресОбработки = ПолучитьНавигационнуюСсылку(ВнешняяОбработка, РеквизитХранилище);			
		#КонецЕсли
		
	Иначе
		
		АдресОбработки = ВнешняяОбработка;
		
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат	= ВнешниеОбработки.Создать(ИмяВременногоФайла);
	#Иначе
		АдресОбработки	= ВнешниеОбработки.Подключить(АдресОбработки,,Ложь);
		Результат		= ВнешниеОбработки.Создать(АдресОбработки);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает макет из внешней обработки. Опционально помещает во ВременноеХранилище или извлекает текст из макета. 
//
// Параметры:
//  ПараметрыОбработки	 -	Структура(ВнешняяОбработка*, ИмяОбработки*)
//							ВнешняяОбработка	- ссылка на справочник ДопОбработок или путь к файлу
//                          ИмяОбработки		- Имя обработки для поиска обработки, если ВнешняяОбработка не заполнено  	
//  ДопПараметры*		 -	Структура*(Текст, ПоместитьВХранилище*) 
//                       	Текст(Булево) - Вернуть текст из макета
//							ПоместитьВХранилище - Поместить макет во временное хранилище и вернуть ссылку	
// *Необязательные
// Возвращаемое значение:   Двоичные данные, Строка(Адрес в ВХ или текст макета), Неопределено, если не удалось найти обработку 
//   - 
//
Функция ВнешняяОбработка_ПолучитьМакетНаСервере(ПараметрыОбработки, ДопПараметры = Неопределено) Экспорт
	Перем Результат;
	
	Если ПараметрыОбработки.Свойство("ВнешняяОбработка") Тогда
		
		ВнешняяОбработка = ПараметрыОбработки.ВнешняяОбработка;
		
	Иначе
		
		ВнешняяОбработка = ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыОбработки);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВнешняяОбработка) Тогда
		ВызватьСбисИсключение("Не удалось найти внешнюю обработку "+ПараметрыОбработки.ИмяОбработки,"ВнешняяОбработка_ПолучитьМакетНаСервере"); 
	КонецЕсли;
	
	ВнешняяОбработкаОбъект = ВнешняяОбработка_Создать(ВнешняяОбработка);
	Макет					= ВнешняяОбработкаОбъект.ПолучитьМакет(ПараметрыОбработки.ИмяМакета);
	
	Если НЕ ДопПараметры = Неопределено Тогда
		
		Если ДопПараметры.Свойство("Текст")	И ДопПараметры.Текст Тогда
			Результат = Макет.ПолучитьТекст()
		ИначеЕсли ДопПараметры.Свойство("ПоместитьВХранилище")	И ДопПараметры.ПоместитьВХранилище Тогда
			Результат = ПоместитьВоВременноеХранилище(Макет);	
		КонецЕсли;
		
	Иначе
		Результат = Макет;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает информацию о ВО из элемента справочника. Только для обработок, хранящихся в справочнике(!)
//
// Параметры:
//  ПараметрыОбработки	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВнешняяОбработка_ПолучитьСведенияНаСервере(ПараметрыОбработки) Экспорт
	
	Если ПараметрыОбработки.Свойство("ВнешняяОбработка") Тогда
		
		ВнешняяОбработка = ПараметрыОбработки.ВнешняяОбработка;
		
	Иначе
		
		ВнешняяОбработка = ВнешняяОбработка_НайтиПоИмениНаСервере(ПараметрыОбработки);
		
	КонецЕсли;
		
	Сведения = Новый Структура("Ссылка, Версия, ИмяФайла, ИмяОбъекта");
	ЗаполнитьЗначенияСвойств(Сведения, ВнешняяОбработка);
	
	Возврат Сведения;	
	
КонецФункции

