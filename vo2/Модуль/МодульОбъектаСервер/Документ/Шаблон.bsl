
// функция дозаполняет табличную часть документа данными из электронного документа
Функция сбисДозаполнитьТабличнуюЧасть(Объект1СЗначение, Элемент, КлючиПоиска, Ини)
	// ключи, по которым ищем строки в документе, в которые необходимо внести изменения
	КлючиПоиска = СбисРазложитьСтрокуВМассивПодстрок(КлючиПоиска, ",");
	ЗаменятьТолькоЗаполненные = Ложь;
	// Можно задать в инишке список полей, которые хотим редактировать 
	ПоляДляПерезаполнения = РассчитатьЗначениеСервер("ПоляПерезаполнить", Новый Структура("ини", Ини.мТаблДок[Элемент.Ключ]));
	Если Не ЗначениеЗаполнено(ПоляДляПерезаполнения) Тогда
		ЗаменятьТолькоЗаполненные = Истина;
	КонецЕсли;                                          
	// В СписокОтредактированныхСтрок складываем строки документа, которые уже отредактировали, чтобы второй раз не редактировать одну и ту же строку, а редактировать следующую с такими же ключами 
	// (для случая наличия строк с одинаковыми номенклатурами/характеристиками)
	СписокОтредактированныхСтрок = Новый СписокЗначений;
	Для Каждого Строка Из Элемент.Значение Цикл  
		ПараметрыОтбора = Новый Структура;
		Для каждого Элем Из КлючиПоиска Цикл
			Если ЗначениеЗаполнено(Строка[Элем]) Тогда
				ПараметрыОтбора.Вставить(Элем, Строка[Элем]);				
			КонецЕсли;
		КонецЦикла;
		НайденныеСтроки = Объект1СЗначение[Элемент.Ключ].НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СписокОтредактированныхСтрок.НайтиПоЗначению(НайденнаяСтрока.НомерСтроки)<>Неопределено Тогда
					Продолжить;
				Иначе
					НоваяСтрока = НайденнаяСтрока;
					СписокОтредактированныхСтрок.Добавить(НайденнаяСтрока.НомерСтроки);
					// Если в инишке не указаны поля, то перезаполняем все, которые рассчитались по инишке
					Если ЗаменятьТолькоЗаполненные Тогда
						ПоляДляПерезаполнения = "";
						Для Каждого Элем Из Строка Цикл
							Если Элем.Значение<>Неопределено Тогда
								ПоляДляПерезаполнения = ПоляДляПерезаполнения + Элем.Ключ+",";						
							КонецЕсли;
						КонецЦикла;
						Если Прав(ПоляДляПерезаполнения, 1) = "," Тогда
							ПоляДляПерезаполнения = Лев(ПоляДляПерезаполнения, СтрДлина(ПоляДляПерезаполнения)-1);
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ПоляДляПерезаполнения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект1СЗначение[Элемент.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		КонецЕсли;
		Если Ини.мТаблДок[Элемент.Ключ].Свойство("мОбработчикПередЗаписьюНаСервере") Тогда
			ДопПараметрыОбработчика = Новый Структура;
			ДопПараметрыОбработчика.Вставить("ПересчитыватьНДСПоДанным1С", ?(Ини.Свойство("ПересчитыватьНДСПоДанным1С"), Ини.ПересчитыватьНДСПоДанным1С.РассчитанноеЗначение, 2));
			ДопПараметрыОбработчика.Вставить("ПересчитыватьЦеныПоДанным1С", ?(Ини.Свойство("ПересчитыватьЦеныПоДанным1С"), Ини.ПересчитыватьЦеныПоДанным1С.РассчитанноеЗначение, 2));
			сбисВыполнитьОбработчикиПоСтрокеТЧ(Ини.мТаблДок[Элемент.Ключ].мОбработчикПередЗаписьюНаСервере, Объект1СЗначение, Элемент.Ключ,	НоваяСтрока, ДопПараметрыОбработчика);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// функция выполняет обработчики по строкам создаваемого документа
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
Функция сбисВыполнитьОбработчикиПоСтрокеТЧ(мОбработчикПередЗаписью, Объект1СЗначение, КлючТЧ, СтрокаТЧ, ДопПараметры)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное", КлючТЧ); 
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить(КлючТЧ,	СтрокаТЧ); 
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДопПараметры);
	ПересчитатьНДСПоДанным1С = Ложь;
	Если ДопПараметры.ПересчитыватьНДСПоДанным1С <> 2 Тогда
		СуммаСтавкаНДС = Новый Структура("СуммаНДС, СтавкаНДС");
		ЗаполнитьЗначенияСвойств(СуммаСтавкаНДС, СтрокаТЧ);
		Если ДопПараметры.ПересчитыватьНДСПоДанным1С = 1
				ИЛИ (ДопПараметры.ПересчитыватьНДСПоДанным1С = 0 
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СуммаНДС)
						И НЕ ЗначениеЗаполнено(СуммаСтавкаНДС.СтавкаНДС))Тогда
			ПересчитатьНДСПоДанным1С = Истина;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикСтроки") и Обр.Значение.ОбработчикСтроки.Свойство("Обработчик") Тогда
			Если (Обр.Ключ = "ЗаполнитьСтавкуНДС" ИЛИ Обр.Ключ = "РассчитатьСуммуНДС")
				И НЕ ПересчитатьНДСПоДанным1С Тогда
				Продолжить;
			КонецЕсли;
			
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикСтроки.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции

// функция выполняет обработчики по создаваемому документу
// Обработчики указываются в инишке на загрузку документа
// Например, можно вызывать функции из общих модулей, в которых дозаполняются данные документа по умолчанию или пересчитываются определенные реквизиты, в зависимости от загруженных реквизитов
Функция сбисВыполнитьОбработчикиПоДокументу(мОбработчикПередЗаписью, Объект1СЗначение, ДопПараметрыОбработчика)
	СбисКонтекстРассчета = Новый Структура("ДанныеРезультат", Новый Структура());
	СбисКонтекстРассчета.Вставить("ИмяОбъекта", "Документ");
	СбисКонтекстРассчета.ДанныеРезультат.Вставить("Документ", Объект1СЗначение);
	СбисКонтекстРассчета.Вставить("Переменные", ДопПараметрыОбработчика);
	Для Каждого Обр Из мОбработчикПередЗаписью Цикл
		Если Обр.Значение.Свойство("ОбработчикДокумента") и Обр.Значение.ОбработчикДокумента.Свойство("Обработчик") Тогда
			РассчитатьЗначениеСервер(Обр.Значение.ОбработчикДокумента.Обработчик, СбисКонтекстРассчета);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции

