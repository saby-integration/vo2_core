
&НаКлиенте
Функция ПечатьЗапуск(ОбъектыНазначения, ДопПараметры) Экспорт
	
	ИдентификаторКоманды = ДопПараметры.ИдентификаторКоманды;
	
    ДополнительныеПараметрыКэша	= Новый Структура;
	ДополнительныеПараметрыКэша.Вставить("РежимЗапускаГлавногоОкна",	"ПечатнаяФорма");
	ДополнительныеПараметрыКэша.Вставить("МодульОбъекта",				МодульОбъектаКлиент());
	ГлавноеОкно.КэшПодготовить(ДополнительныеПараметрыКэша);

	ПечатьПодключитьРасширение(ОбъектыНазначения, Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды));
	
КонецФункции

&НаКлиенте
Процедура ПечатьПодключитьРасширение(ОбъектыНазначения, ДопПараметры = Неопределено) Экспорт
    Перем ИдентификаторКоманды;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ИдентификаторКоманды", ИдентификаторКоманды) Тогда
		ИдентификаторКоманды = "Печать";
	КонецЕсли;
	
	ПараметрыЗапускаПечати		= Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды);
	ОбработчикЗапуститьПечать	= НовыйСбисОписаниеОповещения("ПечатьУстановленоРасширениеРаботыСФайлами", МодульОбъектаКлиент(), ПараметрыЗапускаПечати);
	#Если ВебКлиент Тогда
		Если ПодключитьРасширениеРаботыСФайлами() = Ложь Тогда
			ПараметрыПослеРасширения		= Новый Структура("ОбъектыНазначения, ОбработчикПродолжить", ОбъектыНазначения, ОбработчикЗапуститьПечать);
			ОбработчикПодключитьРасширение	= НовыйСбисОписаниеОповещения("ПечатьПослеПодключенияРасширения", МодульОбъектаКлиент(), ПараметрыПослеРасширения);
			НачатьУстановкуРасширенияРаботыСФайлами(ОбработчикПодключитьРасширение);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	ВыполнитьСбисОписаниеОповещения(ОбъектыНазначения, ОбработчикЗапуститьПечать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеПодключенияРасширения(Подключено=Истина, ПараметрыЗапускаПечати) Экспорт
	
	Если Не Подключено Тогда
	   
	 	СбисСообщить("Расширение работы с файлами не подключено");
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьСбисОписаниеОповещения(ПараметрыЗапускаПечати.ОбъектыНазначения, ПараметрыЗапускаПечати.ОбработчикПродолжить);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУстановленоРасширениеРаботыСФайлами(ОбъектыНазначения, ДопПараметры) Экспорт
	
	Кэш						= ГлавноеОкно.Кэш;
	ИдентификаторКоманды	= ДопПараметры.ИдентификаторКоманды;
	ВсеВключилось			= ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	Если Не ВсеВключилось Тогда//Не удалось включить интеграцию, либо форма хранения настроек недоступна
		Возврат;
	КонецЕсли;	

	формаАвторизации = ПолучитьФормуОбработки("ФормаАвторизация");
	Если 	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат) 
		Или (НЕ	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль)
		Или Кэш.Парам.СпособОбмена = 1 Тогда
		УспешнаяАвторизация = формаАвторизации.Авторизоваться(ГлавноеОкно.Кэш);
	КонецЕсли;
	
	СбисДополнительныеПараметры	= Новый Структура("ИдентификаторКоманды, Документ", ИдентификаторКоманды, ОбъектыНазначения[0]);
	ОбработчикПослеАвторизации	= НовыйСбисОписаниеОповещения("ПечатьПослеАвторизацииСБИС", МодульОбъектаКлиент(), СбисДополнительныеПараметры);
	Если УспешнаяАвторизация = Истина Тогда
		ВыполнитьСбисОписаниеОповещения(Истина, ОбработчикПослеАвторизации);
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = формаАвторизации.ОткрытьМодально();
		ВыполнитьСбисОписаниеОповещения(Результат, ОбработчикПослеАвторизации);
	#Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = ОбработчикПослеАвторизации;
		формаАвторизации.Открыть();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеАвторизацииСБИС(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Кэш = ГлавноеОкно.Кэш;
	
	Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя", Истина);
	Кэш.Текущий.Раздел = "3";
	Кэш.Текущий.ТипДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Параметры.Документ, "Имя");  // alo Меркурий
	Попытка
		ЗаполнитьСведенияОПользователеИАккаунте(Новый Структура, Кэш);
	Исключение
		СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СбисПечать_ПослеАвторизации");
		Возврат;
	КонецПопытки;
	ГлавноеОкно.сбисПолучитьУстановитьНастройки(Кэш, Ложь);
	
	Если Не Кэш.КэшНастроек.ИниВПорядке Тогда
		Возврат;
	КонецЕсли;
	
	Документ		= Параметры.Документ;
	ИмяДокумента	= Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
	
	//Получим настройки документа
	Попытка
		НаборПодходящихИни = ИниПоПараметрам(Новый Структура("Тип1С", ИмяДокумента));
	Исключение
		СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.Найти_мФайлПоВложению");
		Возврат;
	КонецПопытки;
	
	//Получим настройки документа
	СписокИни = Новый СписокЗначений;
	Для Каждого КлючИЗначениеИни Из НаборПодходящихИни Цикл
		ЗначениеИни			= КлючИЗначениеИни.Значение;
		ТипИни				= Кэш.ОбщиеФункции.РассчитатьЗначение("ТипИни", ЗначениеИни);
		Реестр1С_Название	= Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни);
		Если	ТипИни = "Загрузка"
			Или	Реестр1С_Название = Неопределено
			Или	ЗначениеИни.Свойство("мДокумент") Тогда
			Продолжить;
		КонецЕсли;
		//Если	ЗначениеИни.Свойство("ЗапросСпискаДокументов")
		//	И	ЗначениеИни.Свойство("Реестр1С_Название") Тогда 
		//	Реестр1С_Название = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни, Кэш);
		//	СписокИни.Добавить(КлючИЗначениеИни.Ключ, ?(ЗначениеЗаполнено(Реестр1С_Название),Реестр1С_Название, ИмяДокумента));
		//КонецЕсли;
		
		СписокИни.Добавить(КлючИЗначениеИни.Ключ, Реестр1С_Название);
	КонецЦикла;  
	
	ОбработчикВыбора = НовыйСбисОписаниеОповещения("ПечатьПослеВыбораИни", МодульОбъектаКлиент(), Параметры);

	Если	Не	СписокИни.Количество() Тогда
		СбисСообщить("Выгрузка данного типа документов не поддерживается!");
		Возврат;
	ИначеЕсли	СписокИни.Количество() = 1 Тогда
		ВыполнитьСбисОписаниеОповещения(СписокИни[0], ОбработчикВыбора);
	Иначе
		СписокИни.СортироватьПоПредставлению();
		СбисВыбратьИзСписка(СписокИни, Новый Структура("Заголовок, Обработчик", "Выберите настройку для формирования документов", ОбработчикВыбора));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПослеВыбораИни(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ	= Параметры.Документ;
	Кэш			= ГлавноеОкно.Кэш;

	Если	Параметры.Свойство("ИдентификаторКоманды")
		И	Параметры.ИдентификаторКоманды = "sbis1cПогаситьВСД" Тогда
		ПечатьПогаситьВСД(Результат, Документ);
		Возврат;
	Конецесли;
	
	ЗначениеИни			= ИниПоПараметрам(Результат.Значение);
	Кэш.Текущий.ТипДок	= Результат.Значение;
		
	// Подготовим фильтр для запроса документов
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("ФильтрДокумент", Документ); 		

	// << alo Меркурий 
	Контекст		= Новый Структура("Ини", Новый структура("Документ",новый структура("РассчитанноеЗначение", Документ)));
	// Получим массив выгружаемых документов по запросу
	ТекстЗапроса	= Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", ЗначениеИни);
	
	Если ТекстЗапроса = Неопределено Тогда
		
        // Если в выбранной инишке нет запроса списка документов, то сэмулировать строку от текущий ини.
		МассивДокументов1С	= Новый Массив;
		СоставПакета		= Новый СписокЗначений;
		СоставПакета.Добавить(Документ, Результат.Значение);
		МассивДокументов1С.Добавить(Новый Структура("СоставПакета", СоставПакета));
		
	Иначе
		
		// Прогнать документ через запрос (сохранение старой логики, чтобы не отъехало)
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", Дата(1,1,1)); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", Дата(1,1,1)); 
		ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
		ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
		ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");
		ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
		ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
		Если ИниКонфигурация.Свойство("Ответственные") Тогда
			ИмяСправочника = СокрЛП(Сред(ИниКонфигурация.Ответственные.Значение, Найти(ИниКонфигурация.Ответственные.Значение, ".")+1));
			ТипСправочника = "СправочникСсылка." + ИмяСправочника;
		Иначе
			ТипСправочника = "СправочникСсылка.Пользователи";
		КонецЕсли;
		ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
		ПараметрыФильтра.Вставить( "ФильтрОтветственный", ОписаниеТипа.ПривестиЗначение()); // alo Меркурий >>
		ПараметрыФильтра.Вставить( "ФильтрМаска", "");
		ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
		ПараметрыФильтра.Вставить( "Страница", 1 );
		ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
		ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
		
		Если Кэш.ПараметрыФильтра.Количество() Тогда
			ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
			Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
				ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
			КонецЦикла;
		КонецЕсли;
		
		МассивДокументов1С = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, ГлавноеОкно.КаталогНастроек);
		
	КонецЕсли;
	
	//Подготовим список документов
	Для Каждого ТекущаяСтрока Из МассивДокументов1С Цикл
		
		ТекущиеРазделы	= Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументРаздел", ЗначениеИни);
		// Документ может находиться в нескольких разделах одновременно (напр., АктСверкиВзаиморасчетов). Обрабатываем все.
		ТекущиеРазделы = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ТекущиеРазделы, ",");
		Для i = 0 По ТекущиеРазделы.ВГраница() Цикл
			ТекущиеРазделы[i] = "Раздел_" + ТекущиеРазделы[i] + "_Шаблон";
		КонецЦикла;
		
		фрм				= МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПоказатьДокумент", ТекущиеРазделы);
		фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПечатьПогаситьВСД(ИмяИни, Документ)
	
	Кэш = ГлавноеОкно.Кэш;
	Кэш.Текущий.Раздел = "1";
	ПолучилосьАвтоматически = Ложь;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
	Если ЗначениеЗаполнено(Ини) И Ини.свойство("мФайл") И Ини.мФайл.свойство("АктРасхождение") Тогда
		РеквизитДатаВх = ?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, ""));
		РеквизитНомерВх = ?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, ""));
		Если ЗначениеЗаполнено(РеквизитДатаВх) ИЛИ ЗначениеЗаполнено(РеквизитНомерВх) Тогда
			ЗаписейНаСтранице = 2;
			ФильтрСтраница = 1;
			Контекст=новый структура("ини, Документ",Ини,Документ);
			
			Если Ини.Свойство("Контрагент_Роль") Тогда
				РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
				Если ЗначениеЗаполнено(РольКонтрагента) И Ини.мСторона.Свойство(РольКонтрагента) Тогда
					ФильтрКонтрагент = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольКонтрагента].Сторона.Значение,Контекст);
				КонецЕсли;
			КонецЕсли;
			
			РольОрганизации = ""; 
			Если Ини.Свойство("Организация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'","");
			ИначеЕсли Ини.Свойство("НашаОрганизация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.НашаОрганизация_Роль.Значение,"'","");
			КонецЕсли;
			Если ЗначениеЗаполнено(РольОрганизации) И Ини.мСторона.Свойство(РольОрганизации) Тогда
				ФильтрОрганизация = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольОрганизации].Сторона.Значение,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитДатаВх) Тогда
				ФильтрДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДатаВх,Контекст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитНомерВх) Тогда
				ФильтрМаска = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитНомерВх,Контекст);
			КонецЕсли;
				
			БазоваяИнтеграция = ?(Кэш.ИнтеграцияИмя = "ExtSDK2", Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK, Кэш.Интеграция);
	
			filter = БазоваяИнтеграция.ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", "ДокОтгрВх"));
			ПакетыСБИС = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно); 
			Если ЗначениеЗаполнено(ПакетыСБИС) И ПакетыСБИС.Таблица_РеестрДокументов.количество()=1 Тогда
				ПакетСБИС = ПакетыСБИС.Таблица_РеестрДокументов[0];
				фрм = НайтиФункциюСеансаОбработки("ЗаписатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами);
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения", ПакетСБИС.ИдСБИС,"");
				фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
				
				ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПакетСБИС.ИдСБИС);
				
				фрм = НайтиФункциюСеансаОбработки("СформироватьРасхождениеНажатие","ФормаПросмотрДокумента");
				фрм.МестныйКэш = Кэш;
				фрм.СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш);
				фрм.ЗаполнитьТаблицуДокументов(фрм.СоставПакета);
				фрм.СформироватьРасхождениеНажатие(неопределено);
				Если фрм.СоставПакета.Вложение.количество()>0 Тогда	
					Вложение = фрм.СоставПакета.Вложение[фрм.СоставПакета.Вложение.количество()-1];
					Если Вложение.Тип = "АктРасхождение" Тогда
						Кэш.Интеграция.СБИСЗаписатьВложения(Кэш, фрм.СоставПакета, Вложение);
						Сообщить("Обновлен документ "+фрм.СоставПакета.Название);
						ГлавноеОкно.ОткрытьДокументОнлайнПоПакету(фрм.СоставПакета, Кэш);
						ПолучилосьАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучилосьАвтоматически Тогда    // открыть форму для ручной работы и инструкцию
		ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/vsd?tb=tab2");
		ГлавноеОкно.ПерейтиВРаздел("АккордеонДокОтгрВх11");
		Кэш.ГлавноеОкно.Открыть();
	КонецЕсли;
КонецФункции

