
//Для определенных ИБ нельзя хранить настройки в хранилище из-за ограничения прав. Используем СБИС параметры для такого.
&НаКлиенте
Функция		ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Экспорт
	Результат = 	ГлобальныйКэш.ПараметрыСистемы.Клиент.РежимЗапускаПриложения = "ТолстыйКлиентОбычноеПриложение"
			И	Не	ГлобальныйКэш.ПараметрыСистемы.Конфигурация.Файловая;
			
	Если	Результат
		И	ГлобальныйКэш.Парам.СпособХраненияМетокСтатусов = 2 Тогда
		ИзменитьПараметрСбис("СпособХраненияМетокСтатусов", 1);
		МеткиСтатусов = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисПрочитатьМеткиСтатусов(ГлавноеОкно.Кэш);
		ЗаполнитьЗначенияСвойств(ГлавноеОкно, МеткиСтатусов);
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ИнициализироватьКэшНастроек(ГлавноеОкно.Кэш, Новый Структура("Обновить, Параметр", Истина, "status_marks")); //для способа хранения меток в разрезе аккаунта добавим status_marks в список параметров, хранящихся на шаблоне	
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыКлючаОбщихНастроекКлиент() Экспорт
	
	Возврат ПараметрыКлючаОбщихНастроек();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыКлючаОбщихНастроек()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек, ИмяПользователя", "Saby", "params", "Saby");
	
КонецФункции

// Функция - читает общие настройки Saby
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаКлиенте
Функция ПрочитатьОбщиеНастройки(КлючНастройки=Неопределено, ДопПараметры=Неопределено) Экспорт
	
	Попытка
		Если ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
			Возврат СбисОбщиеПараметрыИзПодключения(КлючНастройки);
		Иначе
			Возврат СбисОбщиеПараметрыИзХранилищаСервер(КлючНастройки);
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.ПрочитатьОбщиеНастройки");
	КонецПопытки;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаКлиенте
Функция СбисОбщиеПараметрыИзПодключения(КлючНастройки=Неопределено)
	Перем СбисПараметрыПользователей, ЗначениеНастройки;
	
	СбисКлючи			= ПараметрыКлючаОбщихНастроек();
	СбисКлючНастроек	= СбисКлючи.КлючОбъекта + "_" + СбисКлючи.КлючНастроек;
	
	Попытка
		ПараметрыЧтения		= Новый Структура("Ключ, КлючНастройки", СбисКлючНастроек, КлючНастройки);
		ЗначениеНастройки	= ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ПрочитатьОбщуюНастройкуПодключения(ПараметрыЧтения, ГлавноеОкно.Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисОбщиеПараметрыИзПодключения");
	КонецПопытки;
	Если	КлючНастройки		= Неопределено
		И	ЗначениеНастройки	= Неопределено Тогда 
		ЗначениеНастройки = Новый Структура
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаСервере
Функция СбисОбщиеПараметрыИзХранилищаСервер(КлючНастройки)
	
	УстановитьПривилегированныйРежим(Истина);
	КлючНастроекСохранить = ПараметрыКлючаОбщихНастроек();
	Результат = ХранилищеОбщихНастроек.Загрузить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, , КлючНастроекСохранить.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Если Не КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Результат = Результат.Получить(КлючНастройки);
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция - читает общие настройки на стороне сервера
//
// Параметры:
//  КлючНастройки	 - Строка Необязательный	 - При необходимости получить не все настройки, а конкретное значение
// 
// Возвращаемое значение:
//  Значение настроек/настройки по ключу - Соответствие/Произвольный
//
&НаСервере
Функция СбисОбщиеНастройкиИзИнтеграции(КлючНастройки)	
	//УстановитьПривилегированныйРежим(Истина);
	Результат = ХранилищеОбщихНастроек.Загрузить("Saby", "params", , "Saby");
	//УстановитьПривилегированныйРежим(Ложь);
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Если Не КлючНастройки = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			Результат = Результат.Получить(КлючНастройки);
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(КлючНастройки, Результат);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Процедура - сохраняет общую настройку Saby
//
// Параметры:
//  КлючНастройки		 - Строка	- Ключ записи
//  ЗначениеНастройки	 - Произвольный	 - Значение для записи
//
&НаКлиенте
Процедура СохранитьОбщуюНастройку(КлючНастройки, ЗначениеНастройки) Экспорт
	Попытка
		ПараметрыОбновитьДляСервера = Новый Структура;
		ПараметрыОбновитьДляСервера.Вставить(КлючНастройки, ЗначениеНастройки);
		СохранитьОбщиеНастройки(ПараметрыОбновитьДляСервера)
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СохранитьОбщуюНастройку");
	КонецПопытки;	
КонецПроцедуры

// Процедура - сохраняет общие настройки Saby
//
// Параметры:
//  КлючНастройки		 - Строка	- Ключ записи
//  ЗначениеНастройки	 - Произвольный	 - Значение для записи
//
&НаКлиенте
Процедура СохранитьОбщиеНастройки(НастройкиЗаписать, ДопПараметры=Неопределено) Экспорт
	
	Попытка
		Если ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда
			СбисСохранитьОбщиеНастройкиВПодключение(НастройкиЗаписать, ДопПараметры);
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СбисСохранитьОбщиеНастройкиВХранилищеСервер(НастройкиЗаписать);
			#Иначе
				СбисСохранитьОбщиеНастройкиВХранилищеВызовСервера(НастройкиЗаписать);
			#КонецЕсли
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СохранитьОбщиеНастройки");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СбисСохранитьОбщиеНастройкиВПодключение(ЗначенияОбновить, ДопПараметры)
	
	Перем СбисПараметрыПользователей, ЗначениеПараметраВШаблоне;
	
	Отказ						= Ложь;
	СбисКлючи					= ПараметрыКлючаОбщихНастроек();
	СбисКлючНастроек			= СбисКлючи.КлючОбъекта + "_" + СбисКлючи.КлючНастроек;
	Попытка
		СбисПараметрыПользователей	= СбисОбщиеПараметрыИзПодключения();
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисСохранитьОбщиеНастройкиВПодключение");
	КонецПопытки;
	лЗаменитьЗначение = ДопПараметры.Свойство("Заменить") И ДопПараметры.Заменить;
	
	//Дополнить текущую структуру параметров новыми значениями
	Для Каждого Элемент Из ЗначенияОбновить Цикл
		Если Не СбисПараметрыПользователей.Свойство(Элемент.Ключ, ЗначениеПараметраВШаблоне)
			Или	лЗаменитьЗначение Тогда
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, Элемент.Значение);
		ИначеЕсли	ТипЗнч(ЗначениеПараметраВШаблоне)	= Тип("Структура")
				И	ТипЗнч(Элемент.Значение)			= Тип("Структура") Тогда
			ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьСтруктуруНаКлиенте(ЗначениеПараметраВШаблоне, Элемент.Значение);
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, ЗначениеПараметраВШаблоне);
		Иначе
			СбисПараметрыПользователей.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура("Настройка",  Новый Структура(СбисКлючНастроек, СбисПараметрыПользователей));
	Попытка
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ЗаписатьОбщуюНастройкуПодключения(ПараметрыЗаписи, ГлавноеОкно.Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисСохранитьОбщиеНастройкиВПодключение");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СбисСохранитьОбщиеНастройкиВХранилищеВызовСервера(Знач ЗначенияОбновить)
	
	СбисСохранитьОбщиеНастройкиВХранилищеСервер(ЗначенияОбновить);
	
КонецПроцедуры

&НаСервере
Процедура СбисСохранитьОбщиеНастройкиВХранилищеСервер(ЗначенияОбновить)
	
	КлючНастроекСохранить = ПараметрыКлючаОбщихНастроек();
	УстановитьПривилегированныйРежим(Истина);
	ОбщиеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, , КлючНастроекСохранить.ИмяПользователя);
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки = ЗначенияОбновить;
	Иначе
		Для Каждого Элемент Из ЗначенияОбновить Цикл
			ОбщиеНастройки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить(КлючНастроекСохранить.КлючОбъекта, КлючНастроекСохранить.КлючНастроек, ОбщиеНастройки, , КлючНастроекСохранить.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

