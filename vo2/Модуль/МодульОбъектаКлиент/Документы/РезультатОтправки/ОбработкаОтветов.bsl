
// Процедура - готовит структуру статусов на запись. Сама запись статусов проходит в промежутках ожидания ответов
//
// Параметры:
//  РезультатОтправки	 - Струкутра, РезультатОтправки	 - 
//  СоставПакета		 - Структура, СоставПакета	 - 
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	Перем СтатусРегламент, ОсновнойДокумент1С, ИдентификаторВызова, СтатусУстановить;
	
	МассивСтатусРегламент	= ПолучитьЗначениеПараметраСбис("МассивСтатусРегламент");
	ИдОтправки				= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	ДокументСБИС			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ДокументОтправить");
 	СоставПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");

	Если ДокументСБИС = Неопределено Тогда
		//Отправки не было, статуса тоже нет.
		Возврат;
	КонецЕсли;

	//СоставПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");
	РегламентПакета			= СоставПакета_Получить(ДокументСБИС, "РегламентНазвание");
	
	Статусы			= Новый Массив;
	СтатусРегламент	= "";
	Если Не МассивСтатусРегламент = Неопределено Тогда
		Если Не МассивСтатусРегламент.Найти(РегламентПакета) = Неопределено Тогда
			СтатусРегламент = РегламентПакета; 
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Документы1С") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид, ДокументСБИС_ИдВложения, ДокументСБИС_Статус", ДокументСБИС.Идентификатор, Вложение.Идентификатор, СтатусУстановить);
			Статусы.Добавить(Новый Структура("СтруктураСвойств, Документ1С, Регламент", СтруктураСвойств, Документ1С.Значение, СтатусРегламент));
			
		КонецЦикла;
	КонецЦикла;
	
	Если	СоставПакета.Вложение.Количество()
		И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	КонецЕсли;
	
	РезультатОтправки.ДанныеПоСтатусам.Добавить(Новый Структура("Идентификатор, ОсновнойДокумент1С, Статусы", ИдОтправки, ОсновнойДокумент1С, Статусы));
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки) Экспорт
	Перем лОшибкаФатальная;

	ИдОтправки		= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	СбисИсключение	= ПараметрыОшибки.Исключение;
	СоставПакета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СоставПакета");
	
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Ошибка");
	РезультатОтправки.НаЗаписьСтатусов.Ошибки.Вставить(ИдОтправки, СбисИсключение);

	ТекстОшибки				= СбисИсключение.message;
	ОписаниеРасширенное		= СбисИсключение.details;	
	ЭлементСписка			= РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);

	РезультатОтправки.Ошибок = РезультатОтправки.Ошибок + 1;
	
	Если ЭлементСписка = Неопределено Тогда
		РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление) + 1;
	КонецЕсли;
	
	Если	ПараметрыОшибки.Свойство("Подготовка")
		И	ПараметрыОшибки.Подготовка Тогда
		//Ошибка из пакета документов, до отправкиподготовки
		РезультатОтправки.Счетчики.ОшибокПодготовки	= РезультатОтправки.Счетчики.ОшибокПодготовки + 1;
	Иначе
		РезультатОтправки.Счетчики.ОшибокОтправки	= РезультатОтправки.Счетчики.ОшибокОтправки + 1;		
	КонецЕсли;
	
	Если	ПараметрыОшибки.Свойство("ПотеряАвторизации")
		И	ПараметрыОшибки.ПотеряАвторизации Тогда
		АсинхроннаяСбисКоманда	= ПараметрыОшибки.Команда;
		УспешнаяАвторизация		= Ложь;
		Если	РезультатОтправки.Свойство("ВремяПоследнейАвторизации")
			И	АсинхроннаяСбисКоманда.ВремяВызова <= РезультатОтправки.ВремяПоследнейАвторизации Тогда
			// если уже переавторизовались, но получаем более ранние ответы с ошибкой авторизации
			УспешнаяАвторизация = Истина;
		Иначе
			Если	(	ПолучитьЗначениеПараметраСбис("ВходПоСертификату")
					И	ПолучитьЗначениеПараметраСбис("ЗапомнитьСертификат"))
				Или (Не	ПолучитьЗначениеПараметраСбис("ВходПоСертификату")
					И	ПолучитьЗначениеПараметраСбис("ЗапомнитьПароль")) Тогда
					
				// переавторизуемся
				формаАвторизации	= ПолучитьФормуОбработки("ФормаАвторизация");
				УспешнаяАвторизация	= формаАвторизации.Авторизоваться(ГлавноеОкно.Кэш) = Истина;
				РезультатОтправки.Вставить("ВремяПоследнейАвторизации", ТекущаяДата());
				
			КонецЕсли;
			
		КонецЕсли;
		Если УспешнаяАвторизация Тогда
			
			РезультатОтправки_ПоставитьВОчередьНаПовторнуюОтправку(РезультатОтправки, ОтправкаДокументаСБИС);
			Возврат;
			
		Иначе//Фатальная ошибка авторизации, прерываем отправку, ибо без авторизации ничего и не уйдёт.
			
			ПараметрыОшибки.Вставить("Фатальная", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия = Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	
	//Дополнить детализацию по документам 1С
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Документы1С") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			
			СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С, Сообщение, СтруктураОшибки", Документ1С.Значение, ОписаниеРасширенное, СбисИсключение); 
			СтрокаВСоответствие.Вставить("ИдВложения",		ВложениеСБИС_Получить(Вложение, "Идентификатор")); 
			СтрокаВСоответствие.Вставить("ДокументСБИС",	ВложениеСБИС_Получить(Вложение, "Название"));

			СтрокаВСоответствие.Вставить("ИДПакета",		СоставПакета_Получить(СоставПакета, "Идентификатор"));
			СтрокаВСоответствие.Вставить("Регламент",		СоставПакета_Получить(СоставПакета, "РегламентНазвание"));
			ЭлементСоответствия.Добавить(СтрокаВСоответствие);
			
		КонецЦикла;
	КонецЦикла;	
	
	Если	Не	ПараметрыОшибки.Свойство("Фатальная", лОшибкаФатальная)
		Или	Не	лОшибкаФатальная	Тогда
		//Считаем нефатальные ошибки по коду и детализации. Если накопится ряд однотипных, без ответов то прерываем отправку.
		СоответствиеНФО = Неопределено;
		Если Не РезультатОтправки.ПараметрыОтправки.Свойство("НефатальныеОшибки", СоответствиеНФО) Тогда
			СоответствиеНФО = Новый Соответствие;
			РезультатОтправки.ПараметрыОтправки.Вставить("НефатальныеОшибки", СоответствиеНФО);
		КонецЕсли;
		СоответствиеПоКоду			= СоответствиеНФО.Получить(СбисИсключение.code);
		СоответствиеПоДетализации	= СоответствиеНФО.Получить(СбисИсключение.details);
		Если СоответствиеПоКоду = Неопределено Тогда
			СоответствиеПоКоду = 0;
		КонецЕсли;
		Если СоответствиеПоДетализации = Неопределено Тогда
			СоответствиеПоДетализации = 0;
		КонецЕсли;
		СоответствиеПоКоду			= СоответствиеПоКоду + 1;
		СоответствиеПоДетализации	= СоответствиеПоДетализации + 1;
		ИсключениеПрерывания		= Неопределено;
		Если		СоответствиеПоКоду >= 10 Тогда
			
			ИсключениеПрерывания = НовыйСбисИсключение(,"МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",
														700, 
														"Повторите попытку позже.", 
														"Получен ряд однотипных ошибок: " + СбисИсключение.message, 
														Новый Структура("Ошибка", СбисИсключение));
		ИначеЕсли	СоответствиеПоДетализации >= 5 Тогда
			ИсключениеПрерывания = НовыйСбисИсключение(,"МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",
														700, 
														"Повторите попытку позже.", 
														"Получен ряд одинаковых ошибок: " + СбисИсключение.details, 
														Новый Структура("Ошибка", СбисИсключение));
		КонецЕсли;
		Если Не ИсключениеПрерывания = Неопределено Тогда
			//Если накоплено n нефатальных ошибок (не получиили ниодного успешного ответа, то прерываем отправку)
			РезультатОтправки.Вставить("ПрерватьОтправку", ИсключениеПрерывания);
		КонецЕсли;
		СоответствиеНФО.Вставить(СбисИсключение.code,		СоответствиеПоКоду);
		СоответствиеНФО.Вставить(СбисИсключение.details,	СоответствиеПоДетализации);
		
		
	ИначеЕсли лОшибкаФатальная Тогда
		Если Не РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			РезультатОтправки.Вставить("ПрерватьОтправку", НовыйСбисИсключение(СбисИсключение, "МодульОбъектаКлиент.РезультатОтправки_ОбработатьОшибку",,"Получена фатальная ошибка. Отправка прервана."));
		КонецЕсли;
	КонецЕсли;

	//Надо прописать на запись статусы по пакету. Сам статус появится в момент записи РезультатОтправки_ЗаписатьНакопленныеСтатусы
	РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС);
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_Асинх_ПередОтправкой(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки = ПараметрыВызова.РезультатОтправки;
    ПараметрыНачалаОтправки = Новый Структура("ДатНач, ВремяНачала, ВремяВыполнения", ПолучитьДатуВМиллисекундах(), АсинхронноеСбисСобытие.Получено);
	РезультатОтправки.ДетализацияОтправки.Вставить(ПараметрыВызова.Команда.Идентификатор, ПараметрыНачалаОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_Асинх_ПослеОтправки(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки			= ПараметрыВызова.РезультатОтправки;
	ОтправкаДокументаСБИС		= ПараметрыВызова.Команда.АргументВызова;
	СтатусОтправленногоПакета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета");
	
	Если		СтатусОтправленногоПакета = "Переотправка" Тогда
			
		РезультатОтправки.Счетчики.ПовторныхОтправок = РезультатОтправки.Счетчики.ПовторныхОтправок + 1;

	ИначеЕсли 	СтатусОтправленногоПакета = "Готов" Тогда
		
		РезультатОтправки.Счетчики.ПервичныхОтправок = РезультатОтправки.Счетчики.ПервичныхОтправок + 1; 
		
	ИначеЕсли 	СтатусОтправленногоПакета = "Черновик" Тогда
		
		РезультатОтправки.Счетчики.ПервичныхОтправок = РезультатОтправки.Счетчики.ПервичныхОтправок + 1;
		
	Иначе
		
		//Вероятно, ошибка отправки или произошло что-то неожидаемое. Поток не занимать.
		Возврат;
		
	КонецЕсли;
	
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Отправлен");
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Вставить(ПараметрыВызова.Команда.Идентификатор, ПараметрыВызова.Команда);
	
КонецПроцедуры

//Обработка события успешной отправки пакета
&НаКлиенте
Процедура РезультатОтправки_Асинх_Ответ(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт
	Перем СостояниеДокументаОтправки;
	
	РезультатОтправки = ПараметрыВызова.РезультатОтправки;
	Если РезультатОтправки.ПараметрыОтправки.Свойство("НефатальныеОшибки") Тогда
		//Получен ответ, все накопленные НФО удаляем
		РезультатОтправки.ПараметрыОтправки.Удалить("НефатальныеОшибки");
	КонецЕсли;
	ДанныеОтвета = АсинхронноеСбисСобытие.Данные;
	Если	Не	(ДанныеОтвета.Свойство("Состояние", СостояниеДокументаОтправки) Или (ДанныеОтвета.Свойство("Result") И ДанныеОтвета.Result.Свойство("Состояние", СостояниеДокументаОтправки)))
		Или	Не	СостояниеДокументаОтправки.Свойство("Название", СостояниеДокументаОтправки)
		Или	Не	ЗначениеЗаполнено(СостояниеДокументаОтправки) Тогда
		ИсключениеОтвета = НовыйСбисИсключение(, "МодульОбъектаКлиент.РезультатОтправки_Асинх_Ответ", 700 ,,"В ответе отсутствует состояние документа.", Новый Структура("Ответ", ДанныеОтвета));
		НовоеАсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(АсинхронноеСбисСобытие.Идентификатор, ИсключениеОтвета, "Error");
		РезультатОтправки_Асинх_Ошибка(НовоеАсинхронноеСбисСобытие, ПараметрыВызова);
		//Отправка неуспешна, т.к. нет состояния документа
		Возврат;
	КонецЕсли;
		
	ИдентификаторОтправки	= ПараметрыВызова.Команда.Идентификатор;
	ОтправкаДокументаСБИС	= ПараметрыВызова.Команда.АргументВызова;
	ИдентификаторДляОтвета	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	
	РезультатОтправки.Отправлено		= РезультатОтправки.Отправлено + 1;
	РезультатОтправки.ПолученоОтветов	= РезультатОтправки.ПолученоОтветов + 1;
	РезультатОтправки.НаЗаписьСтатусов.Ответы.Вставить(ИдентификаторДляОтвета, АсинхронноеСбисСобытие.Данные);
	
	РезультатОтправки_ПодготовитьСтатусыПоИтогуОтправки(РезультатОтправки, ОтправкаДокументаСБИС);
	РезультатОтправки_ВремяОтправки(РезультатОтправки, ИдентификаторОтправки);
	//Очистить отслеживаемый поток.
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Обработка события ошибки отправки пакета
&НаКлиенте
Процедура РезультатОтправки_Асинх_Ошибка(АсинхронноеСбисСобытие, ПараметрыВызова) Экспорт

	РезультатОтправки			= ПараметрыВызова.РезультатОтправки;
	ОтветИсключение				= НовыйСбисИсключение(АсинхронноеСбисСобытие.Данные, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Ошибка");
	ОтправкаДокументаСБИС		= ПараметрыВызова.Команда.АргументВызова;
	ПараметрыОбработатьОшибку	= Новый Структура("Исключение", ОтветИсключение);
	Если ПараметрыВызова.Свойство("Фатальная") Тогда
		ПараметрыОбработатьОшибку.Вставить("Фатальная",			ПараметрыВызова.Фатальная);
	КонецЕсли;	
	Если ПараметрыВызова.Свойство("ПотеряАвторизации") Тогда
		ПараметрыОбработатьОшибку.Вставить("ПотеряАвторизации", ПараметрыВызова.ПотеряАвторизации);
	КонецЕсли;
	
	РезультатОтправки.НеОтправлено		= РезультатОтправки.НеОтправлено + 1;
	РезультатОтправки.ПолученоОтветов	= РезультатОтправки.ПолученоОтветов + 1;

	РезультатОтправки_ОбработатьОшибку	(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОбработатьОшибку);
	РезультатОтправки_ВремяОтправки		(РезультатОтправки, ПараметрыВызова.Команда.Идентификатор);
	//Очистить отслеживаемый поток.
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Проверяет наличие ответа от плагина и вызывает событие обработки полученного ответа.
//Имеет смысл сделать обработчиком ожидания, но тогда придётся кардинально переделывать отправку на других формах
&НаКлиенте
Процедура РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки)

	//Читаем все ответы, которые пришли
	ГлобальныйКэш_ЧтениеОтветовИВызовСобытий();
	ГлобальныйКэш_ОбработатьПросроченныеВызовы();
	
КонецПроцедуры

//Удаляет поток из отслеживаемых отправкой
&НаКлиенте
Процедура РезультатОтправки_УдалитьПоток(РезультатОтправки, АсинхронноеСбисСобытие) Экспорт
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Удалить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецПроцедуры

//Добавляет поток в отслеживаемые отправкой
&НаКлиенте
Процедура РезультатОтправки_ДобавитьПоток(РезультатОтправки, АсинхронноеСбисКоманда) Экспорт
	
	РезультатОтправки.ПараметрыОтправки.Потоки.Вставить(АсинхронноеСбисКоманда.Идентификатор, АсинхронноеСбисКоманда);
	
КонецПроцедуры

//Освобождает отслеживаемые отправкой потоки сгенерированным событием. Например, при получении критической ошибки
&НаКлиенте
Процедура РезультатОтправки_ОсвободитьПотоки(РезультатОтправки, АсинхронноеСбисСобытие) Экспорт
	
	Для Каждого КлючИЗначениеКомандаВыполнена Из РезультатОтправки.ПараметрыОтправки.Потоки Цикл
		АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, КлючИЗначениеКомандаВыполнена.Значение);
	КонецЦикла;
	РезультатОтправки.ПараметрыОтправки.Потоки.Очистить();
	
КонецПроцедуры

