
// Процедура - патчит дату, время, имя файла
//
// Параметры:
//  ФайлПропатчить		- Структура	- Вложение.СтруктураДокумента.Файл формируемого вложения
//  ВходящийКонтекст	- Структура
//		ФайлДанные		- Структура, грязный ини
//		ПолучательРоль	- Строка, роль получателя для поиска ИД
//		ОтправительРоль - Строка, роль отправителя для поиска ИД
//
&НаКлиенте
Процедура ПропатчитьФайлВложенияСБИС(ВложениеСБИС, ДопПараметры) Экспорт
	Перем ПолучательИд, ОтправительИд, ФайлИмяПропатчить, лДанныеСторон;
	
	ФайлПропатчить		= ВложениеСБИС.СтруктураДокумента.Файл;
	ДатаВремяСоздания	= ТекущаяДата();
	Если ДопПараметры.Свойство("ПутьКСторонам") Тогда
		лДанныеСторон = ПолучитьДанныеПоПути(Новый Структура("Данные, Путь", ФайлПропатчить, ДопПараметры.ПутьКСторонам));
	Иначе
		лДанныеСторон = ФайлПропатчить.Документ;
	КонецЕсли;
	Если ФайлПропатчить.Свойство("Имя", ФайлИмяПропатчить) Тогда
		Если	ДопПараметры.ГрязныйИни.Свойство("мСторона") 
			И	лДанныеСторон[ДопПараметры.ПолучательРоль].Свойство("Идентификатор",	ПолучательИД) 
			И	лДанныеСторон[ДопПараметры.ОтправительРоль].Свойство("Идентификатор",	ОтправительИД) Тогда
			ФайлИмяПропатчить = ФайлИмяПропатчить + ПолучательИД + "_" + ОтправительИД;
		КонецЕсли;
		ФайлПропатчить.Имя = ФайлИмяПропатчить + "_" + Формат(ДатаВремяСоздания, "ДФ=ггггММдд") + "_" + Строка(Новый УникальныйИдентификатор());
	КонецЕсли;

	ФайлПерегенерируется = ИспользоватьГенераторДляВложения(ВложениеСБИС);
	//Патчим параметры для генератора или если есть XSLT, т.е. если документ ещё перегенерируется в процессе
	//В остальных случаях, документ грузится как есть и могут быть ошибки формата
	Если Не ФайлПерегенерируется Тогда
		ИмяXSLTВыгрузки		= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.сбисИмяXSLTДляВложения(ГлавноеОкно.Кэш, ФайлПропатчить, ВложениеСБИС);
		ФайлПерегенерируется= ГлавноеОкно.Кэш.XSLT.Свойство(ИмяXSLTВыгрузки);
	КонецЕсли;
	Если ФайлПерегенерируется Тогда
		//Дополнить отсутствующие параметры
		Если Не ФайлПропатчить.Свойство("Дата") Тогда
			ФайлПропатчить.Вставить("Дата",	Формат(ДатаВремяСоздания, "ДФ=dd.MM.yyyy"));
			ФайлПропатчить.Вставить("Время",Формат(ДатаВремяСоздания, "ДФ=HH.mm.ss"));
		КонецЕсли;
		
		//Для ИнОрг поместисть данные стороны в спец. узел, откуда они будут прокинуты в требуемые поля документа.
		//Для отправки, функция разложит данные стороны обратно, чтобы ЗаписатьДокумент правильно поставил сторону.
		ПолучательИО = ПрочитатьДополнительныйПараметрСтороны(лДанныеСторон[ДопПараметры.ПолучательРоль], "ИностраннаяОрганизация") = Истина;
		Если ПолучательИО Тогда
			//СтруктураИНО = Новый Структура("Идентиф, Название", );
			лДанныеСтороны = лДанныеСторон[ДопПараметры.ПолучательРоль].СвЮЛ;
			лДанныеСтороны.Вставить("Идентиф", лДанныеСтороны.ИНН);
			лДанныеСтороны.Удалить("ИНН");
			лДанныеСторон[ДопПараметры.ПолучательРоль].Вставить("СвИН", лДанныеСтороны);
			лДанныеСторон[ДопПараметры.ПолучательРоль].Удалить("СвЮЛ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает ключ стороны для получения доп. параметров в кэше
&НаКлиенте
Функция	 КлючСтороныДляДопПараметров(мСторона)
	Перем СвФлЮл;
	Если		мСторона.Свойство("СвЮЛ", СвФлЮл) Тогда
		Результат = СвФлЮл.ИНН + ?(СвФлЮл.Свойство("КПП"), "_" + СвФлЮл.КПП, "") + "_" + СвФлЮл.Название;
	ИначеЕсли   мСторона.Свойство("СвФЛ", СвФлЮл) Тогда 
		Результат = СвФлЮл.ИНН;
	ИначеЕсли   мСторона.Свойство("СвИн", СвФлЮл) Тогда
		Результат = СвФлЮл.ИНН + "_" + СвФлЮл.Название;
	Иначе
		Возврат мСторона.Название;
	КонецЕсли;
	Если СвФлЮл.Свойство("КодФилиала") Тогда
		Результат = Результат + "_" + СвФлЮл.КодФилиала;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура - Сохраняет посчитанные дополнительные параметры стороны
//
// Параметры:
//  ДанныеУчастник		 - Структура	 - содержит СвЮл/СвФЛ
//  ДопПараметрыСтороны	 - Соответствие	 - данные, которые надо сохранить
//
&НаКлиенте
Процедура СохранитьДополнительныеПараметрыСтороны(ДанныеУчастник, ДопПараметрыСтороны) Экспорт
	Если Не ДопПараметрыСтороны.Количество() Тогда
		Возврат;
	КонецЕсли;                                      
	
	КлючДляПараметров = КлючСтороныДляДопПараметров(ДанныеУчастник);
	ГлобальныйКэш.ТекущийСеанс.РасчитанныеЗначения.мСторона.Вставить(КлючДляПараметров, ДопПараметрыСтороны);
	
КонецПроцедуры

// Процедура - Сохраняет посчитанные дополнительные параметры стороны
//
// Параметры:
//  ДанныеУчастник		 - Структура	 - содержит СвЮл/СвФЛ
//  ДопПараметрыСтороны	 - Соответствие	 - данные, которые надо сохранить
//
&НаКлиенте
Функция ПрочитатьДополнительныйПараметрСтороны(ДанныеУчастник, КлючПараметры=Неопределено)  Экспорт
    Перем Результат;
	
	КлючДляДопПараметров = КлючСтороныДляДопПараметров(ДанныеУчастник);
	Если	Не ГлобальныйКэш.ТекущийСеанс.РасчитанныеЗначения.Свойство("мСторона", Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Результат.Получить(КлючДляДопПараметров);
	Если Результат = Неопределено Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	Если КлючПараметры = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	Возврат Результат.Получить(КлючПараметры);
	
КонецФункции

// Функция возвращает описание идентификатора СБИС по ссылке 1С
//
// Параметры:
//  ДокументСсылка	 - Ссылка на документ 1С - Ссылка, на документ 1С, по которому требуется извлечь сведения о пакете
//  ДопПараметры	 - Структура			 - 
//		ИмяРегламента 		- Строка			- имя регламента, для доп. разреза хранения статусов, если есть
//		СтруктураРаздела	- СтруктураРазделаГО- структура раздела обработки, для авто. определения регламента.
// Возвращаемое значение:
//  Структура - ИдДокумента, ИдАккаунта
//
&НаКлиенте
Функция ПрочитатьСведенияОИдСБИСПоДокументу1С(ДокументСсылка, ДопПараметры=Неопределено) Экспорт
	Перем СтруктураРазделаГО, ИмяРегламентаДокумента;
	
	МассивСтатусРегламент	= ПолучитьЗначениеПараметраСбис("МассивСтатусРегламент");
	СтатусРегламент			= "";
	
	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("ИмяРегламента",		ИмяРегламентаДокумента);
		ДопПараметры.Свойство("СтруктураРаздела",	СтруктураРазделаГО);
	КонецЕсли;
	Если		ЗначениеЗаполнено(МассивСтатусРегламент)
		И		ПолучитьЗначениеПараметраСбис("СтатусыВРазрезеРегламента") Тогда
		
		Если		ЗначениеЗаполнено(ИмяРегламентаДокумента) Тогда
			Если НЕ	МассивСтатусРегламент.Найти(ИмяРегламентаДокумента) = Неопределено Тогда
				СтатусРегламент = ИмяРегламентаДокумента;
			КонецЕсли;
		ИначеЕсли	ЗначениеЗаполнено(СтруктураРазделаГО) Тогда
			//Взять от раздела
			ИниРеестра = ИниПоПараметрам(Новый Структура("Имя", СтруктураРазделаГО.ТипДок)).мФайл;
			//первый ини
			Для Каждого Файл из ИниРеестра Цикл
				РегламентНазвание = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение("Регламент_Название", Файл.Значение);
				Если НЕ МассивСтатусРегламент.Найти(РегламентНазвание) = Неопределено Тогда 
					СтатусРегламент = РегламентНазвание;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		Иначе
			//Регламента нет
		КонецЕсли;
		
    КонецЕсли;
	
	ПараметрыПрочитатьСвойство = Новый Структура("ДокументСсылка, Регламент", ДокументСсылка, СтатусРегламент);
	
	фрм = ГлавноеОкно.СбисНайтиФормуФункции("СбисПрочитатьСведенияОПакете", ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами"));
	Возврат фрм.СбисПрочитатьСведенияОПакете(ПараметрыПрочитатьСвойство, ГлавноеОкно.Кэш);

КонецФункции

