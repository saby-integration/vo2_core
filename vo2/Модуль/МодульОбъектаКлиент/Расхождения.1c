
// Функция - Получить расхождения по выбранным документам
//
// Параметры:
//  ПараметрыСравненияВходящие	 - 	Структура
//		МодульПодготовкиРасхождений - Форма	 			- форма раздела для подготовки данных документов к сравнению
//		СписокСопоставлений			- СписокЗначений	- Список структур документов к сравнению
//			КлючДетализации		- Строка		- ключ детализации для поиска итога в результате действия
//			Документ1С			- Ссылка		- сравниваемый документ 1С
//			ДокументСБИСНазвание- Строка		- название вложения СБИС
//			ИдВложения			- Строка, УИД	- Ид вложения СБИС
//			СоставПакета        - Структура		- документ СБИС
//  ДопПараметры				 - Структура 
// 
// Возвращаемое значение:
//  РезультатДействия - Структура, объект РезультатДействия сравнения
//
&НаКлиенте
Функция СравнитьВыбранныеДокументы(ПараметрыСравненияВходящие, ДопПараметры) Экспорт
	
	РезультатДействия			= НовыйРезультатДействия(Новый Структура("Тип", "ПроверкаРасхождений"), Новый Структура);
	МодульПодготовкиРасхождений	= ПараметрыСравненияВходящие.МодульПодготовкиРасхождений;
	СбисСчётчикСтрок			= 0;
	СбисВсегоСтрок				= ПараметрыСравненияВходящие.СписокСопоставлений.Количество();
	ПараметрыПроверкиРасхождений= Новый Структура("РезультатДействия", РезультатДействия);
	Если ДопПараметры.Свойство("ОбработчикДельты") Тогда
		ПараметрыПроверкиРасхождений.Вставить("ОбработчикДельты", ДопПараметры.ОбработчикДельты);
	КонецЕсли;
	Для Каждого ЭлементСпискаСопоставления Из ПараметрыСравненияВходящие.СписокСопоставлений Цикл
		СтрокаСопоставления = ЭлементСпискаСопоставления.Значение;
		
		ГлавноеОкно.СбисПоказатьСостояние("Формирование расхождения", , Мин(100, Окр(СбисСчётчикСтрок * 100 / СбисВсегоСтрок)));
		Попытка
			СоответствиеДокументов = МодульПодготовкиРасхождений.ПодготовитьСтруктуруДокументаДляРасхождений(СтрокаСопоставления, ГлавноеОкно.Кэш);
			РезультатДействия_ОбновитьВремя(РезультатДействия, "Подготовка");
		Исключение
			СбисИсключение = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СравнитьВыбранныеДокументы");
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "НеВыполнено", СтрокаСопоставления.КлючДетализации);
			РезультатДействия_ОбработатьРезультат(РезультатДействия, СбисИсключение, ПараметрыРезультата);
			Продолжить;
		КонецПопытки;	
		Попытка
			СтрокаСоответствия = СоответствиеДокументов.Получить(СтрокаСопоставления.КлючДетализации);
			Если СтрокаСоответствия = Неопределено Тогда
				ВызватьСбисИсключение(735, "Не удалось собрать данные для сравнения", "СоответствиеДокументов.Получить",,,,Новый Структура("Ключ", СтрокаСопоставления.КлючДетализации));
			КонецЕсли;
			РезультатСравнения	= ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия(Новый Структура("Ключ, Значение", СтрокаСопоставления.КлючДетализации, СтрокаСоответствия), ПараметрыПроверкиРасхождений);
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Выполнено", СтрокаСопоставления.КлючДетализации);
			РезультатДействия_ОбработатьРезультат(РезультатДействия, РезультатСравнения.Значение, ПараметрыРезультата);
		Исключение
			СбисИсключение = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СравнитьВыбранныеДокументы");
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Ошибка", СтрокаСопоставления.КлючДетализации);
			РезультатДействия_ОбработатьРезультат(РезультатДействия, СбисИсключение, ПараметрыРезультата);
		КонецПопытки;	
	КонецЦикла;
	ГлавноеОкно.СбисСпрятатьСостояние();
	Возврат	РезультатДействия;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуРасхожденийПоСоответствию (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт
	Для Каждого СтрокаСоответствия Из ОписаниеПроверкиРасхождения.Соответствие Цикл
		Попытка
			РезультатСравнения = ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия(СтрокаСоответствия, ДопПараметры);
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Выполнено", СтрокаСоответствия.Ключ);
			РезультатДействия_ОбработатьРезультат(ДопПараметры.РезультатДействия, РезультатСравнения.Значение, ПараметрыРезультата);
		Исключение
			ПараметрыРезультата = Новый Структура("Тип, КлючГруппировки", "Ошибка", СтрокаСоответствия.Ключ);
			РезультатДействия_ОбработатьРезультат(ДопПараметры.РезультатДействия, ИнформацияОбОшибке(), ПараметрыРезультата);
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры	

//весь результат помещается в переданный объект ДопПараметры.РезультатДействия
&НаКлиенте
Функция ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия (ОписаниеПроверкиРасхождения, ДопПараметры) Экспорт

	Перем ОбработчикДельтыОбъектов, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах, Ини;
	РезультатДействия	= ДопПараметры.РезультатДействия;
	
	Если		Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДаннымСбис",	СтруктураДокументаПоДаннымСбис) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры документа по данным СБИС");
	ИначеЕсли	Не ОписаниеПроверкиРасхождения.Значение.Свойство("СтруктураДокументаПоДанным1С",	СтруктураДокументаПоДанным1С) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры документа по данным 1С");
	ИначеЕсли	Не ОписаниеПроверкиРасхождения.Значение.Свойство("ИнформацияОДокументах",			ИнформацияОДокументах) Тогда
		ВызватьСбисИсключение(,"МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание структуры настройки расхождения");
	КонецЕсли;
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьКартуСравнения", "Файл_" + ИнформацияОДокументах.Формат + "_" + СтрЗаменить(ИнформацияОДокументах.Версия, ".", "_"), "Файл_Шаблон");
	Если фрм = Ложь Тогда
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.ВыполнитьПроверкуРасхожденийПоСтрокеСоответствия",,,"Отсутствует описание карты расхождения");
	КонецЕсли;
	Карта				= фрм.ПолучитьКартуСравнения();
	НовДопПараметры		= Новый Структура("Карта", Карта);
	РасхожденияОбъектов	= ПолучитьРасхождениеОбъектов(СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, НовДопПараметры);
	
	Если Не ДопПараметры.Свойство("ОбработчикДельты", ОбработчикДельтыОбъектов) Тогда
		Возврат РасхожденияОбъектов;
	КонецЕсли;
	
	ПараметрыДельты = Новый Структура("ОписаниеПроверки, Дельта, Результат", ОписаниеПроверкиРасхождения, РасхожденияОбъектов);
	ВыполнитьСбисОписаниеОповещения(ПараметрыДельты, ОбработчикДельтыОбъектов);
	Возврат ПараметрыДельты.Результат;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбисДляРасхождений(СтрокаСпискаДокументов) Экспорт
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоПакетуСБИС",ГлавноеОкно.Кэш.ФормаРаботыСоСтатусами,"");
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ИдентификаторПакета = Строка.Значение.Идентификатор;
		//+tda//Если интеграция через каталог, передаём не идентификатор, а сам пакет
		Если ГлобальныйКэш.Парам.СпособОбмена = 1 Тогда
			ИдентификаторПакета = Строка.Значение;
		КонецЕсли;
		//-tda//
		ОшибкаЧтения = Ложь;
		ПолныйСоставПакета = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПрочитатьДокумент(ГлавноеОкно.Кэш, ИдентификаторПакета,,ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			фрм.НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, ГлавноеОкно.Кэш.Ини, ГлавноеОкно.КаталогНастроек, МассивСлужебных);
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		ИначеЕсли	ТипЗнч(СтрокаСпискаДокументов) = Тип("Структура") 
			И	СтрокаСпискаДокументов.Свойство("ВернутьПустойСоставПакета")
			И	СтрокаСпискаДокументов.ВернутьПустойСоставПакета Тогда
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			ВызватьСбисИсключение(, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаСбисДляРасхождений", 726, ,"В пакете " + ПолныйСоставПакета.Название + " отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1СДляРасхождений(СтрокаСпискаДокументов) Экспорт
	МассивВложений = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, ГлавноеОкно.Кэш);
	Возврат МассивВложений;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДокумента1СПоПакетуСбис(ОписаниеПроверки, ДопПараметры) Экспорт

	Кэш				= ГлавноеОкно.Кэш;
	Вложение		= ОписаниеПроверки.Вложение;
	СоставПакета	= ОписаниеПроверки.СоставПакета;
	ДанныеДокумента = Новый Структура();
	СоответствиеДокументДанные = Новый Соответствие;
	
	Если ОписаниеПроверки.Свойство("Документ1С") Тогда
		ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1С, СоответствиеДокументДанные)
	Иначе
		//Если документа нет, то проверить на вложении
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1ССсылка, СоответствиеДокументДанные)
		КонецЦикла;
	КонецЕсли;
	Если Не СоответствиеДокументДанные.Количество() Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден файл для формирования расхождения " + Вложение.Название, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис");
	КонецЕсли;
	НовыйСоставПакета = Новый СписокЗначений;
	НовыйСоставПакета.Добавить(ОписаниеПроверки.Документ1С);
	
	Контекст = Новый Структура("МассивПакетов", Новый Массив);
	//Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	Кэш.ОбщиеФункции.ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, НовыйСоставПакета, Кэш.Парам);
	Если Не Кэш.ОбщиеФункции.ОбработатьДанныеДокументов1С(Кэш, Контекст, Вложение.Документы1С, СоответствиеДокументДанные) Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Документ " + Вложение.Название + " не обработан", "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис");
	Иначе
		Возврат Контекст.МассивПакетов[0].Вложение[0].СтруктураДокумента.Файл.Документ;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, Документ1ССсылка, СоответствиеДокументДанные)
	
	ВходящийКонтекстРасчета = Новый Структура;
	мФайлДляРасчета = Найти_мФайлПоВложению(Вложение, Документ1ССсылка);
	
	ЗначениеИниДокумента = Новый Структура;
	ЗначениеИниДокумента.Вставить("мФайл",											Новый Структура(мФайлДляРасчета.Ключ, мФайлДляРасчета.Значение));
	//ЗначениеИниДокумента.Вставить("Формат2019",										Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ФорматУКД2020",									Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ВходящийКонтекст",								Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
	//ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	
	ИниДокумента = СтрПолучитьСтроку(СтрЗаменить(ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПолучитьИмяИСПоСсылке(Документ1ССсылка), ".", Символы.ПС), 2);
	СоответствиеДокументДанные.Вставить(Документ1ССсылка, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента)); 	

КонецПроцедуры
	
&НаКлиенте
Функция ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС(СтрокаСпискаДокументов) Экспорт
	Перем СтруктураИниФайла, СтруктураФайла, мДокументы, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С;

	Если СтрокаСпискаДокументов.Документ1С = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ 1С для сравнения");
	КонецЕсли;
	Если СтрокаСпискаДокументов.ИдВложения = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ СБИС для сравнения");
	КонецЕсли;
	СбисМодулиСеансов = ГлобальныйКэш.ТекущийСеанс.Модули;

	МассивРазобранныхПакетов	= Новый Массив();
	СоответствиеРезультат		= Новый Соответствие();
	МассивПакетов				= ПодготовитьСтруктуруДокументаСбисДляРасхождений(СтрокаСпискаДокументов);
	Для Каждого Пакет Из МассивПакетов Цикл
		ПараметрыПодготовитьСтруктуру = Новый Структура("СоставПакета, Документ1С, Вложение", Пакет, СтрокаСпискаДокументов.Документ1С);
		Для Каждого Вложение Из Пакет.Вложение Цикл
			Если	Не Вложение.Свойство("Идентификатор")
				Или	Не Вложение.Идентификатор = СтрокаСпискаДокументов.ИдВложения Тогда
				Продолжить;
			КонецЕсли;
			ОшибкаРазбораВложения = Ложь;
			//разобрать и дозаполнить
			РазобранныеДанныеВложения = СбисМодулиСеансов.ФункцииДокументов.ПолучитьРазобранныеДанныеВложенияСбис(ГлавноеОкно.Кэш, Пакет, Вложение, Новый Структура, ОшибкаРазбораВложения);
			Если ОшибкаРазбораВложения Тогда
				ВызватьСбисИсключение(РазобранныеДанныеВложения, "Раздел_Отправленные_Отправленные.ПодготовитьСтруктуруДокументаДляРасхождений");
			КонецЕсли;
			Для Каждого КлючИЗначениеДанных Из РазобранныеДанныеВложения Цикл
				Вложение.Вставить(КлючИЗначениеДанных.Ключ, КлючИЗначениеДанных.Значение);
			КонецЦикла;
			Если Не	Вложение.Свойство("ИмяИни") Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"Отсутствует файл настроек для обработки документа СБИС.",
										Новый Структура("ИдВложения,Название", СтрокаСпискаДокументов.ИдВложения, СтрокаСпискаДокументов.ДокументСБИСНазвание));
			ИначеЕсли	Не Вложение.Свойство("СтруктураИниФайла",	СтруктураИниФайла)
					Или	Не Вложение.Свойство("СтруктураФайла",	СтруктураФайла)
					Или	Не ЗначениеЗаполнено(СтруктураИниФайла) Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"Проверка документа не поддерживается.");
			КонецЕсли;
			ИниВложение = ИниПоПараметрам(Новый Структура("Имя", Вложение.ИмяИни));
			Если Не ИниВложение.Свойство("мДокумент", мДокументы) Тогда
				ВызватьСбисИсключение(,	"МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",
										735,,"В файле настроек " + Вложение.ИмяИни + " отсутствует описание мДокумент.");
			КонецЕсли;
			
			ПараметрыПодготовитьСтруктуру.Вложение = Вложение;
			СтруктураДокументаПоДаннымСбис	= Вложение.СтруктураФайла.Файл.Документ;
			СтруктураДокументаПоДанным1С	= ПолучитьСтруктуруДокумента1СПоПакетуСбис(ПараметрыПодготовитьСтруктуру, Новый Структура);
				
			ИнформацияОДокументах	= Новый Структура("Формат, Версия", Вложение.ФорматДляЗагрузки, Вложение.ВерсияФорматаДляЗагрузки);
			РезультатДетализации	= Новый Структура("СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах", СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах);
			Если Вложение.Свойство("НастройкаПроверкаРасхождения") Тогда
				РезультатДетализации.Вставить("ИмяИниДельты", Вложение.НастройкаПроверкаРасхождения);
			КонецЕсли;
			
			СоответствиеРезультат.Вставить(СтрокаСпискаДокументов.КлючДетализации, РезультатДетализации);	
			Прервать;
		КонецЦикла;
	КонецЦикла;
	Возврат СоответствиеРезультат;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестра1C(СтрокаСпискаДокументов) Экспорт
	Перем СтруктураИниФайла, СтруктураФайла, мДокументы, СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С;

	Кэш = ГлавноеОкно.Кэш;
	Если СтрокаСпискаДокументов.Документ1С = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ 1С для сравнения");
	КонецЕсли;
	Если СтрокаСпискаДокументов.ИдВложения = Неопределено Тогда
		ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Отсутствует сопоставленный документ СБИС для сравнения");
	КонецЕсли;

	СбисМодулиСеансов	= ГлобальныйКэш.ТекущийСеанс.Модули;
	Соответствие		= Новый Соответствие();
	КэшПакетов			= Новый Структура("Успешно, Ошибки", Новый Соответствие(), Новый Соответствие());
	
	МассивПакетов = ГлобальныйКэш.Модули.ФункцииДокументов.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, ГлавноеОкно.Кэш);
	
	Для каждого Пакет Из МассивПакетов Цикл
		Для Каждого ВложениеПакета Из Пакет.Вложение Цикл
			СтруктураДокументаПоДанным1С = ВложениеПакета.СтруктураФайла.Файл.Документ;
			
			ИдДок = СбисМодулиСеансов.ФункцииДокументов.ИдентификаторСБИСПоДокументу(Кэш, ВложениеПакета.Документы1С[0].Значение);
			Если Не ЗначениеЗаполнено(ИдДок) Тогда
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить документ СБИС");
			КонецЕсли;
			
			Если Не КэшПакетов.Ошибки.Получить(ИдДок) = Неопределено Тогда
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить вложение СБИС");
			КонецЕсли;
			
			ПолныйСоставПакетаСбис = КэшПакетов.Успешно.Получить(ИдДок);
			Если ПолныйСоставПакетаСбис = Неопределено Тогда 
				Попытка
					ПараметрыДокумента = Кэш.Интеграция.СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ИдДок, Новый Структура("Кэш", Кэш));
					ДопПарам = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
					СоставПакетаСбис = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ПараметрыДокумента.ИдДокумента, ДопПарам);
					//Для Каждого ВложениеСбис Из СоставПакетаСбис.Вложение Цикл
					//	Если ВложениеСбис.Идентификатор = СтрокаСпискаДокументов.ИдВложения Тогда
					//		Прервать;
					//	КонецЕсли;
					//	ВложениеСбис = 
					//КонецЦикла;
					
					
										
					ПолныйСоставПакетаСбис = СбисМодулиСеансов.ФункцииДокументов.РазобратьСтруктуруДокументаСбис(СоставПакетаСбис, Кэш); //только по вложению сбис	
					
					ВложениеСбис = НайтиВложениеСбисПоВложению1С(Новый Структура("СоставПакетаСбис,Вложение1С",СоставПакетаСбис, ВложениеПакета), Новый Структура("Кэш", Кэш));
					СтруктураДокументаПоДаннымСбис = ВложениеСбис.СтруктураФайла.Файл.Документ; 
					КэшПакетов.Успешно.Вставить(ИдДок, ПолныйСоставПакетаСбис);
				Исключение
					ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПодготовитьСтруктуруДокументаДляРасхожденийДляРеестраСБИС",,,"Не удалось получить вложение СБИС");
				КонецПопытки;
			Иначе
				Попытка
					ВложениеСбис = НайтиВложениеСбисПоВложению1С(Новый Структура("СоставПакетаСбис,Вложение1С",СоставПакетаСбис, ВложениеПакета), Новый Структура("Кэш", Кэш));
                	СтруктураДокументаПоДаннымСбис = ВложениеСбис.СтруктураФайла.Файл.Документ;  
				Исключение
					СтруктураДокументаПоДаннымСбис = Неопределено;
				КонецПопытки;
			КонецЕсли;
			
			Если Не СтруктураДокументаПоДанным1С = Неопределено Тогда
				
				ПараметрыПоискаИниРасхождения = Новый Структура("ТипДокумента, ВерсияДокумента, НастройкаПроверкаРасхождения", ВложениеСБИС.ФорматДляЗагрузки, ВложениеСБИС.ВерсияФорматаДляЗагрузки);
				ВложениеСБИС.Свойство("НастройкаПроверкаРасхождения", ПараметрыПоискаИниРасхождения.НастройкаПроверкаРасхождения);
				ИниПоискаРасхождения = НайтиИниПроверкиРасхождения(ПараметрыПоискаИниРасхождения);
				
				ИнформацияОДокументах = Новый Структура("ИниСравненияДокументов, Формат, Версия", Новый Структура("мСравнениеДокументов", ИниПоискаРасхождения), ВложениеСБИС.ФорматДляЗагрузки, ВложениеСБИС.ВерсияФорматаДляЗагрузки);
				Соответствие.Вставить(ВложениеСБИС.Название, Новый Структура("СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах", СтруктураДокументаПоДаннымСбис, СтруктураДокументаПоДанным1С, ИнформацияОДокументах));
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Возврат Соответствие;	
КонецФункции

&НаКлиенте
Функция Найти_мФайлПоВложению(Вложение, Документ1С)
	Перем ТекстОшибки, ВерсияФорматаВложения;
	
	Отказ = Ложь;
	МодульФункцийДокументов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ТипДокумента1С			= СтрПолучитьСтроку(СтрЗаменить(МодульФункцийДокументов.ПолучитьИмяИСПоСсылке(Документ1С), ".", Символы.ПС), 2);
	Если Вложение.Свойство("ВерсияФорматаДляЗагрузки", ВерсияФорматаВложения) Тогда
		ВерсияФорматаВложения = СтрЗаменить(ВерсияФорматаВложения, "_", ".");
	Иначе
		ВерсияФорматаВложения = Вложение.ВерсияФормата;
	КонецЕсли;
	Попытка
		НаборПодходящихИни = ИниПоПараметрам(Новый Структура("Тип1С", ТипДокумента1С));
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.Найти_мФайлПоВложению");
	КонецПопытки;
	Для Каждого КлючИЗначениеИни Из НаборПодходящихИни Цикл
		Если Не ТипЗнч(КлючИЗначениеИни.Значение) = Тип("Структура") 
				Или Не КлючИЗначениеИни.Значение.Свойство("мФайл") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого КлючИЗначение Из КлючИЗначениеИни.Значение.мФайл Цикл 
			КонтекстИни = Новый Структура("Ини, Документ", МодульФункцийДокументов.СбисСкопироватьОбъектНаКлиенте(КлючИЗначение.Значение), Документ1С);
			ВходящийКонтекстРасчета = Новый Структура;
			ВходящийКонтекстРасчета.Вставить("ИспользоватьНовыйФорматАктаСверки", ГлобальныйКэш.Парам.ИспользоватьНовыйФорматАктаСверки);
			
			ЗначениеИниДокумента = КонтекстИни.Ини;
			ЗначениеИниДокумента.Вставить("Формат2016",										Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("Формат2019",										Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ФорматУКД2020",									Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
			ЗначениеИниДокумента.Вставить("ВходящийКонтекст",								Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
			ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
			
			//Говнокод, но расчёт должен быть на сервере.
			ТипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Файл_Формат",			КонтекстИни);
			ВерсияФорматаИзИни		= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Файл_ВерсияФормата",	КонтекстИни);

			//ТипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_Тип",				КонтекстИни);
			//ПодтипИзИни				= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_ПодТип",			КонтекстИни);
			//ВерсияФорматаИзИни		= МодульФункцийДокументов.РассчитатьЗначениеНаСервере("Вложение_ВерсияФормата",		КонтекстИни);
			
			Если	Вложение.Тип			= ТипИзИни
				//И	Вложение.Подтип			= ПодтипИзИни
				И	ВерсияФорматаВложения	= ВерсияФорматаИзИни Тогда 
				Результат = Новый Структура("Ключ, Значение", КлючИЗначение.Ключ, ЗначениеИниДокумента);   
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		ТекстОшибки = "В файлах настроек для документов {ТипДок} отсутствует описание формирования {Тип}, версии {Версия}";
	КонецЦикла;
	Если ТекстОшибки = Неопределено Тогда
		ТекстОшибки = "Не удалось найти файл настроек для {ТипДок}";
	Иначе
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{Тип}",		Вложение.Тип);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{Версия}",	ВерсияФорматаВложения);
	КонецЕсли;
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "{ТипДок}",	Строка(ТипЗнч(Документ1С)));
	
	ВызватьСбисИсключение(726, "МодульОбъектаКлиент.Найти_мФайлПоВложению",,,ТекстОшибки);
	
КонецФункции

&НаКлиенте
Функция НайтиВложениеСбисПоВложению1С(ОписаниеПакета, ДопПараметры) Экспорт
	СоставПакетаСбис = ОписаниеПакета.СоставПакетаСбис;
	Вложение1С = ОписаниеПакета.Вложение1С;
	Для Каждого ВложениеСбис Из СоставПакетаСбис.Вложение Цикл
		Если (Не ВложениеСбис.Свойство("Служебный") или ВложениеСбис.Служебный = "Нет")
			И Вложение1С.Тип = ВложениеСбис.Тип
			И Вложение1С.ПодТип = ВложениеСбис.ПодТип
			И Вложение1С.ВерсияФормата = ВложениеСбис.ВерсияФормата
			И Строка(Вложение1С.ПодВерсияФормата) = ВложениеСбис.ПодВерсияФормата Тогда
			Возврат ВложениеСбис;
		КонецЕсли;	
	КонецЦикла;		
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиИниПроверкиРасхождения(ИнформацияОДокументе, ДопПараметры=Неопределено) Экспорт
	Перем НастройкаПроверкаРасхождения, ТипДокумента, ВерсияДокумента, Результат;
	
	Кэш = ГлавноеОкно.Кэш;
	Если Не (ЗначениеЗаполнено(ИнформацияОДокументе)
		И ТипЗнч(ИнформацияОДокументе) = Тип("Структура")) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнформацияОДокументе.Свойство("НастройкаПроверкаРасхождения", НастройкаПроверкаРасхождения)
		И ЗначениеЗаполнено(НастройкаПроверкаРасхождения) Тогда
		Возврат ИниПоПараметрам(Новый Структура("Имя", НастройкаПроверкаРасхождения));
	КонецЕсли;
	
	Если ИнформацияОДокументе.Свойство("ТипДокумента", ТипДокумента)
		И ИнформацияОДокументе.Свойство("ВерсияДокумента", ВерсияДокумента)
		И ЗначениеЗаполнено(ТипДокумента)
		И ЗначениеЗаполнено(ВерсияДокумента) Тогда
		
		ТипИни			= "ПроверкаРасхождения";
		ВерсияДокумента	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисЗаменитьНедопустимыеСимволы(ВерсияДокумента);
		ИмяИни = ТипИни + "_"
			 +	ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисЗаменитьНедопустимыеСимволы(ТипДокумента) + "_"
			 +	ВерсияДокумента;
			
		Попытка
			Ини = ИниПоПараметрам(Новый Структура("Имя, Тип", ИмяИни, "ПроверкаРасхождения"));
		Исключение
			ИмяИни = ТипИни + "_Шаблон_" + ВерсияДокумента;
			Ини = ИниПоПараметрам(Новый Структура("Имя, Тип", ИмяИни, "ПроверкаРасхождения"));
		КонецПопытки;
			
		Если Не Ини = Неопределено Тогда
			Результат = Новый Структура("мСравнениеДокументов");
			ЗаполнитьЗначенияСвойств(Результат, Ини);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Расхождения_СравнениеОбъектов
#КонецОбласти

