
// Класс - Кэш
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		АдресСервера		- Необязательный, Строка, адрес сервера настройки. Если не указано, то берётся первый доступный
//		МодульОбъектаКлиент	- Необязательный, Форма/МодульОбъекта. Если не указан, берётся текущий.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - пустой класс Кэш
//
&НаКлиенте
Функция НовыйЛокальныйКэш_Пустой()
	
	//TODO 24.4100 убрать из локального кэша объекты ТекущийСеанс, СБИС и ПараметрыСистемы
	НовыйКэш = Новый Структура("_Класс, ТихийРежим, СБИС, ТекущийСеанс, Парам, ТихийРежим, РаботаСJSON, ГлавноеОкно, ПараметрыСистемы", "ЛокальныйКэш");
	НовыйКэш.ТихийРежим = Ложь;
	
	Возврат НовыйКэш;
	
КонецФункции	
	
// Класс - Кэш
//
// Параметры:
//  ПараметрыКонструктора	 - Структура	 - описанине для создания отложенной операции
//		АдресСервера		- Необязательный, Строка, адрес сервера настройки. Если не указано, то берётся первый доступный
//		МодульОбъектаКлиент	- Необязательный, Форма/МодульОбъекта. Если не указан, берётся текущий.
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - пустой класс Кэш
//
&НаКлиенте
Функция НовыйЛокальныйКэш(ПараметрыКонструктора = Неопределено) Экспорт
	Перем	КлассКэшСБИС, КлассТекущийСеанс, ГлавноеОкноУстановить, МодульОбъектаУстановить, 
			ПараметрыСистемыУстановить, ПараметрыПользователяУстановить;
	
	НовыйКэш = НовыйЛокальныйКэш_Пустой();
	
	ГлавноеОкноУстановить	= ГлавноеОкно;
	МодульОбъектаУстановить	= МодульОбъектаКлиент();
	
	Если ПараметрыКонструктора = Неопределено Тогда 
		
		КлассКэшСБИС			= НовыйКэшСБИС_Пустой();
		КлассТекущийСеанс		= НовыйТекущийСеанс_Пустой();
		
	ИначеЕсли	ЭтоТипСбис(ПараметрыКонструктора, "ГлобальныйКэш") Тогда
			
		КлассКэшСБИС 					= ПараметрыКонструктора.СБИС;
		КлассТекущийСеанс				= ПараметрыКонструктора.ТекущийСеанс;
		ПараметрыПользователяУстановить	= Новый Структура;
		ПараметрыСистемыУстановить		= ПараметрыКонструктора.ПараметрыСистемы;
				
		Для Каждого КлючИЗначениеПараметр Из ПараметрыКонструктора.Парам Цикл
			ПараметрыПользователяУстановить.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
		КонецЦикла;
			
	ИначеЕсли	ЭтоТипСбис(ПараметрыКонструктора, "ЛокальныйКэш") Тогда
		
		ЛокальныйКэш_ПривестиСовместимость(НовыйКэш);
		
		ЛокальныйКэш_Вставить(НовыйКэш, "ФормаНастроекОбщее",	ПараметрыКонструктора.ФормаНастроекОбщее); 
		ЛокальныйКэш_Вставить(НовыйКэш, "ФормаНастроек",		ПараметрыКонструктора.ФормаНастроек); 
		ЛокальныйКэш_Вставить(НовыйКэш, "ОбщиеФункции",			ПараметрыКонструктора.ОбщиеФункции);
		ЛокальныйКэш_Вставить(НовыйКэш, "Интеграция",			ПараметрыКонструктора.Интеграция);
		ЛокальныйКэш_Вставить(НовыйКэш, "РаботаСJSON",			ПараметрыКонструктора.РаботаСJSON);
		
		КлассКэшСБИС 					= ГлобальныйКэш.СБИС;
		КлассТекущийСеанс				= ГлобальныйКэш.ТекущийСеанс;
		ПараметрыПользователяУстановить	= Новый Структура;
		ПараметрыСистемыУстановить		= ГлобальныйКэш.ПараметрыСистемы;
		
		Для Каждого КлючИЗначениеПараметр Из ГлобальныйКэш.Парам Цикл
			ПараметрыПользователяУстановить.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
		КонецЦикла;
		
	Иначе
		
		Если		ПараметрыКонструктора.Свойство("ГлавноеОкно") Тогда
			
			ГлавноеОкноУстановить = ПараметрыКонструктора.ГлавноеОкно;
			
		ИначеЕсли	ПараметрыКонструктора.Свойство("Владелец") Тогда
			
			ГлавноеОкноУстановить = ПараметрыКонструктора.Владелец;
			
		КонецЕсли;
		
		Если	ПараметрыКонструктора.Свойство("МодульОбъектаКлиент") Тогда
			
			МодульОбъектаУстановить = ПараметрыКонструктора.МодульОбъектаКлиент;
			
		КонецЕсли;
		
		// СБИС
		Если Не ПараметрыКонструктора.Свойство("КэшСБИС", КлассКэшСБИС) Тогда
			
			КлассКэшСБИС = НовыйКэшСБИС();
			
		КонецЕсли;
		
		// ТекущийСеанс
		Если Не ПараметрыКонструктора.Свойство("ТекущийСеанс", КлассТекущийСеанс) Тогда
			
			КлассТекущийСеанс = НовыйТекущийСеанс();
			
		КонецЕсли;
		
	
		// ПараметрыСистемы
		Если ПараметрыКонструктора.Свойство("ПараметрыСистемы") Тогда
			
			ПараметрыСистемыУстановить = ПараметрыКонструктора.ПараметрыСистемы;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ЛокальныйКэш_Вставить(НовыйКэш, "СБИС",					КлассКэшСБИС);
	ЛокальныйКэш_Вставить(НовыйКэш, "ТекущийСеанс",			КлассТекущийСеанс);
	ЛокальныйКэш_Вставить(НовыйКэш, "Парам",				ПараметрыПользователяУстановить);
	ЛокальныйКэш_Вставить(НовыйКэш, "ПараметрыСистемы",		ПараметрыСистемыУстановить);
	ЛокальныйКэш_Вставить(НовыйКэш, "МодульОбъектаКлиент",	МодульОбъектаУстановить);
	ЛокальныйКэш_Вставить(НовыйКэш, "Владелец",				ГлавноеОкноУстановить);
	
	Возврат НовыйКэш;
	
КонецФункции

&НаКлиенте
Процедура ЛокальныйКэш_Вставить(ЛокальныйКэш, КлючВставить, ЗначениеВставить) Экспорт
	
	Если		КлючВставить = "Владелец" Тогда
		
		ЛокальныйКэш.ГлавноеОкно = ЗначениеВставить;
		
	ИначеЕсли	КлючВставить = "АдресСервера" Тогда
		
		КэшСБИС_Вставить(ЛокальныйКэш.СБИС, КлючВставить, ЗначениеВставить);
		
	ИначеЕсли	КлючВставить = "МодульОбъектаКлиент" Тогда
	
		КэшСБИС_Вставить(ЛокальныйКэш.СБИС, КлючВставить, ЗначениеВставить);
		
	ИначеЕсли	КлючВставить = "ПараметрыПользователя" Тогда
	
		Для Каждого КлючИЗначениеПараметр Из ЗначениеВставить Цикл
			
			ЛокальныйКэш.Парам.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
			
		КонецЦикла;
		
	Иначе
	
		ЛокальныйКэш[КлючВставить] = ЗначениеВставить;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - дополняет структуру кэша старыми костылями для совместимости
//
// Параметры:
//  ЛокальныйКэш - Структура, ЛокальныйКэш	 - экземпляр класса ЛокальныйКэш обработки
//
&НаКлиенте
Процедура ЛокальныйКэш_ПривестиСовместимость(ЛокальныйКэш) Экспорт
	
	ЛокальныйКэш.Вставить("Заплатки",				Ложь);
	ЛокальныйКэш.Вставить("СовместимостьМетодов",	ГлобальныйКэш.СовместимостьМетодов);
	ЛокальныйКэш.Вставить("Текущий",				НовыйСтруктураРазделаГО());
	ЛокальныйКэш.Вставить("ТаблДок",				"");
	
	//Модули в корне
	ЛокальныйКэш.Вставить("ВИ",					Неопределено);	// Спилить 24.4100
	ЛокальныйКэш.Вставить("Плагин",				Неопределено);	// Спилить 24.4100
	ЛокальныйКэш.Вставить("ФормаНастроекОбщее",	ПолучитьФормуОбработки("ФайлыНастроекОбщее"));
	ЛокальныйКэш.Вставить("ОбщиеФункции",		ПолучитьФормуОбработки("РаботаСДокументами1С"));
	ЛокальныйКэш.Вставить("РаботаСJSON",		ПолучитьФормуОбработки("РаботаСJSON"));
	ЛокальныйКэш.Вставить("ФормаНастроек"); 
	ЛокальныйКэш.Вставить("Интеграция");
	
	ЛокальныйКэш.Вставить("МенюРазделов",		Новый Структура());
	ЛокальныйКэш.Вставить("Разделы",			Новый Структура());
	
	ЛокальныйКэш.Разделы.Вставить("р1",				"Полученные");
	ЛокальныйКэш.Разделы.Вставить("р2",				"Отправленные");
	ЛокальныйКэш.Разделы.Вставить("р3",				"Продажа");
	ЛокальныйКэш.Разделы.Вставить("р4",				"Покупка");
	ЛокальныйКэш.Разделы.Вставить("р5",				"Настройки"); // Раздел больше не существует
	ЛокальныйКэш.Разделы.Вставить("р6",				"Справочники");
	ЛокальныйКэш.Разделы.Вставить("р7",				"Учет");
	ЛокальныйКэш.Разделы.Вставить("р8",				"Задачи");
	ЛокальныйКэш.Разделы.Вставить("р9",				"Отчетность");
	ЛокальныйКэш.Разделы.Вставить("Продажа",		Новый Структура());
	ЛокальныйКэш.Разделы.Вставить("Покупка",		Новый Структура());
	ЛокальныйКэш.Разделы.Вставить("Отчетность",		Новый Структура());
	ЛокальныйКэш.Разделы.Вставить("Справочники",	Новый Структура());
	
	Если Не ГлобальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ЛокальныйКэш.Вставить("ПараметрыФильтра", Новый Структура);
	КонецЕсли;
	
	ЛокальныйКэш.Вставить("ИспользоватьОбработчикиСобытий",		Ложь);
	ЛокальныйКэш.Вставить("ТипыПолейФильтра",					Новый Структура); // перенесено в ТекущийСеанс.ОписаниеКонфигурации.ТипыПолейФильтра
	ЛокальныйКэш.Вставить("ини",								Новый Структура);
	ЛокальныйКэш.Вставить("Реестры",							Новый Структура);
	ЛокальныйКэш.Вставить("КэшЗначенийИни",						Новый Структура);
	ЛокальныйКэш.Вставить("КэшСертификатов",					Новый Структура);
	
	ЛокальныйКэш.КэшЗначенийИни.Вставить("ТекущийПакет",	Новый Структура());
	ЛокальныйКэш.КэшЗначенийИни.Вставить("Организации",		Новый Структура());
	ЛокальныйКэш.КэшЗначенийИни.Вставить("ИниЗагрузки",		Новый Структура);
	
	// Пользовательские фильтры
	ЛокальныйКэш.Вставить("ПараметрыФильтра",		Новый Структура());
	ЛокальныйКэш.Вставить("ФормаРаботыСоСтатусами",	"Статусы_Регистры");
	
	// Дополнительные вложения, прикладываются к каждому отправляемому пакету
	ЛокальныйКэш.Вставить("ДопВложение",	Новый Массив);
	ЛокальныйКэш.Вставить("КэшНастроек",	Новый Структура);
	
	//Спилить после 24.4100 Старые параметры асинхронной отправки
	ЛокальныйКэш.Вставить("СписокНоменклатуры",				Новый СписокЗначений);
	ЛокальныйКэш.Вставить("КоличествоВОтправке",			100);
	ЛокальныйКэш.Вставить("КоличествоПотоковОтправки",		10);
	ЛокальныйКэш.Вставить("ПодготовленныеКОтправке",		Новый Массив);
	ЛокальныйКэш.Вставить("НеобработанныеОтветыОтправки",	Новый Массив);
	
КонецПроцедуры

//Устанавливает кэш обмена
&НаКлиенте
Функция	НовыйКэшСБИС_Пустой()
	
	ПараметрыИнтеграцииСБИС = Новый Структура("ИдАккаунта, ИдПользователя, ИнтеграцияИмя, Пользователь, Демо");
	ПараметрыИнтеграцииСБИС.Вставить("Версия",							"");
	ПараметрыИнтеграцииСБИС.Вставить("РезервныйДомен",					Ложь);
	ПараметрыИнтеграцииСБИС.Вставить("ПредставлениеСервера");
	ПараметрыИнтеграцииСБИС.Вставить("КодСервиса");
	
	//Если параметр отключен, то для формирования вложений не будет использоваться ФЭД.Сгенерировать, а только XSLT-преобразования
	ПараметрыИнтеграцииСБИС.Вставить("ГенераторФЭД",					Ложь);
	//Crypto-мод
	ПараметрыИнтеграцииСБИС.Вставить("Шифрование",						Ложь);
	//Наличие хранения настроек в СБИС
	ПараметрыИнтеграцииСБИС.Вставить("ДоступныСерверныеНастройки",				Ложь);
	ПараметрыИнтеграцииСБИС.Вставить("СтатусыВРазрезеРегламента",		Ложь);
	
	//Если параметр отключен, то потоки в глобальном кэше не будут заниматься и отслеживаться время их выполнения
	ПараметрыИнтеграцииСБИС.Вставить("МногопоточныйРежим",				Истина);
	ПараметрыИнтеграцииСБИС.Вставить("Потоки_КоличествоСвободных",		10);
	ПараметрыИнтеграцииСБИС.Вставить("Потоки_МаксимальноеКоличество",	10);
	ПараметрыИнтеграцииСБИС.Вставить("Отправка_РазмерПачки",			10);
	ПараметрыИнтеграцииСБИС.Вставить("ВремяОжиданияОтвета",				60);
	ПараметрыИнтеграцииСБИС.Вставить("ВремяОжиданияОтвета_Отправка",	120);
	ПараметрыИнтеграцииСБИС.Вставить("ВключитьВО3",	                    Ложь);
	
	ДанныеВозврата = Новый	Структура;
	ДанныеВозврата.Вставить("Ини",					Новый Структура);
	ДанныеВозврата.Вставить("ДанныеИнтеграции",		Новый Структура("Подписки, Потоки, НеизвестныеОтветы", Новый Соответствие, Новый Соответствие, Новый Соответствие));
	ДанныеВозврата.Вставить("ПараметрыИнтеграции",	ПараметрыИнтеграцииСБИС);
	ДанныеВозврата.Вставить("ОбменВключен",			Ложь);
	ДанныеВозврата.Вставить("Авторизован",			Ложь);
	ДанныеВозврата.Вставить("АдресСервера");
	ДанныеВозврата.Вставить("МодульОбъектаКлиент");
	Возврат	ДанныеВозврата;
	
КонецФункции
	
//Устанавливает кэш обмена
&НаКлиенте
Функция	НовыйКэшСБИС(ПараметрыКонструктора = Неопределено) Экспорт
	Перем МодульОбъектаКлиент, СбисАдресСервера;
	
	НовыйКэшСбис = НовыйКэшСБИС_Пустой();
	
	Если ПараметрыКонструктора = Неопределено Тогда
		
		Возврат НовыйКэшСбис;
		
	КонецЕсли;
	
	КэшСБИС_Вставить(НовыйКэшСбис, "МодульОбъектаКлиент", МодульОбъектаКлиент());
	
	Возврат	НовыйКэшСбис;
	
КонецФункции

&НаКлиенте
Процедура КэшСБИС_Вставить(КэшСБИС, КлючВставить, ЗначениеВставить)
	
	КэшСБИС[КлючВставить] = ЗначениеВставить
	
КонецПроцедуры

&НаКлиенте
Функция НовыйТекущийСеанс_Пустой()
	
	ПутьКРеквизитуКолонки	= "{%ТЧ%}.";
    ИмяКолонкиШаблон		= "{ИмяКолонки}";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ПутьКРеквизитуКолонки	= ПутьКРеквизитуКолонки + "{%ТЧ%}";
        ИмяКолонкиШаблон		= "{ТЧ}" + ИмяКолонкиШаблон;
	#КонецЕсли

	СбисОтложенныеОперации	= Новый Структура("ПоследнийВызовМС, СообщатьОбОшибках, Процедуры", Ложь, 600, Истина);
	СбисОтложенныеОперации.Вставить("Запущено",				Ложь);
	СбисОтложенныеОперации.Вставить("МаксимальныйПериод",	600);
	СбисОтложенныеОперации.Вставить("СообщатьПриОшибке",	Истина);

	СеансИнтерфейс			= Новый Структура("Блокировки, ШаблонРеквизитаКолонок, ИмяРеквизитаКолонок", Новый Соответствие);
	КэшФорм					= Новый Структура("Получены, Клиентские, Стандартные", Новый Соответствие, Новый СписокЗначений);
	НаборМодулейСеанса		= Новый Структура("Интеграция, ФункцииДокументов, Настройки");
	НаборПараметровСеанса	= Новый Структура("Идентификатор, РежимОтладки, ТихийРежим", Строка(Новый УникальныйИдентификатор), Ложь, Ложь);
	ОписаниеКонфигурации	= Новый Структура("ТипыПолей1С", Новый Структура);
	
	СбисОтложенныеОперации.Процедуры		= Новый Соответствие;
	СеансИнтерфейс.ШаблонРеквизитаКолонок	= ПутьКРеквизитуКолонки;
	СеансИнтерфейс.ИмяРеквизитаКолонок		= ИмяКолонкиШаблон;
	
	КэшТекущегоСеанса = Новый Структура("Интерфейс, СбисОтложенныеОперации, Параметры");
	КэшТекущегоСеанса.Вставить("Формы",					КэшФорм);
	КэшТекущегоСеанса.Вставить("Модули",				НаборМодулейСеанса);
	КэшТекущегоСеанса.Вставить("Функции",				Новый Структура);
	КэшТекущегоСеанса.Вставить("РасчитанныеЗначения",	Новый Структура);
	КэшТекущегоСеанса.Вставить("ОписаниеКонфигурации",	ОписаниеКонфигурации);
	КэшТекущегоСеанса.СбисОтложенныеОперации	= СбисОтложенныеОперации;
	КэшТекущегоСеанса.Параметры					= НаборПараметровСеанса;
	КэшТекущегоСеанса.Интерфейс					= СеансИнтерфейс;
	
	Возврат КэшТекущегоСеанса;
	
КонецФункции
	
&НаКлиенте
Процедура ТекущийСеанс_Вставить(ТекущийСеанс, КлючВставить, ЗначениеВставить)
	
	Если КлючВставить = "СтандартныеФормы" Тогда
		
		ТекущийСеанс.Формы.Стандартные = ЗначениеВставить;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйТекущийСеанс(ПараметрыКонструктора = Неопределено)
	Перем ЗначениеСеансУстановить;
	
	ТекущийСеансПустой		= НовыйТекущийСеанс_Пустой();
	ЗначениеСеансУстановить = ТекущийСеанс_СтандартныеФормы();
	ТекущийСеанс_Вставить(ТекущийСеансПустой, "СтандартныеФормы", ЗначениеСеансУстановить);
	
	Возврат ТекущийСеансПустой;
	
КонецФункции

&НаКлиенте
Функция СписокДоступныхСерверовСБИС() Экспорт
	СписокДоступныхСерверов = Новый СписокЗначений;
	СписокДоступныхСерверов.Добавить("https://online.sbis.ru/", "online.sbis.ru");
	СписокДоступныхСерверов.Добавить("https://fix-online.sbis.ru/", "fix-online.sbis.ru");
	
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") = Истина Тогда 
		
		СписокДоступныхСерверов.Добавить("https://test-online.sbis.ru/", "test-online.sbis.ru");
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСбис("РезервныйДомен") = Истина Тогда 
		
		СписокДоступныхСерверов.Вставить(1, "https://online.saby.ru/", "online.saby.ru");
		СписокДоступныхСерверов.Добавить("https://fix-online.saby.ru/", "fix-online.saby.ru");
		
	КонецЕсли;
	
	Возврат СписокДоступныхСерверов;
КонецФункции

&НаСервере
Функция ТекущийСеанс_СтандартныеФормы()
	
	СписокФорм = Новый СписокЗначений;
	МетаданныеФорм = МодульОбъектаСервер().Метаданные().Формы;
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
	
КонецФункции

