
&НаКлиенте
Функция НовыйВложениеСБИС(ВходящиеПараметры = Неопределено, ДопПараметры = Неопределено) Экспорт 
	Перем Документы1СВложения;
	
	СтруктураВложения = ВложениеСБИС_Пустой();
	
	Если ДопПараметры = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		
	КонецЕсли;
	
	Если	Не	ВходящиеПараметры = Неопределено Тогда
		
		Если		ЭтоТипСбис(ВходящиеПараметры, СтруктураВложения._класс) Тогда
		
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, СтруктураВложения._класс);
			
		ИначеЕсли	ДопПараметры.Свойство("КлючЗаполнить") Тогда
			
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, ДопПараметры.КлючЗаполнить);
					
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполнить основание пакета, если прокинуто в доп. параметрах
	Если		ДопПараметры.Свойство("ОснованиеПакета")
		И   Не	СтруктураВложения.Документы1С.Количество() Тогда
		
		СтруктураВложения.Документы1С.Добавить(ДопПараметры.ОснованиеПакета);
		
	КонецЕсли;
	
	Возврат СтруктураВложения;
	
КонецФункции

// Функция - формирует пустой экземпляр вложения СБИС
// 
// Возвращаемое значение:
//  Структура - объект с пустыми полями
//
&НаКлиенте
Функция ВложениеСБИС_Пустой()
	
	ВложениеСБИС = Новый Структура(
	"_класс, Название, Тип, ПодТип, ВерсияФормата, ПодВерсияФормата, Дата, Номер, Сумма, Примечание,
	|Отправитель, Получатель, Ответственный, Подразделение, Регламент, ДокументОснование, Сертификат, Документы1С",
	"ВложениеСБИС", "", "", "", "", "", "", "", "", "", "");
	ВложениеСБИС.Отправитель	= "Отправитель";
	ВложениеСБИС.Получатель		= "Получатель";
	ВложениеСБИС.Ответственный	= Новый Структура;
	ВложениеСБИС.Подразделение	= Новый Структура;
	ВложениеСБИС.Регламент		= Новый Структура;
	ВложениеСБИС.Сертификат		= Новый Структура;
	
	ВложениеСБИС.ДокументОснование	= Новый Массив;
	ВложениеСБИС.Документы1С		= Новый СписокЗначений;
	
	Возврат ВложениеСБИС;
	
КонецФункции
	
// Процедура - заполняет текущий экземпляр класса от входных данных
//
// Параметры:
//  ВложениеСБИС	 - Структура	- (О) экземпляр класса
//  ДанныеЗаполнить	 - Структура	- (О) входные данные заполнить
//  КлючЗаполнить	 - Строка	 	- (Н) ключ входных данных, если это не класс (невозможно определить что за класс)
//
&НаКлиенте
Процедура ВложениеСБИС_Заполнить(ВложениеСБИС, ДанныеЗаполнить, КлючЗаполнить="ВложениеСБИС") 
	Перем Документы1СВложения;
	
	Если КлючЗаполнить = "ВложениеСБИС" Тогда
		
		ЗаполнитьЗначенияСвойств(ВложениеСБИС, ДанныеЗаполнить);
		
		Если		ВложениеСБИС.Документы1С.Количество() Тогда
			
			//Создать копию списка оснований, чтобы разорвать связь со старым классом
			Документы1СВложенияКопия = Новый СписокЗначений;
			Документы1СВложенияКопия.ЗагрузитьЗначения(ВложениеСБИС.Документы1С.ВыгрузитьЗначения());
			ВложениеСБИС.Документы1С = Документы1СВложенияКопия;
			
		ИначеЕсли	ДанныеЗаполнить.Свойство("Документ1С") Тогда
			
			ВложениеСБИС.Документы1С.Добавить(ДанныеЗаполнить.Документ1С);
			
		КонецЕсли;
			
		//Необязательные поля
		Если	ДанныеЗаполнить.Свойство("ИспользоватьГенератор") Тогда
			
			ВложениеСБИС.Вставить("ИспользоватьГенератор", ДанныеЗаполнить.ИспользоватьГенератор);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("НоменклатураКодКонтрагента") Тогда
			
			ВложениеСБИС.Вставить("НоменклатураКодКонтрагента", ДанныеЗаполнить.НоменклатураКодКонтрагента);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("ДопПоля") Тогда
			
			ВложениеСБИС.Вставить("ДопПоля", ДанныеЗаполнить.ДопПоля);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("Провести") Тогда
			
			ВложениеСБИС.Вставить("Провести", ДанныеЗаполнить.Провести);
			
		КонецЕсли;
	ИначеЕсли КлючЗаполнить = "Структура" Тогда
		
		СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ВложениеСБИС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВложениеСБИС_Получить(ВложениеСбис, КлючПараметраПолучить) Экспорт
	Перем Результат;
	
	Если		КлючПараметраПолучить = "ПараметрыИни" Тогда
		Результат = Новый Структура("Версия, Направление, Тип", "3.01");
		
		Если	НЕ ВложениеСбис.Свойство("Тип", Результат.Тип)	Тогда
			Если		СтрЧислоВхождений(НРег(ВложениеСбис.Название), "накладная") Тогда
				Результат.Тип = "ЭДОНакл";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "фактура")
					И	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет")	Тогда
				Результат.Тип = "СчФктр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "акт №") Тогда
				Результат.Тип = "АктВр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет на")
					Или	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "заказ")	Тогда
				Результат.Тип = "Заказ";
			КонецЕсли;
		КонецЕсли;
		Если	НЕ ВложениеСбис.Свойство("Направление", Результат.Направление)	Тогда
			Результат.Направление = "Входящий";
		КонецЕсли;
	ИначеЕсли	КлючПараметраПолучить = "ТипВерсияВложения" Тогда

		ПараметрыИни	= ВложениеСБИС_Получить(ВложениеСбис, "ПараметрыИни");
		Результат		= ПараметрыИни.Тип + "_" + ПараметрыИни.Версия;
		Результат		= СтрЗаменить(Результат, ".", "_");
 
	ИначеЕсли	КлючПараметраПолучить = "ФайлИни" Тогда
		
		ИмяУстановленнойИни = ВложениеСБИС_Получить(ВложениеСБИС, "ИмяИни");
		
		Если ИмяУстановленнойИни = Неопределено Тогда
			
			Возврат ИниПоПараметрам(Новый Структура("Вложение", ВложениеСБИС));
			
		КонецЕсли;
		
		Возврат ИниПоПараметрам(ИмяУстановленнойИни);

	Иначе
		ВложениеСбис.Свойство(КлючПараметраПолучить, Результат)
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - класс вложение СБИС	- структура с данными сторон
//  РольДО		 - строка				- роль Отправитель/Получатель
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_СторонаПоРоли(ВложениеСБИС, РольДО) Экспорт
	Перем ДанныеСтруктураФайла, ДанныеСтороныПоРоли, ДанныеСтороныПоВспомогательнойРоли, ЗапретРедакций;

	ИмяВспомогательнойРоли	= "Грузо" + РольДО;
	
	//Проверка основной стороны
	Если		Не ВложениеСБИС.Свойство(РольДО, ДанныеСтороныПоРоли) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли	Не	ВложениеСБИС.Свойство("СтруктураФайла", ДанныеСтруктураФайла) Тогда
		
		//Нет данных файла на вложении, неоткуда брать вспомогательную роль.
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоРоли = ДанныеСтруктураФайла.Файл.Документ[РольДО];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;
	
	//Если определение сторон с учетом филиала отключено для пользователя, то вернуть найденные данные по роли
	Если Не ПолучитьЗначениеПараметраСбис("Филиалы_" + РольДО) Тогда
		
		Возврат ДанныеСтороныПоРоли;
		
	КонецЕсли;
	
	//Поиск вспомогательной стороны
	Если 			ДанныеСтруктураФайла = Неопределено Тогда
		
		//Нет данных файла на вложении, неоткуда брать основную роль.
		Если Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли	Не	ДанныеСтруктураФайла.Файл.Документ.Свойство(ИмяВспомогательнойРоли, ДанныеСтороныПоВспомогательнойРоли) Тогда
		
		//Вспомогательных ролей нет
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоВспомогательнойРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоВспомогательнойРоли = ДанныеСтруктураФайла.Файл.Документ[ИмяВспомогательнойРоли];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;	
	
	ИспользоватьКакРольОсн		= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоРоли, "ИспользоватьКак" + РольДО);
	ВспомогательнаяРольФилиал	= Ложь;

	Если	ДанныеСтороныПоВспомогательнойРоли = Неопределено Тогда
		
		ИспользоватьКакРольОсн	= Истина;
		
	Иначе
		
		ИспользоватьКакРольДоп	= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоВспомогательнойРоли, "ИспользоватьКак" + РольДО);
		ПлоскиеДанныеРоли		= Сторона_Выгрузить(ДанныеСтороныПоРоли);
		ПлоскиеДанныеВспомРоли	= Сторона_Выгрузить(ДанныеСтороныПоВспомогательнойРоли);
		ЗапретРедакций			= ДанныеСтороныПоРоли.Свойство("ЗапретРедакций") И ДанныеСтороныПоРоли.ЗапретРедакций;
		
		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал: 
		//Заполнен и отличается КПП, либо КПП заполнен и совпадает, но отличается КодФилиала
		Если 	ПлоскиеДанныеРоли.ИНН = ПлоскиеДанныеВспомРоли.ИНН
			И	ЗначениеЗаполнено(ПлоскиеДанныеРоли.КПП)
			И	ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КПП) Тогда
			//Проверить, что филиал - заполнен и отличается КФ, либо заполнен, но отличается КПП.
			ВспомогательнаяРольФилиал =	Не	ПлоскиеДанныеРоли.КПП = ПлоскиеДанныеВспомРоли.КПП
									Или	(		ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КодФилиала)
										И	Не	ПлоскиеДанныеРоли.КодФилиала = ПлоскиеДанныеВспомРоли.КодФилиала);
		
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьКакРольДоп =	ИспользоватьКакРольДоп = Истина
							Или	ВспомогательнаяРольФилиал;
	
	Если		ИспользоватьКакРольОсн = Истина
		Или	Не	ИспользоватьКакРольДоп Тогда 

		//Явный признак на основной стороне использовать как %роль%, либо нет доп. стороны, либо не филиал
		ДанныеРезультат = ДанныеСтороныПоРоли;

	Иначе

		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал
		ДанныеРезультат = ДанныеСтороныПоВспомогательнойРоли;
		
	КонецЕсли;
	
	ДанныеРезультат = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ДанныеРезультат);

	//Прокинуть признак запрета редакций, если был
	Если	Не	ЗапретРедакций = Неопределено
		И		ЗапретРедакций Тогда
	
		ДанныеРезультат.Вставить("ЗапретРедакций", Истина);
		
	КонецЕсли;
	
	//Установить код страны, если явно отсутсвует
	Если		ДанныеРезультат.Свойство("СвЮЛ")
		И	Не	ДанныеРезультат.СвЮл.Свойство("КодСтраны") Тогда
		
		ДанныеРезультат.СвЮЛ.Вставить("КодСтраны", "643");
		
	КонецЕсли;
	
	Возврат ДанныеРезультат	
	
КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - Структура	- класс вложение СБИС
//  ДопПараметры - Структура	- перекрывает ключи из Вложения:
//		СоставПакета		- Структура, состав пакета. Обязателен если нет явно определенных сторон Организация 1С и Контрагент 1С
//		ТипДокумента		- Строка, описание документа, который ищется
//		СтруктураИниФайла	- Раздел ини мДокумент для определения реквизитов и организации запроса
//		Контрагент1С		- Ссылка на сторону контрагента (партнёра) 1С в явном виде
//		Организация1С		- Ссылка на сторону организации 1С в явном виде
//		КонтрагентСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
//		ОрганизацияСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_НайтиПодходящиеДокументы(ВложениеСБИС, ДопПараметры) Экспорт
	Перем	лРасчитанныйПараметр, УзелИниПоиска, ТипОбъектаПоиск, СоставПакета, ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
			ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
	
	//ПараметрыПоискаДокумента.Вставить("Тип",			Вложение.ТипДокумента);
	//ПараметрыПоискаДокумента.Вставить("Номер",		Вложение.Номер);
	//ПараметрыПоискаДокумента.Вставить("Дата",			Вложение.Дата1С);
	//		
	ОписаниеЗапроса = Новый Структура("Текст, Параметры, Формат", "", Новый Структура, Новый Структура("ТипОбъект, УсловияЗапроса", "", ""));
	ОписаниеЗапроса.Текст = 
	
	"ВЫБРАТЬ Разрешенные
	|Объект.Ссылка КАК ОбъектСсылка
	|ИЗ
	| {ТипОбъект} КАК Объект
	|ГДЕ
	|	НЕ Объект.ПометкаУдаления{УсловияЗапроса}";

	МодульФункцийДокуметов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	
	ЕстьТипОбъекта	=	ДопПараметры.Свойство("ТипДокумента",	ТипОбъектаПоиск)
					Или	ВложениеСБИС.Свойство("ТипДокумента",	ТипОбъектаПоиск);

	//Найти ини для определения реквизитов поиска		
	Если	Не	ДопПараметры.Свойство("СтруктураИниФайла",	УзелИниПоиска)
		И	Не	ВложениеСБИС.Свойство("СтруктураИниФайла",	УзелИниПоиска) Тогда
		
		ФайлИни = ИниПоПараметрам(ВложениеСБИС.ИмяИни);

		Если	Не	ФайлИни = Неопределено
			И 		ФайлИни.Свойство("мДокумент") Тогда
			
			Для Каждого мДокументИни Из ФайлИни.мДокумент Цикл
				
				ДокументТип = МодульФункцийДокуметов.РасчитатьЗначение("Документ", мДокументИни.Значение);
				ДокументТип = СтрПолучитьСтроку(СтрЗаменить(ДокументТип, ".", Символы.ПС), 2);
				Если Не ДокументТип = ТипОбъектаПоиск Тогда
					Продолжить;
				КонецЕсли;
				УзелИниПоиска = мДокументИни.Значение;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли;

	Если УзелИниПоиска = Неопределено Тогда
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует узел файла настроек для поиска.");
		
	КонецЕсли;
	
	Если ТипОбъектаПоиск = Неопределено Тогда
		
		ДокументТип		= МодульФункцийДокуметов.РассчитатьЗначение("Документ", УзелИниПоиска);
		ТипОбъектаПоиск = СтрПолучитьСтроку(СтрЗаменить(ДокументТип, ".", Символы.ПС), 2);
		
	КонецЕсли;

	//Тип объекта
	Если ЗначениеЗаполнено(ТипОбъектаПоиск) Тогда

		ОписаниеЗапроса.Формат.ТипОбъект = "Документ." + ТипОбъектаПоиск;

	Иначе
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует описание типа объекта.");
		
	КонецЕсли;

	ПараметрыФильтра  = Новый Структура("УзелИни, ОписаниеЗапроса", УзелИниПоиска, ОписаниеЗапроса);
	
	//Обработка даты и номера
	Если ДопПараметры.Свойство("Дата1С") Тогда
		ПараметрыФильтра.Вставить("Дата1С",				ДопПараметры.Дата1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Номер1С") Тогда
		ПараметрыФильтра.Вставить("Номер1С",			ДопПараметры.Номер1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("НомерСБИС") Тогда
		ПараметрыФильтра.Вставить("НомерСБИС",			ДопПараметры.НомерСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДатаСБИС") Тогда
		ПараметрыФильтра.Вставить("ДатаСБИС",			ДопПараметры.ДатаСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_Номер") Тогда
		ПараметрыФильтра.Вставить("Документ_Номер",		ДопПараметры.Документ_Номер);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_НомерВх") Тогда
		ПараметрыФильтра.Вставить("Документ_НомерВх",	ДопПараметры.Документ_НомерВх);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_ДатаВх") Тогда
		ПараметрыФильтра.Вставить("Документ_ДатаВх",	ДопПараметры.Документ_ДатаВх);
	КонецЕсли;
	
	ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ПараметрыФильтра);
	
	//Обработка контрагента
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоКонтрагенту") = "Не использовать" Тогда
		
		ПараметрыФильтра.Вставить("Ключ", "Контрагент");
		
		Если		ДопПараметры.Свойство("Контрагент1С") Тогда
			ПараметрыФильтра.Вставить("Контрагент1С",	ДопПараметры.Контрагент1С);
		ИначеЕсли	ДопПараметры.Свойство("КонтрагентСБИС") Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	ДопПараметры.КонтрагентСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	СоставПакета.Контрагент);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Контрагент.");
		КонецЕсли;
		
		Попытка
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		КонецПопытки;
		
	КонецЕсли;

	//Обработка организации
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоОрганизации") = "Не использовать" Тогда

		ПараметрыФильтра.Вставить("Ключ", "Организация");
	
		Если		ДопПараметры.Свойство("Организация1С") Тогда
			ПараметрыФильтра.Вставить("Организация1С",		ДопПараметры.Организация1С);
		ИначеЕсли	ДопПараметры.Свойство("ОрганизацияСБИС") Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	ДопПараметры.ОрганизацияСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	СоставПакета.НашаОрганизация);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Организация.");
		КонецЕсли;
		
		Попытка
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		РезультатПоиска = ОписаниеЗапроса_ВыполнитьЗапросСервер(ПараметрыФильтра.ОписаниеЗапроса);
	Исключение
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
	КонецПопытки;

	Результат = Новый Массив;
	Для Каждого ЭлементНайден Из РезультатПоиска Цикл
		Если		ЭлементНайден.Свойство("ОбъектСсылка") Тогда
			Результат.Добавить(ЭлементНайден.ОбъектСсылка);
		ИначеЕсли   ЭлементНайден.Свойство("Ссылка") Тогда
			Результат.Добавить(ЭлементНайден.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция  ОписаниеЗапроса_ВыполнитьЗапросСервер(ОписаниеЗапроса)
	
	ТекстЗапроса = ОписаниеЗапроса.Текст;
	Для Каждого ЭлементФормат Из ОписаниеЗапроса.Формат Цикл
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{" + ЭлементФормат.Ключ + "}", ЭлементФормат.Значение);
		
	КонецЦикла;
	Попытка
		
		Возврат МодульОбъектаСервер().ВыполнитьЗапросСПараметрами(ТекстЗапроса, ОписаниеЗапроса.Параметры, Новый Структура("Размер"));
		
	Исключение
		
		ВызватьИсключение(МодульОбъектаСервер().СбисИсключение_ВСтрокуСервер(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами")); 
		
	КонецПопытки;
	
КонецФункции

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ДопПараметры)
    Перем УзелИниСтороны, лРасчитанныйПараметр;
	
	УзелИниПоиска			= ДопПараметры.УзелИни;
	КлючПоиска				= ДопПараметры.Ключ;
	КлючСтороны				= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение(КлючПоиска + "_Роль", УзелИниПоиска);
	
	Если		КлючСтороны = Неопределено
		Или Не	УзелИниПоиска.мСторона.Свойство(КлючСтороны, УзелИниСтороны) Тогда
		Возврат;
	КонецЕсли;

	Если    Не ДопПараметры.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр) 
		И	Не ВложениеСБИС.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр) Тогда
		//Контрагент явно не указан, значит попробуем определить его по имеющимся данным
		
		Если	Не	ДопПараметры.Свойство(КлючПоиска + "СБИС", лРасчитанныйПараметр) Тогда
			
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Отсутствуют данные стороны " + КлючПоиска + " для определения стороны 1С.");
			
		КонецЕсли;
			
		ПараметрыПоискаКарточки	= Новый Структура("УзелИниПоиска, ТипСтороны", УзелИниПоиска, КлючПоиска);
		лРасчитанныйПараметр	= Сторона_НайтиКарточки1С(лРасчитанныйПараметр, ПараметрыПоискаКарточки);

		Если Не ЗначениеЗаполнено(лРасчитанныйПараметр) Тогда
			
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Не найдены данные стороны " + КлючПоиска + " в 1С.", Новый Структура("Сторона", лРасчитанныйПараметр));
			
		КонецЕсли;
		
		МассивСторон = лРасчитанныйПараметр;
		
	Иначе
		
		МассивСторон = Новый Массив;
		МассивСторон.Добавить(лРасчитанныйПараметр);
			
	КонецЕсли;
	
	//Проверить наличие в ини узла для определения поиска по контрагенту
	ИмяРеквизитаКонтрагента	= СтроковоеЗначениеУзлаИни(УзелИниСтороны.Сторона, Новый Структура("ИмяРеквизита", Истина));

	ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса = ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + " И Объект." + ИмяРеквизитаКонтрагента+" В (&" + КлючПоиска + ")";
	ДопПараметры.ОписаниеЗапроса.Параметры.Вставить(КлючПоиска, МассивСторон);
	
КонецПроцедуры

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ДопПараметры)
	Перем	ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
		ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
		
	ОписаниеЗапроса	= ДопПараметры.ОписаниеЗапроса;
	УзелИниПоиска	= ДопПараметры.УзелИни;
	
	//Обработка Дата
	Если	(	ДопПараметры.Свойство("Дата1С",	ЗначениеДата)
			Или	ВложениеСБИС.Свойство("Дата1С", ЗначениеДата)
			Или	ВложениеСБИС.Свойство("Дата",	ЗначениеДата))
		И	ЗначениеЗаполнено(ЗначениеДата) Тогда
		
		//определить как искать дату
		Если	УзелИниПоиска.Свойство("Документ_Дата",		ИмяРеквизитаРасчет) Тогда
			
			ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина))
			
		Иначе
			
			ИмяРеквизитаРасчет = "Дата";
			
		КонецЕсли;
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Дата документа" Тогда

			УсловиеДобавить = " И НАЧАЛОПЕРИОДА(Объект.{ИмяРеквизитДата}, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Месяц с даты документа" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Календарный месяц документа" Тогда

			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И &ДатКнц";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	НачалоМесяца(ЗначениеДата));
			ОписаниеЗапроса.Параметры.Вставить("ДатКнц",	КонецМесяца(ЗначениеДата));
			
		Иначе
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДата} = (&Дата)";
			ОписаниеЗапроса.Параметры.Вставить("Дата",		ЗначениеДата);
			
		КонецЕсли;
		
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитДата}", ИмяРеквизитаРасчет);
			
	КонецЕсли;
	
	//Обработка ДатаВходящая
	Если	(	ДопПараметры.Свойство("ДатаСБИС",	ЗначениеДатаВх)
			Или	ВложениеСБИС.Свойство("Дата",		ЗначениеДатаВх))
		И	ЗначениеЗаполнено(ЗначениеДатаВх)
		И	(	ДопПараметры.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)
			Или	УзелИниПоиска.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)) Тогда
		
		ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Точное совпадение" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Отклонение 1 день" Тогда
			
			УсловиеДобавить = 
			" И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) < 2
			|И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) > -2";
			
		ИначеЕсли	Не ЗначениеЗаполнено(ЗначениеДата) Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		Иначе
			
			УсловиеДобавить = "";
			
		КонецЕсли;
		
		ОписаниеЗапроса.Параметры.Вставить("ДатаВхНач", ЗначениеДатаВх);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитаДатаВх}", ИмяРеквизитаРасчет);
		
	КонецЕсли;
	
	//Обработка Номер
	ЕстьУзелНомераВходящего =	ДопПараметры.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом)
							Или	УзелИниПоиска.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом);
	ЕстьУзелНомера			=	ДопПараметры.Свойство("Документ_Номер",		ИмяРеквизитаРасчет)
							Или	УзелИниПоиска.Свойство("Документ_Номер",	ИмяРеквизитаРасчет);
	ЕстьНомерВх				=	(	ДопПараметры.Свойство("НомерСБИС",	ЗначениеНомерВх)
								Или	ВложениеСБИС.Свойство("Номер",		ЗначениеНомерВх))
							И ЗначениеЗаполнено(ЗначениеНомерВх);
	ЕстьНомер1С				=	(	ДопПараметры.Свойство("Номер1С",	ЗначениеНомер)
								Или	ВложениеСБИС.Свойство("Номер1С", 	ЗначениеНомер))
							И ЗначениеЗаполнено(ЗначениеНомер);
	Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Точное совпадение" Тогда

		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} = &Номер";
		
	ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Вхождение" Тогда
		
		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} ПОДОБНО &Номер";
		
	Иначе
		
		УсловиеДобавить = "";
		
	КонецЕсли;
	
	Если		ЕстьНомер1С Тогда
		
		//Поиск по указанному номеру 1С
		ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		ОписаниеЗапроса.Параметры.Вставить("Номер",	ЗначениеНомер);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	ИначеЕсли 	ЕстьНомерВх  Тогда
		
		Если		ЕстьУзелНомераВходящего Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчетВспом,	Новый Структура("ИмяРеквизита", Истина))
			
		ИначеЕсли	ЕстьУзелНомера Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет,			Новый Структура("ИмяРеквизита", Истина))
			
		Иначе
			
			УсловиеДобавить = "";
			
		КонецЕсли;
		ОписаниеЗапроса.Параметры.Вставить("Номер",	ЗначениеНомерВх);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	КонецЕсли;
				
	Если	НЕ	(ЗначениеЗаполнено(ЗначениеДата) Или ЗначениеЗаполнено(ЗначениеДатаВх))
		И	НЕ	(ЗначениеЗаполнено(ЗначениеНомер) Или ЗначениеЗаполнено(ЗначениеНомерВх)) Тогда   

		//  Если в СБИС не заполнены дата и номер, то нет смысла проводить поиск
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Не указаны дата и номер для поиска документа.");
		
	КонецЕсли;

КонецПроцедуры

