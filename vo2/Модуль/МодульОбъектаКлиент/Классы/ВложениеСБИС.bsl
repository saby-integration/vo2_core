
&НаКлиенте
Функция НовыйВложениеСБИС(ВходящиеПараметры = Неопределено, ДопПараметры = Неопределено) Экспорт 
	Перем Документы1СВложения;
	
	СтруктураВложения = ВложениеСБИС_Пустой();
	
	Если ДопПараметры = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		
	КонецЕсли;
	
	Если	Не	ВходящиеПараметры = Неопределено Тогда
		
		Если		ЭтоТипСбис(ВходящиеПараметры, СтруктураВложения._класс) Тогда
		
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, СтруктураВложения._класс);
			
		ИначеЕсли	ДопПараметры.Свойство("КлючЗаполнить") Тогда
			
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, ДопПараметры.КлючЗаполнить);
			
		ИначеЕсли	ВходящиеПараметры.Свойство("Документ1С") Тогда
			
			// TODO переделать ПолучитьСтруктуруДокумента1СПоПакетуСбис в заполнение вложения по документу 1С
			ПараметрыИни = ВложениеСБИС_Получить(ДопПараметры.Вложение, "ПараметрыИни");
			ПараметрыЗаполнить = Новый ФиксированнаяСтруктура("Документ1С, ПараметрыИни", ВходящиеПараметры.Документ1С, ПараметрыИни);
			ВложениеСБИС_Заполнить(СтруктураВложения, ВходящиеПараметры, "ПоДокументу1С")
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполнить основание пакета, если прокинуто в доп. параметрах
	Если		ДопПараметры.Свойство("ОснованиеПакета")
		И   Не	СтруктураВложения.Документы1С.Количество() Тогда
		
		СтруктураВложения.Документы1С.Добавить(ДопПараметры.ОснованиеПакета);
		
	КонецЕсли;
	
	Возврат СтруктураВложения;
	
КонецФункции

// Функция - формирует пустой экземпляр вложения СБИС
// 
// Возвращаемое значение:
//  Структура - объект с пустыми полями
//
&НаКлиенте
Функция ВложениеСБИС_Пустой()
	
	ВложениеСБИС = Новый Структура(
	"_класс, Идентификатор, Название, Тип, ПодТип, ВерсияФормата, ПодВерсияФормата, Дата, Номер, Сумма, Примечание,
	|Отправитель, Получатель, Ответственный, Подразделение, Регламент, ДокументОснование, Сертификат, Документы1С, Параметры",
	"ВложениеСБИС", "", "", "", "", "", "", "", "", "", "", "");
	ВложениеСБИС.Отправитель	= "Отправитель";
	ВложениеСБИС.Получатель		= "Получатель";
	ВложениеСБИС.Ответственный	= Новый Структура;
	ВложениеСБИС.Подразделение	= Новый Структура;
	ВложениеСБИС.Регламент		= Новый Структура;
	ВложениеСБИС.Сертификат		= Новый Структура;
	ВложениеСБИС.Параметры		= Новый Структура;
	
	ВложениеСБИС.ДокументОснование	= Новый Массив;
	ВложениеСБИС.Документы1С		= Новый СписокЗначений;
	
	Возврат ВложениеСБИС;
	
КонецФункции
	
//Функция возвращает разобрынные данные вложения XMLДокумента, СтруктураФайла, ФорматДляЗагрузки, ВерсияФорматаДляЗагрузки
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - Структура, описывает вложение в Документ СБИС
//  ДопПараметры - Структура	 - параметры расширения
//		СоставПакета	- ДокументСБИС, к которому относится вложение.
//		Просмотр		- булево (Ложь), определяет необходимость определения полей для редактирования, типов и всего необходимого для интерфейса
//
&НаКлиенте
Процедура ВложениеСБИС_РазобратьДляЗагрузки(ВложениеСБИС, ДопПараметры) Экспорт
	Перем ПоляВходящегоКонтекста;
	
	Если Не ВложениеСБИС.Свойство("Параметры") Тогда
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Просмотр",						Ложь); // Документ формируется для формы просмотра
		ПараметрыВложения.Вставить("ВозможноРедактироватьДокумент", Ложь); // В ини установлена возможность редактировать документ (не перезаполняя его)
		ПараметрыВложения.Вставить("РедактироватьТабЧасть",			Ложь); // Установлена возможность редактировать табличную часть (не перезаполняя)
		ПараметрыВложения.Вставить("РедактироватьДокумент",			Ложь); // Установлен документ в редактируемых полях и есть возможность редактировать
		ВложениеСБИС.Вставить("Параметры", ПараметрыВложения);
		
	КонецЕсли;
	
	Если	ДопПараметры.Свойство("Просмотр")  Тогда
		
		ВложениеСБИС.Параметры.Просмотр = ДопПараметры.Просмотр;
		
	КонецЕсли;
	
	Попытка
		
		ВложениеСБИС_ПрочитатьДанные(ВложениеСБИС, ДопПараметры);
		ВложениеСБИС_УстановитьИниЗагрузки(ВложениеСБИС, ДопПараметры);
		
	Исключение
		
		ОшибкаРазбора = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_РазобратьДляЗагрузки");
		ВложениеСБИС_Обновить(ВложениеСБИС, Новый ФиксированнаяСтруктура("Статус", ОшибкаРазбора));
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

//Функция возвращает разобрынные данные вложения XMLДокумента, СтруктураФайла, ФорматДляЗагрузки, ВерсияФорматаДляЗагрузки
&НаКлиенте
Процедура ВложениеСБИС_ПрочитатьДанные(ВложениеСБИС, ДопПараметры)
	Перем Файл_Формат, Файл_ВерсияФормата;
	
	ВложениеСБИС.Вставить("XMLДокумента", "");
	
	ФайлВложение		= ВложениеСБИС_Получить(ВложениеСБИС, "Файл");
	ИнтеграцияМодуль	= ПолучитьЗначениеПараметраСбис("Интеграция");
	СбисОбщиеФункции	= ПолучитьЗначениеПараметраСбис("ФункцииДокументов");
	Кэш					= ПолучитьТекущийЛокальныйКэш();
	ПолныйСоставПакета	= ДопПараметры.СоставПакета;
	
	
	XMLФайла			= ВложениеСБИС_Получить(ВложениеСБИС, "ДанныеФайла");
	XMLИсходногоФайла	= XMLФайла;
	XMLФайла			= СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(XMLФайла
							, "xmlns=""SFAKT""",											"")
							, "xmlns=""OTORG12""",											"")
							, "xmlns=""IAKTPRM""",											"")
							, "xmlns:xs=""http://www.w3.org/2001/XMLSchema""",				"")
							, "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""",	"")
							, "xmlns=""urn:schemas-microsoft-com:office:spreadsheet""",		"");
	
	ЕстьXSLT	= Ложь;
	ИмяXSLT		= "";
	
	ПодТип				= ?(ВложениеСБИС.Свойство("ПодТип"), СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(ВложениеСБИС.ПодТип), "");
	Файл_Формат			= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(ВложениеСБИС.Тип);
	Файл_ВерсияФормата	= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(ВложениеСБИС.ВерсияФормата);		
	СтруктураФайла		= Новый Структура;
	
	Если ЗначениеЗаполнено(Файл_Формат) и ЗначениеЗаполнено(XMLФайла) Тогда
		ИмяXSLT	= СбисОбщиеФункции.СбисФорматСтроки(Файл_Формат + "_" + ПодТип + "_" + Файл_ВерсияФормата, "КлючСтруктуры");
		ЕстьXSLT = ЗначениеЗаполнено(XSLTПоПараметрам(ИмяXSLT));
		
		ОшибкаПреобразования= Ложь;
		ДопПараметрыXSLT	= Неопределено;
		Если Кэш.Парам.РежимОтладки Тогда
			ДопПараметрыXSLT = Новый Структура;
			ДопПараметрыXSLT.Вставить("Название", СбисОбщиеФункции.сбисФорматКаталога("Загрузка", Кэш.ПараметрыСистемы.Клиент));
			Если ПолныйСоставПакета.Свойство("Название") Тогда
				ДопПараметрыXSLT.Название = ДопПараметрыXSLT.Название + ПолныйСоставПакета.Название;
			КонецЕсли;
		КонецЕсли;
		XMLФайла = СбисОбщиеФункции.сбисПрименитьXSLT(Кэш, XMLФайла, ИмяXSLT, ДопПараметрыXSLT, ОшибкаПреобразования);
		Если ОшибкаПреобразования Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, XMLФайла);
			XMLФайла = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Файл_ВерсияФормата) Тогда
			ВложениеСБИС.XMLДокумента = XMLИсходногоФайла;
		КонецЕсли;
		Если ЗначениеЗаполнено(XMLФайла) Тогда
			Попытка
				СтруктураФайла	= СбисОбщиеФункции.ЗаполнитьСтруктуруФайла(XMLФайла);
			Исключение
				//Возможна ошибка транспорта строки не XML вложений на УФ
				СтруктураФайла	= Новый Структура;
				XMLФайла		= "";
			КонецПопытки;
		КонецЕсли;
	Иначе
		XMLФайла= "";
	КонецЕсли;
	
	//Пробуем преобразовать XML только если он есть, дабы избежать лишних вызовов сервера
	ВложениеСБИС.Вставить("СтруктураФайла", СтруктураФайла);
	Если	ЕстьXSLT 
		И	СтруктураФайла.Свойство("Файл")
		И	СтруктураФайла.Файл.Свойство("Формат")
		И	СтруктураФайла.Файл.Свойство("ВерсияФормата") Тогда
		Файл_Формат			= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Файл.Формат);
		Файл_ВерсияФормата	= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Файл.ВерсияФормата);
	ИначеЕсли ЗначениеЗаполнено(XMLФайла) Тогда	// XMLФайла может быть пустым, если вложение не удалось расшифровать
		Файл_Формат			= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(ВложениеСБИС.Тип);
		Файл_ВерсияФормата	= СбисОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(ВложениеСБИС.ВерсияФормата);
	Иначе
		Возврат;
	КонецЕсли;					
	ВложениеСБИС.Вставить("ФорматДляЗагрузки",			Файл_Формат);
	ВложениеСБИС.Вставить("ВерсияФорматаДляЗагрузки",	Файл_ВерсияФормата);
	
КонецПроцедуры

// Функция - формирует структуру полей для заполнения на форму просмотра
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - экземпляр вложения сбис
//  ДопПараметры - Структура	 - Расширение. СоставПакета - Экземпляр СоставПакета
// 
// Возвращаемое значение:
//  Структура - Договор, Дата, Контрагент
//
&НаКлиенте
Функция ВложениеСБИС_Поля1С(ВложениеСБИС, ДопПараметры)
	Перем ЗначениеВставить, СтруктураДокОбъект, ОписаниеТипа;

	ДанныеРезультат = Новый Структура("Договор, Дата, Номер, Контрагент, Организация, Документ");
	
	СтруктураОбъекта			= ВложениеСБИС_РассчитанныйОбъект(ВложениеСБИС, ДопПараметры);
	СтруктураДанныхДокумента	= ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
	Если Не ЗначениеЗаполнено(СтруктураДанныхДокумента) Тогда
		
		Возврат ДанныеРезультат;
		
	КонецЕсли;
		
	ДанныеРезультат.Договор		= НовыйОписаниеПоля1СВложения(СтруктураОбъекта, "Договор",	СтруктураДанныхДокумента, ДопПараметры);
	ДанныеРезультат.Дата		= НовыйОписаниеПоля1СВложения(СтруктураОбъекта, "Дата",		СтруктураДанныхДокумента, ДопПараметры);
	ДанныеРезультат.Номер		= НовыйОписаниеПоля1СВложения(СтруктураОбъекта, "Номер",	СтруктураДанныхДокумента, ДопПараметры);
	
	СинонимСтороны	= ВложениеСБИС.ДанныеСтруктурыФайла.Синонимы.Получить("Контрагент");
	Если СинонимСтороны = Неопределено Тогда
		
		ДанныеРезультат.Контрагент = НовыйОписаниеПоля1СВложения();

	Иначе
		
		ДанныеРезультат.Контрагент = НовыйОписаниеПоля1СВложения(СтруктураОбъекта, СинонимСтороны + ".Сторона", СтруктураДанныхДокумента.мСторона, ДопПараметры);

	КонецЕсли;
	
	СинонимСтороны	= ВложениеСБИС.ДанныеСтруктурыФайла.Синонимы.Получить("Организация");
	Если СинонимСтороны = Неопределено Тогда
		
		ДанныеРезультат.Организация = НовыйОписаниеПоля1СВложения();

	Иначе
		
		ДанныеРезультат.Организация = НовыйОписаниеПоля1СВложения(СтруктураОбъекта, СинонимСтороны + ".Сторона", СтруктураДанныхДокумента.мСторона, ДопПараметры);

	КонецЕсли;
	
	ДанныеРезультат.Документ = Новый Структура("Доступность, Путь, Тип, Значение", Ложь, "ОбъектСсылка");
	// Документ заполняем только если не находимся в режиме разбора вложения.
	// Если это разбор, то документ заполнится после  набора полей
	Если	Не	ДопПараметры.Свойство("Режим")
		Или	Не	ДопПараметры.Режим = "Разбор" Тогда	
		
		ДанныеРезультат.Документ = ВложениеСБИС_Поля1С_Документ(ВложениеСБИС, ДопПараметры);
		
	КонецЕсли;
	
	Если	ВложениеСБИС.Параметры.РедактироватьДокумент Тогда
		
		// Если идёт редактирование документа, то его поля берутся как ручные изменения и не перезаполняются в процессе
		ЗначениеУзлаИни = Неопределено;
		Для Каждого КлючИЗначениеИни Из СтруктураДанныхДокумента Цикл 
			
			Если		ДанныеРезультат.Свойство(КлючИЗначениеИни.Ключ)
				Или	Не	КлючИЗначениеИни.Значение.Свойство("Значение", ЗначениеУзлаИни)
				Или	Не	ЗначениеЗаполнено(ЗначениеУзлаИни)
				Или	Не	НРег(Лев(ЗначениеУзлаИни, 10)) = "[документ]" Тогда
				Продолжить;
			КонецЕсли;
			
			КлючДанные = Сред(КлючИЗначениеИни.Ключ, Найти(КлючИЗначениеИни.Ключ, "_"));
			Если Лев(КлючДанные, 1) = "_" Тогда
				Если НРег(Лев(КлючИЗначениеИни.Ключ, 8)) = "документ" Тогда
					КлючДанные = Сред(КлючДанные, 2);
				Иначе
					КлючДанные = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если	КлючДанные = Неопределено
				Или ДанныеРезультат.Свойство(КлючДанные) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеРезультат.Вставить(КлючДанные, НовыйОписаниеПоля1СВложения(СтруктураОбъекта, КлючДанные,	СтруктураДанныхДокумента, ДопПараметры));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеРезультат;

КонецФункции

&НаКлиенте
Функция ВложениеСБИС_Поля1С_Документ(ВложениеСБИС, ДопПараметры)
	
	ДанныеРезультат = Новый Структура("Доступность ,Путь, Тип, Значение", Ложь, "ОбъектСсылка");
	// Документ заполняем только если находимся в режиме разбора вложения на просмотр.
	Попытка
		
		ДанныеРезультат.Доступность = Истина;
		ДанныеРезультат.Значение = ВложениеСБИС_Получить(ВложениеСБИС, "ПодходящийДокумент", ДопПараметры);
		
	Исключение
		
		ДанныеРезультат.Вставить("Ошибка", НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_Поля1С_Документ"));
		// TODO Обработать ошибку 
		
	КонецПопытки;
	
	ТипВложения = ВложениеСБИС_Получить(ВложениеСБИС, "ТипОбъекта", ДопПараметры);
	Если Не ТипВложения = Неопределено Тогда 
	
		ДанныеРезультат.Тип = Новый ОписаниеТипов(ТипВложения);
		Если ДанныеРезультат.Значение = Неопределено Тогда
			
			ДанныеРезультат.Значение = ДанныеРезультат.Тип.ПривестиЗначение();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРезультат;

КонецФункции

// Функция - создает описание для редактируемого поля формы просмотра вложения
//
// Параметры:
//  СтруктураОбъекта	 - Структура	- Структура рассчитанного объекта для получения значения
//  КлючПоля			 - Строка	 	- Путь, через "." для поиска в узле ини
//  СтруктураРазделаИни	 - Ини			- Структура раздела ини файла 
//  ДопПараметры		 - Структура	- Расширение
// 
// Возвращаемое значение:
//  Структура - Доступность, Тип, Значение, Путь
//
&НаКлиенте
Функция НовыйОписаниеПоля1СВложения(СтруктураОбъекта = Неопределено, КлючПоля = Неопределено, СтруктураРазделаИни = Неопределено, ДопПараметры = Неопределено) Экспорт
	Перем ЗначениеВставить, УзелОписаниеПоля;
	
	СтруктураРеквизита	= Новый Структура("Доступность, Тип, Значение, Путь", Ложь);
	// Доступность - описание узла есть в ини
	// Тип - описание типа поля
	// Значение - полученное значение 1С
	// Путь - путь в создаваемом/перезаполняемом объекте до рекизита, куда надо поместить.
	
	Если СтруктураРазделаИни = Неопределено Тогда
		
		Возврат СтруктураРеквизита;
		
	КонецЕсли;
		
	ПутьДоРеквизита		= СтрЗаменить(КлючПоля, ".", Символы.ПС);
	УзелОписаниеПоля	= СтруктураРазделаИни;
	
	Для СтрПуть = 1 По СтрЧислоСтрок(ПутьДоРеквизита) Цикл
		
		Если НЕ УзелОписаниеПоля.Свойство(СтрПолучитьСтроку(ПутьДоРеквизита, СтрПуть), УзелОписаниеПоля) Тогда
			
			Если	СтрЧислоСтрок(ПутьДоРеквизита) = 1 Тогда 
				
				СтруктураРазделаИни.Свойство("Документ_" + КлючПоля, УзелОписаниеПоля);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если УзелОписаниеПоля = Неопределено Тогда
		
		Возврат СтруктураРеквизита;
		
	КонецЕсли;

	ИмяРеквизита = СтроковоеЗначениеУзлаИни(УзелОписаниеПоля, Новый Структура("ИмяРеквизита", Истина));
	
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		СтруктураРеквизита.Доступность	= Истина;
		СтруктураРеквизита.Путь			= ИмяРеквизита;
		
		Если СтруктураОбъекта = Неопределено Тогда 
			
			Возврат СтруктураРеквизита;
			
		КонецЕсли;
	
		Если СтруктураОбъекта.Свойство(ИмяРеквизита, ЗначениеВставить) Тогда
		
			СтруктураРеквизита.Значение = ЗначениеВставить;
			
		КонецЕсли;
		
		// Определить тип поля
		ТипОпределен = Ложь;
		Если УзелОписаниеПоля.Свойство("Тип") Тогда
			
			Попытка
				
				СтруктураРеквизита.Тип = СоздатьОписаниеТипаПоОбъекту(УзелОписаниеПоля.Тип);
				ТипОпределен = Истина;
				
			Исключение
				
				СтруктураРеквизита.Вставить("Ошибка", НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НовыйОписаниеПоля1СВложения", 608));
				
			КонецПопытки;
			
		КонецЕсли;	
		Если ТипОпределен Тогда
			
			// Уже всё определено.
			
		ИначеЕсли	Не	ЗначениеВставить = Неопределено
				И	Не  ЗначениеВставить = "" Тогда
				
			СтруктураРеквизита.Тип = СоздатьОписаниеТипаПоОбъекту(ЗначениеВставить);
				
		Иначе
			
			ДоступныеТипы1С = ПолучитьЗначениеПараметраТекущегоСеанса("ТипыПолей1С");
			Если ДоступныеТипы1С.Свойство(КлючПоля, СтруктураРеквизита.Тип) Тогда
				СтруктураРеквизита.Тип = СтруктураРеквизита.Тип.ОписаниеТипа;
			КонецЕсли;

		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтруктураРеквизита;
	
КонецФункции

// Функция - формирует Струкутру данных объекта по инишке
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - экземпляр вложения сбис
//  ДопПараметры - Структура	 - Расширение. СоставПакета - Экземпляр СоставПакета
// 
// Возвращаемое значение:
//  Структура - Договор, Дата, Контрагент
//
&НаКлиенте
Функция ВложениеСБИС_РассчитанныйОбъект(ВложениеСБИС, ДопПараметры)
	Перем ЗначениеВставить;
	
	Если ВложениеСБИС.Параметры.Свойство("РассчитанныйОбъект") Тогда
		
		Возврат ВложениеСБИС.Параметры.РассчитанныйОбъект;
		
	КонецЕсли;
	
	СтатусВложения		= ВложениеСБИС_Получить(ВложениеСБИС, "Статус");
	СтруктураИниФайла	= ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
	Если	СтатусВложения = "Ошибка"
		Или	СтруктураИниФайла = Неопределено Тогда
		
		Возврат Новый Структура;
		
	КонецЕсли;

	// В поиск подходящего документа попадём только если будет режим не разбора документа
	// т.е. уже определены основные поля для поиска документа по данным СБИС и можно попробовать его найти
	Если	ВложениеСБИС.Параметры.РедактироватьДокумент
		И	(	Не ДопПараметры.Свойство("Режим")
			Или	Не ДопПараметры.Режим = "Разбор") Тогда
		
		ДокументДляРедактирования = ВложениеСБИС_Получить(ВложениеСБИС, "ПодходящийДокумент", ДопПараметры);
		
		Если ДокументДляРедактирования = Неопределено Тогда
			
			Возврат Новый Структура;
			
		КонецЕсли;
		
		СтруктураДокОбъект = ПолучитьДанныеОбъекта1С(ДокументДляРедактирования);
		
	Иначе
		
		СтруктураДокОбъект			= Новый Структура; // Структура с названиями полей, как у создаваемого документа 1С
		ПараметрыДляРасчётаОбъекта	= Новый Структура("Режим", "Подготовка");
		СбисОбщиеФункции			= ПолучитьЗначениеПараметраСбис("ФункцииДокументов");
		СтруктураДанныхДокумента	= СбисОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СтруктураИниФайла);
		
		ПараметрыПолучить	= Новый ФиксированнаяСтруктура("СоставПакета, ТипКратко", ДопПараметры.СоставПакета, Истина);
		ТипДокумента		= ВложениеСБИС_Получить(ВложениеСБИС, "ТипОбъекта", ПараметрыПолучить);
		
		ВложениеСБИС.Удалить("ВходящийКонтекст");
		ВложениеСБИС_ЗаполнитьПараметрыПередРасчетом(ВложениеСБИС, ДопПараметры);
	
		НаборФорм = Новый Массив;
		НаборФорм.Добавить("Документ_" + ТипДокумента);
		НаборФорм.Добавить("Документ_Шаблон");
		
		фрм = НайтиФункциюСеансаОбработки("ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента", НаборФорм);
		фрм.ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(	ПолучитьТекущийЛокальныйКэш()
															,	ВложениеСБИС.СтруктураФайла
															,	СтруктураДанныхДокумента
															,	СтруктураДокОбъект
															,	Новый Массив
															,	ДопПараметры.СоставПакета
															,	ВложениеСБИС
															,	ПараметрыДляРасчётаОбъекта);
		
	КонецЕсли;
	
	ВложениеСБИС.Параметры.Вставить("РассчитанныйОбъект",			СтруктураДокОбъект);
	
	Возврат СтруктураДокОбъект;

КонецФункции

// Процедура - устанавливает на текущее вложение СБИС ини загрузки
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - Структура, вложение в которое устанавливаем параметры
//  ДопПараметры - Структура	 - СоставПакета
//
&НаКлиенте
Процедура ВложениеСБИС_УстановитьИниЗагрузки(ВложениеСБИС, ДопПараметры)
	Перем мСторонаДокумента;
	
	СбисОбщиеФункции	= ПолучитьЗначениеПараметраСбис("ФункцииДокументов");
	ПолныйСоставПакета	= ДопПараметры.СоставПакета;
	
	ПараметрыИни		= ВложениеСБИС_Получить(ВложениеСБИС, "ПараметрыДанныхВложения");
	
	Файл_Формат			= ПараметрыИни.Тип;
	Файл_ВерсияФормата	= ПараметрыИни.Версия;
	НаправлениеВложения	= ПараметрыИни.Направление;
	СтруктураФайла		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
	ИмяИни				= ВложениеСБИС_Получить(ВложениеСБИС, "ИмяИни");
	
	// Подбор имени и значения ини на загрузку.
	Если ИмяИни = Неопределено Тогда
		Если	Не ЗначениеЗаполнено(НаправлениеВложения) 
			Или	Не ЗначениеЗаполнено(Файл_Формат) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяИниКратко	= СтрЗаменить(Файл_Формат, "счФактКор", "СчФактКор") + "_" + Файл_ВерсияФормата;
		ИмяИни			= "Загрузка_" + НаправлениеВложения + "_" + ИмяИниКратко;
		Ини				= ИниПоПараметрам(ИмяИни);
		
		Если		Ини = Неопределено
			И Не	НаправлениеВложения = "Исходящий" Тогда
			
			// если нет файла настроек с полным именем, то пытаемся найти со старым
			ИмяИни	= ИмяИниКратко;
			Ини		= ИниПоПараметрам(ИмяИни);
			
		КонецЕсли;
		ВложениеСБИС.Вставить("ИмяИни", ИмяИни);
	
	Иначе
		
		Ини = ИниПоПараметрам(ИмяИни);
		
	КонецЕсли;
		
	ВложениеСБИС_УстановитьРаздел_мДокумент(ВложениеСБИС, Ини, ДопПараметры);
	
	СтруктураИниФайла = ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
	
	Если СтруктураИниФайла = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтруктурыФайла = Новый Структура("Синонимы, Поля", Новый Соответствие, Новый Соответствие); 
	ВложениеСБИС.Вставить("ДанныеСтруктурыФайла", ДанныеСтруктурыФайла);
	ВложениеСБИС_УстановитьПараметрыСторон(ВложениеСБИС, ДопПараметры);
	
	Документ_Модуль		= ПолучитьФормуОбработки("Документ_Шаблон");
	Функции_Модуль		= ПолучитьЗначениеПараметраТекущегоСеанса("ФункцииДокументов");
	ПараметрыРассчитать	= Новый ФиксированнаяСтруктура("Ини", СтруктураИниФайла);
	
	ВозможноРедактироватьДокумент	= Документ_Модуль.РассчитатьЗначение("РедактироватьДокумент",	ПараметрыРассчитать) = Истина;
	ВозможноРедактироватьТабЧасть	= Функции_Модуль.РассчитатьЗначение("РедактироватьТабЧасть",	СтруктураИниФайла) = Истина;
	
	ВложениеСБИС.Параметры.ВозможноРедактироватьДокумент = ВозможноРедактироватьДокумент;
	// Определяем редактируется ли документ, или перезаполняется существующий при установке полей 1С, когда будет подобран документ.
	ВложениеСБИС.Параметры.РедактироватьДокумент	= Ложь;
	// Редактирование таб.части - старый механизм для актов расхождения. Определяется через инишку признаком "РедактироватьТабЧастьРедактироватьТабЧасть"
	ВложениеСБИС.Параметры.РедактироватьТабЧасть	= ВозможноРедактироватьТабЧасть;
	ВложениеСБИС.Параметры.Удалить("ПолныйТипОбъекта");
	ВложениеСБИС.Параметры.Удалить("РедактируемыеПоля");
	ВложениеСБИС.Параметры.Удалить("РассчитанныйОбъект");
	
	ВложениеСБИС_Обновить(ВложениеСБИС, Новый ФиксированнаяСтруктура("Статус", "ИниУстановлена"));

	ПараметрыПоляПОлучить = Новый ФиксированнаяСтруктура("СоставПакета, Режим", ПолныйСоставПакета, "Разбор");
	Поля1С = ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С", ПараметрыПоляПОлучить);

	Если ВложениеСБИС.Параметры.Просмотр Тогда 
		
		ВложениеСБИС_РазобратьДляПросмотра(ВложениеСБИС, ДопПараметры);	
		
	КонецЕсли;
	
	ВложениеСБИС_Обновить(ВложениеСБИС, Новый ФиксированнаяСтруктура("Статус", "Разобран"));
	
КонецПроцедуры

// Процедура - устанавливает на текущее вложение СБИС пути к данным и синонимы сторон по их ролям
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - Структура, вложение в которое устанавливаем параметры
//  ДопПараметры - Структура	 - СоставПакета
//
&НаКлиенте
Процедура ВложениеСБИС_УстановитьПараметрыСторон(ВложениеСБИС, ДопПараметры)
	Перем мСторонаДокумента, ПутьКонтрагента, ПутьОрганизации, ПутьСтороныСопоставления;
	
	Функции_Модуль		= ПолучитьЗначениеПараметраТекущегоСеанса("ФункцииДокументов");
	Файл_Шаблон_Модуль	= ПолучитьФормуОбработки("Файл_Шаблон");
	
	СтруктураФайла			= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
	СтруктураИниФайла		= ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
	ПараметрыИни			= ВложениеСБИС_Получить(ВложениеСБИС, "ПараметрыДанныхВложения");
	ДанныеСтруктурыФайла	= ВложениеСБИС_Получить(ВложениеСБИС, "ДанныеСтруктурыФайла");
	
	Контрагент_Роль			= Функции_Модуль.РассчитатьЗначение("Контрагент_Роль",								СтруктураИниФайла);	
	Организация_Роль		= Функции_Модуль.РассчитатьЗначение("Организация_Роль", 							СтруктураИниФайла);
	КонтрагентСопоставления	= Функции_Модуль.РассчитатьЗначение("КонтрагентДляСопоставленияНоменклатуры_Роль",	СтруктураИниФайла);

	Если ВложениеСБИС.Свойство("НоменклатураКодКонтрагента") Тогда
		
		// Какой-то костыль, непонятно для чего оно нужно, совместимость.
		ПутьКонтрагента = Файл_Шаблон_Модуль.СтруктураФайла_Получить(СтруктураФайла, "ПутьКОсновнымДанным") + ВложениеСБИС.Получатель;
		
	КонецЕсли;

	Если СтруктураИниФайла.Свойство("мСторона", мСторонаДокумента) Тогда
		
		// Есть узлы мСтороны для рассчёта данных сторон
		УзелМСторона	= Неопределено;
		Если Не Контрагент_Роль = Неопределено	
			И	мСторонаДокумента.Свойство(Контрагент_Роль, УзелМСторона) Тогда
			
			// Заполнить синонимы в обе стороны
			ДанныеСтруктурыФайла.Синонимы.Вставить("Контрагент",	Контрагент_Роль);
			ДанныеСтруктурыФайла.Синонимы.Вставить(Контрагент_Роль, "Контрагент");
			Если УзелМСторона.Сторона.Свойство("Данные") Тогда
				
				ПутьКонтрагента = УзелМСторона.Сторона.Данные;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Организация_Роль = Неопределено	
			И	мСторонаДокумента.Свойство(Организация_Роль, УзелМСторона) Тогда
			
			// Заполнить синонимы в обе стороны
			ДанныеСтруктурыФайла.Синонимы.Вставить("Организация",		Организация_Роль);
			ДанныеСтруктурыФайла.Синонимы.Вставить(Организация_Роль,	"Организация");

			Если УзелМСторона.Сторона.Свойство("Данные") Тогда
				
				ПутьОрганизации = УзелМСторона.Сторона.Данные;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не КонтрагентСопоставления = Неопределено	
			И	мСторонаДокумента.Свойство(КонтрагентСопоставления, УзелМСторона) Тогда
			
			// Заполнить синонимы в обе стороны
			Если УзелМСторона.Сторона.Свойство("Данные") Тогда
				
				ПутьСтороныСопоставления = УзелМСторона.Сторона.Данные;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыИни.Направление = "Исходящий" Тогда
			
			КонтрагентСопоставления		= Организация_Роль;
			ПутьСтороныСопоставления	= ПутьОрганизации;
			
		Иначе
			
			КонтрагентСопоставления		= Контрагент_Роль;
			ПутьСтороныСопоставления	= ПутьКонтрагента;
			
		КонецЕсли;
		
	КонецЕсли;

	ДанныеСтруктурыФайла.Синонимы.Вставить("Контрагент_ПутьКДанным",	ПутьКонтрагента);
	ДанныеСтруктурыФайла.Синонимы.Вставить("Организация_ПутьКДанным",	ПутьОрганизации);
	ДанныеСтруктурыФайла.Синонимы.Вставить("Сопоставление_ПутьКДанным",	ПутьСтороныСопоставления);
	//ДанныеСтруктурыФайла.Синонимы.Вставить("Сопоставление",				КонтрагентСопоставления);
	//ДанныеСтруктурыФайла.Синонимы.Вставить(КонтрагентСопоставления,		"Сопоставление");
	
	Если Не ПутьКонтрагента = Неопределено Тогда
		
		ДанныеСтруктурыФайла.Поля.Вставить("Контрагент", Функции_Модуль.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла));
		
	КонецЕсли;
		
	Если Не ПутьОрганизации = Неопределено Тогда
		
		ДанныеСтруктурыФайла.Поля.Вставить("Организация", Функции_Модуль.РассчитатьЗначениеИзСтруктуры(ПутьОрганизации, СтруктураФайла));
		
	КонецЕсли;
		
	Если Не ПутьСтороныСопоставления = Неопределено Тогда
		
		ДанныеСтруктурыФайла.Поля.Вставить("Сопоставление", Функции_Модуль.РассчитатьЗначениеИзСтруктуры(ПутьСтороныСопоставления, СтруктураФайла));
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВложениеСБИС_УстановитьРаздел_мДокумент(ВложениеСБИС, ПодобранныйИни, ДопПараметры)
	Перем  ИниДокументВыбран, СписокМДокумент;	

	СтруктураФайла		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
	ПараметрыИни		= ВложениеСБИС_Получить(ВложениеСБИС, "ПараметрыДанныхВложения");
	СбисОбщиеФункции	= ПолучитьЗначениеПараметраСбис("ФункцииДокументов");
	ПолныйСоставПакета	= ДопПараметры.СоставПакета;
	
	Если ПодобранныйИни = Неопределено Тогда
		
		//Нет ини для загрузки
		ПараметрыОбновить = Новый ФиксированнаяСтруктура("Статус", "Не поддерживается");
		ВложениеСБИС_Обновить(ВложениеСБИС, ПараметрыОбновить, Новый ФиксированнаяСтруктура("Ини", Ложь));
		Возврат;
		
	ИначеЕсли Не ПодобранныйИни.Свойство("мДокумент", СписокМДокумент) Тогда
		
		// Ини есть, но в нём нет мДокумент
		ПараметрыОбновить = Новый ФиксированнаяСтруктура("Статус", "Не поддерживается");
		ВложениеСБИС_Обновить(ВложениеСБИС, ПараметрыОбновить, Новый ФиксированнаяСтруктура("Ини", Истина));
		Возврат;
		
	КонецЕсли;
	
	Если Не ВложениеСБИС.Свойство("СтруктураИниФайла") Тогда
		
		ВложениеСБИС.Вставить("СтруктураИниФайла", Новый Структура);
		
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ПодразделИни") Тогда
		
		// Устанавливается конкретно указанный мДокумент
		Если Не СписокМДокумент.Свойство(ДопПараметры.ПодразделИни, ИниДокументВыбран) Тогда
			
			СообщениеОшибки = "В файле настроек отсутствует настройка " + ИниДокументВыбран;
			ОшибкаВыбораНастройки = НовыйСбисИсключение(, "МодульОбъектаКлиент.ВложениеСБИС_УстановитьИниЗагрузки", 779,, СообщениеОшибки);
			ВызватьИсключение(СбисИсключение_Представление(ОшибкаВыбораНастройки));
			
		КонецЕсли;

		ИмяПодразделИни = ДопПараметры.ПодразделИни;
		
	Иначе
		
		Файл_Формат			= ПараметрыИни.Тип;
		Файл_ВерсияФормата	= ПараметрыИни.Версия;
		фрмПольз = НайтиФункциюСеансаОбработки("ОпределитьТипЗагружаемогоДокумента", "Файл_" + Файл_Формат + "_" + Файл_ВерсияФормата);
		Если фрмПольз = Ложь Тогда		

			// Выбор раздела файла настроек для загрузки
			РегламентВоВложении	= СбисОбщиеФункции.РассчитатьЗначениеИзСтруктуры("Файл.Документ.Параметр.ДокументВидОперации", СтруктураФайла); 
			РегламентНаПакете	= ПолныйСоставПакета.Регламент.Название; 
			
			ДокументПриоритетЗагрузки = Новый СписокЗначений;
			
			Для Каждого ИниДокумент Из СписокМДокумент Цикл
				
				РеглНаПакетеСовпал = Ложь; 
				Если ИниДокумент.Значение.Свойство("РеестрСБИС_Операция") Тогда
					РегламентПакет_мДокумент	= СбисОбщиеФункции.РассчитатьЗначение("РеестрСБИС_Операция", ИниДокумент.Значение);
					РеглНаПакетеСовпал			= НРег(РегламентПакет_мДокумент) = НРег(РегламентНаПакете);
				КонецЕсли;
				
				//Если указан документ по-умолчанию, тогда берём его и останавливает подбор
				ДокументПоУмолчанию = СбисОбщиеФункции.РассчитатьЗначение("ДокументПоУмолчанию", ИниДокумент.Значение);
				ДокументПоУмолчанию =	ДокументПоУмолчанию = "1"
									Или	ДокументПоУмолчанию = Истина;
				
				РеглНаВложенииСовпал = Ложь;
				Если ИниДокумент.Значение.Свойство("ДокументВидОперации") Тогда
					
					Если ИниДокумент.Значение.ДокументВидОперации.Свойство("Данные") Тогда
						РегламентВоВложении = СбисОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниДокумент.Значение.ДокументВидОперации.Данные, СтруктураФайла);
					КонецЕсли;
					
					РегламентВложение_мДокумент = СбисОбщиеФункции.РассчитатьЗначение("ДокументВидОперации", ИниДокумент.Значение);
					Если ЗначениеЗаполнено(РегламентВложение_мДокумент) Тогда
						РегламентВложение_мДокумент = СбисОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(РегламентВложение_мДокумент,",");
						Для Каждого Регл Из РегламентВложение_мДокумент Цикл
							Если ( НРег(Регл) = НРег(РегламентВоВложении) )  Тогда
								РеглНаВложенииСовпал = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если		РеглНаПакетеСовпал И РеглНаВложенииСовпал Тогда
					
					//Регламент на пакете и вложении совпадают - наивысший приоритет
					ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ, 0);
					
				ИначеЕсли	РеглНаВложенииСовпал Тогда
					
					ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ, 1);
					
				ИначеЕсли	РеглНаПакетеСовпал Тогда
					
					ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ, 2);

				ИначеЕсли	ДокументПоУмолчанию Тогда
					
					ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ, 3);
					
				Иначе

					ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ, 4);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДокументПриоритетЗагрузки.Количество() Тогда
				ДокументПриоритетЗагрузки.СортироватьПоПредставлению();
				ИниДокументВыбран = ПодобранныйИни.мДокумент[ДокументПриоритетЗагрузки[0].Значение];
				ИмяПодразделИни = ДокументПриоритетЗагрузки[0].Значение;
			КонецЕсли;
			
		Иначе
			
			ПараметрыОпределенияТипа = Новый Структура("СоставПакета, Вложение, Ини, Кэш");
			ПараметрыОпределенияТипа.СоставПакета	= ПолныйСоставПакета;
			ПараметрыОпределенияТипа.Вложение		= ВложениеСБИС;
			ПараметрыОпределенияТипа.Ини			= ПодобранныйИни;
			ПараметрыОпределенияТипа.Кэш			= ПолучитьТекущийЛокальныйКэш();
			
			ТипДок = фрмПольз.ОпределитьТипЗагружаемогоДокумента(ПараметрыОпределенияТипа);
			ИниДокументВыбран = ПодобранныйИни.мДокумент[ТипДок];
			ИмяПодразделИни = ТипДок;
			
		КонецЕсли;
				
	КонецЕсли;

	Изменения = Новый ФиксированнаяСтруктура("ТекущийПодразделИни", ИмяПодразделИни);
	ВложениеСБИС_Обновить(ВложениеСБИС, Изменения);
 	ВложениеСБИС.СтруктураИниФайла = СбисОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ИниДокументВыбран);
	
КонецПроцедуры	

// Процедура - удаляет выбранные узлы из структуры данных (разобранные данные файла, или прочитанные данные документа)
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - Структура, вложение в которое устанавливаем параметры
//  УдаляемыеУзлы - Массив	 - Путь к удаляемым узлам в виде строки, через "."
//
&НаКлиенте
Процедура ВложениеСБИС_УдалитьУзлыИзСтруктурыДанных(ВложениеСБИС, УдаляемыеУзлы) Экспорт 
	
	ДанныеОчистить = МодульОбъектаКлиент().ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
	Если ДанныеОчистить = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МодульФункции = ПолучитьЗначениеПараметраСбис("ФункцииДокументов");
	// Удаление лишнего
	Для Каждого ПутьУзла Из УдаляемыеУзлы Цикл
		
		РазобранныйПутьУзла = Новый СписокЗначений;
		РазобранныйПутьУзла.ЗагрузитьЗначения(МодульФункции.РазбитьСтрокуВМассивНаКлиенте(ПутьУзла, "."));
		
		УдалитьУзелИзСтруктурыДанных(ДанныеОчистить, РазобранныйПутьУзла);

	КонецЦикла;
	
	
КонецПроцедуры

// Процедура - Заполняет ВложениеСБИС для открытия на форме просмотра
//
// Параметры:
//  ВложениеСБИС - 	 - 
//  ДопПараметры - 	 - 
//
&НаКлиенте
Процедура ВложениеСБИС_РазобратьДляПросмотра(ВложениеСБИС, ДопПараметры)
	
	ПараметрыДляПросмотра = Новый Структура;
	
	ВложениеСБИС.Вставить("Просмотр", ПараметрыДляПросмотра);
	
	ПараметрыДляПросмотра.Вставить("ПараметрыКонтрагент", Новый Структура("ПоказатьСозданиеКарточки", Ложь));
	
КонецПроцедуры

// Процедура - заполняет текущий экземпляр класса от входных данных
//
// Параметры:
//  ВложениеСБИС	 - Структура	- (О) экземпляр класса
//  ДанныеЗаполнить	 - Структура	- (О) входные данные заполнить
//  КлючЗаполнить	 - Строка	 	- (Н) ключ входных данных, если это не класс (невозможно определить что за класс)
//
&НаКлиенте
Функция ВложениеСБИС_ДанныеФайла(ВложениеСБИС) 
	
	ИнтеграцияМодуль	= ПолучитьЗначениеПараметраСбис("Интеграция");
	ФайлЗначение		= ВложениеСБИС_Получить(ВложениеСБИС, "Файл");
	Попытка
		Если ВложениеСБИС_Получить(ВложениеСБИС, "Зашифрован") Тогда
			
			XMLФайла = ИнтеграцияМодуль.РасшифроватьФайлВложения(ФайлЗначение);
			
		Иначе
			
			XMLФайла = ИнтеграцияМодуль.ПрочитатьФайлВложения(ФайлЗначение);
			
		КонецЕсли;
	Исключение
		
		ДампОшибки = Новый Структура("ФайлЗначение", ФайлЗначение);
		ОшибкаЗаписиДанных = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_ДанныеФайла",,,"Не удалось прочитать данные файла.", ДампОшибки);
		ВызватьИсключение СбисИсключение_Представление(ОшибкаЗаписиДанных);
		
	КонецПопытки;
	
	Возврат XMLФайла;

КонецФункции

// Процедура - заполняет текущий экземпляр класса от входных данных
//
// Параметры:
//  ВложениеСБИС	 - Структура	- (О) экземпляр класса
//  ДанныеЗаполнить	 - Структура	- (О) входные данные заполнить
//  КлючЗаполнить	 - Строка	 	- (Н) ключ входных данных, если это не класс (невозможно определить что за класс)
//
&НаКлиенте
Процедура ВложениеСБИС_Заполнить(ВложениеСБИС, ДанныеЗаполнить, КлючЗаполнить="ВложениеСБИС") Экспорт 
	Перем Документы1СВложения;
	
	Если КлючЗаполнить = "ВложениеСБИС" Тогда
		
		ЗаполнитьЗначенияСвойств(ВложениеСБИС, ДанныеЗаполнить);
		
		Если		ВложениеСБИС.Документы1С.Количество() Тогда
			
			//Создать копию списка оснований, чтобы разорвать связь со старым классом
			Документы1СВложенияКопия = Новый СписокЗначений;
			Документы1СВложенияКопия.ЗагрузитьЗначения(ВложениеСБИС.Документы1С.ВыгрузитьЗначения());
			ВложениеСБИС.Документы1С = Документы1СВложенияКопия;
			
		ИначеЕсли	ДанныеЗаполнить.Свойство("Документ1С") Тогда
			
			ВложениеСБИС_Заполнить(ВложениеСБИС, ДанныеЗаполнить.Документ1С, "Документ1С")
			
		КонецЕсли;
			
		//Необязательные поля
		Если	ДанныеЗаполнить.Свойство("ТребуетПодписания") Тогда
			
			ВложениеСБИС.Вставить("ТребуетПодписания", ДанныеЗаполнить.ТребуетПодписания);
			
		КонецЕсли; 
		
		//Необязательные поля
		Если	ДанныеЗаполнить.Свойство("ТребуетсяПриложить") Тогда
			
			ВложениеСБИС.Вставить("ТребуетсяПриложить", ДанныеЗаполнить.ТребуетсяПриложить);
			
		КонецЕсли; 
		
		Если	ДанныеЗаполнить.Свойство("ИспользоватьГенератор") Тогда
			
			ВложениеСБИС.Вставить("ИспользоватьГенератор", ДанныеЗаполнить.ИспользоватьГенератор);
			
		КонецЕсли;

		
		Если	ДанныеЗаполнить.Свойство("НоменклатураКодКонтрагента") Тогда
			
			ВложениеСБИС.Вставить("НоменклатураКодКонтрагента", ДанныеЗаполнить.НоменклатураКодКонтрагента);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("ДопПоля") Тогда
			
			ВложениеСБИС.Вставить("ДопПоля", ДанныеЗаполнить.ДопПоля);
			
		КонецЕсли;
		
		Если	ДанныеЗаполнить.Свойство("Провести") Тогда
			
			ВложениеСБИС.Вставить("Провести", ДанныеЗаполнить.Провести);
			
		КонецЕсли;
	ИначеЕсли КлючЗаполнить = "Структура" Тогда
		
		СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ВложениеСБИС);
		
	ИначеЕсли КлючЗаполнить = "Документ1С" Тогда
		
		Если ВложениеСБИС.Документы1С.НайтиПоЗначению(ДанныеЗаполнить) = Неопределено Тогда
			ВложениеСБИС.Документы1С.Добавить(ДанныеЗаполнить);
		КонецЕсли;
		
	Иначе
		ВложениеСбис.Параметры.Вставить(КлючЗаполнить, ДанныеЗаполнить);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - заполняет текущий экземпляр класса от входных данных
//
// Параметры:
//  ВложениеСБИС	 - Структура	- (О) экземпляр класса
//  ДопПараметры	 - Структура	- (О) доп. параметры заполнить
//
&НаКлиенте
Процедура ВложениеСБИС_Записать(ВложениеСБИС, ДопПараметры) Экспорт 
	Перем СтруктураСвойств, РежимЗаписиВложения;
	
	Если Не ДопПараметры.Свойство("СтруктураСвойств", СтруктураСвойств) Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("Режим", РежимЗаписиВложения) Тогда
		РежимЗаписиВложения = "СБИС";
	КонецЕсли;
	
	Кэш				= ПолучитьТекущийЛокальныйКэш();
	СоставПакета	= ДопПараметры.СоставПакета;
	
	Если РежимЗаписиВложения = "Сопоставление" Тогда
		//Дополним данными пакета и вложения
		СтруктураСвойств.Вставить("ДокументСБИС_Ид",			СоставПакета.Идентификатор);
		СтруктураСвойств.Вставить("ДокументСБИС_Статус",		СоставПакета.Состояние.Название);
		СтруктураСвойств.Вставить("ДокументСБИС_ИдВложения",	ВложениеСБИС.Идентификатор);

		ДопПараметрыАккаунта = Новый Структура("ИдАккаунта", Кэш.Интеграция.ПолучитьИдТекущегоАккаунта(Кэш));
		ФормаЗаписи = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС", Кэш.ФормаРаботыСоСтатусами, "", Кэш);
		Если ДопПараметры.Свойство("Документ1С") Тогда
			ФормаЗаписи.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств,
													   ДопПараметры.Документ1С,
													   Кэш.Ини.Конфигурация,
													   Кэш.Парам.КаталогНастроек,
													   ДопПараметрыАккаунта);  
													   
			ВложениеСБИС_ЗаписатьСостояниеЭД(ДопПараметры.Документ1С, СоставПакета, ВложениеСБИС);
			
		Иначе
			
			Для Каждого Документ1С Из ВложениеСБИС_Получить(ВложениеСБИС, "Документы1С") Цикл
				
				ФормаЗаписи.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств,
														   Документ1С,
														   Кэш.Ини.Конфигурация,
														   ПолучитьЗначениеПараметраСбис("КаталогНастроек"),
														   ДопПараметрыАккаунта);  
														   
				ВложениеСБИС_ЗаписатьСостояниеЭД(Документ1С, СоставПакета, ВложениеСБИС);
				
			КонецЦикла;
			
		КонецЕсли;
				
	Иначе
		
		ОшибкаЗаписи = НовыйСбисИсключение(735, "МодульОбъектаКлиент.ВложениеСБИС_Записать",,, "Режим записи " + РежимЗаписиВложения + " не определен.");
		ВызватьИсключение СбисИсключение_Представление(ОшибкаЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВложениеСБИС_ЗаписатьСостояниеЭД(Документ1С, СоставПакета, ВложениеСБИС)
	
	Кэш	= ПолучитьТекущийЛокальныйКэш();   
	
	Если ПолучитьЗначениеПараметраСбис("СостояниеЭД") Тогда
													   
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		ФормаЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска); 
		
		Если Не ФормаЭД = Ложь Тогда
			СтруктураФайла = ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
			ФормаЭД.ДублироватьСостояние(СоставПакета, Документ1С, ВложениеСБИС.XMLДокумента, СтруктураФайла);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция - получить значение по ключу от вложения
//
// Параметры:
//  ВложениеСбис			 - ВложениеСБИС	 - экземпляр, от которого надо получить значение
//  КлючПараметраПолучить	 - Строка		 - что хотим получить ПараметрыДанныхВложения, УстановленныйПодразделИни
//  ДопПараметры			 - Структура	 - Расширение
// 
// Возвращаемое значение:
//  Произвольный - Найденное значение. Неопределено, если ничего
//
&НаКлиенте
Функция ВложениеСБИС_Получить(ВложениеСбис, КлючПараметраПолучить, ДопПараметры = Неопределено) Экспорт
	Перем Результат, лПромежуточноеЗначение;
	
	Если		КлючПараметраПолучить = "ПараметрыИни"
			Или	КлючПараметраПолучить = "ПараметрыДанныхВложения" Тогда
		
		// Возвращает параметры для чтения файла настройки по текущему вложению
		Результат = Новый Структура("Версия, Направление, Тип");
		
		Если	Не ВложениеСбис.Свойство("ФорматДляЗагрузки",	Результат.Тип)
			И	Не ВложениеСбис.Свойство("Тип",					Результат.Тип) Тогда
			
			НазваниеВложение = ВложениеСБИС_Получить(ВложениеСбис, "Название");
			Если		СтрЧислоВхождений(НРег(НазваниеВложение), "накладная") Тогда
				Результат.Тип = "ЭДОНакл";
			ИначеЕсли	СтрЧислоВхождений(НРег(НазваниеВложение), "фактура")
					И	СтрЧислоВхождений(НРег(НазваниеВложение), "счет")	Тогда
				Результат.Тип = "СчФктр";
			ИначеЕсли	СтрЧислоВхождений(НРег(НазваниеВложение), "акт №") Тогда
				Результат.Тип = "АктВр";
			ИначеЕсли	СтрЧислоВхождений(НРег(НазваниеВложение), "счет на")
					Или	СтрЧислоВхождений(НРег(НазваниеВложение), "заказ")	Тогда
				Результат.Тип = "Заказ";
			Иначе
				
				ОшибкаОпределенияИни = НовыйСбисИсключение(, "МодульОбъектаКлиент.ВложениеСБИС_Получить", 779, , "Неизвестный тип вложения " + НазваниеВложение);
				ВызватьИсключение СбисИсключение_Представление(ОшибкаОпределенияИни);
				
			КонецЕсли;
			
		КонецЕсли;
		Результат.Тип = СтрЗаменить(Результат.Тип, "-", "");

		Если	Не ВложениеСбис.Свойство("Направление", Результат.Направление)	Тогда
			
			Результат.Направление = "Входящий";
			
		КонецЕсли;
		
		Если	ВложениеСбис.Свойство("ВерсияФорматаДляЗагрузки", Результат.Версия)	Тогда
			
			Результат.Версия = СтрЗаменить(Результат.Версия, ".", "_");
			
		Иначе
			
			Результат.Версия = "3_01";
			
		КонецЕсли;
		
	ИначеЕсли КлючПараметраПолучить = "СтруктураФайла" Тогда
		
		// Считаем структурой файла структуру документа по данным 1С.
		Если	Не ВложениеСбис.Свойство("СтруктураФайла",		Результат)
			И	Не ВложениеСбис.Свойство("СтруктураДокумента",	Результат) Тогда 
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли	КлючПараметраПолучить = "Название" Тогда
		
		Если Не ВложениеСбис.Свойство("Название", Результат) Тогда 
			
			СтруктураФайла = ВложениеСБИС_Получить(ВложениеСбис, "СтруктураФайла");
			Если Не СтруктураФайла = Неопределено Тогда
			
				Результат = Результат.Файл.Имя;
				
			Иначе
				
				Результат = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли	КлючПараметраПолучить = "Идентификатор" Тогда
		
		Если	Не ВложениеСбис.Свойство("Идентификатор", Результат)
			Или	Не ЗначениеЗаполнено(Результат) Тогда 
			
			Результат = ВложениеСБИС_Получить(ВложениеСбис, "Название");
			
        КонецЕсли;

	ИначеЕсли	КлючПараметраПолучить = "ТипВерсияВложения" Тогда

		ПараметрыИни	= ВложениеСБИС_Получить(ВложениеСбис, "ПараметрыИни");
		Результат		= ПараметрыИни.Тип + "_" + ПараметрыИни.Версия;
		Результат		= СтрЗаменить(Результат, ".", "_");
 
	ИначеЕсли	КлючПараметраПолучить = "ФайлИни" Тогда
		
		//Возвращает полную инишку для обработки вложения
		ИмяУстановленнойИни = ВложениеСБИС_Получить(ВложениеСБИС, "ИмяИни");
		
		Если ИмяУстановленнойИни = Неопределено Тогда
			
			Возврат ИниПоПараметрам(Новый Структура("Вложение", ВложениеСБИС));
			
		КонецЕсли;
		
		Возврат ИниПоПараметрам(ИмяУстановленнойИни);

	ИначеЕсли	КлючПараметраПолучить = "УстановленныйПодразделИни"
			Или	КлючПараметраПолучить = "СтруктураИниФайла" Тогда
		
		//Возвращает подраздел инишки вложения, который на текущий момент установлен для обработки
		ВложениеСбис.Свойство("СтруктураИниФайла", Результат);

	ИначеЕсли	КлючПараметраПолучить = "ПодходящийДокумент" Тогда
		
		// Возвращает подходищий по данным и установленному подразделу инишки документ
		Возврат ВложениеСБИС_ПодходящийДокумент(ВложениеСбис, ДопПараметры);
						
	ИначеЕсли	КлючПараметраПолучить = "Зашифрован" Тогда
		
		Возврат ВложениеСбис.Зашифрован = "Да";
		
	ИначеЕсли	КлючПараметраПолучить = "ДанныеФайла" Тогда
		
		Возврат ВложениеСБИС_ДанныеФайла(ВложениеСбис);
		
	ИначеЕсли	КлючПараметраПолучить = "СторонаПоРоли" Тогда
		
		Возврат ВложениеСБИС_СторонаПоРоли(ВложениеСбис, ДопПараметры);
		
	ИначеЕсли	КлючПараметраПолучить = "Поля1С" Тогда
		РедактируемыеПоля = Неопределено;	
		Если Не ВложениеСБИС.Параметры.Свойство("РедактируемыеПоля", РедактируемыеПоля) Тогда
			
			// При первичном расчете полей, не должно браться от подобраного объекта. Поля пересчитаются, когда документ будет найден
			РедактируемыеПоля = ВложениеСБИС_Поля1С(ВложениеСбис, ДопПараметры);
			ВложениеСБИС.Параметры.Вставить("РедактируемыеПоля", РедактируемыеПоля);
			
			Если	Не	ДопПараметры = Неопределено
				И		ДопПараметры.Свойство("Режим")
				И		ДопПараметры.Режим = "Разбор" Тогда
				
				РедактируемыеПоля.Документ = ВложениеСБИС_Поля1С_Документ(ВложениеСБИС, ДопПараметры);
				Если	ЗначениеЗаполнено(РедактируемыеПоля.Документ.Значение)
					И	ВложениеСБИС.Параметры.ВозможноРедактироватьДокумент Тогда
					
					// Обновить поля 1С уже по найденному документу, т.к. мы его меняем.
					СтруктураОбновить = Новый Структура;
					СтруктураОбновить.Вставить("Документ", РедактируемыеПоля.Документ.Значение);
					РедактируемыеПоля.Документ.Значение = Неопределено;
						
					ДопПараметрыВложения = Новый ФиксированнаяСтруктура("СоставПакета", ДопПараметры.СоставПакета);
					ВложениеСБИС_Обновить(ВложениеСбис, Новый Структура("Поля1С", СтруктураОбновить), ДопПараметрыВложения);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// После обновления с учетом найденного документа, требуется переопределить поля
			РедактируемыеПоля = ВложениеСБИС.Параметры.РедактируемыеПоля;
			
		КонецЕсли;
		
		Возврат РедактируемыеПоля;
		
	ИначеЕсли	КлючПараметраПолучить = "РассчитанныйОбъект" Тогда
		
		Возврат ВложениеСБИС_РассчитанныйОбъект(ВложениеСбис, ДопПараметры);
		
	ИначеЕсли	КлючПараметраПолучить = "ТипОбъекта" Тогда
		
		Возврат ВложениеСБИС_Получить_ТипОбъекта(ВложениеСбис, ДопПараметры);

	ИначеЕсли	КлючПараметраПолучить = "Статус" Тогда
		
		Если ВложениеСбис.Свойство("СтатусыВложения") Тогда
			ВложениеСбис.СтатусыВложения.Свойство("Общий", Результат);
		КонецЕсли;
		
	ИначеЕсли КлючПараметраПолучить = "Модифицирован" Тогда
		
		Если НЕ ВложениеСбис.Свойство(КлючПараметраПолучить, Результат) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли КлючПараметраПолучить = "ТипВложения" Тогда 			

		// ЭДО тип вложения - СчФктр, ЭдоНакл, ЭдоСч и пр.
		Если Не ВложениеСбис.Свойство("Тип", Результат)
				Или	Не ЗначениеЗаполнено(Результат) Тогда 
				
				Результат = ВложениеСБИС_Получить(ВложениеСбис, "ФорматФайлаВложения");
						
		КонецЕсли;   
		
	ИначеЕсли КлючПараметраПолучить = "ФорматФайлаВложения" Тогда 			

		СтруктураФайла = ВложениеСБИС_Получить(ВложениеСбис, "СтруктураФайла");	   
		
		Если ЗначениеЗаполнено(СтруктураФайла) Тогда
			
			// Пока как костыль берём формат от структуры файла, если по какой-то причине не заполнено на вложении. 
			Результат = СтруктураФайла.Файл.Формат;
			
		КонецЕсли;
		
	ИначеЕсли КлючПараметраПолучить = "СтруктураРучныхПравок" Тогда
		
		Результат = Новый Структура;
		Если ВложениеСбис.Параметры.Свойство("РедактируемыеПоля") Тогда
			
			Для Каждого РучноеПоле Из ВложениеСбис.Параметры.РедактируемыеПоля Цикл
				
				Если	    РучноеПоле.Значение = Неопределено
					Или	Не	РучноеПоле.Значение.Свойство("Путь")
					Или		РучноеПоле.Значение.Путь = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Результат.Вставить(РучноеПоле.Значение.Путь, РучноеПоле.Значение.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ВложениеСбис.Свойство(КлючПараметраПолучить, Результат);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ВложениеСБИС_ПодходящийДокумент(ВложениеСбис, ДопПараметры)

	Перем РежимПодбора;
	
	Если Не ДопПараметры.Свойство("Режим", РежимПодбора) Тогда
		
		РежимПодбора = "Документ";
		
	КонецЕсли;
	
	Если	РежимПодбора = "Документ"
		Или	РежимПодбора = "Разбор" Тогда
		Если ДопПараметры.Свойство("ПодходящийДокумент") Тогда
			
			// Не надо выполнять подбор, есть документ.
			Возврат ДопПараметры.ПодходящийДокумент;
			
		КонецЕсли;
		
		ПараметрыПросмотр = Неопределено;
		Если		ВложениеСбис.Параметры.Свойство("РедактируемыеПоля", ПараметрыПросмотр)
			И	Не	ПараметрыПросмотр = Неопределено
			И	Не	ПараметрыПросмотр.Документ = Неопределено
			И	Не	ПараметрыПросмотр.Документ.Значение = Неопределено Тогда
			
			// При пустой ссылке
			// Есть определенный вручную документ
			Возврат ПараметрыПросмотр.Документ.Значение;
			
		КонецЕсли;
		
		Если ВложениеСбис.Параметры.ВозможноРедактироватьДокумент Тогда
			//Получить документ через узел Документ, если описан поиск ссылки, а не тип
			Документ_Модуль		= ПолучитьФормуОбработки("Документ_Шаблон");
			ЛокальныйКэш		= ПолучитьТекущийЛокальныйКэш();
			
			КонтекстДляРассчитать	= Новый Структура("Переменные, Документ, Ини, Вложение, СоставПакета", Новый Структура, Новый Структура);
			КонтекстДляРассчитать.Ини			= ВложениеСБИС_Получить(ВложениеСбис, "УстановленныйПодразделИни");
			КонтекстДляРассчитать.Вложение		= ВложениеСБИС;
			КонтекстДляРассчитать.СоставПакета	= ДопПараметры.СоставПакета;
			
			ИмяУзляРасчётаТипа	= "Документ";
			ЗначениеУзлаРасчёта	= Неопределено;
			
			ЗначениеДокумент = Документ_Модуль.РассчитатьПараметрИни(ЛокальныйКэш, ИмяУзляРасчётаТипа, ЗначениеУзлаРасчёта, КонтекстДляРассчитать, Новый Структура("ВызовСервера", Истина));
			Если ЗначениеЗаполнено(ЗначениеДокумент)
				И	Не ТипЗнч(ЗначениеДокумент) = Тип("Строка") Тогда
				
				Возврат ЗначениеДокумент;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если	Не	ДопПараметры.Свойство("ИскатьДокумент")
			Или		ДопПараметры.ИскатьДокумент Тогда
			
			ДокументыПодходят = ВложениеСБИС_НайтиПодходящиеДокументы(ВложениеСбис, ДопПараметры);
			Если ДокументыПодходят.Количество() Тогда
				
				Возврат ДокументыПодходят[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОшибкаПоиска = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_ПодходящийДокумент");
		// Может быть ошибка поиска документа, нет узлов для подбора. Игнорировать.
		Если Не ОшибкаПоиска.code = 760 Тогда
			ВызватьИсключение СбисИсключение_Представление(ОшибкаПоиска);
		КонецЕсли;
		
	КонецПопытки;
	
	РежимПоиска = Неопределено;
	//Проверить подходящий документ на пакете.
	ДопПараметры.Свойство("Режим", РежимПоиска);
	ПараметрыПоиска = Новый ФиксированнаяСтруктура("ВложениеСБИС, Режим", ВложениеСБИС, РежимПоиска);
	Возврат СоставПакета_Получить(ДопПараметры.СоставПакета, "ДокументДляВложения", ПараметрыПоиска);
		
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДокумента1СПоПакетуСбис(ОписаниеПроверки, ДопПараметры) Экспорт

	Кэш							= ГлавноеОкно.Кэш;
	Вложение					= ОписаниеПроверки.Вложение;
	СоставПакета				= ОписаниеПроверки.СоставПакета;
	ДанныеДокумента				= Новый Структура();
	СоответствиеДокументДанные	= Новый Соответствие;	

	Если ОписаниеПроверки.Свойство("Документ1С") Тогда
		ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1С, СоответствиеДокументДанные)
	Иначе
		//Если документа нет, то проверить на вложении
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, ОписаниеПроверки.Документ1ССсылка, СоответствиеДокументДанные)
		КонецЦикла;
	КонецЕсли;
	Если Не СоответствиеДокументДанные.Количество() Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден файл для формирования расхождения " + Вложение.Название, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис");
	КонецЕсли;
	НовыйСоставПакета = Новый СписокЗначений;
	НовыйСоставПакета.Добавить(ОписаниеПроверки.Документ1С);
	
	Контекст = Новый Структура("МассивПакетов", Новый Массив);
	//Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	Кэш.ОбщиеФункции.ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, НовыйСоставПакета, Кэш.Парам);
	Если	Не Кэш.ОбщиеФункции.ОбработатьДанныеДокументов1С(Кэш, Контекст, НовыйСоставПакета, СоответствиеДокументДанные)
		Или	Не ЗначениеЗаполнено(Контекст.МассивПакетов) Тогда
		ВызватьСбисИсключение(745, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис",,, "Документ " + НовыйСоставПакета[0].Значение + " не обработан");
	КонецЕсли;  
                 
	ДанныеРезультат = Контекст.МассивПакетов[0];
	Если	Не ДанныеРезультат.Количество()
		Или Не ЗначениеЗаполнено(ДанныеРезультат)
		Или	Не ДанныеРезультат.Свойство("Вложение")
		Или	Не ДанныеРезультат.Вложение.Количество() Тогда;                       
		ВызватьСбисИсключение(745, "МодульОбъектаКлиент.ПолучитьСтруктуруДокумента1СПоПакетуСбис",,, "Не удалось сформировать " + Вложение.Тип + " от " + НовыйСоставПакета[0].Значение);
	КонецЕсли;
	
	Возврат ДанныеРезультат.Вложение[0].СтруктураДокумента.Файл.Документ;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьСоответствиеРасхожденияДокумент1С_Вложение(Вложение, Документ1ССсылка, СоответствиеДокументДанные)
	
	ВходящийКонтекстРасчета = Новый Структура;
	мФайлДляРасчета = Найти_мФайлПоВложению(Вложение, Документ1ССсылка);                
	
	Если мФайлДляРасчета <> Неопределено Тогда
		СравнениеНеНужно = ГлавноеОкно.Кэш.Общиефункции.РассчитатьЗначение("СравнениеДокументаНеПоддерживается",мФайлДляРасчета.Значение);
		Если СравнениеНеНужно = Истина Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеИниДокумента = Новый Структура;
	ЗначениеИниДокумента.Вставить("мФайл",											Новый Структура(мФайлДляРасчета.Ключ, мФайлДляРасчета.Значение));
	//ЗначениеИниДокумента.Вставить("Формат2019",										Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ФорматУКД2020",									Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
	//ЗначениеИниДокумента.Вставить("ВходящийКонтекст",								Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
	//ЗначениеИниДокумента.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, ГлобальныйКэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	
	ИниДокумента = СтрПолучитьСтроку(СтрЗаменить(ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.ПолучитьИмяИСПоСсылке(Документ1ССсылка), ".", Символы.ПС), 2);
	СоответствиеДокументДанные.Вставить(Документ1ССсылка, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,ЗначениеИниДокумента)); 	

КонецПроцедуры
	
&НаКлиенте
Функция ВложениеСБИС_Получить_ТипОбъекта(ВложениеСБИС, ДопПараметры)
	Перем СтруктураИниФайла, ТипПолный;
	
	Если	Не ВложениеСБИС.Параметры.Свойство("ПолныйТипОбъекта", ТипПолный) Тогда
		
		Если Не ДопПараметры.Свойство("Раздел_мДокумент", СтруктураИниФайла) Тогда
			
			СтруктураИниФайла = ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
			
		КонецЕсли;

		Документ_Модуль		= ПолучитьФормуОбработки("Документ_Шаблон");
		ЛокальныйКэш		= ПолучитьТекущийЛокальныйКэш();

		//Получить документ
		КонтекстДляРассчитать	= Новый Структура("Переменные, Документ, Ини, Вложение, СоставПакета", Новый Структура, Новый Структура);
		КонтекстДляРассчитать.Ини			= СтруктураИниФайла;
		КонтекстДляРассчитать.Вложение		= ВложениеСБИС;
		КонтекстДляРассчитать.СоставПакета	= ДопПараметры.СоставПакета;
		
		ИмяУзляРасчётаТипа	= "Документ";
		ЗначениеУзлаРасчёта	= Неопределено;
		
		ЗначениеДокумент = Документ_Модуль.РассчитатьПараметрИни(ЛокальныйКэш, ИмяУзляРасчётаТипа, ЗначениеУзлаРасчёта, КонтекстДляРассчитать, Новый Структура("ВызовСервера", Истина));
		Если	ЗначениеДокумент = Неопределено
			И	СтруктураИниФайла.Свойство(ИмяУзляРасчётаТипа, ЗначениеУзлаРасчёта) Тогда
			Если Не ЗначениеУзлаРасчёта.Свойство("Тип", ЗначениеДокумент) Тогда
			
				ЗначениеДокумент = ПрименитьФорматКСтроке(ЗначениеУзлаРасчёта.Значение, """'", "Убрать");
				
			КонецЕсли;
		КонецЕсли;
		
		ТипПолный = СсылочныйТипСтрокой(ЗначениеДокумент);
		Если Не ТипПолный = Неопределено Тогда
			
			ВложениеСБИС.Параметры.Вставить("ПолныйТипОбъекта", ТипПолный);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ТипКратко")
		Или	Не	ДопПараметры.ТипКратко Тогда
		Возврат ТипПолный;
	КонецЕсли;
	
	ТипОбъекта = СтрПолучитьСтроку(СтрЗаменить(ТипПолный, ".", Символы.ПС), 2);
    Возврат ТипОбъекта;

КонецФункции	

// Функция - Вложение СБИС выгрузить
//
// Параметры:
//  Вложение	 - Структура - Текущее Вложение из СоставаПакета 
//  КлючВыгрузки - Структура - 
//  ДопПараметры - Структура - 
// 
// Возвращаемое значение:
// Массив - Строки табличной части документа 1С на загрузку/выгрузку
//
&НаКлиенте
Функция ВложениеСБИС_Выгрузить(Вложение, КлючВыгрузки = Неопределено, ДопПараметры = Неопределено) Экспорт
		
	Если НЕ (Вложение.Свойство("КлассыСопоставленияНоменклатур") 
			И ЗначениеЗаполнено(Вложение.КлассыСопоставленияНоменклатур)) Тогда
		
		// Прокинуть исключение	
		Возврат Неопределено;
	КонецЕсли;

	ЛокальныйКэш = ПолучитьТекущийЛокальныйКэш();
	СбисОбщиеФункции  = ЛокальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	
	Если Вложение.Свойство("ТаблДок") Тогда
		ТабличнаяЧастьИзФайла = Вложение.ТаблДок; // Рассчитывался при подготовке к загрузке
	Иначе
		ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
		ТабличнаяЧастьИзФайла = СбисОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
	КонецЕсли;
	
	НаборСопоставленийНоменклатуры = Новый Структура("ТабличнаяЧасть, НаборСопоставлений", ТабличнаяЧастьИзФайла, Вложение.КлассыСопоставленияНоменклатур);
	
	ПараметрыПоискаФорм = ВложениеСбис_Получить(Вложение, "ПараметрыИни");
	НаборФорм = Новый Массив;
	
	ИмяФормыПоФормату = "Файл_"	+ СбисОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(ПараметрыПоискаФорм.Тип)
	+ "_"	+ СбисОбщиеФункции.СбисЗаменитьНедопустимыеСимволы(ПараметрыПоискаФорм.Версия);
	
	НаборФорм.Добавить(ИмяФормыПоФормату);
	
	Если Не ПараметрыПоискаФорм.Версия = "3.01" Тогда
		НаборФорм.Добавить("Файл_Шаблон_" + СтрЗаменить(ПараметрыПоискаФорм.Версия, ".", "_"));
	КонецЕсли;
	
	НаборФорм.Добавить("Файл_Шаблон");
	
	МодульФормы = НайтиФункциюСеансаОбработки("СформироватьТабличнуюЧастьПоНаборуСопоставленийНоменклатуры", НаборФорм);
	
	Если ПараметрыПоискаФорм.Направление = "Входящий" Тогда
		СвернутьСтроки = Ложь;
	Иначе
		СвернутьСтроки = Истина;
	КонецЕсли;
	
	Если НЕ ДопПараметры = Неопределено 
		И ДопПараметры.Свойство("НаправлениеСворачивания") Тогда
		НаправлениеСворачивания = ДопПараметры.НаправлениеСворачивания;
	Иначе
		НаправлениеСворачивания = "СБИС";
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СвернутьСтроки, НаправлениеСворачивания", СвернутьСтроки, НаправлениеСворачивания);
	ТабличнаяЧасть = МодульФормы.СформироватьТабличнуюЧастьПоНаборуСопоставленийНоменклатуры(НаборСопоставленийНоменклатуры, ДопПараметры);
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - класс вложение СБИС	- структура с данными сторон
//  РольДО		 - строка				- роль Отправитель/Получатель
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_СторонаПоРоли(ВложениеСБИС, РольДО)
	Перем ДанныеСтруктураФайла, ДанныеСтороныПоРоли, ДанныеСтороныПоВспомогательнойРоли, ЗапретРедакций;

	ИмяВспомогательнойРоли	= "Грузо" + РольДО;
	
	//Проверка основной стороны
	Если		Не ВложениеСБИС.Свойство(РольДО, ДанныеСтороныПоРоли) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли	Не	ВложениеСБИС.Свойство("СтруктураФайла", ДанныеСтруктураФайла) Тогда
		
		//Нет данных файла на вложении, неоткуда брать вспомогательную роль.
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоРоли = ДанныеСтруктураФайла.Файл.Документ[РольДО];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;
	
	//Если определение сторон с учетом филиала отключено для пользователя, то вернуть найденные данные по роли
	Если Не ПолучитьЗначениеПараметраСбис("Филиалы_" + РольДО) Тогда
		
		Возврат ДанныеСтороныПоРоли;
		
	КонецЕсли;
	
	//Поиск вспомогательной стороны
	Если 			ДанныеСтруктураФайла = Неопределено Тогда
		
		//Нет данных файла на вложении, неоткуда брать основную роль.
		Если Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли	Не	ДанныеСтруктураФайла.Файл.Документ.Свойство(ИмяВспомогательнойРоли, ДанныеСтороныПоВспомогательнойРоли) Тогда
		
		//Вспомогательных ролей нет
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоВспомогательнойРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоВспомогательнойРоли = ДанныеСтруктураФайла.Файл.Документ[ИмяВспомогательнойРоли];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;	
	
	ИспользоватьКакРольОсн		= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоРоли, "ИспользоватьКак" + РольДО);
	ВспомогательнаяРольФилиал	= Ложь;

	Если	ДанныеСтороныПоВспомогательнойРоли = Неопределено Тогда
		
		ИспользоватьКакРольОсн	= Истина;
		
	Иначе
		
		ИспользоватьКакРольДоп	= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоВспомогательнойРоли, "ИспользоватьКак" + РольДО);
		ПлоскиеДанныеРоли		= Сторона_Выгрузить(ДанныеСтороныПоРоли);
		ПлоскиеДанныеВспомРоли	= Сторона_Выгрузить(ДанныеСтороныПоВспомогательнойРоли);
		ЗапретРедакций			= ДанныеСтороныПоРоли.Свойство("ЗапретРедакций") И ДанныеСтороныПоРоли.ЗапретРедакций;
		
		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал: 
		//Заполнен и отличается КПП, либо КПП заполнен и совпадает, но отличается КодФилиала
		Если 	ПлоскиеДанныеРоли.ИНН = ПлоскиеДанныеВспомРоли.ИНН
			И	ЗначениеЗаполнено(ПлоскиеДанныеРоли.КПП)
			И	ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КПП) Тогда
			//Проверить, что филиал - заполнен и отличается КФ, либо заполнен, но отличается КПП.
			ВспомогательнаяРольФилиал =	Не	ПлоскиеДанныеРоли.КПП = ПлоскиеДанныеВспомРоли.КПП
									Или	(		ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КодФилиала)
										И	Не	ПлоскиеДанныеРоли.КодФилиала = ПлоскиеДанныеВспомРоли.КодФилиала);
		
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьКакРольДоп =	ИспользоватьКакРольДоп = Истина
							Или	ВспомогательнаяРольФилиал;
	
	Если		ИспользоватьКакРольОсн = Истина
		Или	Не	ИспользоватьКакРольДоп Тогда 

		//Явный признак на основной стороне использовать как %роль%, либо нет доп. стороны, либо не филиал
		ДанныеРезультат = ДанныеСтороныПоРоли;

	Иначе

		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал
		ДанныеРезультат = ДанныеСтороныПоВспомогательнойРоли;
		
	КонецЕсли;
	
	ДанныеРезультат = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ДанныеРезультат);

	//Прокинуть признак запрета редакций, если был
	Если	Не	ЗапретРедакций = Неопределено
		И		ЗапретРедакций Тогда
	
		ДанныеРезультат.Вставить("ЗапретРедакций", Истина);
		
	КонецЕсли;
	
	//Установить код страны, если явно отсутсвует
	Если		ДанныеРезультат.Свойство("СвЮЛ")
		И	Не	ДанныеРезультат.СвЮл.Свойство("КодСтраны") Тогда
		
		ДанныеРезультат.СвЮЛ.Вставить("КодСтраны", "643");
		
	КонецЕсли;
	
	Возврат ДанныеРезультат	
	
КонецФункции

&НаКлиенте
Процедура ВложениеСБИС_ЗаполнитьВходящийКонтекстПоУмолчанию(ВложениеСБИС) Экспорт 
	
	ФункцииРасчёта		= ПолучитьЗначениеПараметраТекущегоСеанса("ФункцииДокументов");
	СтруктураИниФайла	= ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");

	Если ПолучитьЗначениеПараметраСбис("ЗаполнениеКонтрагента1С") = "ГрузополучательСБИС" Тогда  
		
		Контрагент_Роль = "Грузополучатель";
				
		Если	СтруктураИниФайла.Свойство("Контрагент_Роль")
			И	СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") 
			И	ВложениеСБИС.Свойство("Контрагент1С") Тогда
			
				КонтрагентРоль	= ФункцииРасчёта.РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла);
				ИмяРеквизита	= Сред(	СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, 
										Найти(СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, ".") + 1);
											
				ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить(ИмяРеквизита, Контрагент_Роль);			
						
			КонецЕсли;
			
	Иначе
		
		Контрагент_Роль = "Покупатель";
		
		Если	СтруктураИниФайла.Свойство("Контрагент_Роль")
			И	СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") 
			И	ВложениеСБИС.Свойство("Контрагент1С") Тогда
			
				КонтрагентРоль	= ФункцииРасчёта.РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла);
				ИмяРеквизита	= Сред(СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, 
											Найти(СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
				
				ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить(ИмяРеквизита, Контрагент_Роль);							
						
		КонецЕсли;
				
	КонецЕсли;
	
	СкладПоУмолчанию	= ПолучитьЗначениеПараметраСбис("СкладПоУмолчанию");
	РасСчетПоУмолчанию	= ПолучитьЗначениеПараметраСбис("РасСчетПоУмолчанию");
	Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
		
		ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("Склад", СкладПоУмолчанию);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасСчетПоУмолчанию) Тогда
		
		ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("РасСчет", РасСчетПоУмолчанию);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - заполнить параметры перед расчетом по инишке: Входящий контекст + ручные изменения в объект
//
// Параметры:
//  ВложениеСБИС - ВложениеСБИС	 - Структура с описанием обрабатываемого вложения
//  ДопПараметры - Структура/ФиксированнаяСтруктура	 - расширение метода
//
&НаКлиенте
Процедура ВложениеСБИС_ЗаполнитьПараметрыПередРасчетом(ВложениеСБИС, ДопПараметры = Неопределено) Экспорт
    Перем ВходящийКонтекстИни, ДополнительныеПоляКонтекста, РассчитываемыйОбъект;
	
	ОчиститьТекущий		= Истина;
	ЗаполнитьКонтекст	= Ложь;
	
	Если Не ВложениеСБИС.Свойство("ВходящийКонтекст", ВходящийКонтекстИни) Тогда

		ВложениеСБИС.Вставить("ВходящийКонтекст", Новый Структура("РассчитанноеЗначение", Новый Структура));
		ЗаполнитьКонтекст = Истина;
		
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
		
		ДопПараметры.Свойство("ПоляРассчета",			ДополнительныеПоляКонтекста);
		ДопПараметры.Свойство("РассчитываемыйОбъект",	РассчитываемыйОбъект);
		
	КонецЕсли;
	
	Если ЗаполнитьКонтекст Тогда
		
		ВложениеСБИС_ЗаполнитьВходящийКонтекстПоУмолчанию(ВложениеСБИС);
		
		ДанныеСторон = СоставПакета_Получить(ДопПараметры.СоставПакета, "ДанныеСторон");
		
		// Прокинуть данные сторон от пакета до вложения во входящий контекст, чтобы их можно было взять инишкой
		Если	ЗначениеЗаполнено(ДанныеСторон)
			И	ДоступнаПодстановкаСторонИзПакета(ДопПараметры.СоставПакета) Тогда
			
			ДанныеСторонДляДокумента1С	= Новый Структура;
			ДанныеДляПодготовки			= Новый Структура("ДанныеСторонСБИС, ДанныеСторон1С", ДанныеСторон, ДанныеСторонДляДокумента1С);
			ДопПараметрыПодготовки		= Новый Структура("ЕстьПартнеры", ИниПоПараметрам("Конфигурация").Свойство("Партнеры"));
			
			ПодготовитьСтороныКЗагрузкеДокумента(ДанныеДляПодготовки, ДопПараметрыПодготовки);
			
			ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("ОрганизацияПоПакету",		ДанныеСторон.ДанныеОрганизации.Ссылка); 
			ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("КонтрагентПоПакету",		ДанныеСторонДляДокумента1С.ДанныеКонтрагента); 
			ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("ГрузополучательПоПакету",	ДанныеСторонДляДокумента1С.ДанныеГрузополучателя); 
			ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить("ПартнерПоПакету",			ДанныеСторонДляДокумента1С.ДанныеПартнера);
		
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не ДополнительныеПоляКонтекста = Неопределено Тогда
		
		Для Каждого КлючИЗначениеПолей Из ДополнительныеПоляКонтекста Цикл
			
			ВложениеСБИС.ВходящийКонтекст.РассчитанноеЗначение.Вставить(КлючИЗначениеПолей.Ключ, КлючИЗначениеПолей.Значение);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если Не РассчитываемыйОбъект = Неопределено Тогда
		
		РучныеПравки		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураРучныхПравок");
		СтруктураИниФайла	= ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
		ФункцииРасчёта		= ПолучитьЗначениеПараметраТекущегоСеанса("ФункцииДокументов");
		
		Для Каждого РучноеПоле Из РучныеПравки Цикл
			
			РассчитываемыйОбъект.Вставить(РучноеПоле.Ключ, РучноеПоле.Значение);
			
		КонецЦикла;
			
		Если ВложениеСБИС.Свойство("РучноеИзменение") И ВложениеСБИС.РучноеИзменение = Истина Тогда
			// Старый алгоритм отпилить в 4100
			Попытка
				Если	СтруктураИниФайла.Свойство("Договор")
					И	СтруктураИниФайла.Договор.Свойство("Значение")
					И	ВложениеСБИС.Свойство("Договор1С") Тогда
					
					ИмяРеквизита = Сред(СтруктураИниФайла.Договор.Значение, Найти(СтруктураИниФайла.Договор.Значение,".")+1);
					РассчитываемыйОбъект.Вставить(ИмяРеквизита, ВложениеСБИС.Договор1С);
					
				КонецЕсли;
				
				Если	СтруктураИниФайла.Свойство("Документ_Дата")
					И	СтруктураИниФайла.Документ_Дата.Свойство("Значение")
					И	ВложениеСБИС.Свойство("Дата1С") Тогда
					
					ИмяРеквизита = Сред(СтруктураИниФайла.Документ_Дата.Значение, Найти(СтруктураИниФайла.Документ_Дата.Значение,".")+1);
					РассчитываемыйОбъект.Вставить(ИмяРеквизита, ВложениеСБИС.Дата1С);
					
				КонецЕсли;
				
				Если	СтруктураИниФайла.Свойство("Контрагент_Роль")
					И	СтруктураИниФайла.Контрагент_Роль.Свойство("Значение")
					И	ВложениеСБИС.Свойство("Контрагент1С") Тогда
					
					КонтрагентРоль = ФункцииРасчёта.РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла);
					ИмяРеквизита = Сред(СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, Найти(СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
					РассчитываемыйОбъект.Вставить(ИмяРеквизита, ВложениеСБИС.Контрагент1С);
					
				КонецЕсли;
				
			Исключение
				
				СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_ЗаполнитьПараметрыПередРасчетом");
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - определяет документы по текущему типу. Делает поиск при отсутствии подходящих документов на вложении
//
// Параметры:
//  ВложениеСБИС - Структура	- класс вложение СБИС
//  ДопПараметры - Структура	- перекрывает ключи из Вложения:
//		СоставПакета		- Структура, состав пакета. Обязателен если нет явно определенных сторон Организация 1С и Контрагент 1С
//		ТипДокумента		- Строка, описание документа, который ищется
//		ВсеПодходящие		- Булево (Ложь) - продолжить поиск даже если на вложении есть уже подходящий документ
//		СтруктураИниФайла	- (Необязательный, возьмётся от вложения)Раздел ини мДокумент для определения реквизитов и организации запроса
//		Контрагент1С		- Ссылка на сторону контрагента (партнёра) 1С в явном виде
//		Организация1С		- Ссылка на сторону организации 1С в явном виде
//		КонтрагентСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
//		ОрганизацияСБИС		- Класс Сторона с описанием первичный и вспомогательных ключей стороны
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_НайтиПодходящиеДокументы(ВложениеСБИС, ДопПараметры)
	Перем	лРасчитанныйПараметр, УзелИниПоиска, ТипОбъектаПоиск, СоставПакета, ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
			ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх, РежимПоискаДокумента;
			
	Результат = Новый Массив;		
	
	Если Не ДопПараметры.Свойство("Режим", РежимПоискаДокумента) Тогда
		
		РежимПоискаДокумента = "Документ"
		
	КонецЕсли;

	Если	РежимПоискаДокумента = "Документ"
		Или	РежимПоискаДокумента = "Разбор" Тогда
		
		СписокДокументовПроверить = ВложениеСБИС.Документы1С.ВыгрузитьЗначения();
		
		Если ДопПараметры.Свойство("ПодходящийДокумент") Тогда
			
			//Добавить для выборки по типу, первым по списку
			СписокДокументовПроверить.Вставить(0, ДопПараметры.ПодходящийДокумент);
			
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СписокДокументовПроверить) Тогда
			
			ТребуемыйТип		= ВложениеСБИС_Получить(ВложениеСБИС, "ТипОбъекта", ДопПараметры);
			РезультатЗапроса	= ВыбратьДокументыПоТипамВызовСервера(СписокДокументовПроверить, ТребуемыйТип);
			СсылкиПоТипу		= РезультатЗапроса.Получить(ТребуемыйТип);
			Если		ЗначениеЗаполнено(СсылкиПоТипу)
				И	Не	(	ДопПараметры.Свойство("ВсеПодходящие")
						И	ДопПараметры.ВсеПодходящие) Тогда
				
				Возврат СсылкиПоТипу;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеЗапроса = Новый Структура("Текст, Параметры, Формат", "", Новый Структура, Новый Структура("ТипОбъект, УсловияЗапроса", "", ""));
	ОписаниеЗапроса.Текст = 
	
	"ВЫБРАТЬ Разрешенные
	|Объект.Ссылка КАК ОбъектСсылка
	|ИЗ
	| {ТипОбъект} КАК Объект
	|ГДЕ
	|	НЕ Объект.ПометкаУдаления{УсловияЗапроса}";

	МодульФункцийДокуметов	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ЕстьТипОбъекта			= ДопПараметры.Свойство("ТипДокумента",	ТипОбъектаПоиск);
	
	Если РежимПоискаДокумента = "Основание" Тогда
		
		Если Не ЕстьТипОбъекта Тогда
			
			// Поиск основания
			УзелИниПоиска = ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
			
			Если	УзелИниПоиска.Свойство("Документ_Основание",	ТипОбъектаПоиск)
				И	ТипОбъектаПоиск.Свойство("Тип",					ТипОбъектаПоиск) Тогда
				
				ДокументТип = СтрЗаменить(ТипОбъектаПоиск, ",", Символы.ПС);
				
				// Пока берётся первый тип из списка. Если надо поиск по нескольким типам, доработать на пакетный запрос
				Для НомерСтрокиТип = 1 По СтрЧислоСтрок(ДокументТип) Цикл
					
					ЕстьТипОбъекта	= Истина;
					ТипОбъектаПоиск	= СтрПолучитьСтроку(ДокументТип, НомерСтрокиТип);
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Переопределить узел ини по типу основания
			ФайлИни = ИниПоПараметрам(ВложениеСБИС.ИмяИни);

			Если	Не	ФайлИни = Неопределено
				И 		ФайлИни.Свойство("мДокумент") Тогда
				
				ТипОбъектаПроверить = НРег(СтрПолучитьСтроку(СтрЗаменить(ТипОбъектаПоиск, ".", Символы.ПС), 2));
				Для Каждого мДокументИни Из ФайлИни.мДокумент Цикл
					
					ДокументТип = МодульФункцийДокуметов.РассчитатьЗначение("Документ", мДокументИни.Значение);
					ДокументТип = НРег(СтрПолучитьСтроку(СтрЗаменить(ДокументТип, ".", Символы.ПС), 2));
					Если Не НРег(ДокументТип) = НРег(ТипОбъектаПроверить) Тогда
						Продолжить;
					КонецЕсли;
					УзелИниПоиска = мДокументИни.Значение;
					Прервать;
					
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		//Это не подбор основания. Раздел для поиска берётся текущий
		УзелИниПоиска = ВложениеСБИС_Получить(ВложениеСБИС, "УстановленныйПодразделИни");
		Если Не ЕстьТипОбъекта Тогда
		
			ТипОбъектаПоиск	= ВложениеСБИС_Получить(ВложениеСБИС, "ТипОбъекта");
			ЕстьТипОбъекта	= ЗначениеЗаполнено(ТипОбъектаПоиск);
			
		КонецЕсли;

	КонецЕсли;
	
	Если Не ЕстьТипОбъекта Тогда

		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует описание типа документа для поиска.");
		
	КонецЕсли;

	Если УзелИниПоиска = Неопределено Тогда
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует узел файла настроек для поиска.");
		
	КонецЕсли;

	//Тип объекта
	Если ЗначениеЗаполнено(ТипОбъектаПоиск) Тогда

		Если Найти(ТипОбъектаПоиск, ".") Тогда
			
			СсылочныйТип = СсылочныйТипСтрокой(ТипОбъектаПоиск);
			СсылочныйТип = СтрЗаменить(СсылочныйТип, ".", Символы.ПС);
			ТипОбъектаМетаданные	= СтрЗаменить(СтрПолучитьСтроку(СсылочныйТип, 1), "Ссылка", "");
			ТипОбъектаПоиск			= СтрПолучитьСтроку(СсылочныйТип, 2);
			
		Иначе
			
			ТипОбъектаМетаданные = "Документ";
			
		КонецЕсли;
		ОписаниеЗапроса.Формат.ТипОбъект = ТипОбъектаМетаданные + "." + ТипОбъектаПоиск;

	Иначе
		
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствует описание типа объекта.");
		
	КонецЕсли;

	ПараметрыФильтра  = Новый Структура("УзелИни, ОписаниеЗапроса, СоставПакета", УзелИниПоиска, ОписаниеЗапроса, ДопПараметры.СоставПакета);
	
	//Обработка даты и номера
	Если ДопПараметры.Свойство("Дата1С") Тогда
		ПараметрыФильтра.Вставить("Дата1С",				ДопПараметры.Дата1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Номер1С") Тогда
		ПараметрыФильтра.Вставить("Номер1С",			ДопПараметры.Номер1С);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("НомерСБИС") Тогда
		ПараметрыФильтра.Вставить("НомерСБИС",			ДопПараметры.НомерСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ДатаСБИС") Тогда
		ПараметрыФильтра.Вставить("ДатаСБИС",			ДопПараметры.ДатаСБИС);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_Номер") Тогда
		ПараметрыФильтра.Вставить("Документ_Номер",		ДопПараметры.Документ_Номер);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_НомерВх") Тогда
		ПараметрыФильтра.Вставить("Документ_НомерВх",	ДопПараметры.Документ_НомерВх);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Документ_ДатаВх") Тогда
		ПараметрыФильтра.Вставить("Документ_ДатаВх",	ДопПараметры.Документ_ДатаВх);
	КонецЕсли;
	
	ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ПараметрыФильтра);
	
	//Обработка контрагента
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоКонтрагенту") = "Не использовать" Тогда
		
		ПараметрыФильтра.Вставить("Ключ", "Контрагент");
		
		Если		ДопПараметры.Свойство("Контрагент1С") Тогда
			ПараметрыФильтра.Вставить("Контрагент1С",	ДопПараметры.Контрагент1С);
		ИначеЕсли	ДопПараметры.Свойство("КонтрагентСБИС") Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	ДопПараметры.КонтрагентСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("КонтрагентСБИС",	СоставПакета.Контрагент);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Контрагент.");
		КонецЕсли;
		
		Попытка
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		КонецПопытки;
		
	КонецЕсли;

	//Обработка организации
	Если Не ПолучитьЗначениеПараметраСбис("СопоставлениеПоОрганизации") = "Не использовать" Тогда

		ПараметрыФильтра.Вставить("Ключ", "Организация");
	
		Если		ДопПараметры.Свойство("Организация1С") Тогда
			ПараметрыФильтра.Вставить("Организация1С",		ДопПараметры.Организация1С);
		ИначеЕсли	ДопПараметры.Свойство("ОрганизацияСБИС") Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	ДопПараметры.ОрганизацияСБИС);
		ИначеЕсли	ДопПараметры.Свойство("СоставПакета", СоставПакета) Тогда
			ПараметрыФильтра.Вставить("ОрганизацияСБИС",	СоставПакета.НашаОрганизация);
		Иначе
			ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Отсутствуют данные пакета для определения стороны Организация.");
		КонецЕсли;
		
		Попытка
			
			ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ПараметрыФильтра);
			
		Исключение
			
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
			
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		
		РезультатПоиска = ОписаниеЗапроса_ВыполнитьЗапросСервер(ПараметрыФильтра.ОписаниеЗапроса);
		
	Исключение
		
		ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы");
		
	КонецПопытки;

	Для Каждого ЭлементНайден Из РезультатПоиска Цикл
		
		Если		ЭлементНайден.Свойство("ОбъектСсылка") Тогда
			
			Результат.Добавить(ЭлементНайден.ОбъектСсылка);
			
		ИначеЕсли   ЭлементНайден.Свойство("Ссылка") Тогда
			
			Результат.Добавить(ЭлементНайден.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция  ОписаниеЗапроса_ВыполнитьЗапросСервер(ОписаниеЗапроса)
	
	ТекстЗапроса = ОписаниеЗапроса.Текст;
	Для Каждого ЭлементФормат Из ОписаниеЗапроса.Формат Цикл
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{" + ЭлементФормат.Ключ + "}", ЭлементФормат.Значение);
		
	КонецЦикла;
	Попытка
		
		Возврат МодульОбъектаСервер().ВыполнитьЗапросСПараметрами(ТекстЗапроса, ОписаниеЗапроса.Параметры, Новый Структура("Размер"));
		
	Исключение
		
		ВызватьИсключение(МодульОбъектаСервер().СбисИсключение_ВСтроку(ИнформацияОбОшибке(), "МодульОбъектаСервер.ВыполнитьЗапросСПараметрами")); 
		
	КонецПопытки;
	
КонецФункции

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне(ВложениеСБИС, ДопПараметры)
    Перем УзелИниСтороны, лРасчитанныйПараметр, ИмяРеквизитаКонтрагента;
	
	УзелИниПоиска			= ДопПараметры.УзелИни;
	КлючПоиска				= ДопПараметры.Ключ;

	Если    Не ДопПараметры.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр)
		И	Не ВложениеСБИС.Свойство(КлючПоиска + "1С",	лРасчитанныйПараметр) Тогда 
		// параметр Контрагент переехал в редактируемые поля на просмотр. В условии оставлено для совместимости, на всякий
		
		Поля1С = ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С", Новый ФиксированнаяСтруктура("ИскатьДокумент", Ложь));
		Если	Поля1С.Свойство(КлючПоиска, лРасчитанныйПараметр)
			И	ЗначениеЗаполнено(лРасчитанныйПараметр)
			И	лРасчитанныйПараметр.Доступность Тогда
				
			ИмяРеквизитаКонтрагента = лРасчитанныйПараметр.Путь;
			лРасчитанныйПараметр = лРасчитанныйПараметр.Значение;
			
		КонецЕсли;
			
	КонецЕсли;
	
	МассивСторон = Новый Массив;
	Если ЗначениеЗаполнено( лРасчитанныйПараметр) Тогда
		
		МассивСторон.Добавить(лРасчитанныйПараметр);
		
	КонецЕсли;
	
	//Проверить наличие в ини узла для определения поиска по контрагенту
	Если ИмяРеквизитаКонтрагента = Неопределено Тогда
		КлючСтороны				= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.РассчитатьЗначение(КлючПоиска + "_Роль", УзелИниПоиска);
		
		Если		КлючСтороны = Неопределено
			Или Не	УзелИниПоиска.мСторона.Свойство(КлючСтороны, УзелИниСтороны) Тогда
			Возврат;
		КонецЕсли;
		ИмяРеквизитаКонтрагента	= СтроковоеЗначениеУзлаИни(УзелИниСтороны.Сторона, Новый Структура("ИмяРеквизита", Истина));
		Если    лРасчитанныйПараметр = Неопределено Тогда
			// Параметр всё ещё не определен, поискать запросом карточку 1С
			Если	ДопПараметры.Свойство(КлючПоиска + "СБИС", лРасчитанныйПараметр) Тогда
			
				ПараметрыПоискаКарточки	= Новый Структура("УзелИниПоиска, ТипСтороны", УзелИниПоиска, КлючПоиска);
				лРасчитанныйПараметр	= Сторона_НайтиКарточки1С(лРасчитанныйПараметр, ПараметрыПоискаКарточки);

				Если Не ЗначениеЗаполнено(лРасчитанныйПараметр) Тогда
					
					ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Не найдены данные стороны " + КлючПоиска + " в 1С.", Новый Структура("Сторона", лРасчитанныйПараметр));
					
				КонецЕсли;
			
				МассивСторон = лРасчитанныйПараметр;
				
			Иначе
				
				ВызватьСбисИсключение(760, "МодульОбъектаКлиент.ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоСтороне",,, "Отсутствуют данные стороны " + КлючПоиска + " для определения стороны 1С.");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса = ДопПараметры.ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + " И Объект." + ИмяРеквизитаКонтрагента+" В (&" + КлючПоиска + ")";
	ДопПараметры.ОписаниеЗапроса.Параметры.Вставить(КлючПоиска, МассивСторон);
	
КонецПроцедуры

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДатеНомеру(ВложениеСБИС, ДопПараметры)
	Перем	ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
		ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
		
	ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДате(ВложениеСБИС, ДопПараметры);
	ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоНомеру(ВложениеСБИС, ДопПараметры);
	
	ПараметрыЗапросаИтого = ДопПараметры.ОписаниеЗапроса.Параметры;
	Если НЕ ПараметрыЗапросаИтого.Свойство("Номер") Или НЕ ЗначениеЗаполнено(ПараметрыЗапросаИтого.Номер) Тогда   

		//  Если в СБИС не заполнены дата и номер, то нет смысла проводить поиск
		ВызватьСбисИсключение(760, "МодульОбъектаКлиент.НайтиПодходящиеДокументы1СПоПараметрам",,, "Не указаны номер или входящий номер для поиска документа.");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоДате(ВложениеСБИС, ДопПараметры)
	Перем	ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
		ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх;
		
	ОписаниеЗапроса	= ДопПараметры.ОписаниеЗапроса;
	УзелИниПоиска	= ДопПараметры.УзелИни;
	
	//Обработка Дата
	Если	ДопПараметры.Свойство("Дата1С", ЗначениеДата) Тогда
		
		ЕстьДата = Истина;
		
	Иначе
		
		// Не искать документ, т.к. иначе уйдёт в бесконечную рекурсию
		ПараметрыПодборПолей = Новый ФиксированнаяСтруктура("ИскатьДокумент, СоставПакета", Ложь, ДопПараметры.СоставПакета);
		Поля1С = ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С", ПараметрыПодборПолей);
		ЕстьДата	=	Поля1С.Свойство	("Дата", ЗначениеДата)
					И	Не ЗначениеДата = Неопределено
					И	ЗначениеДата.Доступность;
		Если ЕстьДата Тогда
			
			ИмяРеквизитаРасчет	= ЗначениеДата.Путь;
			ЗначениеДата		= ЗначениеДата.Значение;
			
		Иначе
			
			ЕстьДата = ВложениеСБИС.Свойство ("Дата", ЗначениеДата);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЕстьДата Тогда
	
		//определить как искать дату
		Если ИмяРеквизитаРасчет = Неопределено Тогда
			
			Если	УзелИниПоиска.Свойство("Документ_Дата",		ИмяРеквизитаРасчет) Тогда
				
				ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина))
				
			Иначе
				
				ИмяРеквизитаРасчет = "Дата";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Дата документа" Тогда

			УсловиеДобавить = " И НАЧАЛОПЕРИОДА(Объект.{ИмяРеквизитДата}, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Месяц с даты документа" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПериод") = "Календарный месяц документа" Тогда

			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} МЕЖДУ &ДатНач И &ДатКнц";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	НачалоМесяца(ЗначениеДата));
			ОписаниеЗапроса.Параметры.Вставить("ДатКнц",	КонецМесяца(ЗначениеДата));
			
		Иначе
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитДата} = (&ДатНач)";
			ОписаниеЗапроса.Параметры.Вставить("ДатНач",	ЗначениеДата);
			
		КонецЕсли;
		
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитДата}", ИмяРеквизитаРасчет);
			
	КонецЕсли;
	
	//Обработка ДатаВходящая
	Если	(	ДопПараметры.Свойство("ДатаСБИС",	ЗначениеДатаВх)
			Или	ВложениеСБИС.Свойство("Дата",		ЗначениеДатаВх))
		И	ЗначениеЗаполнено(ЗначениеДатаВх)
		И	(	ДопПараметры.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)
			Или	УзелИниПоиска.Свойство("Документ_ДатаВх",	ИмяРеквизитаРасчет)) Тогда
		
		ИмяРеквизитаРасчет = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		
		Если		ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Точное совпадение" Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		ИначеЕсли	ПолучитьЗначениеПараметраСбис("СопоставлениеПоДате") = "Отклонение 1 день" Тогда
			
			УсловиеДобавить = 
			" И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) < 2
			|И РАЗНОСТЬДАТ(Объект.{ИмяРеквизитаДатаВх}, &ДатаВхНач, ДЕНЬ) > -2";
			
		ИначеЕсли	Не ЗначениеЗаполнено(ЗначениеДата) Тогда
			
			УсловиеДобавить = " И Объект.{ИмяРеквизитаДатаВх} = &ДатаВхНач";
			
		Иначе
			
			УсловиеДобавить = "";
			
		КонецЕсли;
		
		ОписаниеЗапроса.Параметры.Вставить("ДатаВхНач", ЗначениеДатаВх);
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитаДатаВх}", ИмяРеквизитаРасчет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Вложение СБИС найти подходящие документы установить фильтр по стороне
//
// Параметры:
//  ВложениеСБИС		 - Структура	 - экземпляр класса вложение СБИС
//  ПараметрыВходящие	 - Структура	 - параметры установки
//
&НаКлиенте
Процедура ВложениеСБИС_НайтиПодходящиеДокументы_УстановитьФильтрПоНомеру(ВложениеСБИС, ДопПараметры)
	Перем	ИмяРеквизитаРасчет, ИмяРеквизитаРасчетВспом,
		ЗначениеДата, ЗначениеДатаВх, ЗначениеНомер, ЗначениеНомерВх, ЗначениеПараметрНомера;
		
	ОписаниеЗапроса	= ДопПараметры.ОписаниеЗапроса;
	УзелИниПоиска	= ДопПараметры.УзелИни;

	// Не искать документ, т.к. иначе уйдёт в бесконечную рекурсию
	ПараметрыПодборПолей = Новый ФиксированнаяСтруктура("ИскатьДокумент, СоставПакета", Ложь, ДопПараметры.СоставПакета);
	Поля1С = ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С", ПараметрыПодборПолей);
	//Обработка Номер
	ЕстьУзелНомераВходящего =	ДопПараметры.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом)
							Или	УзелИниПоиска.Свойство("Документ_НомерВх",	ИмяРеквизитаРасчетВспом);
	ЕстьУзелНомера			=	ДопПараметры.Свойство("Документ_Номер",		ИмяРеквизитаРасчет)
							Или	УзелИниПоиска.Свойство("Документ_Номер",	ИмяРеквизитаРасчет);
	ЕстьНомерВх				=	(	ДопПараметры.Свойство("НомерСБИС",	ЗначениеНомерВх)
								Или	ВложениеСБИС.Свойство("Номер",		ЗначениеНомерВх))
							И ЗначениеЗаполнено(ЗначениеНомерВх);
	ЕстьНомер1С				=	(	ДопПараметры.Свойство("Номер1С",	ЗначениеНомер)
								Или	(	Поля1С.Свойство("Номер", 	ЗначениеНомер)
									И	Не ЗначениеНомер = Неопределено
									И	ЗначениеНомер.Доступность
									И	ЗначениеНомер.Свойство("Значение", ЗначениеНомер))
								И	ЗначениеЗаполнено(ЗначениеНомер));

	ВхождениеНомера = ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Вхождение";								
	Если	ВхождениеНомера Тогда
		
		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} ПОДОБНО &Номер";

	ИначеЕсли  ПолучитьЗначениеПараметраСбис("СопоставлениеПоНомеру") = "Точное совпадение" Тогда

		УсловиеДобавить = " И Объект.{ИмяРеквизитНомер} = &Номер";
		
	Иначе
		
		УсловиеДобавить = "";
		
	КонецЕсли;
	
	Если		ЕстьНомер1С Тогда
		
		//Поиск по указанному номеру 1С
		ИмяРеквизитНомер		= СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет, Новый Структура("ИмяРеквизита", Истина));
		ЗначениеПараметрНомера	= ЗначениеНомер;
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	ИначеЕсли 	ЕстьНомерВх  Тогда
		
		Если		ЕстьУзелНомераВходящего Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчетВспом,	Новый Структура("ИмяРеквизита", Истина))
			
		ИначеЕсли	ЕстьУзелНомера Тогда
			
			ИмяРеквизитНомер = СтроковоеЗначениеУзлаИни(ИмяРеквизитаРасчет,			Новый Структура("ИмяРеквизита", Истина))
			
		Иначе
			
			УсловиеДобавить = "";
			ЗначениеНомерВх = Неопределено;
			Возврат;
			
		КонецЕсли;
		
		ЗначениеПараметрНомера = ЗначениеНомерВх;
		ОписаниеЗапроса.Формат.УсловияЗапроса = ОписаниеЗапроса.Формат.УсловияЗапроса + Символы.ПС + СтрЗаменить(УсловиеДобавить, "{ИмяРеквизитНомер}", ИмяРеквизитНомер);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	Если ВхождениеНомера Тогда 
		
		ЗначениеПараметрНомера = "%" + ЗначениеПараметрНомера + "%";
		
	КонецЕсли;
	
	ОписаниеЗапроса.Параметры.Вставить("Номер",	ЗначениеПараметрНомера);

КонецПроцедуры

&НаКлиенте
Процедура ВложениеСБИС_Обновить(ВложениеСБИС, Изменения, ДопПараметры = Неопределено) Экспорт
	Перем ТекущиеИзменения;

	Если		Изменения.Свойство("Номенклатура", ТекущиеИзменения) Тогда
		
		ВложениеСБИС_ОбновитьНоменклатуру(ВложениеСБИС, ТекущиеИзменения);
		ВложениеСБИС.Вставить("Перегенерировать", Истина);
		
	ИначеЕсли	Изменения.Свойство("Статус", ТекущиеИзменения) Тогда 
		
		Если Не ВложениеСБИС.Свойство("СтатусыВложения") Тогда
			
			ВложениеСБИС.Вставить("СтатусыВложения", Новый Структура("Номенклатура, Контрагент, Организация, Ини, Общий, Заголовок"));
			
		КонецЕсли;

		Если ЭтоТипСбис(ТекущиеИзменения, "СбисИсключение") Тогда
			
			СтатусУстановить = "Ошибка";
			ВложениеСБИС.СтатусыВложения.Вставить("Ошибка", ТекущиеИзменения)
			
		Иначе
			
			СтатусУстановить = СтрЗаменить(ТекущиеИзменения, " ", "");
			
		КонецЕсли;	
		
		//Доступные статусы
		Если		Найти(",разобран,ошибка,незаполненыполя,", "," + НРег(СтатусУстановить) + ",") Тогда
			
			ВложениеСБИС.СтатусыВложения.Вставить("Общий", СтатусУстановить)
			
		ИначеЕсли	Найти(",неподдерживается,", "," + НРег(СтатусУстановить) + ",") Тогда
			
			ВложениеСБИС.СтатусыВложения.Вставить("Заголовок",	"Загрузка не поддерживается");
			ВложениеСБИС.СтатусыВложения.Вставить("Общий", СтатусУстановить);
			ЗаполнитьЗначенияСвойств(ВложениеСБИС.СтатусыВложения, ДопПараметры);
			
		ИначеЕсли	Найти(",иниустановлена,", "," + НРег(СтатусУстановить) + ",") Тогда
			
			ВложениеСБИС.СтатусыВложения.Вставить("Общий", СтатусУстановить);
			ВложениеСБИС.СтатусыВложения.Ини = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Изменения.Свойство("ПодразделИни", ТекущиеИзменения) Тогда
		
		ТекущийТипВложение = ВложениеСБИС_Получить(ВложениеСБИС, "ТекущийПодразделИни");
		Если ТекущиеИзменения = ТекущийТипВложение Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ВложениеСБИС.Параметры.Просмотр Тогда
			
			//Требуется обновить данные для просмотра
			ВложениеСБИС.Просмотр.Очистить();
			
		КонецЕсли;
		ПараметрыИзменения = Новый ФиксированнаяСтруктура("ПодразделИни, СоставПакета", Изменения.ПодразделИни ,ДопПараметры.СоставПакета);
		ВложениеСБИС_УстановитьИниЗагрузки(ВложениеСБИС, ПараметрыИзменения);
		
	ИначеЕсли Изменения.Свойство("Поля1С") Тогда
		
		ПоляТекущие = ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С");
		Если		Изменения.Поля1С.Свойство("Документ")
			И	Не	Изменения.Поля1С.Документ = ПоляТекущие.Документ.Значение
			И		ВложениеСБИС.Параметры.ВозможноРедактироватьДокумент Тогда
			
			СопоставленныеДокументыВложения					= ВложениеСБИС_Получить(ВложениеСБИС, "Документы1С");
			ВложениеСБИС.Параметры.РедактироватьДокумент	=	ВложениеСБИС.Параметры.ВозможноРедактироватьДокумент
															И	ЗначениеЗаполнено(Изменения.Поля1С.Документ)
															И 	СопоставленныеДокументыВложения.НайтиПоЗначению(Изменения.Поля1С.Документ) = Неопределено;
				
			// При измении документа 1С в режиме редактирования, обновим все поля. Для обычного документа - не трогаем, т.к. поля тянутся не от документа 1С
			ВложениеСБИС.Параметры.Удалить("РассчитанныйОбъект");
			ВложениеСБИС.Параметры.Удалить("РедактируемыеПоля");
			
			ИзменитьСтатус = Новый Структура("Статус", "ИниУстановлена");
			ВложениеСБИС_Обновить(ВложениеСБИС, ИзменитьСтатус);
			
			ДопПараметрыПолей = Новый Структура("СоставПакета, ПодходящийДокумент", ДопПараметры.СоставПакета, Изменения.Поля1С.Документ);
			ВложениеСБИС.Параметры.Вставить("РедактируемыеПоля", ВложениеСБИС_Получить(ВложениеСБИС, "Поля1С", ДопПараметрыПолей));
			
			ИзменитьСтатус.Статус = "Разобран";
			ВложениеСБИС_Обновить(ВложениеСБИС, ИзменитьСтатус);
															
		КонецЕсли;
		
		Для Каждого КлючИЗначениеПоля Из Изменения.Поля1С Цикл
			
			ВложениеСБИС.Параметры.РедактируемыеПоля[КлючИЗначениеПоля.Ключ].Значение = КлючИЗначениеПоля.Значение;
			
		КонецЦикла;
		
	ИначеЕсли	Изменения.Свойство("СтрокаФормыПросмотра", ТекущиеИзменения) Тогда
		
		ВложениеСБИС.Параметры.Вставить("МожемЗагрузитьВ1С", Булево(ТекущиеИзменения.МожемЗагрузитьВ1С));
		
	ИначеЕсли	Изменения.Свойство("Организация")
		ИЛИ		Изменения.Свойство("Контрагент")
		ИЛИ		Изменения.Свойство("Грузополучатель") Тогда
		
		ВложениеСБИС_ОбновитьСторону(ВложениеСБИС, Изменения);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложениеСБИС_ОбновитьНоменклатуру(ВложениеСБИС, Изменения)

	СтруктураФайла = ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");

	Если Не ЗначениеЗаполнено(СтруктураФайла)Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыПоФормату = "Файл_" + СтруктураФайла.Файл.Формат + "_" + СтруктураФайла.Файл.ВерсияФормата;
	ИмяФормыПоФормату = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.сбисЗаменитьНедопустимыеСимволы(ИмяФормыПоФормату);
	
	МассивФормФайл = Новый Массив;
	МассивФормФайл.Добавить("Файл_Шаблон");
	МассивФормФайл.Добавить(ИмяФормыПоФормату);
	
	ФормаФайл = НайтиФункциюСеансаОбработки("ОбновитьНоменклатуруВложения", МассивФормФайл);
	
	Контекст = Новый Структура("ФайлДанные, Изменения", СтруктураФайла, Изменения);
	
	Если ФормаФайл <> Ложь Тогда
		ФормаФайл.ОбновитьНоменклатуруВложения(ПолучитьТекущийЛокальныйКэш(), Контекст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложениеСБИС_ОбновитьСторону(ВложениеСБИС, Изменения)
	Перем ВходящийКонтекст, РучныеПравки;    
	
	СтруктураФайла = ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");

	Если Не ЗначениеЗаполнено(СтруктураФайла)Тогда
		Возврат;
	КонецЕсли;

	Если Изменения.Свойство("Организация") Тогда 
		
		ИмяСтороны = "Организация";
		ИзменяемыйРеквизит = "Организация";
		ИмяДанныеСтороны = "ДанныеОрганизации";
		
	ИначеЕсли Изменения.Свойство("Контрагент")
		И ПолучитьЗначениеПараметраСбис("ЗаполнениеКонтрагента1С") = "ПокупательСБИС" Тогда
		
		ИмяСтороны = "Контрагент";
		ИзменяемыйРеквизит = "Контрагент";
		ИмяДанныеСтороны = "ДанныеКонтрагента";
		
	ИначеЕсли Изменения.Свойство("Грузополучатель")
		И ПолучитьЗначениеПараметраСбис("ЗаполнениеКонтрагента1С") = "ГрузополучательСБИС" Тогда 
		
		ИмяСтороны = "Грузополучатель";
		ИзменяемыйРеквизит = "Контрагент";
		ИмяДанныеСтороны = "ДанныеГрузополучателя";
		
	ИначеЕсли Изменения.Свойство("Грузополучатель")
		И ПолучитьЗначениеПараметраСбис("ТипГрузополучателя") = "ГрузополучательКонтрагент" Тогда 
		
		ИмяСтороны = "Грузополучатель";
		ИзменяемыйРеквизит = "Контрагент";
		ИмяДанныеСтороны = "ДанныеГрузополучателя";
		
	ИначеЕсли Изменения.Свойство("Грузополучатель")
		И ПолучитьЗначениеПараметраСбис("ТипГрузополучателя") = "ГрузополучательПартнер" Тогда 
		
		ИмяСтороны = "Грузополучатель";
		ИзменяемыйРеквизит = "Партнер";
		ИмяДанныеСтороны = "ДанныеГрузополучателя";
		
	ИначеЕсли Изменения.Свойство("Грузополучатель") Тогда 
		
		ИмяСтороны = "Грузополучатель";
		ИзменяемыйРеквизит = "";
		ИмяДанныеСтороны = "ДанныеГрузополучателя";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст = ВложениеСБИС_Получить(ВложениеСБИС, "ВходящийКонтекст");
	
	Если ЗначениеЗаполнено(ВходящийКонтекст) Тогда 
		
		Если ВходящийКонтекст.Свойство("ДанныеСторон") Тогда 
			ВходящийКонтекст.ДанныеСторон.Вставить(ИмяДанныеСтороны, Изменения[ИмяСтороны]);
		КонецЕсли;
	
		Если ВходящийКонтекст.Свойство("РассчитанноеЗначение")
			И ЗначениеЗаполнено(ИзменяемыйРеквизит)
			И ВходящийКонтекст.РассчитанноеЗначение.Свойство(ИзменяемыйРеквизит) Тогда 
			ВходящийКонтекст.РассчитанноеЗначение.Вставить(ИзменяемыйРеквизит, Изменения[ИмяСтороны]);
		КонецЕсли;
		
		Если ВложениеСБИС.Свойство("Параметры")
			И ВложениеСБИС.Параметры.Свойство("РедактируемыеПоля")
			И ВложениеСБИС.Параметры.РедактируемыеПоля.Свойство(ИмяСтороны, РучныеПравки) Тогда
			РучныеПравки.Вставить("Значение", Изменения[ИмяСтороны]);
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

