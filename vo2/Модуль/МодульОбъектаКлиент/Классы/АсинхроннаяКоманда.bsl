
//Класс команды для вызова СБИС3 плагина
&НаКлиенте
Функция НовыйАсинхроннаяСбисКоманда(ОбработчикВызова=Неопределено, ДопПараметры=Неопределено) Экспорт
	Перем СбисАккаунт, ВремяОжиданияОтвета, МодульВызоваКоманды;

	Результат = Новый Структура(
	"_класс,					ОбработчикВызова, ПараметрыКоманды, АргументВызова, Идентификатор, События, Ответ, ВремяОжиданияОтвета, ВремяВызова, ВремяПолучения, ПараметрыСобытий",
	"АсинхроннаяСбисКоманда",	ОбработчикВызова, Новый Структура); 
	Если Не ДопПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДопПараметры);
		Если ДопПараметры.Свойство("ПодпискиНаСобытия") Тогда
			Если Результат.События = Неопределено Тогда
				Результат.События = Новый Структура;
			КонецЕсли;
			Для Каждого КлючИЗначениеПОдписки Из ДопПараметры.ПодпискиНаСобытия Цикл
				НовоеСобытие = Новый Структура("Функция, ФункцияОшибки, Параметры, Модуль, МодульОшибки");
				ЗаполнитьЗначенияСвойств(НовоеСобытие, КлючИЗначениеПОдписки.Значение);
				Результат.События.Вставить(КлючИЗначениеПОдписки.Ключ, НовоеСобытие);
			КонецЦикла;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ОчиститьПараметры") Тогда
			Результат.ПараметрыКоманды.Вставить("ОчиститьПараметры", ДопПараметры.ОчиститьПараметры);
		КонецЕсли;
 
	КонецЕсли;
	Если Не Результат.ПараметрыКоманды.Свойство("ОчиститьПараметры") Тогда
		Результат.ПараметрыКоманды.Вставить("ОчиститьПараметры",	Ложь);
	КонецЕсли;
	
	Если Не Результат.ПараметрыКоманды.Свойство("МногопоточныйРежим") Тогда
		Результат.ПараметрыКоманды.Вставить("МногопоточныйРежим",	ПолучитьЗначениеПараметраСбис("МногопоточныйРежим"));
	КонецЕсли;
	
	Если Результат.События = Неопределено Тогда
		Результат.События = Новый Структура;
	КонецЕсли;
	
	Если Результат.Идентификатор = Неопределено Тогда
		Попытка
			Результат.Идентификатор = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ИдЗапросаВызова(ГлавноеОкно.Кэш);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИСПлагин_Команда", 400);
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ВремяОжиданияОтвета) Тогда
		Результат.ВремяОжиданияОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//Вызываем метод плагина и подключаем обработчик на результат.
&НаКлиенте
Процедура АсинхроннаяСбисКоманда_Установить(АсинхроннаяСбисКоманда, КлючУстановить, ЗначениеУстановить) Экспорт

	Если			КлючУстановить = "События" Тогда
		Для Каждого КлючИЗначениеПодписка Из ЗначениеУстановить Цикл
			АсинхроннаяСбисКоманда.События.Вставить(КлючИЗначениеПодписка.Ключ, КлючИЗначениеПодписка.Значение);
		КонецЦикла;
	ИначеЕсли       КлючУстановить = "ПараметрыСобытий" Тогда
		АсинхроннаяСбисКоманда.ПараметрыСобытий = ЗначениеУстановить;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Вызывает событие от подписки асинх.команды
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - АсинхроннаяСбисКоманда	- от которой вызывается событие
//  КлючСобытия				 - Строка					- Ключ для поиска в Событиях команды	
//  РезультатСобытия		 - Произв					- результат, куда будет помещен итог обработки
// 
// Возвращаемое значение:
//  Булево  - было ли вызвано событие, или нет.
//
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие) Экспорт
	Перем СобытиеВыполнить, лМодульСобытияВыполнить, лФункцияОбработкиОшибки, лМодульОшибкиВыполнить;
	
	Если Не АсинхроннаяСбисКоманда.События.Свойство(АсинхронноеСбисСобытие.Тип, СобытиеВыполнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СобытиеВыполнить.Свойство("Модуль", лМодульСобытияВыполнить) Тогда
		лМодульСобытияВыполнить = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция;
	КонецЕсли;
	
	Если СобытиеВыполнить.Свойство("ФункцияОшибки", лФункцияОбработкиОшибки)
		И	(	Не	СобытиеВыполнить.Свойство("МодульОшибки", лМодульОшибкиВыполнить)
			Или		лМодульОшибкиВыполнить = Неопределено) Тогда
		
		лМодульОшибкиВыполнить = лМодульСобытияВыполнить;
		
	КонецЕсли;	
	
	ДанныеВЛог = Новый Массив;
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		
		// Если режим отладки, то выгрузим для освобождаемого потока ответ в лог.
		ИмяМетодаВыполнено =  АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда);
		
		лОтладочныеДанные = Новый Структура("Тип, Вызов, Время, Сообщение, Идентификатор, Модуль", АсинхронноеСбисСобытие.Тип, ИмяМетодаВыполнено, ТекущаяДата());
		лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Идентификатор = АсинхроннаяСбисКоманда.Идентификатор;
		Если Не АсинхроннаяСбисКоманда.ПараметрыКоманды.ОчиститьПараметры Тогда
			лОтладочныеДанные.Сообщение = АсинхронноеСбисСобытие.Данные;
		КонецЕсли;
		
		ДанныеВЛог.Добавить(лОтладочныеДанные);

	КонецЕсли;
	
	Попытка
		
		ОбработчикСобытия = НовыйСбисОписаниеОповещения(СобытиеВыполнить.Функция, лМодульСобытияВыполнить, АсинхроннаяСбисКоманда.ПараметрыСобытий);
		ВыполнитьСбисОписаниеОповещения(АсинхронноеСбисСобытие, ОбработчикСобытия);
		
	Исключение
		
		ОшибкаОбработкиСобытия	= НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.АсинхроннаяСбисКоманда_ВызватьСобытие");
		АсинхронноСобытиеОшибки	= НовыйАсинхронноеСбисСобытие(АсинхронноеСбисСобытие.Идентификатор, ОшибкаОбработкиСобытия, "Error");
		Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
			
			// Событие ошибки обработки ответа в лог.
			ИмяМетодаВыполнено =  АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда);
			
			лОтладочныеДанные = Новый Структура("Тип, Вызов, Время, Сообщение, Идентификатор, Модуль", АсинхронноСобытиеОшибки.Тип, ИмяМетодаВыполнено, ТекущаяДата(), АсинхронноеСбисСобытие.Данные);
			лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
			лОтладочныеДанные.Идентификатор = АсинхроннаяСбисКоманда.Идентификатор;
			лОтладочныеДанные.Сообщение		= АсинхронноеСбисСобытие.Данные;
			
			ДанныеВЛог.Добавить(лОтладочныеДанные);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(лФункцияОбработкиОшибки) Тогда
			
			// Если упали в ошибку при обработке ответа, и есть обработка события ошибки
			ОбработчикСобытия = НовыйСбисОписаниеОповещения(лФункцияОбработкиОшибки, лМодульСобытияВыполнить, АсинхроннаяСбисКоманда.ПараметрыСобытий);
			ВыполнитьСбисОписаниеОповещения(АсинхронноеСбисСобытие, ОбработчикСобытия);
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ДанныеВЛог) Тогда
		
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		
	КонецЕсли;
	
	Возврат Истина

КонецФункции

//Вызывает команду и дожидается ответа.
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ОтправитьИДождатьсяОтвета(АсинхроннаяСбисКоманда) Экспорт
	
	Попытка
		АсинхроннаяСбисКоманда_Выполнить(АсинхроннаяСбисКоманда);
		КомандаОбработана = АсинхроннаяСбисКоманда_ПолучитьОтветСинхронно(АсинхроннаяСбисКоманда);
	Исключение
		РезультатВызова	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СбисОтправитьИОбработатьКоманду");
		НовоеСобытие	= НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, РезультатВызова, "Error");
		АсинхронноеСбисСобытие_ОсвободитьПоток(НовоеСобытие, АсинхроннаяСбисКоманда);
	КонецПопытки;
		
	Возврат АсинхроннаяСбисКоманда.Ответ;

КонецФункции
	
//Вызываем метод плагина и подключаем обработчик на результат.
&НаКлиенте
Процедура АсинхроннаяСбисКоманда_Выполнить(АсинхроннаяСбисКоманда) Экспорт
	
	АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, НовыйАсинхронноеСбисСобытие(,,"BeforeCall"));

	Попытка
		АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
		ВыполнитьСбисОписаниеОповещения(АсинхроннаяСбисКоманда, АсинхроннаяСбисКоманда.ОбработчикВызова);
		
		Если АсинхроннаяСбисКоманда.ПараметрыКоманды.ОчиститьПараметры Тогда
			АсинхроннаяСбисКоманда.АргументВызова.ПараметрыМетода = Неопределено;
		КонецЕсли;
		
		Если АсинхроннаяСбисКоманда.ПараметрыКоманды.МногопоточныйРежим Тогда 
			АсинхроннаяСбисКоманда_ЗанятьПоток(АсинхроннаяСБИСКоманда);
		КонецЕсли;
		
		СобытиеПослеОтправки = НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, , "AfterCall");
	Исключение
		//Генерируем событие об ошибке
		РезультатОтправка		= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".АсинхроннаяСбисКоманда_Выполнить");
		СобытиеПослеОтправки	= НовыйАсинхронноеСбисСобытие(АсинхроннаяСбисКоманда.Идентификатор, РезультатОтправка, "Error");
	КонецПопытки;
	
	СобытиеОбработано = АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, СобытиеПослеОтправки);
	
	Если Не СобытиеОбработано Тогда
		//Нет подписки на ошибку, прокинуть в команду.
		Если СобытиеПослеОтправки.Тип = "Error" Тогда
			ВызватьСбисИсключение(РезультатОтправка, "МодульОбъектаКлиент.АсинхроннаяСбисКоманда_Выполнить");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Ожидает получения ответа на вызов команды.
&НаКлиенте
Функция АсинхроннаяСбисКоманда_ПолучитьОтветСинхронно(АсинхроннаяСбисКоманда, ДопПараметры = Неопределено) Экспорт
	Перем Результат;
	ОжидаемыеКоманды = Новый Соответствие;
	ОжидаемыеКоманды.Вставить(АсинхроннаяСбисКоманда.Идентификатор, АсинхроннаяСбисКоманда);
	Результат = Неопределено;
	Пока Истина Цикл
		РезультатПолучения	= ГлобальныйКэш_ЧтениеОтветовИВызовСобытий(ОжидаемыеКоманды);
		Результат			= РезультатПолучения.Получить(АсинхроннаяСбисКоманда.Идентификатор);
		Если	Не Результат = Неопределено 				
			Или	Не АсинхроннаяСбисКоманда.ВремяОжиданияОтвета Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	
			Прервать;
		ИначеЕсли ТекущаяДата() - АсинхроннаяСбисКоманда.ВремяВызова > АсинхроннаяСбисКоманда.ВремяОжиданияОтвета Тогда
			//Установленный на команде таймаут
			ИмяПроцедурыВызова = АсинхроннаяСбисКоманда.ОбработчикВызова.ИмяПроцедуры;
			ВызватьСбисИсключение(, ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИСПлагин_ПолучитьОтвет_Синхронно",
				775,, ИмяПроцедурыВызова + "() не вернул ответ за разумное время",,
				"https://sbis.ru/help/integration/1C_set/modul/typical_errors/plugin_answer");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура АсинхроннаяСбисКоманда_ЗанятьПоток(АсинхроннаяСбисКоманда) Экспорт
	
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Вставить(АсинхроннаяСбисКоманда.Идентификатор, АсинхроннаяСбисКоманда);
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(АсинхроннаяСбисКоманда);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда) Экспорт
	
	ИмяКомандыВызова = АсинхроннаяСбисКоманда.ОбработчикВызова.ИмяПроцедуры;
		
	Если ИмяКомандыВызова = "СбисОтправитьКоманду_Асинхронно" Тогда
		
		ИмяКомандыВызова = АсинхроннаяСбисКоманда.АргументВызова.Метод;
		
	КонецЕсли;
	
	Возврат ИмяКомандыВызова;	
	
КонецФункции

