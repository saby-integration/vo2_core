
// Функция - создаёт описание сопоставления номенклатуры СБИС
//
// Параметры:
//  ДанныеЗаполнитьВходящие	 - Структура -  Строка входящего документа
//											ИЛИ Строка с формы входящего документа
//											ИЛИ Какая то еще структура
//  ИмяСБИС	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
// Коммент МАИ:
// Все штуки с окончанием "СБИС" - это касательно номенклатуры контрагента, 1С - нашей
//
//
&НаКлиенте
Функция НовыйСтрокаСопоставленияСБИСКлиент(ДанныеЗаполнитьВходящие = Неопределено, ДопПараметры = Неопределено) Экспорт // TO DO Ду-ду нужно разнести строку класса и строку СБИС в разные функции. Путаница происходит при заполнении
	
	// Прокинуть на класс признак "ИсточникЗаполнения" СБИС/1С, по умолчанию СБИС
	Результат = Новый Структура();
	Результат.Вставить("_класс", "СтрокаСопоставленияСБИС");
	Результат.Вставить("Номенклатура1С", Новый Соответствие);
	Результат.Вставить("НоменклатураСБИС", Новый Структура);
	Результат.Вставить("БазоваяЕдиницаОКЕИ", "796");  // 796 - ОКЕИ единицы "штуки", наиболее часто использующаяся единица
	Результат.Вставить("НеобходимоСопоставление", Ложь);       
	Результат.Вставить("НеобходимоАвтоматическоеСопоставление", Ложь);
	Результат.Вставить("УИДСтрокиСопоставления", Новый УникальныйИдентификатор);
	Результат.Вставить("Параметры", Новый Структура);
	
	Если НЕ ДанныеЗаполнитьВходящие = Неопределено
		И ДанныеЗаполнитьВходящие.Свойство("ИдентификаторДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнитьВходящие.ИдентификаторДокумента) Тогда
		
		Результат.Вставить("ИдентификаторДокумента", ДанныеЗаполнитьВходящие.ИдентификаторДокумента); // Нужно для сопоставления в СБИС
	Иначе
		Результат.Вставить("ИдентификаторДокумента", "");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Параметр Из ДопПараметры Цикл
			// Заполняем доп. параметры, например:
			// - "ИдентификаторДокумента" (напр. Заказ) для записи и чтения сопоставлений с него
			// - "ИдСтроки" - ключ для связи
			Результат.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	Иначе
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ЛокальнаяПеременная = Неопределено;
	Если ДопПараметры.Свойство("ИсточникЗаполнения", ЛокальнаяПеременная) Тогда
		Результат.Параметры.Вставить("ИсточникЗаполнения", ЛокальнаяПеременная);
	КонецЕсли;
	
	// Определяем приоритет для реквизита, который будет использоваться в качестве кода для сопоставления("Код") с типом "ТипКода": 
	// при заполнении класса берется первое по приоритету доступное и заполненное значение из "ДанныеЗаполнитьВходящие"
	Если Не ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
		ПорядокАвтоматическогоСопоставления = ПолучитьЗначениеПараметраСбис("ПорядокАвтоматическогоСопоставления");
		Если ЗначениеЗаполнено(ПорядокАвтоматическогоСопоставления) Тогда
			ПорядокАвтоматическогоСопоставления = МодульОбъектаКлиент().СбисРазложитьСтрокуВМассивПодстрокНаКлиенте(ПорядокАвтоматическогоСопоставления,",");
		Иначе
			ПорядокАвтоматическогоСопоставления = ПорядокАвтоматическогоСопоставленияПоУмолчаниюКлиент();
		КонецЕсли;
		ДопПараметры.Вставить("ПорядокАвтоматическогоСопоставления", ПорядокАвтоматическогоСопоставления);
	КонецЕсли;
	// Удаляем GTIN из списка, т.к. он заполняется в отельном поле
	ИндексGTIN = ДопПараметры.ПорядокАвтоматическогоСопоставления.Найти("GTIN");
	Если ИндексGTIN <> Неопределено Тогда
		ДопПараметры.ПорядокАвтоматическогоСопоставления.Удалить(ИндексGTIN);
	КонецЕсли;
	
	Результат.НоменклатураСБИС.Вставить("Наименование");
	Результат.НоменклатураСБИС.Вставить("Код");
	Результат.НоменклатураСБИС.Вставить("ТипКода");
	Результат.НоменклатураСБИС.Вставить("GTIN");
	Результат.НоменклатураСБИС.Вставить("Единицы", Новый Соответствие);
	Результат.НоменклатураСБИС.Вставить("Артикул");
	Результат.НоменклатураСБИС.Вставить("Идентификатор");
	
	Результат.НоменклатураСБИС.Вставить("Цена");
	Результат.НоменклатураСБИС.Вставить("Кол_во");
	Результат.НоменклатураСБИС.Вставить("Сумма");
	Результат.НоменклатураСБИС.Вставить("СуммаБезНал");
	Результат.НоменклатураСБИС.Вставить("СуммаНДС");
	Результат.НоменклатураСБИС.Вставить("СтавкаНДС");
	
	Результат.НоменклатураСБИС.Вставить("Характеристика", Новый Структура);
	Результат.НоменклатураСБИС.Характеристика.Вставить("Наименование");
	Результат.НоменклатураСБИС.Характеристика.Вставить("Идентификатор");
	
	Если Не ДанныеЗаполнитьВходящие = Неопределено Тогда
		СтрокаСопоставленияСБИСКлиент_Заполнить(Результат, ДанныеЗаполнитьВходящие, ДопПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Функция СтрокаСопоставленияСБИСКлиент_КлючЗаписи(СтрокаСопоставленияСБИС) Экспорт
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.КодПокупателя) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.КодПокупателя;	
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Идентификатор) Тогда
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Идентификатор;
	Иначе
		Результат = СтрокаСопоставленияСБИС.Номенклатура.Наименование;
	КонецЕсли;
	
	Если		ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Идентификатор) Тогда
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Идентификатор;
	ИначеЕсли	ЗначениеЗаполнено(СтрокаСопоставленияСБИС.Характеристика.Наименование) Тогда 
		Результат = Результат + "_" + СтрокаСопоставленияСБИС.Характеристика.Наименование;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтрокаСопоставленияСБИСКлиент_Заполнить(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить, ДопПараметры = Неопределено) Экспорт
	
	Перем СЛокальнаяПеременная, ТипКода;
	
	// ОСНОВНЫЕ ПОЛЯ
	
	// Океи базовой единицы измерения
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.БазоваяЕдиницаОКЕИ) Тогда
		Если	Не (СопоставлениеЗаполнить.Свойство("БазоваяЕдиницаОКЕИ", СЛокальнаяПеременная) И ЗначениеЗаполнено(СЛокальнаяПеременная))Тогда
			СЛокальнаяПеременная = "796";
		КонецЕсли;
		СтрокаСопоставленияСБИС.БазоваяЕдиницаОКЕИ = СокрЛП(СЛокальнаяПеременная);	// по умолчанию "796" = шт	
	КонецЕсли;
	
	// НОМЕНКЛАТУРА СБИС 
	
	Если СопоставлениеЗаполнить.Свойство("Артикул", СЛокальнаяПеременная) Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Артикул = СЛокальнаяПеременная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование) Тогда
		Если		СопоставлениеЗаполнить.Свойство("Название", СЛокальнаяПеременная) Тогда
			// Название в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("НазваниеСБИС", СЛокальнаяПеременная) Тогда
			// Название в новом формате	
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	Если СопоставлениеЗаполнить.Свойство("Цена")
		И ЗначениеЗаполнено(СопоставлениеЗаполнить.Цена) Тогда
		
		СписокСвойствЗаполнения = "Цена, Кол_во, Сумма, СуммаБезНал"; 
		ЗаполнитьЗначенияСвойств(СтрокаСопоставленияСБИС.НоменклатураСБИС, СопоставлениеЗаполнить, СписокСвойствЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Код) Тогда
		// Код устанавливается в зависимости от приоритетного типа кода
		// Так же возможно указание типа кода напрямую
		Если	СопоставлениеЗаполнить.Свойство("ТипКода", ТипКода)
			И	ЗначениеЗаполнено(ТипКода)
			И	ТипКода <> "GTIN"
			И	ТипКода <> "GTIN_СБИС" Тогда
			
			Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная) Тогда
				// В старом формате
			ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная) Тогда
				// В новом формате
			Иначе
				СЛокальнаяПеременная = "";
			КонецЕсли;
			
		ИначеЕсли	ЗначениеЗаполнено(ДопПараметры)
				И	ДопПараметры.Свойство("ПорядокАвтоматическогоСопоставления") Тогда
			
			Для Каждого ТипКода Из ДопПараметры.ПорядокАвтоматическогоСопоставления Цикл
				Если		СопоставлениеЗаполнить.Свойство(ТипКода, СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				ИначеЕсли	СопоставлениеЗаполнить.Свойство(ТипКода + "СБИС", СЛокальнаяПеременная)
						И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
					Прервать;
				Иначе
					СЛокальнаяПеременная = "";
				КонецЕсли;		
			КонецЦикла;
			
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			ТипКода = "";
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.ТипКода = СокрЛП(ТипКода);
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Код = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN) Тогда
		Если		СопоставлениеЗаполнить.Свойство("GTIN", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в старом формате
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("GTIN_СБИС", СЛокальнаяПеременная)
			И	Не	СЛокальнаяПеременная = "-" Тогда
			// GTIN в новом формате
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.GTIN = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ХарактеристикаПоставщика",		СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старов формате)
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("Характеристика", СЛокальнаяПеременная)
				И	ТипЗнч(СЛокальнаяПеременная) = Тип("Структура")
				И	СЛокальнаяПеременная.Свойство("Значение", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в старом формате, но в виде структуры(хз, КАК, строка жеж))
		ИначеЕсли	СопоставлениеЗаполнить.Свойство("ИмяХарактеристикиСБИС", СЛокальнаяПеременная)
				И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			// Характеристика поставщика (в новом формате)
		Иначе
			СЛокальнаяПеременная = "";
		КонецЕсли;
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование = Лев(СокрЛП(СЛокальнаяПеременная), 240);
	КонецЕсли;	
	
	// Единицы измерения СБИС
	Если НЕ ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы) Тогда
		Если	СопоставлениеЗаполнить.Свойство("ЕдИзмСБИС", СЛокальнаяПеременная)
			И	ТипЗнч(СЛокальнаяПеременная) = Тип("Массив")
			И	ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
			
			Для каждого СтрЕдиница Из СЛокальнаяПеременная Цикл
				СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СтрЕдиница);	
			КонецЦикла;	
		Иначе
			СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(СтрокаСопоставленияСБИС, СопоставлениеЗаполнить);
		КонецЕсли;
	КонецЕсли;
	
	// НОМЕНКЛАТУРА 1С
	
	Если ДопПараметры.Свойство("ЗаполнениеНоменклатуры1С")
		И СопоставлениеЗаполнить.Свойство("Номенклатура", СЛокальнаяПеременная)
		И ЗначениеЗаполнено(СЛокальнаяПеременная) Тогда
		
		Если ТипЗнч(СЛокальнаяПеременная) = Тип("Массив") Тогда
			
			Для каждого Строка1С Из СЛокальнаяПеременная Цикл 
				
				СтрНоменклатура1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(Строка1С.Номенклатура);
				Если СтрНоменклатура1С = Неопределено Тогда
					СтрНоменклатура1С = НовыйОписаниеНоменклатуры1СКлиент();
				КонецЕсли;
				
				ОписаниеНоменклатуры1СКлиент_Заполнить(СтрНоменклатура1С, Строка1С);
				СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(Строка1С.Номенклатура, СтрНоменклатура1С);
				
			КонецЦикла;	
			
		Иначе
			
			СтрНоменклатура1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(СЛокальнаяПеременная);
			Если СтрНоменклатура1С = Неопределено Тогда
				СтрНоменклатура1С = НовыйОписаниеНоменклатуры1СКлиент();
			КонецЕсли;
			
			ОписаниеНоменклатуры1СКлиент_Заполнить(СтрНоменклатура1С, СопоставлениеЗаполнить);
			СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(СЛокальнаяПеременная, СтрНоменклатура1С)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция  СтрокаСопоставленияСБИСКлиент_Получить(СтрокаСопоставленияСБИС, КлючЗначения) Экспорт
	
	Перем Результат;
	
	Если	Не	ТипЗнч(КлючЗначения) = Тип("Строка") Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С.Получить(КлючЗначения);
	ИначеЕсли	КлючЗначения = "Номенклатура1С" Тогда
		Возврат СтрокаСопоставленияСБИС.Номенклатура1С;
	ИначеЕсли	КлючЗначения = "Код" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Код;
	ИначеЕсли	КлючЗначения = "ТипКода" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.ТипКода;
	ИначеЕсли	КлючЗначения = "Наименование" Тогда
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование;
	ИначеЕсли	КлючЗначения = "ИдХарактеристикиСБИС" Тогда
		Если ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор;
		Иначе
			Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование;
		КонецЕсли;	
	ИначеЕсли СтрокаСопоставленияСБИС.НоменклатураСБИС.Свойство(КлючЗначения, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Получить(КлючЗначения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтрокаСопоставленияСБИСКлиент_Вставить(СтрокаСопоставленияСБИС, КлючЗначения, ЗначениеУстановить, ДопПараметры = Неопределено) Экспорт
	
	//TODO Переписать функцию, четко разделить вставку на ном. 1С и СБИС
	Если КлючЗначения = "Номенклатура1С" И ЭтоТипСбис(ЗначениеУстановить, "ОписаниеНоменклатуры1С") Тогда
		КлючНоменклатуры = ОписаниеНоменклатуры1СКлиент_Получить(ЗначениеУстановить, "Ссылка");
		СтрокаСопоставленияСБИС.Номенклатура1С.Вставить(КлючНоменклатуры, ЗначениеУстановить);
	ИначеЕсли КлючЗначения = "Код" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Код = ЗначениеУстановить;
	ИначеЕсли КлючЗначения = "ТипКода" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.ТипКода = ЗначениеУстановить;
	ИначеЕсли КлючЗначения = "Наименование" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Наименование = ЗначениеУстановить;
	ИначеЕсли КлючЗначения = "ИдХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор = ЗначениеУстановить;
	ИначеЕсли КлючЗначения = "ИмяХарактеристики" Тогда
		СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Наименование = ЗначениеУстановить;
		Если Не ЗначениеЗаполнено(СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор) Тогда
			СтрокаСопоставленияСБИС.НоменклатураСБИС.Характеристика.Идентификатор = ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли КлючЗначения = "Единица" И ЭтоТипСбис(ЗначениеУстановить, "СопоставлениеДляЕдиницы") Тогда
		Если ЗначениеУстановить._Класс = "СопоставлениеДляЕдиницы" Тогда
			Единица1С			= СопоставлениеДляЕдиницыКлиент_Получить(ЗначениеУстановить, "Ссылка");
			ВладелецЕдиницы1С	= СопоставлениеДляЕдиницыКлиент_Получить(ЗначениеУстановить, "Владелец");
			Если ВладелецЕдиницы1С = "-" Тогда
				// Ставим единицу всем позициям сопоставления, сюда приходит только если Единица1С есть, но без владельца
				Для Каждого КлючЗначениеНоменклатуры Из СтрокаСопоставленияСБИС.Номенклатура1С Цикл
					ОписаниеНоменклатуры1СКлиент_Вставить(КлючЗначениеНоменклатуры.Значение, "Единица", ЗначениеУстановить);
				КонецЦикла;
			ИначеЕсли ВладелецЕдиницы1С = "" Тогда
				ИдЗаписиСбис = СопоставлениеДляЕдиницыКлиент_Ключ(ЗначениеУстановить);
				СтрокаСопоставленияСБИС.НоменклатураСБИС.Единицы.Вставить(ИдЗаписиСбис, ЗначениеУстановить);
			Иначе
				ЗаписьНоменклатуры1С = СтрокаСопоставленияСБИС.Номенклатура1С.Получить(ВладелецЕдиницы1С);
				Если ЗаписьНоменклатуры1С = Неопределено Тогда
					ЗаписьНоменклатуры1С = НовыйОписаниеНоменклатуры1СКлиент();
					СтрокаСопоставленияСБИСКлиент_Вставить(СтрокаСопоставленияСБИС, ВладелецЕдиницы1С, ЗаписьНоменклатуры1С);
				КонецЕсли;
				ОписаниеНоменклатуры1СКлиент_Вставить(ЗаписьНоменклатуры1С, "Единица", ЗначениеУстановить);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Попытка
			СтрокаСопоставленияСБИС[КлючЗначения] = ЗначениеУстановить;
		Исключение
			// Прокинуть СБИС исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

