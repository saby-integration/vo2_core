
&НаКлиенте
Функция НовыйВложениеСБИС(Вложение = Неопределено, ДопПараметры) Экспорт 
	Перем Документы1СВложения;
	
	СтруктураВложения = Новый Структура("_класс", "ВложениеСБИС");
	
	Если Вложение = Неопределено Тогда
		Документы1СВложения = Новый СписокЗначений;
		Документы1СВложения.Добавить(ДопПараметры.ОснованиеПакета);
	Иначе
		//Конструктор от другого вложения
		Если Вложение.Свойство("Документы1С", Документы1СВложения) Тогда
			Документы1СВложенияКопия = Новый СписокЗначений;
			Документы1СВложенияКопия.ЗагрузитьЗначения(Документы1СВложения.ВыгрузитьЗначения());
			Документы1СВложения = Документы1СВложенияКопия;
		Иначе
			Документы1СВложения = Новый СписокЗначений;
			Документы1СВложения.Добавить(?(Вложение.Свойство("Документ1С"),Вложение.Документ1С, ДопПараметры.ОснованиеПакета));
		КонецЕсли;
		
		//Обязательные поля
		СтруктураВложения.Вставить("Отправитель",		?(Вложение.Свойство("Отправитель"),			Вложение.Отправитель,		"Отправитель"));
		СтруктураВложения.Вставить("Получатель",		?(Вложение.Свойство("Получатель"),			Вложение.Получатель,		"Получатель"));
		СтруктураВложения.Вставить("Ответственный", 	?(Вложение.Свойство("Ответственный"),		Вложение.Ответственный,		Новый Структура));
		СтруктураВложения.Вставить("Подразделение",		?(Вложение.Свойство("Подразделение"),		Вложение.Подразделение,		Новый Структура));
		СтруктураВложения.Вставить("Регламент",			?(Вложение.Свойство("Регламент"),			Вложение.Регламент,			Новый Структура));
		СтруктураВложения.Вставить("ДокументОснование",	?(Вложение.Свойство("ДокументОснование"),	Вложение.ДокументОснование,	Новый Массив));
		СтруктураВложения.Вставить("Название",			?(Вложение.Свойство("Название"),			Вложение.Название,			""));
		СтруктураВложения.Вставить("Тип",				?(Вложение.Свойство("Тип"),					Вложение.Тип,				""));
		СтруктураВложения.Вставить("ПодТип",			?(Вложение.Свойство("ПодТип"),				Вложение.ПодТип,			""));
		СтруктураВложения.Вставить("ВерсияФормата",		?(Вложение.Свойство("ВерсияФормата"),		Вложение.ВерсияФормата,		""));
		СтруктураВложения.Вставить("ПодВерсияФормата",	?(Вложение.Свойство("ПодВерсияФормата"),	Вложение.ПодВерсияФормата,	""));
		СтруктураВложения.Вставить("Дата",				?(Вложение.Свойство("Дата"),				Вложение.Дата,				""));
		СтруктураВложения.Вставить("Номер",				?(Вложение.Свойство("Номер"),				Вложение.Номер,				""));
		СтруктураВложения.Вставить("Сумма",				?(Вложение.Свойство("Сумма"),				Вложение.Сумма,				""));
		СтруктураВложения.Вставить("Примечание",		?(Вложение.Свойство("Примечание"),			Вложение.Примечание,		""));
		СтруктураВложения.Вставить("Сертификат",		?(Вложение.Свойство("Сертификат"),			Вложение.Сертификат,		Новый Структура));

		//Необязательные поля
		Если	Вложение.Свойство("ИспользоватьГенератор") Тогда
			СтруктураВложения.Вставить("ИспользоватьГенератор", Вложение.ИспользоватьГенератор);
		КонецЕсли;
		Если	Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
			СтруктураВложения.Вставить("НоменклатураКодКонтрагента", Вложение.НоменклатураКодКонтрагента);
		КонецЕсли;
		Если	Вложение.Свойство("ДопПоля") Тогда	
			СтруктураВложения.Вставить("ДопПоля",	Вложение.ДопПоля);
		КонецЕсли;
		Если	Вложение.Свойство("Провести") Тогда
			СтруктураВложения.Вставить("Провести",	Вложение.Провести);
		КонецЕсли;
	КонецЕсли;
	СтруктураВложения.Вставить("Документы1С", Документы1СВложения);
	
	Возврат СтруктураВложения;
	
КонецФункции

&НаКлиенте
Функция ВложениеСБИС_Получить(ВложениеСбис, КлючПараметраПолучить) Экспорт
	Перем Результат;
	
	Если		КлючПараметраПолучить = "ПараметрыИни" Тогда
		Результат = Новый Структура("Версия, Направление, Тип", "3.01");
		
		Если	НЕ ВложениеСбис.Свойство("Тип", Результат.Тип)	Тогда
			Если		СтрЧислоВхождений(НРег(ВложениеСбис.Название), "накладная") Тогда
				Результат.Тип = "ЭДОНакл";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "фактура")
					И	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет")	Тогда
				Результат.Тип = "СчФктр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "акт №") Тогда
				Результат.Тип = "АктВр";
			ИначеЕсли	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "счет на")
					Или	СтрЧислоВхождений(НРег(ВложениеСбис.Название), "заказ")	Тогда
				Результат.Тип = "Заказ";
			КонецЕсли;
		КонецЕсли;
		Если	НЕ ВложениеСбис.Свойство("Направление", Результат.Направление)	Тогда
			Результат.Направление = "Входящий";
		КонецЕсли;
	ИначеЕсли	КлючПараметраПолучить = "ТипВерсияВложения" Тогда

		ПараметрыИни	= ВложениеСБИС_Получить(ВложениеСбис, "ПараметрыИни");
		Результат		= ПараметрыИни.Тип + "_" + ПараметрыИни.Версия;
		Результат		= СтрЗаменить(Результат, ".", "_");
 
	Иначе
		ВложениеСбис.Свойство(КлючПараметраПолучить, Результат)
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция - определяет сторону по роли, с учетом дополнительной: Получатель/Грузополучатель, Отправитель/Грузоотрправитель.
//	вспомогательная сторона может стать основной, если выполнены условия:
//	1. совпадает ИНН
//	2. заполнен КПП (ГП/ГО) и отличается от основной роли и код филиала(не пустой) либо
//	(считаем, что является филиалом)
//	3. не стоит явного запрета на смену (доп.свойство на карточке в 1С "ИспользоватьКакПолучателя(Отправителя)")
//
// Параметры:
//  ВложениеСБИС - класс вложение СБИС	- структура с данными сторон
//  РольДО		 - строка				- роль Отправитель/Получатель
// 
// Возвращаемое значение:
//  класс сторона - структура для роли документооборота
//
&НаКлиенте
Функция ВложениеСБИС_СторонаПоРоли(ВложениеСБИС, РольДО) Экспорт
	Перем ДанныеСтруктураФайла, ДанныеСтороныПоРоли, ДанныеСтороныПоВспомогательнойРоли, ЗапретРедакций;

	ИмяВспомогательнойРоли	= "Грузо" + РольДО;
	
	//Проверка основной стороны
	Если		Не ВложениеСБИС.Свойство(РольДО, ДанныеСтороныПоРоли) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли	Не	ВложениеСБИС.Свойство("СтруктураФайла", ДанныеСтруктураФайла) Тогда
		
		//Нет данных файла на вложении, неоткуда брать вспомогательную роль.
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоРоли = ДанныеСтруктураФайла.Файл.Документ[РольДО];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;
	
	
	Если РольДО = "Отправитель" Тогда
		
		//TODO удалить в 24.1100
		//Временный костыль для установки отправителя без переопределения стороны, пока не будет опции для филиалов.

	//Поиск вспомогательной стороны
	ИначеЕсли 		ДанныеСтруктураФайла = Неопределено Тогда
		
		//Нет данных файла на вложении, неоткуда брать основную роль.
		Если Не ТипЗнч(ДанныеСтороныПоРоли) = Тип("Структура") Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли	Не	ДанныеСтруктураФайла.Файл.Документ.Свойство(ИмяВспомогательнойРоли, ДанныеСтороныПоВспомогательнойРоли) Тогда
		
		//Вспомогательных ролей нет
		
	ИначеЕсли	Не ТипЗнч(ДанныеСтороныПоВспомогательнойРоли) = Тип("Структура") Тогда
		
		ДанныеСтороныПоВспомогательнойРоли = ДанныеСтруктураФайла.Файл.Документ[ИмяВспомогательнойРоли];
		
	Иначе
		
		//Данные определены
		
	КонецЕсли;	
	
	ИспользоватьКакРольОсн		= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоРоли, "ИспользоватьКак" + РольДО);
	ВспомогательнаяРольФилиал	= Ложь;

	Если	ДанныеСтороныПоВспомогательнойРоли = Неопределено Тогда
		
		ИспользоватьКакРольОсн	= Истина;
		
	Иначе
		
		ИспользоватьКакРольДоп	= ПрочитатьДополнительныйПараметрСтороны(ДанныеСтороныПоВспомогательнойРоли, "ИспользоватьКак" + РольДО);
		ПлоскиеДанныеРоли		= Сторона_Выгрузить(ДанныеСтороныПоРоли);
		ПлоскиеДанныеВспомРоли	= Сторона_Выгрузить(ДанныеСтороныПоВспомогательнойРоли);
		ЗапретРедакций			= ДанныеСтороныПоРоли.Свойство("ЗапретРедакций") И ДанныеСтороныПоРоли.ЗапретРедакций;
		
		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал: 
		//Заполнен и отличается КПП, либо КПП заполнен и совпадает, но отличается КодФилиала
		Если 	ПлоскиеДанныеРоли.ИНН = ПлоскиеДанныеВспомРоли.ИНН
			И	ЗначениеЗаполнено(ПлоскиеДанныеРоли.КПП)
			И	ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КПП) Тогда
			//Проверить, что филиал - заполнен и отличается КФ, либо заполнен, но отличается КПП.
			ВспомогательнаяРольФилиал =	Не	ПлоскиеДанныеРоли.КПП = ПлоскиеДанныеВспомРоли.КПП
									Или	(		ЗначениеЗаполнено(ПлоскиеДанныеВспомРоли.КодФилиала)
										И	Не	ПлоскиеДанныеРоли.КодФилиала = ПлоскиеДанныеВспомРоли.КодФилиала);
		
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьКакРольДоп =	ИспользоватьКакРольДоп = Истина
							Или	ВспомогательнаяРольФилиал;
	
	Если		ИспользоватьКакРольОсн = Истина
		Или	Не	ИспользоватьКакРольДоп Тогда 

		//Явный признак на основной стороне использовать как %роль%, либо нет доп. стороны, либо не филиал
		ДанныеРезультат = ДанныеСтороныПоРоли;

	Иначе

		//Стоит явный признак на доп стороне использовать как %роль%, либо это филиал
		ДанныеРезультат = ДанныеСтороныПоВспомогательнойРоли;
		
	КонецЕсли;
	
	ДанныеРезультат = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСкопироватьОбъектНаКлиенте(ДанныеРезультат);

	//Прокинуть признак запрета редакций, если был
	Если	Не	ЗапретРедакций = Неопределено
		И		ЗапретРедакций Тогда
	
		ДанныеРезультат.Вставить("ЗапретРедакций", Истина);
		
	КонецЕсли;
	
	//Установить код страны, если явно отсутсвует
	Если		ДанныеРезультат.Свойство("СвЮЛ")
		И	Не	ДанныеРезультат.СвЮл.Свойство("КодСтраны") Тогда
		
		ДанныеРезультат.СвЮЛ.Вставить("КодСтраны", "643");
		
	КонецЕсли;
	
	Возврат ДанныеРезультат	
	
КонецФункции

