
&НаКлиенте
Функция НовыйАсинхронноеСбисСобытие(СбисИдСобытия = "", СбисДанныеСобытия = Неопределено, СбисТипСобытия = "") Экспорт
	
	Результат = Новый Структура("_класс, Идентификатор, Данные, Тип, Получено", "АсинхронноеСбисСобытие", СбисИдСобытия);
	
	АсинхронноеСбисСобытие_Установить(Результат, "Тип",		СбисТипСобытия);
	АсинхронноеСбисСобытие_Установить(Результат, "Данные",	СбисДанныеСобытия);
	АсинхронноеСбисСобытие_Установить(Результат, "Получено");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, КлючУстановить, ЗначениеУстановить=Неопределено)
	
	Если			КлючУстановить = "Тип" Тогда
		ТипСобытияУстановить = НРег(ЗначениеУстановить);
		Если		ТипСобытияУстановить = "event"			Тогда
			АсинхронноеСбисСобытие.Тип = "Event";
		ИначеЕсли 	ТипСобытияУстановить = "message"		Тогда
			АсинхронноеСбисСобытие.Тип = "Message";
		ИначеЕсли	ТипСобытияУстановить = "error"			Тогда
			АсинхронноеСбисСобытие.Тип = "Error";
		ИначеЕсли	ТипСобытияУстановить = "criticalerror"	Тогда
			АсинхронноеСбисСобытие.Тип = "CriticalError";
		ИначеЕсли	ТипСобытияУстановить = "timeouterror"	Тогда
			АсинхронноеСбисСобытие.Тип = "TimeoutError";
		ИначеЕсли	ТипСобытияУстановить = "async"			Тогда
			АсинхронноеСбисСобытие.Тип = "Async";
		ИначеЕсли	ТипСобытияУстановить = "asyncerror"		Тогда
			АсинхронноеСбисСобытие.Тип = "AsyncError";
		ИначеЕсли	ТипСобытияУстановить = "beforecall"		Тогда
			АсинхронноеСбисСобытие.Тип = "BeforeCall";
		ИначеЕсли	ТипСобытияУстановить = "aftercall"		Тогда
			АсинхронноеСбисСобытие.Тип = "AfterCall";
		Иначе
			АсинхронноеСбисСобытие.Тип = "Unknown";
		КонецЕсли;
	ИначеЕсли	КлючУстановить = "Данные" Тогда
		Если	ЭтоТипСбис(ЗначениеУстановить, "АсинхронноеСбисСобытие") Тогда
			АсинхронноеСбисСобытие.Данные	= ЗначениеУстановить.Данные;
			Если АсинхронноеСбисСобытие.Тип = "Unknown" Тогда
				АсинхронноеСбисСобытие.Тип = ЗначениеУстановить.Тип;
			КонецЕсли;
			Если АсинхронноеСбисСобытие.Идентификатор = "" Тогда
				АсинхронноеСбисСобытие.Идентификатор = ЗначениеУстановить.Идентификатор;
			КонецЕсли;
			АсинхронноеСбисСобытие_Установить(АсинхронноеСбисСобытие, "Получено", ЗначениеУстановить.ПОлучено);
		Иначе
			АсинхронноеСбисСобытие.Данные	= ЗначениеУстановить;
		КонецЕсли;
	ИначеЕсли	КлючУстановить = "Получено" Тогда
		Если	АсинхронноеСбисСобытие.Получено = Неопределено
			И	ЗначениеУстановить = Неопределено Тогда
			ЗначениеУстановить = ТекущаяДата();
		КонецЕсли;
		АсинхронноеСбисСобытие.Получено = ЗначениеУстановить;
	Иначе
		АсинхронноеСбисСобытие[КлючУстановить] = ЗначениеУстановить;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обрабатывает полученное событие из пула ответов
//
// Параметры:
//  АсинхронноеСбисСобытие	 - АсинхронноеСбисСобытие	 - Структура, с описанием полученного ответа
//  Сбис3КомандыОжидаются	 - Соответствие				 - Пул запущенных команд, по которым ожидается ответ
//  Результат				 - Соответствие				 - Пул полученных ответов, по запущенным командам из Сбис3КомандыОжидаются
//
&НаКлиенте
Процедура	АсинхронноеСбисСобытие_ОбработатьПолученное(АсинхронноеСбисСобытие, Сбис3КомандыОжидаются, Результат)
	
	ОтветОбработан = Ложь;
	
	Если 		АсинхронноеСбисСобытие.Тип = "Event" Тогда
		ОтветОбработан = АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие);
	ИначеЕсли   АсинхронноеСбисСобытие.Тип = "CriticalError" Тогда
		ОтветОбработан = АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие);
		Если Не Сбис3КомандыОжидаются = Неопределено Тогда 
			//При крите дать ответ на все ожидаемые команды
			Для Каждого Сбис3КомандаОжидается Из Сбис3КомандыОжидаются Цикл
				НовоеАсинхронноеСобытие			= НовыйАсинхронноеСбисСобытие(Сбис3КомандаОжидается.Значение.Идентификатор, АсинхронноеСбисСобытие);
				КомандаОбрабатываемогоОтвета	= Неопределено;
				
				АсинхронноеСбисСобытие_ОсвободитьПоток(НовоеАсинхронноеСобытие, КомандаОбрабатываемогоОтвета, ОтветОбработан);
				
				Если Не КомандаОбрабатываемогоОтвета = Неопределено Тогда
					Результат.Вставить(Сбис3КомандаОжидается.Ключ, КомандаОбрабатываемогоОтвета); 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли 	АсинхронноеСбисСобытие.Тип = "Async" Тогда
		//Если это асинхронное событие, то проставим в команду что есть ответ, но поток не снимается а продолжается его ожидание
		АсинхронныйПоток = АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие);
		Если Не АсинхронныйПоток = Неопределено Тогда
			АсинхронныйПоток.Ответ = АсинхронноеСбисСобытие.Данные;
		КонецЕсли;
		Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", АсинхронноеСбисСобытие.Тип);
			лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
			лОтладочныеДанные.Сообщение		= АсинхронноеСбисСобытие.Данные;
			лОтладочныеДанные.Идентификатор	= АсинхронноеСбисСобытие.Идентификатор;
			лОтладочныеДанные.Время			= АсинхронноеСбисСобытие.Получено;
			Если АсинхронныйПоток = Неопределено Тогда
				лОтладочныеДанные.Вызов		= "Unknown";
			Иначе
				лОтладочныеДанные.Вызов		=  АсинхроннаяСбисКоманда_ИмяВызова(АсинхронныйПоток);
			КонецЕсли;
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
		
		//Асинхронное событие, поместить промежуточный ответ на всякий
		Возврат;
	КонецЕсли;
	
	//После чтения ответа, посмотрим что с ним сделать:
	//1. Есть соответствующий запрос, отправленный ранее. Тогда надо освободить поток и проверить наличие подписки на тип ответа и вызвать обработчик.
	//2. Мы ожидаем этот ответ синхронно, тогда добавим его в результат чтения.
	//3. Если не 1 и не 2, то добавим полученный ответ в список "ненужных", при необходимости обработать, или выгрузить в лог (включить режим отладки).
			
	КомандаОбрабатаемогоОтвета = Неопределено;
	АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, КомандаОбрабатаемогоОтвета, ОтветОбработан);
	
	//Если команда ожидается как ответ, подготовим результат
	КомандаНаВозврат = Неопределено;
	Если	Не Сбис3КомандыОжидаются		= Неопределено
		И	Не КомандаОбрабатаемогоОтвета	= Неопределено Тогда
		КомандаНаВозврат = Сбис3КомандыОжидаются.Получить(КомандаОбрабатаемогоОтвета.Идентификатор);
	КонецЕсли;
	
	Если КомандаНаВозврат = Неопределено Тогда
		
		Если Не ОтветОбработан Тогда
			АсинхронноеСбисСобытие_ДобавитьНеобработанныйОтвет(АсинхронноеСбисСобытие);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	Результат.Вставить(АсинхронноеСбисСобытие.Идентификатор, КомандаНаВозврат);
	Сбис3КомандыОжидаются.Удалить(АсинхронноеСбисСобытие.Идентификатор);
			
КонецПроцедуры
	
//Вызывает метод подписки на событие Event
//Параметры: 
//Сбис3СобытиеОтвет - описание полученного события
//ДопПараметры - дополнительные параметры вызова, которые передаются в обработчик события.
//РезультатСобытия - в переменную помещается результат вызова события по подписке, если функция что-то возвращает
&НаКлиенте
Функция АсинхронноеСбисСобытие_ВызватьСобытиеПоПодписке(АсинхронноеСбисСобытие, ДопПараметры=Неопределено)
	
	СбисПараметрыПодписки = ГлобальныйКэш.СБИС.ДанныеИнтеграции.Подписки.Получить(АсинхронноеСбисСобытие.Идентификатор);
	Результат	= Ложь;
	Отказ		= Ложь;
	Если Не СбисПараметрыПодписки = Неопределено Тогда
		ИмяФункцииПодписки		= Неопределено;
		МодульФункцииПодписки	= Неопределено;
		
		Если Не СбисПараметрыПодписки.Свойство("Функция", ИмяФункцииПодписки) Тогда
			//Для события QueryID = его тип, если не указана функция вызова
			ИмяФункцииПодписки = АсинхронноеСбисСобытие.Идентификатор;
		КонецЕсли;
		Если Не СбисПараметрыПодписки.Свойство("Модуль", МодульФункцииПодписки) Тогда
			МодульФункцииПодписки = МодульОбъектаКлиент();
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура("Основные, Дополнительные", СбисПараметрыПодписки.Параметры, ДопПараметры);
		Попытка
			ОбработчикСобытия = НовыйСбисОписаниеОповещения(ИмяФункцииПодписки, МодульФункцииПодписки, ПараметрыСобытия);
			ВыполнитьСбисОписаниеОповещения(АсинхронноеСбисСобытие, ОбработчикСобытия);
		Исключение
			РезультатСобытия = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент." + ИмяФункцииПодписки,,,,Новый Структура("data", АсинхронноеСбисСобытие));
			Отказ = Истина;
		КонецПопытки;
		Результат = Истина;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		ДанныеВЛог = Новый Массив;
		
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", АсинхронноеСбисСобытие.Тип, "МодульОбъектаКлиент", АсинхронноеСбисСобытие.Получено, АсинхронноеСбисСобытие.Идентификатор, АсинхронноеСбисСобытие.Данные, "Unknown");
		Если Результат Тогда
			лОтладочныеДанные.Вызов = ИмяФункцииПодписки;
		КонецЕсли;
		ДанныеВЛог.Добавить(лОтладочныеДанные);

		Если Отказ Тогда
			НовоеАсинхронноеСобытие = НовыйАсинхронноеСбисСобытие(, РезультатСобытия, "AsyncError");
			//Если пришёл результат от подписки на событие, то его тоже выгрузим в лог
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", НовоеАсинхронноеСобытие.Тип, "МодульОбъектаКлиент", НовоеАсинхронноеСобытие.Получено, АсинхронноеСбисСобытие.Идентификатор, АсинхронноеСбисСобытие.Данные, ИмяФункцииПодписки);
			ДанныеВЛог.Добавить(лОтладочныеДанные);
		КонецЕсли;
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатСобытия, "МодульОбъектаКлиент.АсинхронныеВызовы_ВызватьСобытиеПоПодписке");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Добавляет не ожидаемый ответ от плагина в список на обработку/очистку. Подключает очищалку. 
&НаКлиенте
Процедура АсинхронноеСбисСобытие_ДобавитьНеобработанныйОтвет(АсинхронноеСбисСобытие) Экспорт
	
	ИдентификаторОтвета		= АсинхронноеСбисСобытие.Идентификатор;
	НеобработанныеОтветы	= ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Получить(ИдентификаторОтвета);
	Если НеобработанныеОтветы = Неопределено Тогда
		НеобработанныеОтветы = Новый Массив;
	КонецЕсли;
	НеобработанныеОтветы.Добавить(АсинхронноеСбисСобытие);
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Вставить(ИдентификаторОтвета, НеобработанныеОтветы);
	
	ГлобальныйКэш_ОчиститьНевостребованныеОтветы();
	
КонецПроцедуры

// Процедура освобождает команду от выполнения с вызовом события.
// Если команда не указана, то получает по событию. Если событие ещё не обрабатывалось, то запускает вызов обработчика из команды события по типу
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - 	 - 
//  АсинхронноеСбисСобытие	 - 	 - 
//  СобытиеОбработано		 - 	 - 
//
//	Возвращает команду из потока
&НаКлиенте
Процедура АсинхронноеСбисСобытие_ОсвободитьПоток(АсинхронноеСбисСобытие, АсинхроннаяСбисКоманда = Неопределено, СобытиеОбработано = Ложь) Экспорт
	
	Если АсинхроннаяСбисКоманда = Неопределено Тогда
		АсинхроннаяСбисКоманда = АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие);
		Если АсинхроннаяСбисКоманда = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	АсинхроннаяСбисКоманда.ВремяПолучения	= АсинхронноеСбисСобытие.Получено;
	АсинхроннаяСбисКоманда.Ответ			= АсинхронноеСбисСобытие;
	
	Если Не СобытиеОбработано Тогда
		
		СобытиеОбработано = АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);
		
	ИначеЕсли ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
		
		// Если режим отладки, то выгрузим для освобождаемого потока ответ в лог.
		ИмяМетодаВыполнено =  АсинхроннаяСбисКоманда_ИмяВызова(АсинхроннаяСбисКоманда);
		
		лОтладочныеДанные = Новый Структура("Тип, Вызов, Время, Сообщение, Идентификатор, Модуль", АсинхронноеСбисСобытие.Тип, ИмяМетодаВыполнено, ТекущаяДата());
		лОтладочныеДанные.Модуль		= ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Идентификатор = АсинхроннаяСбисКоманда.Идентификатор;
		Если Не АсинхроннаяСбисКоманда.ПараметрыКоманды.ОчиститьПараметры Тогда
			лОтладочныеДанные.Сообщение = АсинхронноеСбисСобытие.Данные;
		КонецЕсли;
		
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));

	КонецЕсли;
	
	ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Удалить(АсинхроннаяСбисКоманда.Идентификатор);
	
КонецПроцедуры

// Функция возвращает команду от полученного события.
//
// Параметры:
//  АсинхроннаяСбисКоманда	 - 	 - 
//
//	Возвращает команду из потока
&НаКлиенте
Функция АсинхронноеСбисСобытие_ПолучитьПоток(АсинхронноеСбисСобытие) Экспорт
	
	Возврат ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Получить(АсинхронноеСбисСобытие.Идентификатор);
	
КонецФункции

