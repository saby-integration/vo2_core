
// Функция - Конструктор класс описание оповещения с учетом старых ОФ
//
// Параметры: аналогично ОписаниеОповещения
// 
// Возвращаемое значение:
// СбисОписаниеОповещения  - экземпляр класса
//
&НаКлиенте
Функция НовыйСбисОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры = Неопределено, СбисПроцедураИсключения = Неопределено, СбисМодульИсключения = Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ГлавноеОкно.Кэш.СовместимостьМетодов.Объекты1С.ОписаниеОповещения Тогда
			СтрокаВычислить = "Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры)";
			Если Не СбисПроцедураИсключения = Неопределено Тогда
				СбисМодульИсключенияУстановить = СбисМодульИсключения;
				Если СбисМодульИсключенияУстановить = Неопределено Тогда 
					СбисМодульИсключенияУстановить = СбисМодуль;
					СтрокаВычислить = СтрЗаменить(СтрокаВычислить, ")", ", СбисПроцедураИсключения, СбисМодульИсключенияУстановить)");
				КонецЕсли;
			КонецЕсли;
			//Вычислить для маскировки от синтаксиса
			ОписаниеОповещенияРезультат = Вычислить(СтрокаВычислить);
		Иначе
			ОписаниеОповещенияРезультат = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки", СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключения);
		КонецЕсли;
	#Иначе
		Если СбисПроцедураИсключения = Неопределено Тогда
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры);
		Иначе
			СбисМодульИсключенияУстановить = СбисМодульИсключения;
			Если СбисМодульИсключенияУстановить = Неопределено Тогда 
				СбисМодульИсключенияУстановить = СбисМодуль;
			КонецЕсли;
			ОписаниеОповещенияРезультат = Новый ОписаниеОповещения(СбисПроцедура, СбисМодуль, СбисДопПараметры, СбисПроцедураИсключения, СбисМодульИсключенияУстановить);
		КонецЕсли;
	#КонецЕсли
	Возврат ОписаниеОповещенияРезультат;
КонецФункции

// Процедура - Выполняет описание оповещения.
//	Обработка результата функций через Возврат не поддерживается. 
//	Для получения результата требуется проброска в ДополнительныеПараметры ОписанияОповещения тега Результат с заполнением в обработчике
//
// Параметры:
//  РезультатВызова			 - Произвольный				- первый аргумент в вызове
//  СбисОписаниеОповещения	 - СбисОписаниеОповещения	- вызываемый экземпляр описания оповещения для обработки
//
&НаКлиенте
Процедура ВыполнитьСбисОписаниеОповещения(РезультатВызова=Неопределено, СбисОписаниеОповещения) Экспорт
	
	Если СбисОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ГлавноеОкно.Кэш.СовместимостьМетодов.Объекты1С.ОписаниеОповещения Тогда
			Выполнить("ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова)");//Через Выполнить для старых платформ. Маскировка от синтаксиса. 
		Иначе
				Попытка
					Выполнить("СбисОписаниеОповещения.Модуль." + СбисОписаниеОповещения.ИмяПроцедуры + "(РезультатВызова, СбисОписаниеОповещения.ДополнительныеПараметры)");
			Исключение
				СтандартнаяОбработка = Истина;
				Если ЗначениеЗаполнено(СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки) Тогда
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Выполнить("СбисОписаниеОповещения.МодульОбработкиОшибки." + СбисОписаниеОповещения.ИмяПроцедурыОбработкиОшибки + "(ИнформацияОбОшибке, СтандартнаяОбработка, СбисОписаниеОповещения.ДополнительныеПараметры)");
				КонецЕсли;
				Если СтандартнаяОбработка Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	#Иначе
		ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова);
	#КонецЕсли
	
КонецПроцедуры

