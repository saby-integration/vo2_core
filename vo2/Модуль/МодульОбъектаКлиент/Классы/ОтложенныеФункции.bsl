
// Класс - отложенное действие
//
// Параметры:
//  ПараметрыКонструктора	 - Структура, ОписаниеОповещения	 - описанине для создания отложенной операции
//		Структура:
//			ОписаниеОповещения			- Условно-Обязательный, СбисОписаниеОповещения - обработчик вызова.
//			ИмяПроцедуры				- Условно-Обязательный, Строка, - Имя - имя процедуры/функции для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//			Модуль						- Условно-Обязательный, Форма/МодульОбъекта, - модуль для описания оповещения.				Если не указан параметр "ОписаниеОповещения"
//			ДополнительныеПараметры 	- Необязательный, Структура(Неопределено) - Второй параметр для описания оповещения.		Если не указан параметр "ОписаниеОповещения"
//			ИмяПроцедурыОбработкиОшибки	- Необязательный Строка, - Имя - имя процедуры/функции для описания оповещения при ошибке.	Если не указан параметр "ОписаниеОповещения"
//			МодульОбработкиОшибки		- Необязательный Форма/МодульОбъекта, - модуль для описания оповещения при ошибке.			Если не указан параметр "ОписаниеОповещения"
//			ИдентификаторДействия		- Необязательный, Строка(ИмяПроцедуры) - ключ для поиска действия. Если не указан, то берётся имя процедуры из описания оповещения.
//			Периодичность				- Необязательный, Число, секунды (0.1) - как часто производится вызов. Если не указано, то сразу после завершения последнего вызова. 
//			Аргумент 					- Необязательный, Произвольный(Неопределено),  - Аргумент для вызова описания оповещения
//			ЧислоВызовов				- Необязательнвц, Число(1) - сколько раз делать вызов. Если Неопределено, то бесконечно.
//			ВызватьСразу				- Необязательный, Булево(Истина) - Выполнить сразу при завершении текущих вызовов. Смысл указывать есть только при большой периодичности между вызовами, когда нет необходимости вызова сразу при подключении операции.
//		ОписаниеОповещения: для вызова сразу после того, как будет завершено предыдущее выполнение кода
// 
// Возвращаемое значение:
//  Экземпляр(Структура) - класс отложенное действие
//
&НаКлиенте
Функция НовыйОтложенноеДействие(ПараметрыКонструктора) Экспорт
	Перем СбисОписаниеОповещения, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки, ИдДействия;
	Попытка
		// ПериодичностьМС	- 100, сразу при срабатывании
		// ЧислоВызовов		- 1, однократно. Для бесконечного вызова - Неопределено
		// Запущен - для исключения коллизий при модальном режиме, когда действие запускается несколько раз
		ОбъектОтложенногоДействия = Новый Структура(
		"_класс,				СледующийВызовМС,				Запущен,	ПериодичностьМС,	ЧислоВызовов, ОписаниеОповещения, ПоследнийВызовМС, Аргумент, ИдДействия", 
		"ОтложенноеДействие",	ПолучитьДатуВМиллисекундах(),	Ложь,		100,				1);
		
		ОбъектОтложенногоДействия.ИдДействия = Новый УникальныйИдентификатор;
		
		Если	ЭтоТипСбис(ПараметрыКонструктора, "СбисОписаниеОповещения") Тогда
			
			ОбъектОтложенногоДействия.ОписаниеОповещения = ПараметрыКонструктора;
			
		Иначе
			
			Если Не ПараметрыКонструктора.Свойство("ОписаниеОповещения", СбисОписаниеОповещения) Тогда
			
				ПараметрыКонструктора.Свойство("ДополнительныеПараметры",		ДопПараметры);
				ПараметрыКонструктора.Свойство("ИмяПроцедурыОбработкиОшибки",	ИмяПроцедурыОбработкиОшибки);
		 		ПараметрыКонструктора.Свойство("МодульОбработкиОшибки",			МодульОбработкиОшибки);
				СбисОписаниеОповещения = НовыйСбисОписаниеОповещения(ПараметрыКонструктора.ИмяПроцедуры, ПараметрыКонструктора.Модуль, ДопПараметры, ИмяПроцедурыОбработкиОшибки, МодульОбработкиОшибки);
				
			КонецЕсли;
			
			ОбъектОтложенногоДействия.ОписаниеОповещения = СбисОписаниеОповещения;
			
			
			Если ПараметрыКонструктора.Свойство("ИдентификаторДействия") Тогда
				
				ОбъектОтложенногоДействия.ИдДействия = ПараметрыКонструктора.ИдентификаторДействия;
				
			КонецЕсли;
			
			Если ПараметрыКонструктора.Свойство("Периодичность") Тогда
				
				ОбъектОтложенногоДействия.ПериодичностьМС = ПараметрыКонструктора.Периодичность * 1000;
				
				Если ПараметрыКонструктора.Свойство("ВызватьСразу") И Не ПараметрыКонструктора.ВызватьСразу Тогда
					
					//ПО умолчанию, вызывается при попадании в обработчик, но можно отключить, тогда вызов будет через указанную периодичность по таймеру от момента подключения
					ОбъектОтложенногоДействия.СледующийВызовМС = ОбъектОтложенногоДействия.СледующийВызовМС + ОбъектОтложенногоДействия.ПериодичностьМС;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыКонструктора.Свойство("ЧислоВызовов") Тогда
				
				ОбъектОтложенногоДействия.ЧислоВызовов = ПараметрыКонструктора.ЧислоВызовов;
				
			КонецЕсли;
			
			ПараметрыКонструктора.Свойство("Аргумент", ОбъектОтложенногоДействия.Аргумент);
			
		КонецЕсли;
					
		Возврат ОбъектОтложенногоДействия;
		
	Исключение
		
		ВызватьИсключение СбисИсключение_Представление(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НовыйОтложенноеДействие"));
		
	КонецПопытки;
КонецФункции

// Функция - создает копию отложенного действия
//
// Параметры:
//  ОтложенноеДействие	 - Объект отложенное действие, которое надо запустить на выполнение 
//
&НаКлиенте
Функция ОтложенноеДействие_Скопировать(ОтложенноеДействие) Экспорт
	
	ОбъектОтложенногоДействия = Новый Структура(
	"_класс, ОписаниеОповещения, СледующийВызовМС, ЧислоВызовов, ПоследнийВызовМС, ПериодичностьМС, Аргумент, ИдДействия");
	ЗаполнитьЗначенияСвойств(ОбъектОтложенногоДействия, ОтложенноеДействие);
	ОбъектОтложенногоДействия.ИдДействия = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	Возврат ОбъектОтложенногоДействия;
	
КонецФункции
	
// Процедура - запускает отложенное действие на выполнение
//
// Параметры:
//  ОтложенноеДействие	 - Объект отложенное действие, которое надо запустить на выполнение 
//
&НаКлиенте
Процедура ПодключитьОтложенноеДействие(ОтложенноеДействие) Экспорт
	
	Если		ЭтоТипСбис(ОтложенноеДействие, "СбисОписаниеОповещения") Тогда
		
		ОтложеннаяОперацияПодключить = НовыйОтложенноеДействие(ОтложенноеДействие);
		
	ИначеЕсли	ЭтоТипСбис(ОтложенноеДействие, "ОтложенноеДействие") Тогда
		
		ОтложеннаяОперацияПодключить = ОтложенноеДействие;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	СбисОтложенныеОперации	= ГлобальныйКэш.ТекущийСеанс.сбисОтложенныеОперации;
	ОтложенныеПроцедуры		= СбисОтложенныеОперации.Процедуры;
	
	Если Не ОтложенныеПроцедуры.Получить(ОтложеннаяОперацияПодключить.ИдДействия) = Неопределено Тогда
		
		СбисИсключение = НовыйСбисИсключение(,"МодульОбъектаКлиент.ПодключитьОтложенноеДействие", 735,, "Действие с идентификатором " + ОтложеннаяОперацияПодключить.ИдДействия + "уже запущено"); 
		ВызватьИсключение СбисИсключение_Представление(СбисИсключение);
		
	Иначе
		
		ОтложенныеПроцедуры.Вставить(ОтложеннаяОперацияПодключить.ИдДействия, ОтложеннаяОперацияПодключить); 
		
	КонецЕсли;
	
	Если СбисОтложенныеОперации.Запущено Тогда
		
		//Переключаем чтобы вызов произошёл сразу.
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		
	КонецЕсли;
	
	ГлавноеОкно.ПодключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур", 0.1, Истина);
	СбисОтложенныеОперации.Запущено = Истина;
	
КонецПроцедуры

// Процедура - убирает отложенное действие из списка выполняемых
//
// Параметры:
//  ПараметрыОтключения - Структура
//		ОтложенноеДействие	 - Условно-Обязательный, Объект отложенное действие, которое надо отключить. Либо передан ИдентификаторДействия 
//		ИдентификаторДействия- Условно-Обязательный, Строка, ид действия, которое надо отключить. Либо передано ОтложенноеДействие 
//
&НаКлиенте
Процедура ОтключитьОтложенноеДействие(ОтложенноеДействие) Экспорт
	Перем КлючОперации;
	
	КлючОперации		= ОтложенноеДействие.ИдДействия;
	ОтложенныеПроцедуры	= ГлобальныйКэш.ТекущийСеанс.сбисОтложенныеОперации.Процедуры;
	Если Не ОтложенныеПроцедуры.Получить(КлючОперации) = Неопределено Тогда
		
		ОтложенныеПроцедуры.Удалить(КлючОперации);
		
	КонецЕсли;
	
КонецПроцедуры

