
// Функция - возвращает пустую ссылку объекта подбором по конфигурации. НЕ ИСПОЛЬЗОВАТЬ! БРАТЬ ТИП ОТ ПАРАМЕТРА "Поля1С"!
&НаКлиенте
Функция ПолучитьТипМетаданных(ИниКонфигурации, ИмяУзла)
	
	Если ИниКонфигурации.Свойство(ИмяУзла) Тогда
		ЗначениеУзла = СтрЗаменить(ИниКонфигурации[ИмяУзла].Значение, """", "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если Лев(ЗначениеУзла, 1) = "[" Тогда
			Возврат ПолучитьТипМетаданных(ИниКонфигурации,	Сред(ЗначениеУзла, 2, Найти(ЗначениеУзла, "]") - 2));
				 
		ИначеЕсли	ТипЗнч(ЗначениеУзла) = Тип("Строка")
			И		Найти(ЗначениеУзла, ".") Тогда 
			      
			Если Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Справочник") Тогда
				Возврат ПредопределенноеЗначение("Справочник." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Документ") Тогда
				Возврат ПредопределенноеЗначение("Документ." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "ПланыВидовХарактеристик") Тогда
				Возврат ПредопределенноеЗначение("ПланВидовХарактеристик." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			КонецЕсли;
				 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;        
	
КонецФункции

// Функция - Получить имя объекта подбором по метаданным (хардкод) НЕ ИСПОЛЬЗОВАТЬ! ТОЛЬКО ПРЕДУСТАНОВКА ТИПОВ!
//
// Параметры:
//  ОбъектПоиска	- 	Строка		- 	объект для поиска, который мы захардкодили
//  ДопПараметры	-	Структура	-	дополнительные параметры	
// 
// Возвращаемое значение:
//  Строка - Имя объекта строкой, например, "СправочникСсылка.Организации"
//
&НаКлиенте
Функция ПолучитьИмяОбъектаПоМетаданным(ОбъектПоиска, ДопПараметры = Неопределено) Экспорт
	
	ИмяОбъекта = "";
	
	ПараметрыПоискаПоСправочникам = Новый Структура("КлассМетаданных", "Справочники");
	
	ВозможныеСправочники = Новый Структура;
	
	ВозможныеСправочники.Вставить("Организации", Новый СписокЗначений);
	ВозможныеСправочники.Организации.Добавить("Организации");
	
	ВозможныеСправочники.Вставить("Контрагенты", Новый СписокЗначений);
	ВозможныеСправочники.Контрагенты.Добавить("Контрагенты");
	
	ВозможныеСправочники.Вставить("Ответственные", Новый СписокЗначений);
	ВозможныеСправочники.Ответственные.Добавить("Пользователи");
	
	ВозможныеСправочники.Вставить("КлассификаторЕдиницИзмерения", Новый СписокЗначений);
	ВозможныеСправочники.КлассификаторЕдиницИзмерения.Добавить("ЕдиницыИзмерения");
	ВозможныеСправочники.КлассификаторЕдиницИзмерения.Добавить("УпаковкиЕдиницыИзмерения");
	ВозможныеСправочники.КлассификаторЕдиницИзмерения.Добавить("КлассификаторЕдиницИзмерения");
	ВозможныеСправочники.КлассификаторЕдиницИзмерения.Добавить("БазовыеЕдиницыИзмерения");
	
	ВозможныеСправочники.Вставить("Номенклатура", Новый СписокЗначений);
	ВозможныеСправочники.Номенклатура.Добавить("Номенклатура");
	
	ВозможныеСправочники.Вставить("Договор", Новый СписокЗначений);
	ВозможныеСправочники.Договор.Добавить("ДоговорыКонтрагентов");
	
	Если НЕ ВозможныеСправочники.Свойство(ОбъектПоиска) Тогда
		Возврат ИмяОбъекта;
	КонецЕсли;
	
	Для каждого ИмяСправочника Из ВозможныеСправочники[ОбъектПоиска] Цикл
		
		СправочникСуществует = СбисСуществуетОбъектКонфигурацииКлиент(ИмяСправочника.Значение, ПараметрыПоискаПоСправочникам);
			
		Если СправочникСуществует Тогда
				
			ИмяОбъекта = "СправочникСсылка." + ИмяСправочника.Значение;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяОбъекта;
	
КонецФункции

//Процедура - получает форму Настроек на вкладке Соединение    
&НаКлиенте
Процедура ОткрытьФормуНастроекСоединения(ПараметрыОткрытьВходящие, ДопПараметры = Неопределено) Экспорт
	
	Кэш = ПолучитьТекущийЛокальныйКэш();
	фрм = ПолучитьФормуОбработки("ФормаНастройки");
	фрм.Показать(Новый Структура("РежимЗапуска, Кэш", "НастройкиСоединения", Кэш));

КонецПроцедуры // ()

#Если Не ВебКлиент Тогда

&НаКлиенте
Функция СсылочныйТипСтрокойВызовКлиента(Ссылка, ДопПараметры = Неопределено) 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

#КонецЕсли

//
// Параметры:
//  ЗначениеПредставления	- Объект1ССсылка/Строка	 - 
//  ДопПараметры			- Структура	 - расширение
// 
// Возвращаемое значение:
//  Строка - представление типа, которое можно использовать для создания типа
//
&НаКлиенте
Функция СсылочныйТипСтрокой(ЗначениеПредставления, ДопПараметры = Неопределено) Экспорт 

	Перем Результат;

	Если ЗначениеПредставления = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПредставленияТипов = ПолучитьЗначениеПараметраТекущегоСеанса("ПредставленияТипов");
	
	Если ПредставленияТипов = Неопределено Тогда
		ПредставленияТипов = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПредставления) = Тип("Строка") Тогда
		
		СтрокаРаздел	= СтрЗаменить(ЗначениеПредставления, ".", Символы.ПС);
		ТипМетаданных	= НРег(СтрПолучитьСтроку(СтрокаРаздел, 1));
		
		Проверки = Новый Соответствие;
		Проверки.Вставить(Истина, "Строка");
		Проверки.Вставить(НЕ ПредставленияТипов.Получить(ТипМетаданных) = Неопределено, ПредставленияТипов.Получить(ТипМетаданных));
		Проверки.Вставить(Лев(ТипМетаданных, 8) = "документ", "ДокументСсылка." + СтрПолучитьСтроку(СтрокаРаздел, 2));
		Проверки.Вставить(Лев(ТипМетаданных, 10) = "справочник", "СправочникСсылка." + СтрПолучитьСтроку(СтрокаРаздел, 2));
		Проверки.Вставить(Лев(ТипМетаданных, 10) = "перечислен", "ПеречислениеСсылка." + СтрПолучитьСтроку(СтрокаРаздел, 2));
		Проверки.Вставить(Лев(ТипМетаданных, 4) = "план", "ПланВидовХарактеристикСсылка." + СтрПолучитьСтроку(СтрокаРаздел, 2));
		Проверки.Вставить(ТипМетаданных = "число", "Число");
		Проверки.Вставить(ТипМетаданных = "дата", "Дата");
		Проверки.Вставить(ТипМетаданных = "булево", "Булево");
		
		Для каждого УсловиеПроверки Из Проверки Цикл
			Если УсловиеПроверки.Ключ Тогда
				Результат = УсловиеПроверки.Значение;
				ПредставленияТипов.Вставить(ТипМетаданных, Результат);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ИзменитьПараметрСбис("ПредставленияТипов", ПредставленияТипов);
		
	ИначеЕсли НЕ ПредставленияТипов.Получить(ТипЗнч(ЗначениеПредставления)) = Неопределено Тогда
		
		Результат = ПредставленияТипов.Получить(ТипЗнч(ЗначениеПредставления));
		
	Иначе
	
		#Если ВебКлиент Тогда
		
		Результат = СсылочныйТипСтрокойВызовСервера(ЗначениеПредставления, ДопПараметры);
		
		#Иначе
		
		Результат = СсылочныйТипСтрокойВызовКлиента(ЗначениеПредставления, ДопПараметры);
		
		#КонецЕсли
		
		ПредставленияТипов.Вставить(ТипЗнч(ЗначениеПредставления), Результат);

		ИзменитьПараметрСбис("ПредставленияТипов", ПредставленияТипов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СсылочныйТипСтрокой()

&НаСервере
Функция СсылочныйТипСтрокойВызовСервера(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Возврат МодульОбъектаСервер().СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры);
	
КонецФункции

