
&НаКлиенте
Функция НовыйСоставПакета(ПараметрыКонструктора) Экспорт

	НовыйСоставПакета = Новый Структура("Вложение", Новый Массив);
	Если ПараметрыКонструктора.Свойство("ОснованиеПакета") Тогда
		НовыйСоставПакета.Вложение.Добавить(НовыйВложениеСБИС(, ПараметрыКонструктора));
	КонецЕсли;
	//Новый пакет с установкой ошибки.
	Если ПараметрыКонструктора.Свойство("Ошибка") Тогда
		НовыйСоставПакета.Вставить("Ошибка", ПараметрыКонструктора.Ошибка);
	КонецЕсли;

	Возврат НовыйСоставПакета;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета) Экспорт
	Перем ДопПараметрыСтороны;
	
	kontr = Новый Структура; 
	
	//ИД контрагента
	Если	СоставПакета.Контрагент.Свойство("Идентификатор")
		И	ЗначениеЗаполнено(СоставПакета.Контрагент.Идентификатор) Тогда
		kontr.Вставить( "Идентификатор", СоставПакета.Контрагент.Идентификатор);
	Иначе		
		СбисИдентификаторКонтрагента = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "КодОператораАбонентскогоЯщика");
		
		Если Не СбисИдентификаторКонтрагента = Неопределено Тогда
			//ИД явно не указан, то проверить наличие ИД оператора А/Я
			kontr.Вставить("Идентификатор", СбисИдентификаторКонтрагента);
		Иначе
			СбисИдентификаторКонтрагента = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "Идентификатор");
			Если Не СбисИдентификаторКонтрагента = Неопределено Тогда
				kontr.Вставить("Идентификатор", СбисИдентификаторКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Контакты
	Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
		Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
			kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
		КонецЕсли;
		Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
			kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
		КонецЕсли;
	КонецЕсли;
	
	//СвФЛ/СвЮл
	Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
			Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
				Если Параметр.Имя = "ЧастноеЛицо" Тогда
					СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
				КонецЕсли;
				Если Параметр.Имя = "СНИЛС" Тогда
					СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
				КонецЕсли;     					
			КонецЦикла;
		КонецЕсли;  
		Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда  
			СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
			СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
			СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
			СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвФЛ.КодФилиала) Тогда
			СвФЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвФЛ.КодФилиала );	
		КонецЕсли;

		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда
			СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
			СвЮЛ.Вставить( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
			СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	
	//Подразделение
	Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
		Подразделение = Новый Структура;
		Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
		kontr.Вставить( "Подразделение", Подразделение );
	КонецЕсли;	
	Возврат kontr;
	
КонецФункции 

&НаКлиенте
Функция СоставПакета_СтруктураОрганизацииДляОтправки(СоставПакета) Экспорт
	Перем СвФлЮлИсточник, КодФилиалаОрганизации;
	
	СторонаРезультат = Новый Структура;
	
	Если Не СоставПакета.Свойство("НашаОрганизация") Тогда
		
		ВызватьСбисИсключение("Неизвестный формат состава пакета для отправки.", "МодульОбъектаКлиент.СоставПакета_СтруктураОрганизацииДляОтправки");
		
	ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвФЛ", СвФлЮлИсточник) Тогда
		
		СвФлЮлРезультат = Новый Структура;
		СторонаРезультат.Вставить("СвФЛ", СвФлЮлРезультат);
		
	ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвЮЛ", СвФлЮлИсточник) Тогда
		
		СвФлЮлРезультат = Новый Структура;
		СторонаРезультат.Вставить("СвЮЛ", СвФлЮлРезультат);
		
		СвФлЮлРезультат.Вставить("КПП", СвФлЮлИсточник.КПП);
		
		Если СвФлЮлИсточник.Свойство("КодСтраны") Тогда
			
			СвФлЮлРезультат.Вставить("КодСтраны", СвФлЮлИсточник.КодСтраны);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьСбисИсключение("Неизвестный формат стороны документооборота", "МодульОбъектаКлиент.СоставПакета_СтруктураОрганизацииДляОтправки");
		
	КонецЕсли;
	
	//ИНН обязан быть
	СвФлЮлРезультат.Вставить("ИНН", СвФлЮлИсточник.ИНН);
	
	//Проверим КФ организации.
	Если СоставПакета.Свойство("Контрагент") Тогда
		
		//Может быть задан на контрагенте как КФ отправителя
		КодФилиалаОрганизации = ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "КодФилиалаОтправителя");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодФилиалаОрганизации)
		Или ( СвФлЮлИсточник.Свойство("КодФилиала", КодФилиалаОрганизации)
		И ЗначениеЗаполнено(КодФилиалаОрганизации)) Тогда
		
		//Есть КФ отправителя, или установлен КФ на органиации. Приоритет КФ отправителя от контрагента выше установленного на организации
		СвФлЮлРезультат.Вставить("КодФилиала", КодФилиалаОрганизации);
		
	КонецЕсли;
	
	Возврат СторонаРезультат;
	
КонецФункции
// Функция - формирует Отправку СБИС - готовый к отправке Документ на основании состава пакета, прочитанного из 1С
//
// Параметры:
//  СоставПакета - Экземпляр класса (Структура)	- документ СБИС, прочитанный от 1С
//  ДопПараметры - Структура	 				- возможность расширения
// 
// Возвращаемое значение:
//  Экземпляр класса ОтправкаДокументаСБИС (Струкутра) 
//
&НаКлиенте
Функция СоставПакета_ПодготовитьКОтправке(СоставПакета, ДопПараметры=Неопределено) Экспорт
	Перем СбисШифрование, Статус, Этап;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Шифрование", СбисШифрование) Тогда
		СбисШифрование = Ложь;
	КонецЕсли;
	
	document	= Новый Структура;
	//Сразу проставим статус, так как попали в функцию. В случае, если это не так, статус изменится (Например, в случае отправки вложения файл лоадером)
	Если НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Статус",Статус)
		И НЕ Статус = Неопределено
		И Статус = 0 Тогда
		Результат	= НовыйОтправкаДокументаСБИС(СоставПакета, "Черновик");
	Иначе
		Результат	= НовыйОтправкаДокументаСБИС(СоставПакета, "Готов");  
	КонецЕсли;
	ОтправкаДокументаСБИС_Установить(Результат, "ДокументОтправить", document);
	
	//РезультатПодготовки = Новый Структура("СоставПакета, ДокументОтправить, Ошибки, Готов, Отказ", СоставПакета, document, Новый Массив, Истина, Отказ);
	Если СоставПакета.Свойство("Дата") И ЗначениеЗаполнено(СоставПакета.Дата) Тогда
		document.Вставить("Дата",СоставПакета.Дата);	
	КонецЕсли;
	Если СоставПакета.Свойство("Номер") И ЗначениеЗаполнено(СоставПакета.Номер) Тогда
		document.Вставить("Номер",СоставПакета.Номер);	
	КонецЕсли;
	//Для зашифрованных документов нет суммы
	Если СбисШифрование Тогда
		document.Вставить("Шифрование", Новый Структура("Зашифрован", "Да"));
	ИначеЕсли	СоставПакета.Свойство("Сумма")
			И	ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
		document.Вставить("Сумма",СоставПакета.Сумма);	
	КонецЕсли;
	ИдПакета = СоставПакета_Идентификатор(СоставПакета, ДопПараметры);
	
	attachmentList = Новый Массив;
	Если ДопПараметры.Свойство("Этап", Этап)
		И ЗначениеЗаполнено(Этап) Тогда
		 document.Вставить("Этап",Этап);
		 document.Этап.Вставить("Вложение",		attachmentList );
	Иначе
		document.Вставить("Вложение",		attachmentList ); 
	КонецЕсли;	document.Вставить("Тип",			СоставПакета.Тип);
	Если СоставПакета.Свойство("Подтип") И ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
		document.Вставить( "Подтип",СоставПакета.Подтип);
	КонецЕсли;
	document.Вставить("Идентификатор",	ИдПакета); 
	
	СоставПакета.Вставить("Идентификатор", ИдПакета);
	//Обработка вложений
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		ИдВложения = Строка(Новый УникальныйИдентификатор());
		Вложение.Вставить("Идентификатор", ИдВложения);
		
		file		= Новый Структура;
		attachment	= Новый Структура("Идентификатор, Файл", ИдВложения, file);
		
		Если СбисШифрование Тогда
			Если ПолучитьЗначениеПараметраСбис("ШифроватьВыборочно") Тогда
				Если Вложение.Свойство("Шифрование") И Вложение.Шифрование = Истина Тогда
					attachment.Вставить("Шифрование", "Да" );
				Иначе
					attachment.Вставить("Шифрование", "Нет" );
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Вложение.Свойство("Зашифрован") Тогда
			// может быть в случае пересылки зашифрованных пакетов
			attachment.Вставить("Зашифрован", Вложение.Зашифрован);
		КонецЕсли;
		
		СбисПараметрыВложения = Новый Структура("Файл, Вложение, ВложениеВПакет", file, Вложение, attachment);
		
		Если		Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет

			file.Вставить("Имя", Вложение.ИмяФайла);
			ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.Отправка_ОбработатьВнешнийФайл(ГлавноеОкно.Кэш, СбисПараметрыВложения, Результат);

		ИначеЕсли	ТипЗнч(СбисПараметрыВложения.Вложение.XMLДокумента) = Тип("Соответствие") Тогда
			
			file.Вставить("Подстановка", СбисПараметрыВложения.Вложение.XMLДокумента);
			
		Иначе  // сформирован xml
			
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + ".xml";
			file.Вставить("Имя", ИмяФайла); 
			ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.Отправка_ОбработатьXMLФайл(ГлавноеОкно.Кэш, СбисПараметрыВложения, Результат);
			
		КонецЕсли;
		
		attachmentList.Добавить(СбисПараметрыВложения.ВложениеВПакет);
		
		Если Вложение.Свойство("Подпись") Тогда //d.ch
			ЭЦП = Новый Массив;
			Для Каждого Запись из Вложение.Подпись Цикл
				ЗаписьЭЦП = Новый Структура;
				Если Запись.Свойство("Направление") Тогда
					ЗаписьЭЦП.Вставить("Направление",Запись.Направление);
				КонецЕсли;
				ФайлЭЦП = Новый Структура;
				ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
				ФайлЭЦП.Вставить( "ДвоичныеДанные", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисФайлСКлиентаВBASE64(Запись.Файл.ПолноеИмяФайла)); 
				ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
				ЭЦП.Добавить(ЗаписьЭЦП);
			КонецЦикла;
			attachment.Вставить( "Подпись", ЭЦП );
		КонецЕсли;
		Если СбисШифрование Тогда
			Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
				attachment.Вставить( "Тип",  Вложение.Тип);
				attachment.Вставить( "Подтип",  Вложение.ПодТип);
				attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
					attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
				КонецЕсли;
			КонецЕсли;
			Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
				// для зашифрованных документов убираем сумму из названия
				ПозСуммы = Найти(Вложение.Название, "на сумму");
				Если ПозСуммы>0 Тогда
					Вложение.Название = Лев(Вложение.Название, ПозСуммы-1);
				КонецЕсли;
				attachment.Вставить("Название",  Вложение.Название);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") 
		И (НЕ ДопПараметры.Свойство("Этап",Этап)
		ИЛИ НЕ ЗначениеЗаполнено(Этап)) Тогда
		redaction = Новый Структура;
		redaction.Вставить("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
		document.Вставить( "Редакция", redaction);
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
		document.Вставить( "Примечание", СоставПакета.Примечание);
	КонецЕсли;
	
	document.Вставить( "НашаОрганизация", СоставПакета_СтруктураОрганизацииДляОтправки(СоставПакета));
	
	Если СоставПакета.Свойство("Контрагент") Тогда
		document.Вставить("Контрагент", СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета));
	КонецЕсли;
	
	Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
		otv = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Ответственный Цикл
			otv.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Ответственный", otv ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
		podrazdel = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Подразделение Цикл
			podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Подразделение", podrazdel ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
		regl = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Регламент Цикл
			regl.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Регламент", regl ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
		osnovania = Новый Массив;
		Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
			osn = Новый Структура;
			Если ДокОсн.Свойство("ВидСвязи") Тогда
				osn.Вставить( "ВидСвязи", ДокОсн.ВидСвязи );	
			КонецЕсли;
			doc = Новый Структура;
			Для Каждого Элемент Из ДокОсн Цикл
				Если Элемент.Ключ<>"ВидСвязи" Тогда
					doc.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЕсли;
			КонецЦикла;
			osn.Вставить( "Документ", doc );
			osnovania.Добавить(osn);
		КонецЦикла;
		document.Вставить( "ДокументОснование", osnovania ); 				
	КонецЕсли;
	Если	СоставПакета.Свойство("НеЗапускатьВДокументооборот")
		И	СоставПакета.НеЗапускатьВДокументооборот = Истина Тогда
		document.Вставить("НеЗапускатьВДокументооборот", "Да");
	КонецЕсли;
	Если	СоставПакета.Свойство("ДопПоля") Тогда // alo ДопПоля
		DopPolya = Новый Массив;
		Для Каждого Поле Из СоставПакета.ДопПоля Цикл 
			DopPolya.Добавить(Поле.Ключ);
		КонецЦикла;
		document.Вставить( "ДопПоля", DopPolya );
	КонецЕсли;
	Если	СоставПакета.Свойство("Провести")	// alo Провести
		И	( СоставПакета.Провести = Истина или СоставПакета.Провести = "Да") Тогда
		document.Вставить("Провести", "Да");
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_Идентификатор(СоставПакета, ДопПараметры = Неопределено) Экспорт 
	Перем ИдПакета, Статус;
	
	Если		СоставПакета.Свойство("ВременныйИдентификатор", ИдПакета) Тогда 
	ИначеЕсли  НЕ ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Статус",Статус)
		И Статус = 0
		И СоставПакета.Свойство("Идентификатор",ИдПакета)
		И НЕ (ИдПакета = "" ИЛИ ИдПакета = Неопределено) Тогда 
		Возврат ИдПакета; //Вернем существующий идентификатор
	ИначеЕсли		СоставПакета.Свойство("ПользовательскийИдентификатор", ИдПакета)
			И	Не (	СоставПакета.Свойство("Контрагент")
					И	СоставПакета.Контрагент.Свойство("ЗапретРедакций")) Тогда
		ИдПакета = Сред(ИдПакета, Найти(ИдПакета,":")+1);
	Иначе
		ИдПакета = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	Возврат ИдПакета;
	
КонецФункции

&НаКлиенте
Функция СоставПакета_Получить(СоставПакета, КлючПолучить) Экспорт 
	Перем ЗначениеИтог;
	
	Если		КлючПолучить = "РегламентНазвание" Тогда
		Если 	СоставПакета.Свойство("Регламент",	ЗначениеИтог) 
			И	ЗначениеИтог.Свойство("Название",	ЗначениеИтог) Тогда
			Возврат ЗначениеИтог;
		Иначе
			ЗначениеИтог = "";
		КонецЕсли;
	ИначеЕсли	КлючПолучить = "Идентификатор" Тогда
		Если СоставПакета.Свойство("Идентификатор",ЗначениеИтог)
			И НЕ (ЗначениеИтог = "" ИЛИ ЗначениеИтог = Неопределено) Тогда
			Возврат ЗначениеИтог; //Вернем существующий идентификатор
		Иначе	
			ЗначениеИтог = СоставПакета_Идентификатор(СоставПакета);
		КонецЕсли;
	ИначеЕсли КлючПолучить = "ОсновнойДокумент1С" Тогда
		Если	СоставПакета.Вложение.Количество()
			И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
			ЗначениеИтог = СоставПакета.Вложение[0].Документы1С[0].Значение;
		КонецЕсли; 
	ИначеЕсли КлючПолучить = "СтатусГосСистемы" Тогда
		ЗначениеИтог = СоставПакета_СтатусГоссистемыПоПакету(СоставПакета);
	Иначе
		ЗначениеИтог = СоставПакета[КлючПолучить]
	КонецЕсли;
	Возврат ЗначениеИтог;
	
КонецФункции  

// Функция возвращает статус из госсистем по состоянию или коду
//
// Параметры:
//  СоставПакета - Структура - Обрабатываемый пакет (Документ)
// 
// Возвращаемое значение:
//  Строка - Статус документа в госсистеме
//
&НаКлиенте
Функция СоставПакета_СтатусГоссистемыПоПакету(СоставПакета) 
	
	Перем СбисРасширение, СтатусГос;  
	
	Кэш = ГлавноеОкно.Кэш;
	
	Если	СоставПакета.Свойство("Расширение",	СбисРасширение) Тогда
		Если	СбисРасширение.Свойство("СостояниеМарк",СтатусГос)
			И	СтатусГос.Свойство("СостояниеОперации",			СтатусГос) Тогда 				
		//Прослеживаемой и маркируемой продукции, у одном документе, быть не может
		ИначеЕсли СбисРасширение.Свойство("СостояниеПросл",СтатусГос) 
			И СтатусГос.Свойство("КодСостоянияОперации", СтатусГос) Тогда 
			СтатусГос = Кэш.ОбщиеФункции.СостояниеПрослеживаемостиПоКоду(СтатусГос);; 
		Иначе
			СтатусГос = "";
		КонецЕсли; 	
	Иначе
		СтатусГос = "";	
	КонецЕсли; 
	
	Возврат СтатусГос;
	
КонецФункции

