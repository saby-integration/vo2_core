
// Обработчик прерывания отправки через Ctrl+Break либо при получении пула ошибок, либо фатальной ошибки
//
// Параметры:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//
&НаКлиенте
Процедура РезультатОтправки_ОбработкаПрерывания(РезультатОтправки)
	
	Если		РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
		ВызватьСбисИсключение(РезультатОтправки.ПрерватьОтправку, "МодульОбъектаКлиент.РезультатОтправки_ОбработкаПрерывания",,"Отправка была остановлена: " + РезультатОтправки.ПрерватьОтправку.message);
	ИначеЕсли	РезультатОтправки.ПараметрыОтправки.Индикатор.Прервано Тогда
		ВызватьСбисИсключение(790, "МодульОбъектаКлиент.РезультатОтправки_ОбработкаПрерывания");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ПоказатьСтатус(РезультатОтправки, ТекстСостояния, СбисИндикатор = 0, СбисПояснение = "", ДопПараметры = Неопределено)
	
	ПараметрыДлительнойОперации = ДопПараметры;
	Если ПараметрыДлительнойОперации = Неопределено Тогда
		 ПараметрыДлительнойОперации = РезультатОтправки.ПараметрыОтправки.ПараметрыИндикатора;
	КонецЕсли;
	РезультатОтправки.ПараметрыОтправки.Индикатор.ПоказатьСостояниеДлительнойОперации(ТекстСостояния, СбисИндикатор, СбисПояснение, ПараметрыДлительнойОперации);

КонецПроцедуры

// Процедура - Прячет статус, сохраняя обработку прерывания
//
// Параметры:
//  РезультатОтправки	 - 	 - 
//
&НаКлиенте
Процедура РезультатОтправки_СпрятатьСтатус(РезультатОтправки, СбисЗавершить=Ложь)
			
	РезультатОтправки.ПараметрыОтправки.Индикатор.СпрятатьСтатусДлительнойОперации(СбисЗавершить);

КонецПроцедуры

// Отправляет сформированную пачку документов
//
// Параметры:
//  РезультатОтправки		 - РезультатОтправки (Структура)	 - класс для отправки
//  ПачкаДокументовКОтправке - Массив	 - массив из стурктур с готовым к отправке документом и пакетом
//  ОжидатьСвободныеПотоки	 - Булево	 - если Истина и потоков недостаточно для отправки всей пачки, то отправка не будет выполнена
// 
// Возвращаемое значение:
//  Булево - Отправили пачку, или нет
//
&НаКлиенте
Функция РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаДокументовКОтправке, ОжидатьСвободныеПотоки)
	Перем ОшибкаОтправкиПачки;
	
	ПотоковСвободно = РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - РезультатОтправки.ПараметрыОтправки.Потоки.Количество();
	Если 	ОжидатьСвободныеПотоки
		И	ПотоковСвободно < ПачкаДокументовКОтправке.Количество() Тогда
		//Набрана пачка документов, но её нельзя отправить, т.к. нет достаточного количества потоков
		Возврат Ложь;
	КонецЕсли;
		
	МодульОтправкиПачки = ГлавноеОкно.СбисНайтиФормуФункции("Отправка_ПачкаДокументов", ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя"));
	РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
	Если МодульОтправкиПачки = Ложь Тогда
		СчетчикПачки = 0;
		ПараметрыИндикатораПачки = Новый Структура("Прерывать, БлокироватьИнтерфейс", Ложь, Истина);

		Для Каждого ДанныеОтправки Из ПачкаДокументовКОтправке Цикл
			СчетчикПачки = СчетчикПачки + 1;
			СтатусДоОтправки = ОтправкаДокументаСБИС_Получить(ДанныеОтправки, "СтатусПакета");
			Попытка
				РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
			Исключение
				//Прервано с ошибкой.
				Возврат Ложь;
			КонецПопытки;			
			Если РезультатОтправки.ПараметрыОтправки.СтатусПоПачкам Тогда
				
				РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Отправка пачки документов", Окр(СчетчикПачки * 100 / ПачкаДокументовКОтправке.Количество()),,ПараметрыИндикатораПачки);
				
			КонецЕсли;
			Если ОшибкаОтправкиПачки = Неопределено Тогда
				//Была фатальная ошибка отправки, роняем всё с ней.
				Попытка
					РезультатОтправки_ДокументВСвободныйПоток(РезультатОтправки, ДанныеОтправки);
					Если СтатусДоОтправки = ОтправкаДокументаСБИС_Получить(ДанныеОтправки, "СтатусПакета") Тогда
						//Статус должен измениться в процессе, сразу после отправки.
						ВызватьСбисИсключение(100, "МодульОбъектаКлиент.РезультатОтправки_ДокументВСвободныйПоток",,, "Неизвестная ошибка события в процессе отправки");
					КонецЕсли;
				Исключение
					ОшибкаОтправкиПачки			= НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_ОтправитьПачкуДокументов");
					ПараметрыОбработатьОшибку	= Новый Структура("Фатальная, Исключение", Истина, ОшибкаОтправкиПачки);
					РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
				КонецПопытки;
			Иначе
				ПараметрыОбработатьОшибку = Новый Структура("Фатальная, ИдентификаторОтправки", Истина, СоставПакета_Идентификатор(ДанныеОтправки.СоставПакета));
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Отправка пачки документов");

		Попытка
			РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		Исключение
			//Прервано с ошибкой.
			Возврат Ложь;
		КонецПопытки;
		
		СбисОтправки = Новый Массив;
		Для Каждого ДокументВПачке Из ПачкаДокументовКОтправке Цикл
			
			КомандаДляПотока = РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ДокументВПачке);
			АсинхроннаяСбисКоманда_ВызватьСобытие(КомандаДляПотока, НовыйАсинхронноеСбисСобытие(,,"AfterCall"));
			СбисОтправки.Добавить(КомандаДляПотока);
			
		КонецЦикла;
		Попытка
			
			ДатаНач = ТекущаяДата();

			ПараметрыОбработки		= Новый Структура("Отправки, РезультатОтправки", СбисОтправки, РезультатОтправки);
			МодульОтправкиПачки.Отправка_ПачкаДокументов(ПараметрыОбработки, ГлавноеОкно.Кэш);
			
			ДатаКнц = ТекущаяДата();
			
			РезультатОтправки.ВремяОтправки = РезультатОтправки.ВремяОтправки + (ДатаКнц - ДатаНач);
			
			РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Обработка ответов");
			МодульОтправкиПачки.Отправка_ОбработкаРезультатаПачкиДокументов(ПараметрыОбработки, ГлавноеОкно.Кэш);
			
		Исключение
			ОшибкаПачки					= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".Отправка_ПачкаДокументов");
			ПараметрыОбработатьОшибку	= Новый Структура("Исключение, Фатальная", ОшибкаПачки, Истина);
			Для Каждого ДанныеОтправки Из ПачкаДокументовКОтправке Цикл
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ДанныеОтправки, ПараметрыОбработатьОшибку);
			КонецЦикла;
		КонецПопытки;
	КонецЕсли;
	РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
	
	Возврат Истина
	
КонецФункции
	
// Процедура - поставить пакет в очередь к отправке
//
// Параметры:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//  ДанныеОтправки		 - Струкутра	 - СоставПакета, Документ, СтатусПакета, ИНН
//
&НаКлиенте
Процедура РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	Перем ПодготовленныеСоответствие;
	
	ИдОтправки	= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки");
	
	Если  ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Подготовка" Тогда
		Попытка
			//Подготовить пакет к отправке
			ОтправкаДокументаСБИС_Подготовить(ОтправкаДокументаСБИС);
			РезультатОтправки.ПорНомер = РезультатОтправки.ПорНомер + 1;
		Исключение
			СбисИсключение	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Отправка");
			ПараметрыОшибки	= Новый Структура("Исключение, Подготовка", СбисИсключение, Истина);
			РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	РезультатОтправки.Очередь.Подготовлены.Вставить(ИдОтправки, ОтправкаДокументаСБИС);
	
КонецПроцедуры

// Процедура - поставить пакет в очередь к отправке
//
// Параметры:
//  РезультатОтправки		- РезультатОтправки (Структура)- класс для отправки
//  ИдентификаторОтправки	- Строка	 					- Ид уже сформированного документа, который переотправляем
//
&НаКлиенте
Процедура РезультатОтправки_ПоставитьВОчередьНаПовторнуюОтправку(РезультатОтправки, ОтправкаДокументаСБИС) Экспорт
	
	РезультатОтправки.Счетчики.ОшибокОтправки	= РезультатОтправки.Счетчики.ОшибокОтправки + 1;		
	ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Переотправка");
	РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
		
КонецПроцедуры

//Отправляет подготовленные пакеты пока есть свободные потоки
&НаКлиенте
Процедура РезультатОтправки_ОтправитьНакопленные(РезультатОтправки, ДопПараметры=Неопределено)
	Перем ПодготовленныеКОтправкеПакеты;
	
	ПодготовленныеКОтправкеПакеты	= РезультатОтправки.Очередь.Подготовлены;
	ОжидатьСвободныеПотоки			= Истина;
	ОтправлятьЦелуюПачку			= Истина;
	ЧислоПачекОтправить				= 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ОжидатьСвободныеПотоки") Тогда
			ОжидатьСвободныеПотоки = ДопПараметры.ОжидатьСвободныеПотоки;
		КонецЕсли;
		Если ДопПараметры.Свойство("ЧислоПачекОтправить") Тогда
			ЧислоПачекОтправить = ДопПараметры.ЧислоПачекОтправить;
		КонецЕсли;
		Если ДопПараметры.Свойство("ОтправлятьЦелуюПачку") Тогда
			ОтправлятьЦелуюПачку = ДопПараметры.ОтправлятьЦелуюПачку;
		КонецЕсли;
	КонецЕсли;
	
	ПачекОтправлено		= 0;
	ПачкаКОтправке		= Новый Массив;//Собираем пачку по числу отправок за раз.
	ПакетыОтправлены	= Новый Массив;
	Для Каждого КлючИЗначениеПодготовлен Из ПодготовленныеКОтправкеПакеты Цикл		
		ОтправкаДокументаСбис = КлючИЗначениеПодготовлен.Значение;
		Если 	 ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "СтатусПакета") = "ОжидаетАктивации" Тогда
			ИННОтправки = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "ИННОтправителя");
			Если РезультатОтправки.ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправки) = Неопределено Тогда
				
				ОшибкаПодготовки = РезультатОтправки.ДанныеКОтправке.Сертификаты.ИННОшибки.Получить(ИННОтправки);
				Если ОшибкаПОдготовки = Неопределено Тогда
					//Дожидаемся активации, либо проверки что всё активированно.
					Продолжить;
				КонецЕсли;
				ПараметрыОбработатьОшибку = Новый Структура("Исключение, Подготовка", ОшибкаПодготовки, Истина);
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСбис, ПараметрыОбработатьОшибку);
				Продолжить;
			Иначе
				
				ОтправкаДокументаСБИС_Установить(КлючИЗначениеПодготовлен.Значение, "СтатусПакета", "Подготовка");
				Попытка
					//Подготовить пакет к отправке
					ОтправкаДокументаСБИС_Подготовить(КлючИЗначениеПодготовлен.Значение);
					РезультатОтправки.ПорНомер = РезультатОтправки.ПорНомер + 1;
				Исключение
					СбисИсключение	= НовыйСбисИсключение(ИнформацияОбОшибке(), ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".РезультатОтправки_Асинх_Отправка");
					ПараметрыОшибки	= Новый Структура("Исключение, Подготовка", СбисИсключение, Истина);
					РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли Не	(	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Готов"
						Или	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Подготовка" 
						Или КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Черновик") Тогда
			Продолжить;
		КонецЕсли;
		
		ПачкаКОтправке.Добавить(КлючИЗначениеПодготовлен.Значение);
		ПакетыОтправлены.Добавить(КлючИЗначениеПодготовлен.Ключ);
		
		Если ПачкаКОтправке.Количество() = РезультатОтправки.ПараметрыОтправки.РазмерПачки Тогда
			
			Если РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, ОжидатьСвободныеПотоки) Тогда
				//Пачка ушла
				ПачекОтправлено = ПачекОтправлено + 1;
			КонецЕсли;
			ПачкаКОтправке.Очистить();//Собираем пачку по числу отправок за раз.
			
		КонецЕсли;
		Если ПачекОтправлено = ЧислоПачекОтправить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если		ПачкаКОтправке.Количество()
		И	Не	ОтправлятьЦелуюПачку
		И	Не  ПачекОтправлено > ЧислоПачекОтправить Тогда
		//На последний проход, если пачка не наберётся, отправить что есть
		РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, ОжидатьСвободныеПотоки);
		ПачекОтправлено = ПачекОтправлено + 1;
	КонецЕсли;
	
	ЧислоВОчереди		= РезультатОтправки.Очередь.Подготовлены.Количество() + РезультатОтправки.Очередь.Сформированы.Количество();
	ОчередьПереполнена	= ЧислоВОчереди / 2 > РезультатОтправки.ПараметрыОтправки.РазмерПачки;
	
	Если	ПачекОтправлено = 0
		И	ОчередьПереполнена Тогда
		//Очередь переполнилась, надо отправить хоть что-то.
		//Пробуем отправить по числу свободных потоков
		РазмерНовойПачки = Мин(РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - РезультатОтправки.ПараметрыОтправки.Потоки.Количество(), ПачкаКОтправке.Количество());
		Если РазмерНовойПачки Тогда
			НоваяПачка = Новый Массив;
			Для СчетчикПачки = 0 По РазмерНовойПачки - 1 Цикл
				НоваяПачка.Добавить(ПачкаКОтправке[СчетчикПачки])
			КонецЦикла;
			РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, НоваяПачка, ОжидатьСвободныеПотоки);
		Иначе
			//Потоков нет, отправляем пачку с ожиданием освобождения потоков
			РезультатОтправки_ОтправитьПачкуДокументов(РезультатОтправки, ПачкаКОтправке, Ложь);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ПакетОтправлен Из ПакетыОтправлены Цикл
		//Отправка должна проставить статус отправлен, либо Ошибка, иначе могло выйти так, что в процессе необходимо выполнить дополнительные действия и пакет пока не был отправлен
		ОтправкаДокументаСбис	= ПодготовленныеКОтправкеПакеты.Получить(ПакетОтправлен);
		СтатусПакета			= ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСбис, "СтатусПакета");
		Если	СтатусПакета = "Отправлен"
			Или	СтатусПакета = "ОтправленВПоток"//Отправлен, но что-то упало в процессе
			Или	СтатусПакета = "Ошибка"
			Или	СтатусПакета = "Обработан" Тогда
			ПодготовленныеКОтправкеПакеты.Удалить(ПакетОтправлен);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private_МассоваяОтправка
#КонецОбласти

#Область include_core_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private_Асинх
#КонецОбласти

