
//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура РезультатОтправки_Асинх_Отправка(РезультатОтправки, ОтправкаДокументаСБИС)

	Если ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Готов" Тогда
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ГлавноеОкно.Кэш, РезультатОтправки);
		ОбработчикОтправки	= НовыйСбисОписаниеОповещения("WriteDocumentEx", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		Сбис3Команда		= РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки);
		
		Попытка
			
			АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
			
		Исключение
			
			//Упала отправка в поток, сами пропишем ошибку
			АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор, НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
			АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
			
		КонецПопытки; 
		
	ИначеЕсли ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "СтатусПакета") = "Черновик" Тогда
		
		РезультатОтправки_Асинх_ОтправкаЧерновика(РезультатОтправки, ОтправкаДокументаСБИС);
		
	Иначе
		
		//Подгтовка ещё не закончена. Добавим команду в очередь, пока не будет проставлен СтатусПакета "Готов"
		РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
		
	КонецЕсли;

КонецПроцедуры

//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура РезультатОтправки_Асинх_ОтправкаЧерновика(РезультатОтправки, ОтправкаДокументаСБИС)
	
	Модифицирован = СоставПакета_Получить(ОтправкаДокументаСБИС.СоставПакета, "Модифицирован");
	
	Если Модифицирован Тогда	
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ГлавноеОкно.Кэш, РезультатОтправки);
		ОбработчикОтправки	= НовыйСбисОписаниеОповещения("WriteAttachment", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		
		Результат = Новый Структура;
		Результат.Вставить("Message",		Новый Структура("Функция, ФункцияОшибки",	"WriteAttachment_Message", "РезультатОтправки_Асинх_Ошибка"));
		                                                                                                             
		Сбис3Команда		= РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки);
		АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", Результат);
		
	Иначе
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ГлавноеОкно.Кэш, РезультатОтправки);
		ОбработчикОтправки	= НовыйСбисОписаниеОповещения("ExecuteActionEx", ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		Сбис3Команда		= РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки);
		
	КонецЕсли;
	
	Попытка
		
		АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
		
	Исключение
		
		//Упала отправка в поток, сами пропишем ошибку
		АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор, НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_ОтправкаЧерновика"), "Error");
		АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция РезультатОтправки_НовыйАсинхроннаяСбисКоманда(РезультатОтправки, ОтправкаДокументаСБИС, ОбработчикОтправки=Неопределено) Экспорт
	
	//Для готового пакета вызываем отправку
	ПараметрыКоманды	= Новый Структура("АргументВызова, ВремяОжиданияОтвета, ПодпискиНаСобытия");
	ПараметрыКоманды.АргументВызова			= ОтправкаДокументаСБИС;
	ПараметрыКоманды.ВремяОжиданияОтвета	= РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета;
	ПараметрыКоманды.ПодпискиНаСобытия		= РезультатОтправки.ПодпискиДляКоманд;
	
	Если ОбработчикОтправки = Неопределено Тогда
		ПараметрыКоманды.Вставить("Идентификатор", ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИдентификаторОтправки"));
	КонецЕсли;
		
	Сбис3Команда		= НовыйАсинхроннаяСбисКоманда(ОбработчикОтправки, ПараметрыКоманды);
	Если Не ОбработчикОтправки = Неопределено Тогда
		//Если умная отправка, то подписки по-умолчанию. Иначе события на команду требуется установить руками. 
		ПараметрыСобытий	= Новый Структура("Кэш, РезультатОтправки, Команда", ГлавноеОкно.Кэш, РезультатОтправки, Сбис3Команда);
		Если ОбработчикОтправки.ИмяПроцедуры = "WriteDocumentEx"
			Или ОбработчикОтправки.ИмяПроцедуры = "ExecuteActionEx" Тогда
			СобытияОтправки		= ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.Отправка_ПодпискиСобытия(ПараметрыСобытий);
			АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", СобытияОтправки);
		КонецЕсли;
		АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "ПараметрыСобытий", ПараметрыСобытий);
	КонецЕсли;
	
	Возврат Сбис3Команда;

КонецФункции

//Отправляет пакет в свободный поток или добавляет в очередь
&НаКлиенте
Процедура РезультатОтправки_ДокументВСвободныйПоток(РезультатОтправки, ОтправкаДокументаСБИС)
	
	РезультатОтправки_ОжиданиеПотоков(РезультатОтправки);
	РезультатОтправки_Асинх_Отправка(РезультатОтправки, ОтправкаДокументаСБИС);

КонецПроцедуры

// Процедура - ожидание нужного числа потоков для отправки.
//
// Параметры:
//  РезультатОтправки			- экземпляр класса РезультатОтправки (Структура)
//  СвободныхПотоковТребуется	- Число	 - ожидание требуемого количества потоков отправки
// Вызывает исключение, если за значение параметра времени ожидания ответа не удалось получить нужное количество к отправке.
&НаКлиенте
Процедура РезультатОтправки_ОжиданиеПотоков(РезультатОтправки, СвободныхПотоковТребуется = 1)
	
	ВремяНачалаОжиданияПотока	= ТекущаяДата();
	//ОбновитьОтображение			= Истина;
	//ПараметрыИндикатора			= Новый Структура("Прерывать", Ложь);
	Пока	РезультатОтправки.ПараметрыОтправки.КоличествоПотоков - ГлобальныйКэш.СБИС.ДанныеИнтеграции.Потоки.Количество() < СвободныхПотоковТребуется Цикл 
		ОсталосьОжидать = РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета - Цел(ТекущаяДата() - ВремяНачалаОжиданияПотока);
		Если ОсталосьОжидать < 0 Тогда
			
			ВызватьСбисИсключение(775, "МодульОбъектаКлиент.РезультатОтправки_ОжиданиеПотоков",,, "Не удалось получить потоки для отправки за разумное время.");
			
		КонецЕсли;
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		
		//Если ОсталосьОжидать < РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета - 10 Тогда 
		//	//Покажем отсчёт до прерывания отправки с ошибкой
		//	Если ОбновитьОтображение Тогда
		//		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		//	КонецЕсли;
		//	ОбновитьОтображение = Ложь;
		//	РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание свободных потоков", ОсталосьОжидать / РезультатОтправки.ПараметрыОтправки.ОжиданиеОтвета * 100,,ПараметрыИндикатора);
		////Иначе
		////	ГлавноеОкно.СбисПоказатьСостояние("Ожидание свободных потоков");
		//КонецЕсли;
		
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
		РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);
	КонецЦикла;
		
КонецПроцедуры

