
// Функция - Конструктор класса для асинхронной отправки
//
// Параметры:
//  ПараметрыКонструктора	- Структура	 - ПараметрыОтправки, ДанныеКОтправке, ОбработчикРезультата, ВерсияФормата
//		ДанныеКОтправке	- Струкутра
//			СписокПакетов		- массив	- из структур с полем "СоставПакета", где в качестве значения - список значений из элементов:
//							значение - ссылка на документ 1С, представление - имя настройки которой обрабатывается документ
//			МодульПодготовки	- форма		- которой осуществляется расчёт документа на выгрузку.
// 
//		ВерсияФормата		- Число 1/2 версия класса - старая/новая отправка
// Возвращаемое значение:
//  РезультатОтправки	 - РезультатОтправки (Структура)	 - класс для отправки
//
&НаКлиенте
Функция НовыйРезультатОтправки(ПараметрыКонструктора) Экспорт
	
	//Число потоков в отправке - сколько можно впихнуть в компонент, отвечающий за отправку за раз
	//Размер пачки - сколько пакетов пихаем за итерацию.
	ВерсияФорматаКласса = 2;
	Если ПараметрыКонструктора.Свойство("ВерсияОтправки") Тогда
		ВерсияФорматаКласса = ПараметрыКонструктора.ВерсияОтправки;
	КонецЕсли;
		
	РезультатОтправки = РезультатОтправки_Пустой(ВерсияФорматаКласса);
	Если ВерсияФорматаКласса = 1 Тогда
		ПараметрыКонструктора.Свойство("ОбработчикРезультата", РезультатОтправки.ОбработчикРезультата);

		Возврат РезультатОтправки;
	КонецЕсли;
	
	//Подключить обработку прерывания
	ОбработкаЗавершения		= НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_Завершение", МодульОбъектаКлиент(), РезультатОтправки);
	ФормаИндикатор			= ПолучитьФормуОбработки("ФормаИндикатора", Новый Структура("Новая", Истина));
	ФормаИндикатор.ОписаниеОповещенияОЗакрытии = ОбработкаЗавершения;
	ПараметрыИндикатора		= Новый Структура("Прерывать, БлокироватьИнтерфейс", Истина, Истина);

	ПараметрыОтправки = Новый Структура("КоличествоПотоков, РазмерПачки, МодульПодготовки, Владелец, ИмяРазделаОтправки, ОжиданиеОтвета", 10, 1);
	ЗаполнитьЗначенияСвойств(ПараметрыОтправки, ПараметрыКонструктора);
    //Значения по-умолчанию
	Если Не ПараметрыКонструктора.Свойство("Владелец") Тогда
		ПараметрыОтправки.Владелец = ГлавноеОкно;
	КонецЕсли;
	Если 	Не	ПараметрыКонструктора.Свойство("МодульПодготовки")
		И		ГлавноеОкно.Кэш.Текущий.Свойство("Форма") Тогда
		ПараметрыОтправки.МодульПодготовки = ГлавноеОкно.Кэш.Текущий.Форма;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("ИмяРазделаОтправки") Тогда
		ПараметрыОтправки.ИмяРазделаОтправки = ГлавноеОкно.Кэш.Текущий.ТипДок;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("КоличествоПотоков") Тогда
		ПараметрыОтправки.КоличествоПотоков = ПолучитьЗначениеПараметраСбис("Потоки_МаксимальноеКоличество");
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("ОжиданиеОтвета") Тогда
		ПараметрыОтправки.ОжиданиеОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета_Отправка");
		Если ПараметрыОтправки.ОжиданиеОтвета = Неопределено Тогда
			ПараметрыОтправки.ОжиданиеОтвета = ПолучитьЗначениеПараметраСбис("ВремяОжиданияОтвета") * 2;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыКонструктора.Свойство("РазмерПачки") Тогда
		ПараметрыОтправки.РазмерПачки = ПолучитьЗначениеПараметраСбис("Отправка_РазмерПачки");
	КонецЕсли;	
	
	ПараметрыОтправки.Вставить("Потоки",				Новый Соответствие);
	ПараметрыОтправки.Вставить("СтатусПоПачкам",		ПараметрыОтправки.РазмерПачки > 3);
	ПараметрыОтправки.Вставить("Индикатор",				ФормаИндикатор);
	ПараметрыОтправки.Вставить("ПараметрыИндикатора",	ПараметрыИндикатора);
	ПараметрыОтправки.Вставить("ОбработчикЗавершить",	ОбработкаЗавершения);
	ПараметрыОтправки.Вставить("ЕстьДоступКБЛ",			ПолучитьЗначениеПараметраСбис("Авторизован"));
	
	СчётчикиОтправки = Новый Структура("ВсегоСтрок", ПараметрыКонструктора.ДанныеКОтправке.СписокПакетов.Количество());
	СчётчикиОтправки.Вставить("СформированоПакетов",	0);//От одного документа 1С может нагенерированно несколько пакетов.
	СчётчикиОтправки.Вставить("ОтправленоПачек",		0);//Сколько было обработано пачек
	СчётчикиОтправки.Вставить("ИндексТекущегоПакета",	0);//Индекс обсчитываемых пакетов из СписокПакетов.
	СчётчикиОтправки.Вставить("ОшибокПодготовки",		0);//Число ошибок на стадии до отправки
	СчётчикиОтправки.Вставить("ОшибокОтправки",			0);//Число ошибок в моменте завершения подготовки и попытки отправить
	СчётчикиОтправки.Вставить("ПовторныхОтправок",		0);//Если теряли авторизацию, то сколько пакетов повторно было отправлено после переавторизации
	СчётчикиОтправки.Вставить("ПервичныхОтправок",		0);//Отправляли в поток после подготовки.
	
	
	ПодпискиПоУмолчанию = Новый Структура;
	ПодпискиПоУмолчанию.Вставить("BeforeCall",	Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_ПередОтправкой",	МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("AfterCall",	Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_ПослеОтправки",	МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("Error",		Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_Ошибка",			МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Вставить("Message",		Новый Структура("Функция, Модуль",	"РезультатОтправки_Асинх_Ответ",			МодульОбъектаКлиент()));
	ПодпискиПоУмолчанию.Message.Вставить("ФункцияОшибки", "РезультатОтправки_Асинх_Ошибка");
	//
	//
	//
	//ОтложенноеЗавершение	= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОбработкаЗавершения, "Прервано"));
	
	РезультатОтправки.ВремяНачала			= ПолучитьДатуВМиллисекундах();
	Если НЕ ПараметрыКонструктора.Свойство("ОбработчикРезультата", РезультатОтправки.ОбработчикРезультата) Тогда
		РезультатОтправки.ОбработчикРезультата = Неопределено;
	КонецЕсли;
	РезультатОтправки.ДанныеКОтправке		= ПараметрыКонструктора.ДанныеКОтправке;//Структура - СписокПакетов, МодульПодготовки, СчетчикПакетов
	Если Не РезультатОтправки.ДанныеКОтправке.Свойство("Сертификаты") Тогда
		РезультатОтправки.ДанныеКОтправке.Вставить("Сертификаты", Новый Структура("ИННАктивированы, ИННАктивировать, ИННОшибки, Список", Новый СписокЗначений, Новый СписокЗначений, Новый Соответствие));
	КонецЕсли;
	
	РезультатОтправки.Вставить("ПодпискиДляКоманд", 	ПодпискиПоУмолчанию);
	РезультатОтправки.Вставить("Счетчики",				СчётчикиОтправки);
	РезультатОтправки.Вставить("ПараметрыОтправки",		ПараметрыОтправки);
	РезультатОтправки.Вставить("Очередь",				Новый Структура("Подготовлены, Сформированы", Новый Соответствие, Новый Соответствие));
	
	Возврат РезультатОтправки;

КонецФункции

// Функция - Результат отправки версия
//
// Параметры:
//  РезультатОтправки	 - Структура - Результат отправки документа или пачки документов
// 
// Возвращаемое значение:
// ВерсияОтправки  - Решено было, что 1 - старая отправка, 2 - новая отправка
//
&НаКлиенте
Функция РезультатОтправки_Версия(РезультатОтправки) Экспорт

	Если РезультатОтправки.Свойство("ВерсияЭкземпляра") И РезультатОтправки.ВерсияЭкземпляра = 2 Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РезультатОтправки_Пустой(ВерсияЭкземпляра = 2) Экспорт
	
	//Тут нужен рефактор по структуре этой помойки
	РезультатОтправки = Новый Структура(
	"_класс, ОбработчикРезультата, 
	|Отправлено, НеОтправлено, НеСформировано,Ошибок, КоличествоПереотправок, ВсегоПакетов, ОшибкиДоОтправки, ПорНомер, 
	|ОтправленоСообщений, ПолученоОтветов, ВремяНачала, ВремяФормирования, ВремяОтправки, ВремяЗаписиСтатусов, ВремяПолученияДанных, ВремяОжиданияОтвета", 
	"РезультатОтправки", ,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	РезультатОтправки.Вставить("ТипыОшибок", 			Новый СписокЗначений);
	РезультатОтправки.Вставить("ДанныеПоСтатусам",		Новый Массив);
	РезультатОтправки.Вставить("ДетализацияОшибок",		Новый Соответствие);
	РезультатОтправки.Вставить("ДетализацияОтправки",	Новый Соответствие);
	РезультатОтправки.Вставить("НаЗаписьСтатусов",		Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
	РезультатОтправки.Вставить("ВерсияЭкземпляра",		ВерсияЭкземпляра);
	РезультатОтправки.Вставить("ПрикладнаяСтатистика",	НовыйПрикладнаяСтатистика()); // ВААл. Для накопления параметров прикладной статистистики
	Если ВерсияЭкземпляра = 2 Тогда
		РезультатОтправки.Вставить("ДанныеКОтправке",	Новый Соответствие);
	Иначе
		РезультатОтправки.Вставить("Новый",						Истина);//Если стоит признак, то считаем отправку пустой. Если признака нет, либо ложь, то требуется пересоздать
		РезультатОтправки.Вставить("ТипыОшибок",				Новый СписокЗначений);
		РезультатОтправки.Вставить("КоличествоСвободныхПотоков",ГлавноеОкно.Кэш.КоличествоПотоковОтправки);
		РезультатОтправки.Вставить("ВремяНачала",				ПолучитьДатуВМиллисекундах());
		РезультатОтправки.Вставить("СформированныеПакеты",		Новый Соответствие);
	КонецЕсли;
		
	Возврат РезультатОтправки;
	
	
КонецФункции

&НаКлиенте
Функция РезультатОтправки_Скопировать(РезультатОтправки, ДляСервера=Ложь) Экспорт
	
	РезультатНовый = РезультатОтправки_Пустой();
	ЗаполнитьЗначенияСвойств(РезультатНовый, РезультатОтправки);

	Если ДляСервера Тогда
		РезультатНовый.Удалить("ДанныеКОтправке");
		РезультатНовый.Удалить("ОбработчикРезультата");
		РезультатНовый.Удалить("ПараметрыОтправки");
		РезультатНовый.Удалить("ОтложенноеЗавершение");
		РезультатНовый.Удалить("ПодпискиДляКоманд");
	КонецЕсли;
	Возврат РезультатНовый;

КонецФункции

&НаКлиенте
Функция РезультатОтправки_Выгрузить(РезультатОтправки, ВерсияФорматаОтвета=1) Экспорт
	
	Если ВерсияФорматаОтвета = 1 Тогда
		РезультатНовый = РезультатОтправки_Пустой();
		ЗаполнитьЗначенияСвойств(РезультатНовый, РезультатОтправки);
		РезультатНовый.Вставить("Ошибок", РезультатОтправки.Счетчики.ОшибокПодготовки + РезультатОтправки.Счетчики.ОшибокОтправки - РезультатОтправки.Счетчики.ПовторныхОтправок);
		РезультатНовый.ОтправленоСообщений	= РезультатОтправки.Счетчики.ПервичныхОтправок + РезультатОтправки.Счетчики.ПовторныхОтправок;
		РезультатНовый.НеОтправлено			= РезультатОтправки.Ошибок;
		РезультатНовый.ОшибкиДоОтправки		= РезультатОтправки.Счетчики.ОшибокПодготовки;
		РезультатНовый.НеСформировано   	= РезультатОтправки.Счетчики.ОшибокПодготовки;
		РезультатНовый.ВсегоПакетов			= РезультатОтправки.Счетчики.СформированоПакетов;

		РезультатНовый.Удалить("ДанныеКОтправке");
		РезультатНовый.Удалить("ОбработчикРезультата");
		РезультатНовый.Удалить("ПараметрыОтправки");
		РезультатНовый.Удалить("ПодпискиДляКоманд");
		Если РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			РезультатНовый.Вставить("ПрерватьОтправку", РезультатОтправки.ПрерватьОтправку);
		КонецЕсли;
	Иначе
		РезультатНовый = РезультатОтправки;
	КонецЕсли;
	Возврат РезультатНовый;

КонецФункции

// Процедура - процедура запускает массовую отправку документов
//
// Параметры:
//  РезультатОтправки	 - класс РезльтатОтправки(Структура)
//  ДопПараметры		 - Структура, Необязательный	 - для расширения
//
&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка(РезультатОтправки, ДопПараметры=Неопределено) Экспорт
	
	ДанныеКОтправке = РезультатОтправки.ДанныеКОтправке;

	Попытка
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
	Исключение
		ОшибкаЗавершения = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Если ОшибкаЗавершения.code = 790 Тогда
			//Тут просто прервать отправку, форма индикатора должна вызвать завершение.
			Возврат;
		КонецЕсли;
	КонецПопытки;

	Если		Не	ОшибкаЗавершения = Неопределено Тогда
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, ОшибкаЗавершения));
	ИначеЕсли		РезультатОтправки.Счетчики.ИндексТекущегоПакета < ДанныеКОтправке.СписокПакетов.Количество() Тогда //Отправляемые пакеты
		//Делаем отложенно отправку пакета для пропуска и возможности нажать на прерывание
		ВыбранаСтрока = ДанныеКОтправке.СписокПакетов[РезультатОтправки.Счетчики.ИндексТекущегоПакета];
		ОбработкаОтправкиПакета	= НовыйСбисОписаниеОповещения("РезультатОтправки_ВыполнитьОтправкуПакета", МодульОбъектаКлиент(), РезультатОтправки);
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", ОбработкаОтправкиПакета, Новый УникальныйИдентификатор, ВыбранаСтрока));
	Иначе
		//Всё отправлено, перейти к получению ответов.
		ОтложенноВыполнить		= НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, "ОжиданиеОтветов"));
	КонецЕсли;
	РезультатОтправки.Вставить("ПоследнееОтложенноеДействие", ОтложенноВыполнить);
	
	ПодключитьОтложенноеДействие(ОтложенноВыполнить);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_ВыполнитьОтправкуПакета(СтрокаПакета, РезультатОтправки) Экспорт
	Перем МассивПодготовленныхПакетов;
	
	ДанныеКОтправке		= РезультатОтправки.ДанныеКОтправке;
	ПараметрыКОтправке	= РезультатОтправки.ПараметрыОтправки;
	ВсегоСтрок			= ДанныеКОтправке.СписокПакетов.Количество();
	
	СписокФорм = Новый Массив;
	СписокФорм.Добавить("Документ_" + ПараметрыКОтправке.ИмяРазделаОтправки);
	СписокФорм.Добавить("Документ_Шаблон");
	МодульПослеФормирования = НайтиФункциюСеансаОбработки("СбисПослеФормированияПакетаДокументов", СписокФорм);
	
	//ГлавноеОкно.СбисНайтиФормуФункции("СбисПослеФормированияПакетаДокументов", "Документ_" + ПараметрыКОтправке.ИмяРазделаОтправки, "Документ_Шаблон");
	
	Попытка
		ВыбранаСтрока = ДанныеКОтправке.СписокПакетов[РезультатОтправки.Счетчики.ИндексТекущегоПакета];
		Если ТипЗнч(ДанныеКОтправке.СписокПакетов) = Тип("СписокЗначений") Тогда
			ВыбранаСтрока = ВыбранаСтрока.Значение;
		КонецЕсли;
		РезультатОтправки.Счетчики.ИндексТекущегоПакета	= РезультатОтправки.Счетчики.ИндексТекущегоПакета + 1;
	
	    //Если нет подготовленных к отправке пакетов, то необходимо их сделать на основании имеющихся документов 1С
		Если Не ВыбранаСтрока.Свойство("МассивПодготовленныхПакетов", МассивПодготовленныхПакетов) Тогда
			СтатусИндекс = РезультатОтправки.Счетчики.ИндексТекущегоПакета * 100 / РезультатОтправки.Счетчики.ВсегоСтрок;
			РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Формирование электронных документов", СтатусИндекс, "(прервать -  Ctrl+Break)");
			
			ДатаНачалаФормированияПакета		= ПолучитьДатуВМиллисекундах();
			МассивПодготовленныхПакетов			= ПараметрыКОтправке.МодульПодготовки.ПодготовитьСтруктуруДокумента(ВыбранаСтрока, ГлавноеОкно.Кэш);
			ДатаОкончанияФормированияПакета		= ПолучитьДатуВМиллисекундах();
			РезультатОтправки.ВремяФормирования = РезультатОтправки.ВремяФормирования + (ДатаОкончанияФормированияПакета - ДатаНачалаФормированияПакета) / 1000;
		КонецЕсли;
		
		Для Каждого ПодготовленныйПакет Из МассивПодготовленныхПакетов Цикл
			ПолныйСоставПакета		= ПодготовленныйПакет;
			ОтправкаДокументаСБИС	= НовыйОтправкаДокументаСБИС(ПолныйСоставПакета);
			
			ОшибкаЧтенияПакета = Ложь;
			
			// https://sbis.ru/help/integration/api/sequence/cod
			СоздатьЧерновик = ПараметрыКОтправке.ЕстьДоступКБЛ
				И ПолныйСоставПакета.Свойство("Состояние")
				И ПолныйСоставПакета.Свойство("Идентификатор")
				И ТипЗнч(ПолныйСоставПакета.Состояние) = Тип("Структура")
				И ПолныйСоставПакета.Состояние.Свойство("Код")
				И ПолныйСоставПакета.Состояние.Код = "0"
				И ПолныйСоставПакета.Идентификатор <> "";
			
			Если СоздатьЧерновик Тогда
				
				РезультатЧтенияДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПрочитатьДокумент(ГлавноеОкно.Кэш, ПолныйСоставПакета.Идентификатор,,ОшибкаЧтенияПакета);
				
				Если	ТипЗнч(РезультатЧтенияДокумента) = Тип("Структура") 
					И	РезультатЧтенияДокумента.Свойство("Этап")
					И	ЗначениеЗаполнено(РезультатЧтенияДокумента.Этап) Тогда
					ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ТекущийЭтапЭДО", РезультатЧтенияДокумента.Этап[0]);
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ПолныйСоставПакета.Свойство("Идентификатор") Тогда
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ИдПакетаЭДО", ПолныйСоставПакета.Идентификатор); 
			КонецЕсли;
			
			Если ПолныйСоставПакета.Свойство("Состояние") Тогда
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "ЗначениеСтатусаЭДО", ПолныйСоставПакета.Состояние); 
			КонецЕсли;
			
			Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
				ПараметрыОшибки = Новый Структура("Подготовка, Исключение", Истина, ПолныйСоставПакета.Ошибка);
				РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
				Продолжить;
			ИначеЕсли Не ПолныйСоставПакета.Свойство("Вложение") Тогда
				//Нечего отправлять
				//Возможно, надо добавить генерацию исключение, т.к. о пустом пакете так же надо проинформировать пользователя.
				Продолжить;
			ИначеЕсли Не МодульПослеФормирования = Ложь Тогда
				//Точка входа "СбисПослеФормированияПакетаДокументов";
				ПолныйСоставПакета = МодульПослеФормирования.СбисПослеФормированияПакетаДокументов(ПолныйСоставПакета, ГлавноеОкно.Кэш);
				Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
				    ПараметрыОшибки = Новый Структура("Подготовка, Исключение", Истина, ПолныйСоставПакета.Ошибка);
					РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
					Продолжить;			
				КонецЕсли;
			КонецЕсли;
			РезультатОтправки.Счетчики.СформированоПакетов = РезультатОтправки.Счетчики.СформированоПакетов + 1;
			
			//Проверка сертификатов по ИНН. Если надо что-то активировать, то вызвать форму ввода пин-кодов.
			ИННОтправителя = ОтправкаДокументаСБИС_Получить(ОтправкаДокументаСБИС, "ИННОтправителя");
			
			Если СоздатьЧерновик И СоставПакета_Получить(ПолныйСоставПакета, "Модифицирован") Тогда

				// ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Готов");
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);

			ИначеЕсли СоздатьЧерновик Тогда
				
				// ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "Черновик");
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
				
			ИначеЕсли ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправителя) = Неопределено Тогда
				
				Если Не ДанныеКОтправке.Сертификаты.ИННОшибки.Получить(ИННОтправителя) = Неопределено Тогда
					//Добавим в очередь, чтобы на следующей итерации отправки накомпленных пакет уронить с ошибкой
				ИначеЕсли	ДанныеКОтправке.Сертификаты.ИННАктивированы.НайтиПоЗначению(ИННОтправителя)		= Неопределено
					И		ДанныеКОтправке.Сертификаты.ИННАктивировать.НайтиПоЗначению(ИННОтправителя)	= Неопределено Тогда
					ДанныеКОтправке.Сертификаты.ИННАктивировать.Добавить(ИННОтправителя);
				КонецЕсли;
				
				ОтправкаДокументаСБИС_Установить(ОтправкаДокументаСБИС, "СтатусПакета", "ОжидаетАктивации");
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
				
			Иначе
				РезультатОтправки_ПоставитьВОчередьКОтправке(РезультатОтправки, ОтправкаДокументаСБИС);
			КонецЕсли;
			
		КонецЦикла;
		
		Если	ДанныеКОтправке.Сертификаты.ИННАктивировать.Количество()
			И	РезультатОтправки.Очередь.Подготовлены.Количество() >= ПараметрыКОтправке.РазмерПачки Тогда
			
			//Нужно активировать сертификаты, если очередь достигла лимита. Прерываем отправку, запускаем активацию сертификатов
			РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
			РезультатОтправки_МассоваяОтправка_АктивацияСертификатов(РезультатОтправки);
			Возврат;
			
		КонецЕсли;
	
		РезультатОтправки_ОтправитьНакопленные(РезультатОтправки);
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
	Исключение
		//Если прервано с ошибкой, то завершаем отправку и переходим к обработке завершения
		РезультатОтправки.Вставить("ПрерватьОтправку", НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение"));
	КонецПопытки;
	
	//Продолжить итерацию
	РезультатОтправки_МассоваяОтправка(РезультатОтправки);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_Завершение(АргументЗавершения="Завершено", РезультатОтправки) Экспорт 
	
	Отказ = Ложь;
	Если		АргументЗавершения = Неопределено Тогда
		
		//Ложное срабатывание. Возможно, закрыли форму индикатора.
		Возврат;
		
	ИначеЕсли	АргументЗавершения = "Завершено" Тогда
		
		//Всё ок, дошли до конца
		
	ИначеЕсли	АргументЗавершения = "Прервать" Тогда
		
		//Поступила команда прервать. Надо чтобы все прошлые обработчики закончили работу и уже потом позвать завершение 
		ОтложенноВыполнить = НовыйОтложенноеДействие(
			Новый Структура("ОписаниеОповещения, Аргумент, ИдентификаторДействия", 
			РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, "Прервано", Новый УникальныйИдентификатор));
		ПодключитьОтложенноеДействие(ОтложенноВыполнить);
		Возврат		
	
	ИначеЕсли	АргументЗавершения = "Прервано" Тогда
		
		//Обработка прервалась
		Если РезультатОтправки.Свойство("ПоследнееОтложенноеДействие") Тогда
			ОтключитьОтложенноеДействие(РезультатОтправки.ПоследнееОтложенноеДействие);
			РезультатОтправки.Удалить("ПоследнееОтложенноеДействие");
		КонецЕсли;
		АргументЗавершения = НовыйСбисИсключение(790, "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Отказ = Истина;
		
	ИначеЕсли	АргументЗавершения = "ОжиданиеОтветов" Тогда
		
		ДанныеКОтправке = РезультатОтправки.ДанныеКОтправке;
		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		
		Если ДанныеКОтправке.Сертификаты.ИННАктивировать.Количество() Тогда
			
			//Всё ещё нужно активировать сертификаты (не набрали пачку), запускаем активацию сертификатов
			РезультатОтправки_МассоваяОтправка_АктивацияСертификатов(РезультатОтправки);
			Возврат;
			
		КонецЕсли;
			
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание ответов", 0);
		ПараметрыЗавершить = Новый Структура("ОжидатьСвободныеПотоки, ЧислоПачекОтправить, ОтправлятьЦелуюПачку", Ложь, 1, Ложь);
		
		ОтложеннаяИтерацияответов = НовыйСбисОписаниеОповещения("РезультатОтправки_МассоваяОтправка_ЧтениеОтветов", МодульОбъектаКлиент(), РезультатОтправки);
		РезультатОтправки.ПараметрыОтправки.Вставить("ОбработчикОжиданияОтветов", ОтложеннаяИтерацияответов);
		
		ОтложенноВыполнить = НовыйОтложенноеДействие(Новый Структура("ОписаниеОповещения, Аргумент", ОтложеннаяИтерацияответов, ПараметрыЗавершить));
		ПодключитьОтложенноеДействие(ОтложенноВыполнить);
		Возврат;
		
	Иначе
		
		//Отправка прервана из-за ошибки
		СообщитьСбисИсключение(АргументЗавершения);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		//Запишем что удалось получить.
		РезультатОтправки_СпрятатьСтатус(РезультатОтправки);
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Завершение отправки");
		АсинхронноеСбисСобытие = НовыйАсинхронноеСбисСобытие(, АргументЗавершения, "Error");
		
		Попытка

			ГлобальныйКэш_ЧтениеОтветовИВызовСобытий();
			РезультатОтправки_ОсвободитьПотоки(РезультатОтправки, АсинхронноеСбисСобытие);
			РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);
			
		Исключение
			
			СообщитьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОшибкаЗавершить = НовыйСбисИсключение(	, 
											"МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение",
											,
											"Отправка завершена.",
											"Получен ответ по завершенной отправке.");
	РезультатОтправки.Вставить("ПрерватьОтправку", ОшибкаЗавершить); // Выставить прерывание на случай некорректного завершения отправки и получения ответа.
	
	РезультатОтправкиОтдать = РезультатОтправки_Выгрузить(РезультатОтправки);
	ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправкиОтдать);
	
    РезультатОтправки_СпрятатьСтатус(РезультатОтправки, Истина);
	РезультатОтправки_ОтправитьЗаписиПрикладнойСтатистики(РезультатОтправки);
	
	МодульПользовательскойТочкиПослеОтправки = НайтиФункциюСеансаОбработки("сбисПослеОтправкиПакетов", "РаботаСДокументами1С");
	Если МодульПользовательскойТочкиПослеОтправки <> Ложь Тогда
		МодульПользовательскойТочкиПослеОтправки.сбисПослеОтправкиПакетов(ГлавноеОкно.Кэш);	
	КонецЕсли;

	ВыполнитьСбисОписаниеОповещения(РезультатОтправкиОтдать, РезультатОтправки.ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправки_МассоваяОтправка_ЧтениеОтветов(ПараметрыЗавершить, РезультатОтправки) Экспорт
	
	Попытка
		
		РезультатОтправки_ОбработкаПрерывания(РезультатОтправки);
		РезультатОтправки_ОбработатьОтветы_Асинхронно(РезультатОтправки);
		РезультатОтправки_ОтправитьНакопленные(РезультатОтправки, ПараметрыЗавершить);
		РезультатОтправки_ЗаписатьНакопленныеСтатусы(РезультатОтправки);

		ОбщееЧислоОжидания	= РезультатОтправки.Счетчики.СформированоПакетов + РезультатОтправки.Счетчики.ПовторныхОтправок;
		Если ОбщееЧислоОжидания = 0 Тогда
			ОбщееЧислоОжидания = 1;	
		КонецЕсли;
		РезультатОтправки_ПоказатьСтатус(РезультатОтправки, "Ожидание ответов", Окр(РезультатОтправки.ПолученоОтветов * 100 / ОбщееЧислоОжидания), "(прервать -  Ctrl+Break)");
		//Пока всё не прогрузилось, выполняем отправку остатков.
		Если	РезультатОтправки.Очередь.Подготовлены.Количество()
			Или	РезультатОтправки.ПараметрыОтправки.Потоки.Количество()
			Или	РезультатОтправки.НаЗаписьСтатусов.Ответы.Количество()
			Или	РезультатОтправки.НаЗаписьСтатусов.Ошибки.Количество() Тогда
			ОтложенноВыполнить = НовыйОтложенноеДействие(
				Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", 
				РезультатОтправки.ПараметрыОтправки.ОбработчикОжиданияОтветов, Новый УникальныйИдентификатор, ПараметрыЗавершить));
		Иначе
			ОтложенноВыполнить = НовыйОтложенноеДействие(
				Новый Структура("ОписаниеОповещения, ИдентификаторДействия, Аргумент", 
				РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, Новый УникальныйИдентификатор, "Завершено"));
		КонецЕсли;
			
	Исключение
		//Упала неизвестная ошибка, завершить обработку.
		ОшибкаЗавершения	= НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_МассоваяОтправка_Завершение");
		Если ОшибкаЗавершения.code = 790 Тогда
			//Тут просто прервать отправку, форма индикатора должна вызвать завершение.
			Возврат;
		КонецЕсли;
		ОтложенноВыполнить	= НовыйОтложенноеДействие(
							Новый Структура("ОписаниеОповещения, Аргумент, ИдентификаторДействия", 
							РезультатОтправки.ПараметрыОтправки.ОбработчикЗавершить, ОшибкаЗавершения, Новый УникальныйИдентификатор));
	КонецПопытки;
	
	ПодключитьОтложенноеДействие(ОтложенноВыполнить);
	
КонецПроцедуры

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Отправка_РезультатОтправки_private
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_ОбработкаОтветов
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_ЗаписьИтогов
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_Документы_РезультатОтправки_Замер
#КонецОбласти

