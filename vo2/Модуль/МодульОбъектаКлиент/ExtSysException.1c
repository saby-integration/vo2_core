
// Процедура - Сообщает сбис исключение
//
// Параметры:
//  СбисИсключение	 - Структура	 - экземпляр ExtSysException(СбисИсключение)
//  ДопПараметры	 - Структура	 - 
//		СтатусСообщения		- Строка	- статус сообщения: "warning" - показать форму предупреждения со ссылкой на решение проблемы. "attention" - показать форму ошибки, "message" - вывод в обычном режиме
//		Отправлять			- Булево, признак отключения отправки ошибки в статистику
//
&НаКлиенте
Процедура СообщитьСбисИсключение(СбисИсключение, ДопПараметры=Неопределено) Экспорт
	Перем СтатусОшибки, лРешениеПроблемы, лФормаВладелец, лОтправлятьОшибку;
	Если	Не	ТипЗнч(СбисИсключение) = Тип("Структура")
		Или Не	СбисИсключение.Свойство("message")
		Или	Не	СбисИсключение.Свойство("details") Тогда
		Возврат;
	КонецЕсли;
	ТекстОшибки = Строка(СбисИсключение.message) + ?(СбисИсключение.Свойство("details") И СбисИсключение.message <> СбисИсключение.details, " (" + СбисИсключение.details + ")", "");
	Если ГлобальныйКэш.Парам.РежимОтладки Тогда
		Попытка
			СбисПоследняяЗаписьСтек = СбисИсключение.stack[0].methodName;
		Исключение
			СбисПоследняяЗаписьСтек	= "МодульОбъектаКлиент.СообщитьСбисИсключение";
		КонецПопытки;
		ИмяМодуля = СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 1);
		ИмяВызова = СтрПолучитьСтроку(СтрЗаменить(СбисПоследняяЗаписьСтек, ".", Символы.ПС), 2);
		ПолныйТекстСообщения = СбисРаботаСJson.ПреобразоватьЗначениеВJson(СбисИсключение);
		лОтладочныеДанные = Новый Структура(
		"Тип,		Модуль,		Вызов,		Время,			Идентификатор,		Сообщение", 
		"ERROR",	ИмяМодуля,	ИмяВызова,	ТекущаяДата(),	СбисИсключение.code,ПолныйТекстСообщения);
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	Если ГлобальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	Если	СбисИсключение.Свойство("help", лРешениеПроблемы)
		И	ЗначениеЗаполнено(лРешениеПроблемы) Тогда
		СтатусОшибки = "warning";
	ИначеЕсли		ДопПараметры = Неопределено
		Или Не	ДопПараметры.Свойство("СтатусСообщения", СтатусОшибки) Тогда
		СтатусОшибки = "attention";
	КонецЕсли;
	Если 		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ФормаВладелец", лФормаВладелец) Тогда
		лФормаВладелец = ГлавноеОкно;
	КонецЕсли;
	Если 		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("Отправлять", лОтправлятьОшибку) Тогда
		лОтправлятьОшибку = Истина;
	КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ТекстСсылка",		"Решение проблемы");
	ПараметрыСообщения.Вставить("Текст",			ТекстОшибки);
	ПараметрыСообщения.Вставить("АдресСсылка",		лРешениеПроблемы);
	ПараметрыСообщения.Вставить("ФормаВладелец",	лФормаВладелец);
	лОтправлятьОшибку = лОтправлятьОшибку И Не СбисИсключение.code = 775;
	Если		СтатусОшибки = "warning" Тогда
		ФормаПредупреждение = ГлавноеОкно.СбисПолучитьФорму("ФормаПредупреждения",,,лФормаВладелец);
		ФормаПредупреждение.Показать(ГлобальныйКэш, ПараметрыСообщения);
	ИначеЕсли	СтатусОшибки = "attention" Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			фрм						= ГлавноеОкно.СбисПолучитьФорму("ФормаОшибка",,,лФормаВладелец);
			фрм.ТекстОшибки			= ТекстОшибки;
			фрм.ИнформацияОбОшибке	= "";
			фрм.ОткрытьМодально(60);
		#Иначе
			СбисСообщить(ПараметрыСообщения); 
		#КонецЕсли
	Иначе
		СбисСообщить(ПараметрыСообщения); 
	КонецЕсли;
	//Если не отключено, то отправим информацию о возникшей ошибке
	Если лОтправлятьОшибку Тогда	
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение);
		Попытка
			СбисСтатистика_СформироватьИЗаписать(сбисПараметрыСтатистики, Новый Структура);	
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СообщитьСбисИсключение(НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СформироватьИЗаписатьСтатистикуНаСервис"), Новый Структура("Отправлять", Ложь));
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

//Процедура генерирует и вызывает ExtSysException(СбисИсключение)
&НаКлиенте
Процедура ВызватьСбисИсключение(БазоваяОшибка=Неопределено, СбисИмяКоманды,
								СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, СбисДамп=Неопределено, СбисХелп=Неопределено) Экспорт
	ИсключениеВызов = НовыйСбисИсключение(БазоваяОшибка, СбисИмяКоманды, СбисКод, СбисСообщение, СбисДетализация, СбисДамп, СбисХелп);
	ВызватьИсключение(СбисИсключение_Сериализовать(ИсключениеВызов));
КонецПроцедуры

//Конструктор ExtSysException
//Кэш				- Кэш обработки на клиенте
//БазоваяОшибка		- (необяз) ExtSysException(СбисИсключение)/ИнформацияОбОшибке/Структура("code, message, detail, dump, help")/Строка (в json/произвольная)/Число(код ошибки)
//СбисИмяКоманды	- Имя команды в стек
//Работает если в БазовойОшибке что-то неопределено, иначе берутся значения по-умолчанию
//СбисКод			- (необяз)код для новой ошибки. 		По-умолч 100
//СбисСообщение		- (необяз)сообщение для новой ошибки.	По-умолч сообщение по коду 
//СбисДетализация	- (необяз)детализация для новой ошибки.	По-умолч сообщение по коду
//СбисДамп			- (необяз)дамп ошибки
//СбисХелп			- (необяз)ссылка на решение проблемы
&НаКлиенте
Функция НовыйСбисИсключение(БазоваяОшибка=Неопределено, СбисИмяКоманды,
							СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, 
							СбисДамп=Неопределено, СбисХелп=Неопределено) Экспорт
	Перем СбисСтек,СбисОсновнаяОшибка,СтрокаРазбора;
	СбисИсключение = Новый Структура("code, message, details, methodName, dump, help, base", СбисКод, СбисСообщение, СбисДетализация, СбисИмяКоманды, СбисДамп, СбисХелп);
	
	Если		ТипЗнч(БазоваяОшибка) = Тип("ИнформацияОбОшибке") Тогда
		Попытка
			СбисОсновнаяОшибка = СбисИсключение_ДеСериализовать(БазоваяОшибка.Описание);
		Исключение
			//Это не запакованный Exception
			СбисДамп = Новый Структура("ИсходнаяСтрока, НомерСтроки", БазоваяОшибка.ИсходнаяСтрока, БазоваяОшибка.НомерСтроки);
			СбисОсновнаяОшибка = Новый Структура("code,details,methodName,dump,message", 500, БазоваяОшибка.Причина, БазоваяОшибка.ИмяМодуля, СбисДамп, БазоваяОшибка.Описание);
		КонецПопытки;
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Строка") Тогда
		//Конструктор из строки
		СбисОсновнаяОшибка = Новый Структура("code,message,details,methodName,dump");
		Если Лев(СбисОсновнаяОшибка,1) = "{" Тогда
			СтрокаРазбора = БазоваяОшибка;
		ИначеЕсли	Лев(СбисОсновнаяОшибка,35) = "callBLObject(): Метод бизнес логики"
			И		Найти(СбисОсновнаяОшибка,"вернул ошибку") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{"));
			СтрокаРазбора = Лев(СтрокаРазбора, СтрДлина(СтрокаРазбора)-1);
		ИначеЕсли Найти(БазоваяОшибка,"{""jsonrpc"":") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{""jsonrpc"":"));
		Иначе
			СбисОсновнаяОшибка.code	= 100;
			СбисОсновнаяОшибка.message	= БазоваяОшибка;
			СбисОсновнаяОшибка.details	= БазоваяОшибка;
		КонецЕсли;	
		Если Не СтрокаРазбора = Неопределено Тогда
			Попытка
				СбисОсновнаяОшибка = РаботаСJSON.СбисПрочитатьJSON(СтрокаРазбора);
				Если СбисОсновнаяОшибка.Свойство("Error") Тогда
					СбисОсновнаяОшибка = СбисОсновнаяОшибка.Error;
				КонецЕсли;
			Исключение
				СбисОсновнаяОшибка.code	= 100;
				СбисОсновнаяОшибка.message	= БазоваяОшибка;
				СбисОсновнаяОшибка.details	= БазоваяОшибка;
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли	ТипЗнч(БазоваяОшибка) = Тип("Число") Тогда
		СбисОсновнаяОшибка = Новый Структура("code,message,details", БазоваяОшибка, СбисИсключение_СообщениеПоКоду(БазоваяОшибка), СбисИсключение_СообщениеПоКоду(БазоваяОшибка));
	Иначе
		СбисОсновнаяОшибка = БазоваяОшибка;
	КонецЕсли;
	
	//Если не указаны основные поля для новой ошибки
	Если СбисИсключение.code = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.code = 100;
		Иначе
			СбисИсключение.code = СбисОсновнаяОшибка.code;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.message = Неопределено Тогда
		Если		СбисОсновнаяОшибка = Неопределено
			Или	Не	СбисОсновнаяОшибка.Свойство("message", СбисИсключение.message) Тогда
			СбисИсключение.message = СбисИсключение_СообщениеПоКоду(СбисИсключение.code);
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.details = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.details = СбисИсключение.message;
		ИначеЕсли Не СбисОсновнаяОшибка.Свойство("details", СбисИсключение.details) Тогда
			СбисИсключение.details = СбисОсновнаяОшибка.detail;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.help = Неопределено Тогда
		Если СбисОсновнаяОшибка <> Неопределено и СбисОсновнаяОшибка.Свойство("help") Тогда
			СбисИсключение.help = СбисОсновнаяОшибка.help;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисОсновнаяОшибка = Неопределено Тогда
		Возврат СбисИсключение;
	ИначеЕсли Не СбисОсновнаяОшибка.Свойство("base", СбисИсключение.base) Тогда
		СбисИсключение.base = СбисОсновнаяОшибка;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если СбисОсновнаяОшибка.Свойство("stack", СбисСтек) Тогда
		СбисОсновнаяОшибка.Удалить("stack");
	Иначе
		СбисСтек = Новый Массив;
		СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисОсновнаяОшибка);
		СбисСтек.Добавить(СбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
	ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисИсключение);
	СбисСтек.Вставить(0, СбисЗаписьВСтек);
	СбисИсключение.Вставить("stack", СбисСтек);
	Если СбисОсновнаяОшибка.Свойство("data") Тогда
		СбисИсключение.Вставить("data", СбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если СбисДамп = Неопределено Тогда
		Если СбисОсновнаяОшибка.Свойство("dump", СбисИсключение.dump) Тогда
			СбисОсновнаяОшибка.Удалить("dump");
		КонецЕсли;
	КонецЕсли;
	Возврат СбисИсключение;
	
КонецФункции

&НаКлиенте
Функция СбисИсключение_Сериализовать(СбисИсключение)
	Возврат СбисИсключение_СериализоватьСервер(СбисИсключение);
КонецФункции

&НаСервереБезКонтекста
Функция СбисИсключение_СериализоватьСервер(СбисИсключение)
	Возврат ЗначениеВСтрокуВнутр(СбисИсключение);
КонецФункции
	
&НаКлиенте
Функция СбисИсключение_ДеСериализовать(СбисИсключение)
	Возврат СбисИсключение_ДеСериализоватьСервер(СбисИсключение);
КонецФункции	

&НаСервереБезКонтекста
Функция СбисИсключение_ДеСериализоватьСервер(СбисИсключение)
	Возврат ЗначениеИзСтрокиВнутр(СбисИсключение);
КонецФункции

&НаКлиенте
Функция СбисИсключение_СообщениеПоКоду(СбисКодОшибки)
	Если		СбисКодОшибки = 100 Тогда
		Возврат "Неизвестная ошибка системы";
	ИначеЕсли	СбисКодОшибки = 300 Тогда
		Возврат "Неизвестная ошибка БЛ";
	ИначеЕсли	СбисКодОшибки = 301 Тогда
		Возврат "Сервис СБИС.Диск временно недоступен";
	ИначеЕсли	СбисКодОшибки = 400 Тогда
		Возврат "Неизвестная ошибка СБИС Плагина";
	ИначеЕсли	СбисКодОшибки = 409 Тогда
		Возврат "Сеанс с учетной системой завершен";
	ИначеЕсли	СбисКодОшибки = 500 Тогда
		Возврат "Неизвестная ошибка клиента";
	ИначеЕсли	СбисКодОшибки = 600 Тогда
		Возврат "Неизвестная ошибка настроек";
	ИначеЕсли	СбисКодОшибки = 700 Тогда
		Возврат "Неизвестная ошибка подключения";
	ИначеЕсли	СбисКодОшибки = 717 Тогда
		Возврат "Несовместимая версия файла базы данных";
	ИначеЕсли	СбисКодОшибки = 735 Тогда
		Возврат "Данная операция недоступна";
	ИначеЕсли	СбисКодОшибки = 755 Тогда
		Возврат "Не найден сертификат ЭП";
	ИначеЕсли	СбисКодОшибки = 770 Тогда
		Возврат "Ошибка XSLT";
	ИначеЕсли	СбисКодОшибки = 772 Тогда
		Возврат "Ошибка работы с файловой системой";
	ИначеЕсли	СбисКодОшибки = 773 Тогда
		Возврат "Неизвестная ошибка при выполнении метода";	
	ИначеЕсли	СбисКодОшибки = 775 Тогда
		Возврат "Не получен ответ от плагина";	
	ИначеЕсли	СбисКодОшибки = 776 Тогда
		Возврат "Запуск программы/функции/метода не удался";	
	ИначеЕсли	СбисКодОшибки = 779 Тогда
		Возврат "Не найден объект";	
	ИначеЕсли 	СбисКодОшибки = 784 Тогда
		Возврат "Ошибка в настройках соединения";	
	КонецЕсли;
	Возврат "Неизвестная ошибка системы";
КонецФункции

