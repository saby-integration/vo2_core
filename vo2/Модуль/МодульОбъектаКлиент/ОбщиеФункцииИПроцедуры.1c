
// Процедура - запускает редактор файлов настроек
//
// Параметры:
//  ПараметрыЗапускаВходящие - 	 - 
//
&НаКлиенте
Процедура ЗапуститьРедакторИни(ПараметрыЗапускаВходящие=Неопределено) Экспорт
	
	фрм = ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекОбщее");
	Если фрм = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "ФормаГлавноеОкно.ЗапуститьРедакторИни",,,"Не удалось получить форму редактора файлов настроек");
		СообщитьСбисИсключение(СбисИсключение);
		Возврат;
	КонецЕсли;
    фрм.ЗакрыватьПриЗакрытииВладельца = Истина;
	фрм.Показать(ПараметрыЗапускаВходящие);

КонецПроцедуры

// Процедура - сообщить пользователю
//
// Параметры:
//  ПараметрыСообщения	 - 	Структура - Текст, СтатусСообщения, ЭлементНазначения, ФормаВладелец
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура СбисСообщить(ПараметрыСообщения, ДопПараметры=Неопределено) Экспорт
	Перем СбисСтатусСообщения;
	
	Если ГлобальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не ПараметрыСообщения.Свойство("СтатусСообщения", СбисСтатусСообщения) Тогда
			СбисСтатусСообщения = СтатусСообщения.Обычное
		КонецЕсли;
		Сообщить(ПараметрыСообщения.Текст, СбисСтатусСообщения);
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ПараметрыСообщения.Текст;
		Если ПараметрыСообщения.Свойство("ЭлементНазначения") Тогда
			Сообщение.Поле = ПараметрыСообщения.ЭлементНазначения;
		КонецЕсли;
		Если		ПараметрыСообщения.Свойство("ФормаВладелец")
			И Не	ПараметрыСообщения.ФормаВладелец = Неопределено  Тогда
			Сообщение.ИдентификаторНазначения = ПараметрыСообщения.ФормаВладелец.УникальныйИдентификатор;
		КонецЕсли;
		Сообщение.Сообщить(); 
	#КонецЕсли	
КонецПроцедуры

// Процедура - Сбис показать вопрос. Идентично ПоказатьВопрос, с учетом модальности ОФ.
//
// Параметры:
//  СбисОписаниеОповещенияОЗавершении	 - СбисОписаниеОповещения	 - обработчик диалога
//  ТекстВопроса						 - Строка					 - 
//  Кнопки								 - Список					 - 
//  Таймаут								 - Таймаут					 - 
//  КнопкаПоУмочанию					 - Кнопка/элемент списка	 - 
//  Заголовок							 - Строка					 - 
//  КнопкаТаймаута						 - Кнопка/элемент списка	 - 
//
&НаКлиенте
Процедура СбисПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмочанию = Неопределено, Заголовок="", КнопкаТаймаута=Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута), СбисОписаниеОповещенияОЗавершении);
	#Иначе
		ПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута);
	#КонецЕсли
КонецПроцедуры

// Процедура - завершает работу обработки
//
&НаКлиенте
Процедура СбисЗавершитьРаботу() Экспорт
	
	Оповестить("ЗакрытьСБИС");

	Попытка
		
		ГлавноеОкно.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, ГлобальныйКэш.Парам));
		Если ГлобальныйКэш.СБИС.Авторизован Тогда
			СохранитьМеткиСтатусов(ГлавноеОкно.Кэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
			ГлобальныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
			ГлавноеОкно.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
			ГлавноеОкно.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
		КонецЕсли;
		
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		ГлавноеОкно.Кэш.Интеграция.Завершить(ГлавноеОкно.Кэш, Новый Структура, Ложь);
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗавершитьРаботу");  
		СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "platform_warning"));
				
	КонецПопытки;
	
	
	ГлавноеОкно.ЗавершитьРаботу = Истина; 
	ГлавноеОкно.Закрыть();
	
КонецПроцедуры

//Процедура показывает пользователю выбор из сформированного списка значений
&НаКлиенте
Процедура СбисВыбратьИзСписка(СписокВыбора, ДопПараметры) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(СписокВыбора.ВыбратьЭлемент(ДопПараметры.Заголовок, ДопПараметры.Элемент), ДопПараметры.Обработчик);
	#Иначе
		СписокВыбора.ПоказатьВыборЭлемента(ДопПараметры.Обработчик, ДопПараметры.Заголовок, ДопПараметры.Элемент);
	#КонецЕсли	
	
КонецПроцедуры

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура ВыполнитьДействиеСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт 
	Перем ИмяФайла, ПакетВложения;
	
	Отказ		= Ложь;
	СоставПакета= ПараметрыДействия.СоставПакета;
	Этап		= ПараметрыДействия.Этап;
	Действие	= ПараметрыДействия.Действие;
	Сертификат	= ПараметрыДействия.Сертификат;
	
	ДопПараметрыЗапроса	= Новый Структура("СообщитьОбОшибке, ВернутьОшибку", Ложь, Истина);
	
	// Назначение действие на этап
	action = Новый Структура("Название", Действие.Название);
	Если Не Сертификат = Неопределено Тогда
		action.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если Не Сертификат = Неопределено И Не Действие.Свойство("Сертификат") Тогда
		Действие.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если ПараметрыДействия.Свойство("Комментарий") И Не ПараметрыДействия.Комментарий = "" Тогда
		action.Вставить("Комментарий", ПараметрыДействия.Комментарий);
	КонецЕсли;	
		
	// Назначение этапа
	stage		= Новый Структура("Название, Идентификатор, Действие", Этап.Название, Этап.Идентификатор, action);
	document_in	= Новый Структура("Этап, Идентификатор", stage, СоставПакета.Идентификатор);
	
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Не (Вложение.Свойство("ТребуетПодписания") И Вложение.ТребуетПодписания) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЗаписатьВложенияСБИС(СоставПакета, Вложение, Новый Структура, Новый Структура("Кэш", ГлавноеОкно.Кэш));
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка этапа
	prepared_document = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ПодготовитьДействие(ГлавноеОкно.Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(prepared_document, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	РезультатФормирования = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСформироватьТитулы(ГлавноеОкно.Кэш, СоставПакета, Действие, СбисПараметрыТитулов, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатФормирования, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование	= сбисПараметрыТитулов.Шифрование;
	Размер		= attachmentListPrepared.Количество();
	// если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
	ТребуетсяПередачаВложений =	Сертификат <> Неопределено
							И	Сертификат.Ключ.Тип = "Клиентский"
							И	Действие.ТребуетПодписания = "Да";
	
	Если ТребуетсяПередачаВложений Тогда  
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить("Идентификатор", Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить("Имя", Запись.Файл.Имя);
			file.Вставить("Хеш", Запись.Файл.Хеш);
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			Если Запись.Свойство("Зашифрован") И Запись.Зашифрован = "Да" Тогда
				//Для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				//Для SDK должно отвалиться на стадии подготовки.
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить("Ссылка", Запись.Файл.Ссылка);
			КонецЕсли;
			attachment.Вставить("Файл", file);
			attachmentList.Добавить(attachment);
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип = СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Вложение.Свойство("Идентификатор") Тогда
				//Если есть ИД, то вложение уже готово
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("ИмяФайла", ИмяФайла) Тогда
				//Генерируем имя файла, если не указано
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + Строка(Новый УникальныйИдентификатор()) + ".xml";
			КонецЕсли;
			ДвоичныеДанныеXMLДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_СериализоватьСтрокуВBase64(ГлавноеОкно.Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(ДвоичныеДанныеXMLДокумента, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
			КонецЕсли;
				
			file		= Новый Структура("Имя, ДвоичныеДанные", ИмяФайла, ДвоичныеДанныеXMLДокумента);
			attachment	= Новый Структура("Файл", file);
			Если Вложение.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдПодтвЗаказа) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Удалить(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				Попытка
					// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
					ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип + Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
					Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
						ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
						Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
							attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
						КонецЕсли;
					Иначе
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецЕсли;
				Исключение
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецПопытки;
			КонецЕсли;
			attachment.Вставить( "Идентификатор",  ИдВложения);
			Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
				attachment.Вставить( "ТребуетШифрования",  "Да");
				Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
					attachment.Вставить( "Тип",  Вложение.Тип);
					attachment.Вставить( "Подтип",  Вложение.ПодТип);
					attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				КонецЕсли;
				Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
					attachment.Вставить( "Дата",  Вложение.Дата);
				КонецЕсли;
				Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
					attachment.Вставить( "Название",  Вложение.Название);
				КонецЕсли;
			КонецЕсли;
			
			attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
			attachmentList.Добавить( attachment );
		КонецЦикла;
	КонецЕсли;
	
	Если	ПараметрыДействия.Свойство("СертификатДляПодписания")
		И	ЗначениеЗаполнено(ПараметрыДействия.СертификатДляПодписания) Тогда
		РезультатПодписания = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисПодписатьВложения(ГлавноеОкно.Кэш, attachmentList, ПараметрыДействия.СертификатДляПодписания, ПараметрыДействия.Алгоритм, Отказ);
		Если Отказ Тогда 
			ВызватьСбисИсключение(РезультатПодписания, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
		КонецЕсли;
    КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура("Комментарий, Название, Идентификатор", prepared_action.Комментарий, prepared_action.Название, "");
	Если prepared_action.Свойство("Идентификатор") Тогда
		action.Идентификатор = prepared_action.Идентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура("Действие, Вложение, Идентификатор, Название", action, attachmentList, prepared_stage.Идентификатор, prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч = 0 По КолРедакций - 1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	
	document_in = Новый Структура("Идентификатор, Редакция, Этап", prepared_document.Идентификатор, redactions, stage);
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент);
	КонецЕсли;
	
	// Завершение этапа
	РезультатДействия = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ВыполнитьДействие(ГлавноеОкно.Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатДействия, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает запрашиваемую форму при успехе, вызывает СбисИсключение при неудаче, Ложь, если формы нет.
//
// Параметры:
//  ИмяФормы	 - 	 - 
//  ДопПараметры - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ДопПараметры=Неопределено) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;

	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("КэшироватьФорму",	КэшироватьПолученную);
		ДопПараметры.Свойство("ПолучитьНовую",		ПолучитьНовую);
		ДопПараметры.Свойство("Владелец",			СбисВладелецФормы);
		ДопПараметры.Свойство("ОбработкаОбъект",	СбисОбъект1С);
		ДопПараметры.Свойство("Параметры",			СбисПараметрыФормы);
	КонецЕсли;

	Если КэшироватьПолученную = Неопределено Тогда
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если ПолучитьНовую = Неопределено Тогда
		ПолучитьНовую = Ложь;
	КонецЕсли;
	Если	СбисВладелецФормы = Неопределено
		И	ИмяФормы <> "ФормаГлавноеОкно" Тогда
		СбисВладелецФормы = ГлавноеОкно;
	КонецЕсли;

	Стандартная			= СбисОбъект1С = Неопределено;
	ПолноеИмяФормы		= ПолучитьФормуОбработки_ПолноеИмяФормы(ИмяФормы, СбисОбъект1С);
	БезопасноеИмяФормы	= ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С);

	Если		ПолучитьНовую
		Или	Не	ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		
		Если		Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(ИмяФормы)	<> Неопределено
			Или	Не	Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(ИмяФормы)		<> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Стандартная Тогда
					СбисОбъект1С = ЭтотОбъект;
				КонецЕсли;
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(ИмяФормы, СбисВладелецФормы);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
				Если Не СбисПараметрыФормы = Неопределено Тогда 
					Попытка
						Результат.Параметры = СбисПараметрыФормы;
					Исключение
						//Нет реквизита под параметры формы.
					КонецПопытки;
				КонецЕсли;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						ВызватьСбисИсключение(773, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",,,"Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
			#КонецЕсли
		Иначе
			//Нет такой формы
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	Если КэшироватьПолученную Тогда
		ПолучитьФормуОбработки_ЗакэшироватьФорму(Результат, БезопасноеИмяФормы);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_ПолноеИмяФормы(ИмяФормы, СбисОбъект1С=Неопределено) Экспорт 

	ПолноеИмяФормы	= ИмяФормы;		
	Если СбисОбъект1С = Неопределено Тогда
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			ПолноеИмяФормы	= ГлобальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя
							+ ГлобальныйКэш.ПараметрыСистемы.Обработка.КлючФорм
							+ ПолноеИмяФормы;
		#КонецЕсли
	Иначе
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			ПолноеИмяФормы	= СбисОбъект1С + ПолноеИмяФормы;
		#КонецЕсли
	КонецЕсли;
	Возврат ПолноеИмяФормы;
	
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С) Экспорт 

	Если СбисОбъект1С = Неопределено Тогда
		БезопасноеИмяФормы	= "ВО_"	+ СтрЗаменить(ПолноеИмяФормы, ".", "_");
	Иначе
		БезопасноеИмяФормы	= "ВФК_"+ СтрЗаменить(ПолноеИмяФормы, ".", "_");
	КонецЕсли;
	Возврат БезопасноеИмяФормы;
	
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция ПолучитьФормуОбработки_ЗакэшироватьФорму(ЗначениеФормы, КлючФормы) Экспорт

	ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Вставить(КлючФормы, ЗначениеФормы);
	
КонецФункции

// Функция - Возвращает дату в миллисекундах
// 
// Возвращаемое значение:
//  Число - миллисекунды
//
&НаКлиенте
Функция ПолучитьДатуВМиллисекундах() Экспорт 
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Используется только на обычных формах. Для поддержки 8.2 ниже 17 версии
		Возврат (ТекущаяДата() - '0001.01.01') * 1000 - 10800000;
	#Иначе
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	#КонецЕсли

КонецФункции

//Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Процедура ИзменитьПараметрСбис(ИмяПараметраСбис, ЗначениеПараметраСбис) Экспорт
	
	Если		ГлобальныйКэш.Парам.Свойство(ИмяПараметраСбис) Тогда
		ГлавноеОкно.Кэш.Парам[ИмяПараметраСбис] = ЗначениеПараметраСбис;
		ГлобальныйКэш.Парам[ИмяПараметраСбис]	= ЗначениеПараметраСбис;
	ИначеЕсли   ГлобальныйКэш.СБИС.Свойство(ИмяПараметраСбис) Тогда
		ГлавноеОкно.Кэш.СБИС[ИмяПараметраСбис]	= ЗначениеПараметраСбис;
		ГлобальныйКэш.СБИС[ИмяПараметраСбис]	= ЗначениеПараметраСбис;
	Иначе
		ВызватьСбисИсключение(, "МодульОбъектаКлиент.ИзменитьПараметрСбис", 600,, "Неизвестный параметр СБИС", Новый Структура("Имя", ИмяПараметраСбис));
	КонецЕсли;
	
КонецПроцедуры

//Функция - возвращает элемент формы по родителю и пути
&НаКлиенте
Функция ЭлементФормыСбис(ОтЭлемента, ПутьКЭлементу) Экспорт
	ИмяЭлементаРазбивка = СтрЗаменить(ПутьКЭлементу, ".", Символы.ПС);
	Результат = ОтЭлемента;
	Для СчетчикРазбивки = 1 По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КлючПути = СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если	ТипЗнч(Результат) = Тип("Форма")
				Или	ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				Результат = Результат.ЭлементыФормы;
			ИначеЕсли	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				Результат = Результат["Колонки"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("Панель") Тогда
				Результат = Результат["Страницы"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("КоманднаяПанель")
					Или	ТипЗнч(Результат) = Тип("Кнопка") Тогда 
				Результат = Результат.Кнопки;
			КонецЕсли;
		#Иначе
			Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
				Результат = Результат.Элементы;
			Иначе
				Результат = Результат["ПодчиненныеЭлементы"];
			КонецЕсли;
		#КонецЕсли
		Если КлючПути = "Страницы" Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат.Найти(КлючПути);
	КонецЦикла;	
	Возврат Результат;
КонецФункции


#Область include_core_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_Интерфейс
#КонецОбласти

