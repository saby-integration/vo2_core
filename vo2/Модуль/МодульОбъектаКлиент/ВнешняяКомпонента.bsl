
// Функция - Конструктор
//
// Параметры:
//  ПараметрыПодключения - Структура(ИмяКомпоненты, ИмяОбработки, ИмяМакета) - для подключения ВО с компонентой из справочника 
// 
// Возвращаемое значение:
//   Структура 
//
&НаКлиенте
Функция ВнешняяКомпонента_Новый(ПараметрыПодключения) Экспорт
	
	Компонента = Новый Структура;
	Компонента.Вставить("ОбъектКомпоненты"						, Неопределено);
	Компонента.Вставить("ОбработчикЗавершенияПодключения"		, Неопределено);
	Компонента.Вставить("ИмяКомпоненты"							, Неопределено);
	Компонента.Вставить("ВыполненаУстановка"					, Ложь);
	Компонента.Вставить("АдресХранилища"						, Неопределено);
	Компонента.Вставить("ВерсияВХранилище"						, Неопределено);
	Компонента.Вставить("ПринудительнаяУстановка"				, Ложь);
	
	ЗаполнитьЗначенияСвойств			(Компонента, ПараметрыПодключения);
	ВнешняяКомпонента_ИзвлечьВХранилище	(Компонента, ПараметрыПодключения);
	
	Возврат Компонента;
		
КонецФункции

// Процедура - Извлекает архив с компоненой из макета ВО, и помещает во временное хранилище для дальнейшего использования на клиенте
//
// Параметры:
//  Компонента			 - 	Структура ВнешняяКомпонента_Новый 
//  ПараметрыПодключения - Структура(ИмяКомпоненты, ИмяОбработки, ИмяМакета) - для подключения ВО с компонентой из справочника
//
&НаСервере
Процедура ВнешняяКомпонента_ИзвлечьВХранилище(Компонента, ПараметрыПодключения)
	
	СведенияОбработки			= МодульОбъектаСервер().ВнешняяОбработка_ПолучитьСведенияНаСервере(ПараметрыПодключения);
	МестоположениеКомпоненты	= МодульОбъектаСервер().ВнешняяОбработка_ПолучитьМакетНаСервере(
									Новый Структура("ВнешняяОбработка, ИмяМакета", СведенияОбработки.Ссылка, ПараметрыПодключения.ИмяМакета),
									Новый Структура("ПоместитьВХранилище", Истина));
								 
	Компонента.АдресХранилища	= МестоположениеКомпоненты;
	Компонента.ВерсияВХранилище	= СведенияОбработки.Версия;
	
КонецПроцедуры

// Функция - Точка входа для получения экземпляра компоненты. Выполняет установку, подключение ВК
//
// Параметры:
//  Компонента	 - 	 Структура ВнешняяКомпонента_Новый 
// 
// Возвращаемое значение: Структура  ВнешняяКомпонента_Новый Обогащенная ОбъектКомпоненты  если компонента была установлена
//   -                    Неопределено - будет запущена асинхронная установка с последующим вызовом ОписаниеОповещения
//
&НаКлиенте
Функция ВнешняяКомпонента_Получить(Компонента) Экспорт
	
	Если ВнешняяКомпонента_Подключить(Компонента) Тогда
		
		Попытка	
			ОбъектКомпоненты						= Новый("AddIn.Saby." + Компонента.ИмяКомпоненты);
		Исключение
			ВызватьСбисИсключение("Не удалось создать экземпляр компоненты", "МодульОбъектаКлиент.ВнешняяКомпонента_ПодключитьПослеУстановки"); 
		КонецПопытки;
					
		Компонента.ОбъектКомпоненты	= ОбъектКомпоненты; 
	
		
		Если НЕ Компонента.ОбработчикЗавершенияПодключения = Неопределено И ПолучитьЗначениеПараметраСбис("ОтложенныйЗапуск") Тогда		
			ВыполнитьСбисОписаниеОповещения(Компонента, Компонента.ОбработчикЗавершенияПодключения);						
		Иначе
			Возврат Компонента;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция - Обертка над платформенным методом ПодключитьВнешнююКомпоненту. Вызывает установку компоненты при необходимости
//
// Параметры:
//  Компонента	 - Структура ВнешняяКомпонента_Новый
// 
// Возвращаемое значение: Истина - компонента подключена, Ложь обработное
//   - 
//
&НаКлиенте
Функция ВнешняяКомпонента_Подключить(Компонента)
	
	Если Компонента.ПринудительнаяУстановка ИЛИ НЕ ПодключитьВнешнююКомпоненту(Компонента.АдресХранилища, "Saby", ТипВнешнейКомпоненты.Native) Тогда
		
		Если Компонента.ВыполненаУстановка Тогда
			ВызватьСбисИсключение("Не удалось подключить компоненту после установки, попробуйте перезапустить 1С:Предприятие или изменить способ обмена.",
								"МодульОбъектаКлиент.ВнешняяКомпонента_Подключить"); 	
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
			ВызватьСбисИсключение("Не удалось подключить компоненту", "МодульОбъектаКлиент.ВнешняяКомпонента_Подключить"); 	
		#Иначе
			ВнешняяКомпонента_Установить(Компонента); 		
		#КонецЕсли
		
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
		   	
КонецФункции
	
// Процедура - Обертка над методами платформы для установки компоненты. 
//
// Параметры:
//  Компонента	 - Структура ВнешняяКомпонента_Новый 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте	
Процедура ВнешняяКомпонента_Установить(Компонента) 
	
	Если ГлавноеОкно.Кэш.СовместимостьМетодов.НативныеКомпоненты.НачатьУстановкуВнешнейКомпоненты Тогда
		
		ОбработчикЗавершения = НовыйСбисОписаниеОповещения("ВнешняяКомпонента_ПослеУстановки", МодульОбъектаКлиент(), Компонента,
															"ВнешняяКомпонента_ОшибкаУстановки", МодульОбъектаКлиент());
		
		Выполнить("НачатьУстановкуВнешнейКомпоненты(ОбработчикЗавершения, Компонента.АдресХранилища)");
		
	Иначе 

		УстановитьВнешнююКомпоненту(Компонента.АдресХранилища);
		ВнешняяКомпонента_ПослеУстановки(Компонента);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - для ОписанияОповещения после успешной установки.  
//
// Параметры:
//  Компонента	 - 	 - 
//
&НаКлиенте
Процедура ВнешняяКомпонента_ПослеУстановки(Компонента) Экспорт
	
	Компонента.ВыполненаУстановка		= Истина;
	Компонента.ПринудительнаяУстановка	= Ложь;
	
	Попытка
		ВнешняяКомпонента_Получить(Компонента);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Процедура - для ОписанияОповещения при ошибке установки.  
//
// Параметры:
//  Компонента	 - 	 - 
//
&НаКлиенте
Процедура ВнешняяКомпонента_ОшибкаУстановки(Компонента) Экспорт
	ВызватьСбисИсключение("При установке компоненты возникла ошибка", "МодульОбъектаКлиент.ВнешняяКомпонента_ОшибкаУстановки");
КонецПроцедуры

