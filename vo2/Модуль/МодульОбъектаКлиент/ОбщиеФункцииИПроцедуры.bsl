
// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиенте
Функция НоваяВерсияБольшеКлиент(ВерсияДляСравнения, ВерсияНоваяСравнить) Экспорт

	Возврат СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить);
	
КонецФункции

// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить) 
	
	Если		Не ЗначениеЗаполнено(ВерсияДляСравнения) Тогда
		Возврат Истина;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияНоваяСравнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Версия1Разделить	= СтрЗаменить(ВерсияДляСравнения, ".", Символы.ПС);
	Версия2Разделить	= СтрЗаменить(ВерсияНоваяСравнить, ".", Символы.ПС);
	сЧислоРазрядов		= Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	ОписаниеЧисло		= Новый ОписаниеТипов("Число");
	Для Индекс = 1 По сЧислоРазрядов Цикл
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		Иначе
			Число1Сравнить = 0;
		КонецЕсли;
		
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		Иначе
			Число2Сравнить = 0;
		КонецЕсли;
		
		Если		Число1Сравнить = Число2Сравнить		Тогда
			Продолжить;
		ИначеЕсли	Число2Сравнить > Число1Сравнить		Тогда
			Возврат Истина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура СбисОткрытьДокументы(ОписаниеДокументовОткрыть, ДопПараметры=Неопределено) Экспорт
    Перем ДокументыОткрыть;
	
	Если ОписаниеДокументовОткрыть.Свойство("СписокСсылок", ДокументыОткрыть) Тогда	
		Для Каждого Документ1С Из ДокументыОткрыть Цикл
			СбисОткрытьКарточку1С(Документ1С.Значение);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СбисОткрытьКарточку1С(КарточкаСсылка, ДопПараметры=Неопределено)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ОткрытьЗначение(КарточкаСсылка);
		
	#Иначе
		
		ПоказатьЗначение(, КарточкаСсылка);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьМассовуюОтправкуДокументов(МассивПакетов, ДопПараметры) Экспорт
    Перем ОбработчикРезультатОтправки;
	
	ИспользоватьНовуюОтправку = ПолучитьЗначениеПараметраСбис("ИспользоватьНовуюОтправку") 
							Или (ДопПараметры.Свойство("ИспользоватьНовуюОтправку") И ДопПараметры.ИспользоватьНовуюОтправку);
	Если ИспользоватьНовуюОтправку Тогда	
		ГлавноеОкно.Кэш.СписокНоменклатуры.Очистить();
		
		Если Не ДопПараметры.Свойство("ОбработчикРезультата", ОбработчикРезультатОтправки) Тогда
			ОбработчикРезультатОтправки	= НовыйСбисОписаниеОповещения("ЗапуститьМассовуюОтправкуДокументов_Завершение", МодульОбъектаКлиент());
		КонецЕсли;
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("ДанныеКОтправке",		Новый Структура("СписокПакетов", МассивПакетов));
		ПараметрыОтправки.Вставить("ОбработчикРезультата",	ОбработчикРезультатОтправки);
		ПараметрыОтправки.Вставить("ВерсияОтправки",		2);
		Если ДопПараметры.Свойство("МодульПодготовки") Тогда
			ПараметрыОтправки.Вставить("МодульПодготовки",	ДопПараметры.МодульПодготовки);
		КонецЕсли;
		
		РезультатОтправки = НовыйРезультатОтправки(ПараметрыОтправки);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправки);
		
		РезультатОтправки_МассоваяОтправка(РезультатОтправки);
	Иначе
		
		ДопПараметры.Вставить("ВерсияОтправки", 1);
		КлассОтправки = НовыйРезультатОтправки(ДопПараметры);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", КлассОтправки);
		
		ФормыПоискаОтправки = Новый Массив;
		ФормыПоискаОтправки.Добавить("Документ_" + ДопПараметры.ИмяРеестра);
		ФормыПоискаОтправки.Добавить("Документ_Шаблон");
		фрм = НайтиФункциюСеансаОбработки("ОтправитьДокументы", ФормыПоискаОтправки);
		фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, МассивПакетов);
		
	КонецЕсли;
	
КонецФункции

// Процедура - завершение отправки и обработка результата
//
// Параметры:
//  РезультатОтправки	 - Структура РезультатОтправки в старом формате
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура ЗапуститьМассовуюОтправкуДокументов_Завершение(РезультатОтправки, ДопПараметры=Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	Кэш.Вставить("РезультатОтправки", МодульОбъектаКлиент().РезультатОтправки_Скопировать(РезультатОтправки, Истина));
	
	фрм = НайтиФункциюСеансаОбработки("ПоказатьРезультатОтправки", "ФормаРезультатОтправки");
	фрм.ПоказатьРезультатОтправки(Кэш);
	Если РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
		ПолучитьФормуОбработки("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - запускает редактор файлов настроек
//
// Параметры:
//  ПараметрыЗапускаВходящие - 	 - 
//
&НаКлиенте
Процедура ЗапуститьРедакторИни(ПараметрыЗапускаВходящие=Неопределено) Экспорт
	
	фрм = ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекОбщее");
	Если фрм = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "ФормаГлавноеОкно.ЗапуститьРедакторИни",,,"Не удалось получить форму редактора файлов настроек");
		СообщитьСбисИсключение(СбисИсключение);
		Возврат;
	КонецЕсли;
    фрм.ЗакрыватьПриЗакрытииВладельца = Истина;
	фрм.Показать(ПараметрыЗапускаВходящие);

КонецПроцедуры

// Процедура - сообщить пользователю
//
// Параметры:
//  ПараметрыСообщения	 - 	Структура - Текст, СтатусСообщения, ЭлементНазначения, ФормаВладелец
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура СбисСообщить(ПараметрыСообщения, ДопПараметры=Неопределено) Экспорт
	Перем СбисСтатусСообщения, СбисТекстСообщения;
	
	Если	ГлобальныйКэш.ТихийРежим
		И	(		ДопПараметры = Неопределено
			Или	Не	ДопПараметры.Свойство("ТихийРежим")
			Или 	ДопПараметры.ТихийРежим) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыСообщения) = Тип("Строка") Тогда
		СбисТекстСообщения	= ПараметрыСообщения;
	Иначе
		СбисТекстСообщения	= ПараметрыСообщения.Текст;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если    	ТипЗнч(ПараметрыСообщения) = Тип("Строка")
			Или	Не	ПараметрыСообщения.Свойство("СтатусСообщения", СбисСтатусСообщения) Тогда
			СбисСтатусСообщения = СтатусСообщения.Обычное
		КонецЕсли;
		Сообщить(СбисТекстСообщения, СбисСтатусСообщения);
		
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СбисТекстСообщения;
		
		Если ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			
			Если ПараметрыСообщения.Свойство("ЭлементНазначения") Тогда
				Сообщение.Поле = ПараметрыСообщения.ЭлементНазначения;
			КонецЕсли;
			Если		ПараметрыСообщения.Свойство("ФормаВладелец")
				И Не	ПараметрыСообщения.ФормаВладелец = Неопределено  Тогда
				Сообщение.ИдентификаторНазначения = ПараметрыСообщения.ФормаВладелец.УникальныйИдентификатор;
			КонецЕсли;
			
		КонецЕсли;	
		
		Сообщение.Сообщить(); 
		
	#КонецЕсли	
КонецПроцедуры

// Процедура - Сбис показать вопрос. Идентично ПоказатьВопрос, с учетом модальности ОФ.
//
// Параметры:
//  СбисОписаниеОповещенияОЗавершении	 - СбисОписаниеОповещения	 - обработчик диалога
//  ТекстВопроса						 - Строка					 - 
//  Кнопки								 - Список					 - 
//  Таймаут								 - Таймаут					 - 
//  КнопкаПоУмочанию					 - Кнопка/элемент списка	 - 
//  Заголовок							 - Строка					 - 
//  КнопкаТаймаута						 - Кнопка/элемент списка	 - 
//
&НаКлиенте
Процедура СбисПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмочанию = Неопределено, Заголовок="", КнопкаТаймаута=Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута), СбисОписаниеОповещенияОЗавершении);
	#Иначе
		ПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута);
	#КонецЕсли
КонецПроцедуры

// Процедура - завершает работу обработки
//
&НаКлиенте
Процедура СбисЗавершитьРаботу() Экспорт
	
	Оповестить("ЗакрытьСБИС");

	Попытка
		
		ГлавноеОкно.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, ГлобальныйКэш.Парам));
		Если ГлобальныйКэш.СБИС.Авторизован Тогда
			СохранитьМеткиСтатусов(ГлавноеОкно.Кэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
			ГлобальныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
			ГлавноеОкно.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
			ГлавноеОкно.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
		КонецЕсли;
		
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		ГлавноеОкно.Кэш.Интеграция.Завершить(ГлавноеОкно.Кэш, Новый Структура, Ложь);
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗавершитьРаботу");  
		СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "platform_warning"));
				
	КонецПопытки;
	
	
	ГлавноеОкно.ЗавершитьРаботу = Истина; 
	ГлавноеОкно.Закрыть();
	
КонецПроцедуры

//Процедура показывает пользователю выбор из сформированного списка значений
&НаКлиенте
Процедура СбисВыбратьИзСписка(СписокВыбора, ДопПараметры) Экспорт
	
	Если	ДопПараметры.Свойство("ОтметитьЭлементы")
		И	ДопПараметры.ОтметитьЭлементы Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Если СписокВыбора.ОтметитьЭлементы(ДопПараметры.Заголовок) Тогда
				
				ВыполнитьСбисОписаниеОповещения(СписокВыбора, ДопПараметры.Обработчик);
				
			Иначе
				
				ВыполнитьСбисОписаниеОповещения(Неопределено, ДопПараметры.Обработчик);
				
			КонецЕсли;
		#Иначе
			
			СписокВыбора.ПоказатьОтметкуЭлементов(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВыполнитьСбисОписаниеОповещения(СписокВыбора.ВыбратьЭлемент(ДопПараметры.Заголовок), ДопПараметры.Обработчик);
			
		#Иначе
			
			СписокВыбора.ПоказатьВыборЭлемента(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли	
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура ВыполнитьДействиеСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт 
	Перем ИмяФайла, ПакетВложения,СертификатДляПодписания;
	
	Отказ		= Ложь;
	СоставПакета= ПараметрыДействия.СоставПакета;
	Этап		= ПараметрыДействия.Этап;
	Действие	= ПараметрыДействия.Действие;
	Сертификат	= ПараметрыДействия.Сертификат;
	
	ДопПараметрыЗапроса	= Новый Структура("СообщитьОбОшибке, ВернутьОшибку", Ложь, Истина);
	
	// Назначение действие на этап
	action = Новый Структура("Название", Действие.Название);
	Если Не Сертификат = Неопределено Тогда
		action.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если Не Сертификат = Неопределено И Не Действие.Свойство("Сертификат") Тогда
		Действие.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если ПараметрыДействия.Свойство("Комментарий") И Не ПараметрыДействия.Комментарий = "" Тогда
		action.Вставить("Комментарий", ПараметрыДействия.Комментарий);
	КонецЕсли;	
		
	// Назначение этапа
	stage		= Новый Структура("Название, Идентификатор, Действие", Этап.Название, Этап.Идентификатор, action);
	document_in	= Новый Структура("Этап, Идентификатор", stage, СоставПакета.Идентификатор);
	
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Не (Вложение.Свойство("ТребуетПодписания") И Вложение.ТребуетПодписания) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЗаписатьВложенияСБИС(СоставПакета, Вложение, Новый Структура, Новый Структура("Кэш", ГлавноеОкно.Кэш));
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ДокументПодготовлен",document_in);
	ИмяФункции = ГлавноеОкно.Кэш.ОбщиеФункции.СбисЗаменитьНедопустимыеСимволы("ПодготовитьДействие" + "_" + Действие.Название + "_" +СоставПакета.Тип);
	
	Если  СоставПакета.Свойство("Вложение") Тогда
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, 
					"Файл_" + СоставПакета.Тип + "_" + СтрЗаменить(СоставПакета.Вложение[0].ВерсияФормата, ".", "_"), "РаботаСДокументами1С");
	Иначе
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, "РаботаСДокументами1С");
	КонецЕсли;
		
	Если не фрм = ложь Тогда
		//фрм.ПодготовитьДействие_Утвердить_ДокОтгрВх(ПараметрыДействия,ГлавноеОкно.Кэш);
		ОбработчикПодготовитьДействие = НовыйСбисОписаниеОповещения(ИмяФункции, фрм);
		ВыполнитьСбисОписаниеОповещения(ПараметрыДействия, ОбработчикПодготовитьДействие);
	КонецЕсли;
	
	// Подготовка этапа
	prepared_document = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ПодготовитьДействие(ГлавноеОкно.Кэш, ПараметрыДействия.ДокументПодготовлен, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(prepared_document, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	РезультатФормирования = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСформироватьТитулы(ГлавноеОкно.Кэш, СоставПакета, Действие, СбисПараметрыТитулов, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатФормирования, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование	= сбисПараметрыТитулов.Шифрование;
	Размер		= attachmentListPrepared.Количество();
	// если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
	ТребуетсяПередачаВложений =	Сертификат <> Неопределено
							И	Сертификат.Ключ.Тип = "Клиентский"
							И	Действие.ТребуетПодписания = "Да";
	
	Если ТребуетсяПередачаВложений Тогда  
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить("Идентификатор", Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить("Имя", Запись.Файл.Имя);
			file.Вставить("Хеш", Запись.Файл.Хеш);
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			Если Запись.Свойство("Зашифрован") И Запись.Зашифрован = "Да" Тогда
				//Для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				//Для SDK должно отвалиться на стадии подготовки.
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить("Ссылка", Запись.Файл.Ссылка);
			КонецЕсли;
			attachment.Вставить("Файл", file);
			attachmentList.Добавить(attachment);
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип = СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Вложение.Свойство("Идентификатор") Тогда
				//Если есть ИД, то вложение уже готово
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("ИмяФайла", ИмяФайла) Тогда
				//Генерируем имя файла, если не указано
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + Строка(Новый УникальныйИдентификатор()) + ".xml";
			КонецЕсли;
			ДвоичныеДанныеXMLДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_СериализоватьСтрокуВBase64(ГлавноеОкно.Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(ДвоичныеДанныеXMLДокумента, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
			КонецЕсли;
				
			file		= Новый Структура("Имя, ДвоичныеДанные", ИмяФайла, ДвоичныеДанныеXMLДокумента);
			attachment	= Новый Структура("Файл", file);
			Если Вложение.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдПодтвЗаказа) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Удалить(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				Попытка
					// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
					ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип + Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
					Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
						ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
						Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
							attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
						КонецЕсли;
					Иначе
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецЕсли;
				Исключение
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецПопытки;
			КонецЕсли;
			attachment.Вставить( "Идентификатор",  ИдВложения);
			Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
				attachment.Вставить( "ТребуетШифрования",  "Да");
				Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
					attachment.Вставить( "Тип",  Вложение.Тип);
					attachment.Вставить( "Подтип",  Вложение.ПодТип);
					attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				КонецЕсли;
				Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
					attachment.Вставить( "Дата",  Вложение.Дата);
				КонецЕсли;
				Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
					attachment.Вставить( "Название",  Вложение.Название);
				КонецЕсли;
			КонецЕсли;
			
			attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
			attachmentList.Добавить( attachment );
		КонецЦикла;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("СертификатДляПодписания",СертификатДляПодписания) Тогда
			ПараметрыПодписанияВложения = Новый Структура("СертификатДляПодписания, Алгоритм");
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанияВложения, ПараметрыДействия);          
			ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", ПараметрыПодписанияВложения);
		ИначеЕсли Сертификат.Свойство("Доверенность") Тогда
			ПараметрыПодписанияВложения = Новый Структура("СертификатДляПодписания", Сертификат);
			ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", ПараметрыПодписанияВложения);
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("ПараметрыПодписанияВложения",ПараметрыПодписанияВложения) Тогда
			РезультатПодписания = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисПодписатьВложения(ГлавноеОкно.Кэш, attachmentList, ПараметрыДействия, Отказ);
			Если Отказ Тогда 
				ВызватьСбисИсключение(РезультатПодписания, "ОбщиеФункции.СбисВыполнитьДействие");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура("Комментарий, Название, Идентификатор", prepared_action.Комментарий, prepared_action.Название, "");
	Если prepared_action.Свойство("Идентификатор") Тогда
		action.Идентификатор = prepared_action.Идентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура("Действие, Вложение, Идентификатор, Название", action, attachmentList, prepared_stage.Идентификатор, prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч = 0 По КолРедакций - 1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	
	document_in = Новый Структура("Идентификатор, Редакция, Этап", prepared_document.Идентификатор, redactions, stage);
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент);
	КонецЕсли;
	
	// Завершение этапа
	РезультатДействия = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ВыполнитьДействие(ГлавноеОкно.Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатДействия, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
КонецПроцедуры 

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура НачатьФормироватьРасхождениеСДокументомСБИС(СписокДляРасхождения, ДопПараметры) Экспорт 
	
	ОбработчикПродолжить = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС", МодульОбъектаКлиент(), ДопПараметры);
	Если Не ЗначениеЗаполнено(СписокДляРасхождения) Тогда
		
		Возврат;
		
	ИначеЕсли СписокДляРасхождения.Количество() = 1 Тогда
		
		ВыполнитьСбисОписаниеОповещения(СписокДляРасхождения[0], ОбработчикПродолжить);
		
	Иначе
		
		СбисВыбратьИзСписка(СписокДляРасхождения, Новый Структура("Обработчик, Заголовок", ОбработчикПродолжить, "Выберите документ расхождения"));
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СформироватьРасхождениеСДокументомСБИС(ПараметрыВходящие, ДопПараметры) Экспорт 
	Перем ВложениеРасхождение, ИниВычиткиРасхождения, ОшибкаФормирования, МФайлОтклонение;
	
	Если		ПараметрыВходящие = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли	ТипЗнч(ПараметрыВходящие) = Тип("ЭлементСпискаЗначений") Тогда
		
		ПараметрыРасхождения = ПараметрыВходящие.Значение;
		
	Иначе
		
		ПараметрыРасхождения = ПараметрыВходящие;
		
	КонецЕсли;
	
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ДокументОтклонения	= ПараметрыРасхождения.ИмяОтклонения;
	ИмяИниДокумента		= ПараметрыРасхождения.ИмяИниДокумента;
	ИниДокумента		= ИниПоПараметрам(ИмяИниДокумента);
	
	Если Не ПараметрыРасхождения.Свойство("МФайлОтклонение", МФайлОтклонение) Тогда
		
		МФайлОтклонение = СбисРазложитьСтрокуВМассивПодстрок(ДокументОтклонения, "_")[0];
		
	КонецЕсли;
	
	Если	ИниДокумента.Свойство("мФайл", ИниВычиткиРасхождения)
		И	ИниВычиткиРасхождения.Свойство(МФайлОтклонение, ИниВычиткиРасхождения) Тогда
		
		//Если есть совпадение с мФайл по отклонению, то берём только этот мФайл.
		ЗначениеИни = Новый Структура("мФайл", Новый Структура(МФайлОтклонение, ИниВычиткиРасхождения));
		
	Иначе
		
		//Считается вся ини для вычитки документа. Медленно и не рекомендуется
		ЗначениеИни = ИниДокумента;
		
	КонецЕсли;
	
	//Грязный ини
	МассивФормПоиска	= Новый Массив;
	МассивФормПоиска.Добавить("Файл_" + ДокументОтклонения);
	МассивФормПоиска.Добавить("Файл_Шаблон");
		
	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПолучитьКонтекст_Расхождение", МассивФормПоиска);
	
	ОписаниеРасхождения = Новый Структура("СоставПакета, Документ1С, ЗначениеИни", ДопПараметры.СоставПакета, ПараметрыРасхождения.Документ1С, ЗначениеИни); 
	КонтекстРасхождение	= МодульКонтекст_Расхождение.ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, Новый Структура("Кэш", ГлавноеОкно.Кэш));

	Если Не КонтекстРасхождение.ДокументДанные.Свойство("мФайл") Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не рассчитан!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	//ПрочитатьДокумент
	МассивФормПоискаПрочитать	= Новый Массив;
	МассивФормПоискаПрочитать.Добавить("Документ_" + ИмяИниДокумента);
	МассивФормПоискаПрочитать.Добавить("Документ_Шаблон");

	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПрочитатьДокумент", МассивФормПоискаПрочитать);
	Если	Не МодульКонтекст_Расхождение.ПрочитатьДокумент(ГлавноеОкно.Кэш, КонтекстРасхождение)
		Или	Не КонтекстРасхождение.СоставПакета.Вложение.Количество() Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не сформирован!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;
		
	КонецЕсли;
	
	СтруктураФайлаНаша				= КонтекстРасхождение.СоставПакета.Вложение[0].СтруктураДокумента;
	МодульСформироватьРасхождение	= НайтиФункциюСеансаОбработки("СформироватьРасхождение", МассивФормПоиска);
	РасхождениеСформировано			= Ложь;
	
	Попытка
		
		ПараметрыСформироватьасхождение	= Новый Структура(
		"СтруктураФайлаКонтрагента,				ВложениеНаше, Пакет", 
		ПараметрыРасхождения.СтруктураФайла,	КонтекстРасхождение.СоставПакета.Вложение[0],  КонтекстРасхождение.СоставПакета);
		ВложениеРасхождение		= МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыСформироватьасхождение, ГлавноеОкно.Кэш);
		РасхождениеСформировано = Истина;
		
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		
		ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
		
	КонецПопытки;
	
	Если Не РасхождениеСформировано Тогда
		
		Попытка
			
			ВложениеРасхождение = МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыРасхождения.СтруктураФайла, СтруктураФайлаНаша, ГлавноеОкно.Кэш);
			ОшибкаФормирования	= Неопределено;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если Не Найти(ИнформацияОбОшибке.Описание, "Слишком много фактических параметров") Тогда
				//Вызов был, перегенерируем ошибку, если свалилось
				ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке, "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ОшибкаФормирования = Неопределено Тогда
		
		ВыполнитьСбисОписаниеОповещения(ОшибкаФормирования, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	ВыполнитьСбисОписаниеОповещения(ВложениеРасхождение, ДопПараметры.ОбработчикРезультата);

КонецПроцедуры

&НаКлиенте
Функция СформироватьСписокДляВызоваРасхождений(СтрокиОтмеченные, ДопПараметры) Экспорт
	Перем Документ1ССсылка, УзелДокументОтклонения, ИмяДокумента;
	
	ИниКонфигурации		= ИниПоПараметрам("Конфигурация");
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;	//Для рассчитать значение от ини выгрузки
	МодульШаблонДок		= ПолучитьФормуОбработки("Документ_Шаблон");			//Для рассчитать значени от ини загрузки
	РезультатСписок		= Новый СписокЗначений;
	СоставПакета		= ДопПараметры.СоставПакета;
	
	Для Каждого СтрокаТаблДок Из СтрокиОтмеченные Цикл
		
		Если Не СтрокаТаблДок.Документы1С.Количество() Тогда
			Продолжить;
		КонецЕсли;
		ВложениеСБИС		= СтрокаТаблДок.Вложение[0].Значение;
		Документ1ССсылка	= СтрокаТаблДок.Документы1С[0].Значение;
		
		СтруктураФайлаКонтрагента	= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
		СтруктураИниВложения		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураИниФайла");

		Если	СтруктураИниВложения		= Неопределено
			Или	СтруктураФайлаКонтрагента	= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента	= МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1ССсылка, "Имя");
		
		Если СтруктураИниВложения.Свойство("ФайлНастроекРасхождения") Тогда
			
			Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СоставПакета, ИниКонфигурация");
			Контекст.Ини			= СтруктураИниВложения;
			Контекст.Документ		= Документ1ССсылка;
			Контекст.Переменные		= Новый Структура;
			Контекст.СтруктураФайла	= СтруктураФайлаКонтрагента;
			Контекст.СоставПакета	= СоставПакета;
			Контекст.ИниКонфигурация= ИниКонфигурации;
			
			ИмяИниДокумента = МодульШаблонДок.РассчитатьЗначение("ФайлНастроекРасхождения", Контекст);
			Если Не ИмяИниДокумента = Неопределено Тогда
				
				ИмяДокумента = ИмяИниДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИниДокумента = ИниПоПараметрам(ИмяДокумента);
		
		Если ИниДокумента = Неопределено Тогда
			
			//Нет файла настроек
			Продолжить;
			
		КонецЕсли;
		
		УзелДокументОтклонения = МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
		
		Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
			
			//Не указан файл настройки отклонения
			Продолжить;
			
		КонецЕсли;
		
		МассивОтклонений = СбисРазложитьСтрокуВМассивПодстрок(УзелДокументОтклонения, ",",, Истина);
		
		Для Каждого ДокументОтклонения Из МассивОтклонений Цикл
			
			Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
				
				//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
				
			Иначе
				
				ИниОтклонения = ИниПоПараметрам(ДокументОтклонения);
				Если ИниОтклонения = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
			ПараметрыСписок.Документ1С		= Документ1ССсылка;
			ПараметрыСписок.Вложение		= ВложениеСБИС;
			ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
			ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
			ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
			
			НазваниеРеестра = МодульШаблонДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);

			Если НазваниеРеестра = Неопределено Тогда
				
				НазваниеРеестра = ДокументОтклонения;
				
			КонецЕсли;
			
			РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;

	Если Документ1ССсылка = Неопределено Тогда	
		// нет сопоставление с вложениями - проверим сопоставление с пакетом
		МодульДокументаПоИд = НайтиФункциюСеансаОбработки("ДокументыПоИдПакета", ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами"));
		
		Если МодульДокументаПоИд = Ложь Тогда
			Возврат РезультатСписок;
		КонецЕсли;
		
		СписокДокументы1С = МодульДокументаПоИд.ДокументыПоИдПакета(ДопПараметры.СоставПакета.Идентификатор, ИниКонфигурации);
		
		Если Не списокДокументы1С.Количество() Тогда
			Возврат РезультатСписок;
		КонецЕсли;	
		
		Для  Каждого Документ1С Из СписокДокументы1С Цикл
			ИмяДокумента = МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
			ИниДокумента = ИниПоПараметрам(ИмяДокумента);
			
			Если ИниДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УзелДокументОтклонения		= МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
			Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
				
				//Не указан файл настройки отклонения
				Продолжить;
				
			КонецЕсли;
			
			МассивОтклонений			= СбисРазложитьСтрокуВМассивПодстрок(УзелДокументОтклонения, ",",, Истина);
			СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ДопПараметры.СоставПакета);
			ВложениеСБИС				= НовыйВложениеСБИС();
			
			Для Каждого ДокументОтклонения Из МассивОтклонений Цикл
				
				Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
					
					//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
					
				Иначе
					
					ИниОтклонения = ИниПоПараметрам(ДокументОтклонения);
					Если ИниОтклонения = Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
				ПараметрыСписок.Документ1С		= Документ1ССсылка;
				ПараметрыСписок.Вложение		= ВложениеСБИС;
				ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
				ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
				ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
				
				НазваниеРеестра = МодульШаблонДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);
				
				Если НазваниеРеестра = Неопределено Тогда
					
					НазваниеРеестра = ДокументОтклонения;
					
				КонецЕсли;
				
				РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	Если Не РезультатСписок.Количество() Тогда
		Если		Не УзелДокументОтклонения = Неопределено Тогда
			
			СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + УзелДокументОтклонения;
			ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
			
		ИначеЕсли	Не ИмяДокумента = Неопределено Тогда
			
			Если ИниДокумента = Неопределено Тогда
				
				СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + ИмяДокумента;
				ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			Иначе
				
				СообщениеДетализации = "Для формирования расхождения требуется задать опцию ""ДокументОтклонения"" в настройке " + ИмяДокумента + ".";
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиенте 
Функция ПодобратьСертификатДляДействияСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт
	
	Перем ПодходящийСертДок;

	Если ПараметрыДействия.Действие.Свойство("Сертификат") Тогда 
		Для Каждого Сертификат Из ПараметрыДействия.Действие.Сертификат Цикл
			Если СертификатУстановленЛокально(Сертификат) Тогда
				
				ПодходящийСертДок =  Сертификат;
				Прервать;
				
			ИначеЕсли Сертификат.Ключ.Тип = "Отложенный" 
				Или Сертификат.Ключ.Тип = "ОтложенныйСПодтверждением"
				Или Сертификат.Ключ.Тип = "Серверный" 
				И ПодходящийСертДок = Неопределено Тогда // Проверка на отложенный сертификат 
				
				ПодходящийСертДок = Сертификат;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПодходящийСертДок = Неопределено И ПараметрыДействия.СоставПакета.Свойство("НашаОрганизация") Тогда
		Отказ = Ложь;
		ИННОрг = ?(ПараметрыДействия.СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), ПараметрыДействия.СоставПакета.НашаОрганизация.СвЮЛ.ИНН,ПараметрыДействия.СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		filter = Новый Структура("ИНН", ИННОрг);
		Сертификаты = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьСписокСертификатовПоФильтру(ГлавноеОкно.Кэш,filter,Отказ);
		Если Отказ Тогда
			ВызватьСбисИсключение(Сертификаты,"МодульОбъектаКлиент.ПодобратьСертификатДляДействияСДокументомСБИС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сертификаты) Тогда 
			ПодходящийСертДок = Сертификаты[0].Значение;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПодходящийСертДок;
	
КонецФункции

// Возвращает запрашиваемую форму при успехе, вызывает СбисИсключение при неудаче, Ложь, если формы нет.
//
// Параметры:
//  ИмяФормы	 - 	 - 
//  ДопПараметры - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьФормуОбработки(СбисИмяФормы, ДопПараметры=Неопределено) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;

	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("КэшироватьФорму",	КэшироватьПолученную);
		ДопПараметры.Свойство("ПолучитьНовую",		ПолучитьНовую);
		ДопПараметры.Свойство("Владелец",			СбисВладелецФормы);
		ДопПараметры.Свойство("ОбработкаОбъект",	СбисОбъект1С);
		ДопПараметры.Свойство("Параметры",			СбисПараметрыФормы);
	КонецЕсли;

	Если КэшироватьПолученную = Неопределено Тогда
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если ПолучитьНовую = Неопределено Тогда
		ПолучитьНовую = Ложь;
	КонецЕсли;

	Стандартная			= СбисОбъект1С = Неопределено;
	ПолноеИмяФормы		= ПолучитьФормуОбработки_ПолноеИмяФормы(СбисИмяФормы, СбисОбъект1С);
	БезопасноеИмяФормы	= ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С);
	ЭтоГлавноеОкно		= СбисИмяФормы = "ФормаГлавноеОкно" И Стандартная;
	
	Если		ЭтоГлавноеОкно Тогда
		//Если ГО установлено, то отдаём его. Иначе требуется получить.
		Если Не ГлавноеОкно = Неопределено Тогда
		Возврат ГлавноеОкно;
		КонецЕсли;
	ИначеЕсли	СбисВладелецФормы = Неопределено Тогда
		СбисВладелецФормы = ГлавноеОкно;
	КонецЕсли;

	Если		ПолучитьНовую
		Или		ЭтоГлавноеОкно
		Или	Не	ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		
		Если		ЭтоГлавноеОкно		
			Или		Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(СбисИмяФормы)	<> Неопределено
			Или	Не	Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(СбисИмяФормы)		<> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Стандартная Тогда
					СбисОбъект1С = ЭтотОбъект;
				КонецЕсли;
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(СбисИмяФормы, СбисВладелецФормы);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
				Если Не СбисПараметрыФормы = Неопределено Тогда 
					Попытка
						Результат.Параметры = СбисПараметрыФормы;
					Исключение
						//Нет реквизита под параметры формы.
					КонецПопытки;
				КонецЕсли;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						ВызватьСбисИсключение(773, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",,,"Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ВызватьСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
				КонецПопытки;
			#КонецЕсли
		Иначе
			//Нет такой формы
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	
	Если		ЭтоГлавноеОкно Тогда
		ОбновитьПараметрГлобальногоМодуля("ГлавноеОкно", Результат);
	ИначеЕсли	КэшироватьПолученную Тогда
		ПолучитьФормуОбработки_ЗакэшироватьФорму(Результат, БезопасноеИмяФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьМакетОбработки(ИмяМакета, ДопПараметры) Экспорт 
	
	Возврат МодульОбъектаСервер().ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры);
	
КонецФункции

// Определяет, какую форму необходимо использовать при вызове определенной функции.
//  Возможные параметры:
//
// Параметры:
// 	СбисИмяФункции		- Строка		- Имя функции/порцедуры для поиска.
//	СбисОсновныеФормы	- Массив/Строка	- Набор имен вероятных модулей, где может быть функция
//  ДоПараметры			 - Структура	- 
// 		ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//		КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//		ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//		ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено.
// 
// Возвращаемое значение:
//  Форма - модуль, где может быть вызвана функция по имени
//
&НаКлиенте
Функция НайтиФункциюСеансаОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры = Неопределено) Экспорт
	
	Результат = Ложь;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	//Проверим закэшированное значение
	Если ТипЗнч(СбисОсновныеФормы) = Тип("Массив") Тогда
		Для Каждого СбисИмяФормы Из СбисОсновныеФормы Цикл
			Если Не ЗначениеЗаполнено(СбисИмяФормы) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисИмяФормы, ДопПараметры);
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НайтиФункциюСеансаОбработки");
			КонецПопытки;
			Если Не Результат = Ложь Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Попытка
			Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры);
		Исключение
			ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НайтиФункциюСеансаОбработки");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция - Возвращает дату в миллисекундах
// 
// Возвращаемое значение:
//  Число - миллисекунды
//
&НаКлиенте
Функция ПолучитьДатуВМиллисекундах() Экспорт 

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Используется только на обычных формах. Для поддержки 8.2 ниже 17 версии
		Возврат (ТекущаяДата() - '0001.01.01') * 1000 - 10800000;
	#Иначе
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	#КонецЕсли

КонецФункции

// Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
//
// Параметры:
//  ИмяПараметраСбис		 - Строка					 - Ключ параметра
//  ЗначениеПараметраСбис	 - Произвольное значение	 - Значение параметра установить
//  ДопПараметры			 - Структура				 - 
//		Кэш			- экземпляр ЛокальныйКэш, куда установить параметр
//		Глобально	- Булево (Истина), определяет необходимость обновить параметр глобально, или изменение касается только класса ЛокальныйКэш
//		Параметры	- Стуркутра, доп. параметры для изменения
//		Адрес		- Строка, путь в кэше для установки параметра
//
&НаКлиенте
Процедура ИзменитьПараметрСбис(ИмяПараметраСбис, ЗначениеПараметраСбис, ДопПараметры = Неопределено) Экспорт
    Перем ЗначениеКэшПрописать, ЭтоГлобальныйПараметр, ДопПараметрыИзменения;
	Если	Не	ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("Кэш",		ЗначениеКэшПрописать);
		ДопПараметры.Свойство("Глобально",	ЭтоГлобальныйПараметр);
		ДопПараметры.Свойство("Параметры",	ДопПараметрыИзменения);
	КонецЕсли;
	Если	ЗначениеКэшПрописать = Неопределено Тогда
		ЗначениеКэшПрописать = ГлавноеОкно.Кэш;
	КонецЕсли;
	Если	ЭтоГлобальныйПараметр = Неопределено Тогда
		ЭтоГлобальныйПараметр = Истина;
	КонецЕсли;
	
	Если		ИмяПараметраСбис = "АдресСервера" Тогда 
		
		ИзменитьПараметрСбис_АдресСервера(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);

	ИначеЕсли	ИмяПараметраСбис = "ИспользоватьГенератор" Тогда
		
		ИзменитьПараметрСбис_ИспользоватьГенератор(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);
		
	ИначеЕсли	ИмяПараметраСбис = "СпособХраненияНастроек" Тогда
		
		ИзменитьПараметрСбис_СпособХраненияНастроек(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);

	ИначеЕсли	ИмяПараметраСбис = "СтатусыВГосСистеме" Тогда
		
		ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
		Если		ДопПараметрыИзменения = Неопределено
			Или	Не	ДопПараметрыИзменения.Свойство("МодульОбновить")Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДопПараметрыИзменения.МодульОбновить.НастроитьКолонки(ЗначениеКэшПрописать);
		
	ИначеЕсли	ИмяПараметраСбис = "СпособСопоставленияНоменклатуры" Тогда
		
		ИзменитьПараметрСбис_СпособСопоставленияНоменклатуры(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);	
		
	ИначеЕсли Не	ДопПараметры = Неопределено
			И		ДопПараметры.Свойство("Адрес") Тогда
		
		//В прописанное место
		АдресПараметра = ДопПараметры.Адрес + "." + ИмяПараметраСбис;
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, АдресПараметра, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "Интеграция" Тогда
		
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис,					ЗначениеПараметраСбис, Ложь);
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Модули.Интеграция",	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		//Совместимость старой отправки.
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ФормаОтправки",					ЗначениеПараметраСбис, Ложь);
		
	ИначеЕсли	ИмяПараметраСбис = "ИнтеграцияИмя" Тогда
		
		ИзменитьПараметрСбис_ВКэш			(ЗначениеКэшПрописать, ИмяПараметраСбис,	ЗначениеПараметраСбис, Ложь);
		ИзменитьПараметрСбис_УстановитьВКэш	(ЗначениеКэшПрописать, ИмяПараметраСбис,	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	Иначе
		
		ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрСбис_УстановитьВКэш(ЗначениеКэшПрописать, ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр)
	
	Если		ЗначениеКэшПрописать.Парам.Свойство(ИмяПараметраСбис) Тогда
		
		//В Кэш.Парам
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	ИначеЕсли   ЗначениеКэшПрописать.СБИС.Свойство(ИмяПараметраСбис) Тогда

		//В Кэш.СБИС
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли   ЗначениеКэшПрописать.СБИС.ПараметрыИнтеграции.Свойство(ИмяПараметраСбис) Тогда

		//В Кэш.СБИС.ПараметрыИнтеграции
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	Иначе
		
		//В Кэш.ТекущийСеанс.Параметры
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Параметры." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис СпособХраненияНастроек
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_СпособХраненияНастроек(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	Если ЗначениеПараметраСбис = 1 Тогда
		ИмяМодуляНастроек = "ФайлыНастроекСервер";
	Иначе
		ИмяМодуляНастроек = "ФайлыНастроекКаталог";
	КонецЕсли;
	
	ЗначениеКэшПрописать.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(ЗначениеКэшПрописать);
	
	МодульНастроек = ПолучитьФормуОбработки(ИмяМодуляНастроек);

	ЗначениеКэшПрописать.Вставить("ФормаНастроек", МодульНастроек);

	МодульНастроек.ПараметрыРаботы = Новый Структура;
	МодульНастроек.ИнициализироватьКэшНастроек(ЗначениеКэшПрописать, ДопПараметры);
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.СпособХраненияНастроек", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	Если ЭтоГлобальныйПараметр Тогда

		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки = МодульНастроек;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис ИспользоватьГенератор
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_ИспользоватьГенератор(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.ИспользоватьГенератор", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	Если ЭтоГлобальныйПараметр Тогда
		ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.ИспользоватьГенераторПриИзменении(ГлавноеОкно.Кэш, ЗначениеПараметраСбис);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить параметр сбис СпособСопоставленияНоменклатуры
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_СпособСопоставленияНоменклатуры(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения = Неопределено)

	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам.СпособСопоставленияНоменклатуры", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	
	Если ЗначениеПараметраСбис = 0 Тогда
		ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_СБИС";
	Иначе
		ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_ДБФ";
	КонецЕсли;
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ФормаРаботыСНоменклатурой", ФормаРаботыСНоменклатурой, ЭтоГлобальныйПараметр);
	
	Отказ = Ложь;
	ФормаРаботыСоСопоставлением = ЗначениеКэшПрописать.ГлавноеОкно.СбисПолучитьФормуОбработки(ЗначениеКэшПрописать, ФормаРаботыСНоменклатурой, Новый Структура, Отказ);
	Попытка
		ФормаРаботыСоСопоставлением.УстановитьПараметрыМодуля(,ЗначениеКэшПрописать);
	Исключение
		//Исключение не обрабатываем, отвалиться может только в случае, если форма вынесена в внешние функции
	КонецПопытки;

КонецПроцедуры

// Процедура - Изменить параметр сбис АдресСервера
//
// Параметры:
//  ЗначениеПараметраСбис	 - 	 - 
//  ДопПараметры			 - 	 - 
//
&НаКлиенте
Процедура ИзменитьПараметрСбис_АдресСервера(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметры = Неопределено)

	ИмяПараметраСбис = "АдресСервера";
	
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС."						+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "Парам."					+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции."	+	ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

	//Ещё требуется установить параметры, зависящие от УРЛ сервиса
	ВключенРезервныйДомен = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисВключенРезервныйДомен(ГлавноеОкно.Кэш, ЗначениеПараметраСбис);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.РезервныйДомен", ВключенРезервныйДомен);
	
	НовыеПараметрыСервиса = ПараметрыАдресаСервераСБИС(ЗначениеПараметраСбис);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.КодСервиса",				НовыеПараметрыСервиса.КодСервиса);
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "СБИС.ПараметрыИнтеграции.ПредставлениеСервера",	НовыеПараметрыСервиса.ПредставлениеСервера);
	
КонецПроцедуры

//Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Процедура ИзменитьПараметрСбис_ВКэш(КэшЗначение, АдресПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр = Истина)
	
	СтрАдрес			= СтрЗаменить(АдресПараметраСбис, ".", Символы.ПС);
	лАдресГлобальный	= ГлобальныйКэш;
	лАдресЛокальный		= КэшЗначение;
	Для СтрНомерСтрок = 1 По СтрЧислоСтрок(СтрАдрес) - 1 Цикл
		лАдресГлобальный	= лАдресГлобальный[СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок)];
		лАдресЛокальный		= лАдресЛокальный[СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок)];
	КонецЦикла;
	лАдресЛокальный.Вставить(СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок), 	ЗначениеПараметраСбис);
	Если ЭтоГлобальныйПараметр Тогда
		лАдресГлобальный.Вставить(СтрПолучитьСтроку(СтрАдрес, СтрНомерСтрок),	ЗначениеПараметраСбис);
	КонецЕсли;
	
КонецПроцедуры

//Процедура Получает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Функция ПолучитьЗначениеПараметраСбис(ИмяПараметраСбис, ДопПараметры = Неопределено) Экспорт
	Перем ЗначениеПараметраСбис, ИсточникПроверкиПараметра;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ЛокальныйКэш", ИсточникПроверкиПараметра) Тогда
		
		ИсточникПроверкиПараметра = ГлобальныйКэш;
		
	КонецЕсли;
	
	Если		Не	ИсточникПроверкиПараметра.Парам.Свойство					(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.Свойство						(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.ПараметрыИнтеграции.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Параметры.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Модули.Свойство		(ИмяПараметраСбис, ЗначениеПараметраСбис) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗначениеПараметраСбис;
	
КонецФункции

//Функция - возвращает элемент формы по родителю и пути
&НаКлиенте
Функция ПолучитьЭлементФормыОбработки(ОтЭлемента, ПутьКЭлементу) Экспорт
	ИмяЭлементаРазбивка = СтрЗаменить(ПутьКЭлементу, ".", Символы.ПС);
	Результат = ОтЭлемента; 
	лИмяТаблицы = "";
	Для СчетчикРазбивки = 1 По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КлючПути = СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если	ТипЗнч(Результат) = Тип("Форма")
				Или	ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				Результат = Результат.ЭлементыФормы;
			ИначеЕсли	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				Результат = Результат["Колонки"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("Панель") Тогда
				Результат = Результат["Страницы"];
			ИначеЕсли	ТипЗнч(Результат) = Тип("КоманднаяПанель")
					Или	ТипЗнч(Результат) = Тип("Кнопка") Тогда 
				Результат = Результат.Кнопки; 
			//1189641556
			ИначеЕсли	ТипЗнч(Результат) = Тип("ДеревоЗначений")
				Или ТипЗнч(Результат) = Тип("СтрокаДереваЗначений") Тогда
			    Результат = Результат[КлючПути];
			КонецЕсли;
		#Иначе
			Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
				Результат = Результат.Элементы; 
			//1189641556
			ИначеЕсли ТипЗнч(Результат) = Тип("ДанныеФормыДерево")
			    Или ТипЗнч(Результат) = Тип("ДанныеФормыЭлементДерева") Тогда
				Результат = Результат.ПолучитьЭлементы();
				Продолжить;
			Иначе
				Результат = Результат["ПодчиненныеЭлементы"];
			КонецЕсли;
		#КонецЕсли
		Если КлючПути = "Страницы" Или КлючПути = "Строки" Тогда //1189641556
			Продолжить;
		КонецЕсли;
		ИмяРеквизитаПоиска = КлючПути;
        Если    Не    ПустаяСтрока(лИмяТаблицы) Тогда
            Если Не Лев(КлючПути, СтрДлина(лИмяТаблицы)) = лИмяТаблицы Тогда
                //Это колонка ТЧ.
                ИмяРеквизитаПоиска    = ОпределитьПолноеИмяКолонки(лИмяТаблицы, КлючПути);
                лИмяТаблицы            = "";
            КонецЕсли;
        ИначеЕсли    КлючПути = "Таблица_РеестрДокументов"
                Или    КлючПути = "Таблица_РеестрСобытий" Тогда
            //Для хардкодных таблиц на УФ требуется дописать имя ТЧ в колонку
            лИмяТаблицы            = КлючПути;
        Иначе
            //Ничего не переопределяется, элмент определяется как обычно
        КонецЕсли;
        Результат = Результат.Найти(ИмяРеквизитаПоиска);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

// Функция - формирует двоичные данные по имени файла в папке на клиенте
//
// Параметры:
//  ПутьКФайлуКлиент - Строка	 - полный путь к файлу, ДД которого требуется получить
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные ДД файла по пути. Вызывает СБИС исключение при ошибке
//
&НаКлиенте
Функция ПолучитьBASE64ПоИмениФайлаКлиент(ПутьКФайлуКлиент) Экспорт
	
	# Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФайлыПреобразовать = Новый Массив;
		Попытка
			
			ФайлыПреобразовать.Добавить(Новый ДвоичныеДанные(ПутьКФайлуКлиент));
			Возврат ФайлыВBASE64Сервер(ФайлыПреобразовать)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# Иначе
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлуКлиент));
		ПомещенныеФайлы = Новый Массив;
		
		Попытка
			
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ,Ложь);
			Возврат ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеФайлы)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# КонецЕсли
	
КонецФункции

&НаСервере
Функция ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеНаСерверФайлы)
	
	Возврат МодульОбъектаСервер().ФайлыВBASE64Сервер(ПомещенныеНаСерверФайлы);
	
КонецФункции

&НаКлиенте
Функция ОпределитьПолноеИмяКолонки(ТчИмя, КолонкаИмя)
    
    Перем ИмяКолонкиШаблон;
    Если Не ГлобальныйКэш.ТекущийСеанс.Интерфейс.Свойство("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон) Тогда
        ИмяКолонкиШаблон = "{ИмяКолонки}";
        Если ГлобальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
            ИмяКолонкиШаблон = "{ТЧ}" + ИмяКолонкиШаблон;
        КонецЕсли;
        ГлобальныйКэш.ТекущийСеанс.Интерфейс.Вставить("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон);
    КонецЕсли;

    Возврат СтрЗаменить(СтрЗаменить(ИмяКолонкиШаблон, "{ИмяКолонки}", КолонкаИмя), "{ТЧ}", ТчИмя);
    
КонецФункции

&НаКлиенте
//
// Параметры:
//  СбисАдресСервера - online.sbis.ru
// 
// Возвращаемое значение:
//  Структура - параметры сервиса СБИС
//
Функция ПараметрыАдресаСервераСБИС(СбисАдресСервера) Экспорт
	
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	Если Сред(СбисПредставлениеСервера, 1, 4) = "fix-" Тогда
		КодСервиса = "fix";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 5) = "test-" Тогда
		КодСервиса = "test";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 6) = "online" Тогда
		КодСервиса = "";
	Иначе
		КодСервиса = "undefine";
	КонецЕсли;
	Возврат Новый Структура("КодСервиса, ПредставлениеСервера", КодСервиса, СбисПредставлениеСервера)
	
КонецФункции

&НаКлиенте
Процедура СбисУстановитьБлокировкуФормы(Форма, ПараметрыБлокировкиУстановить) Экспорт
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТипМетаданных(ИниКонфигурации, ИмяУзла)
	
	Если ИниКонфигурации.Свойство(ИмяУзла) Тогда
		ЗначениеУзла = СтрЗаменить(ИниКонфигурации[ИмяУзла].Значение, """", "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если Лев(ЗначениеУзла, 1) = "[" Тогда
			Возврат ПолучитьТипМетаданных(ИниКонфигурации,	Сред(ЗначениеУзла, 2, Найти(ЗначениеУзла, "]") - 2));
				 
		ИначеЕсли	ТипЗнч(ЗначениеУзла) = Тип("Строка")
			И		Найти(ЗначениеУзла, ".") Тогда 
			      
			Если Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Справочник") Тогда
				Возврат ПредопределенноеЗначение("Справочник." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "Документ") Тогда
				Возврат ПредопределенноеЗначение("Документ." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			ИначеЕсли Найти(Лев(ЗначениеУзла, Найти(ЗначениеУзла, ".") - 1), "ПланыВидовХарактеристик") Тогда
				Возврат ПредопределенноеЗначение("ПланВидовХарактеристик." + Сред(ЗначениеУзла, Найти(ЗначениеУзла, ".") + 1) + ".ПустаяСсылка");
			КонецЕсли;
				 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;        
	
КонецФункции

#Если Не ВебКлиент Тогда

&НаКлиенте
Функция СсылочныйТипСтрокойВызовКлиента(Ссылка, ДопПараметры = Неопределено) 

	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, ТипЗнч(Ссылка));
	XMLСТипом = Запись.Закрыть();
	ТипСтрокой = Сред(XMLСТипом, Найти(XMLСТипом, ">") + 1);
	ТипСтрокой = Лев(ТипСтрокой, Найти(ТипСтрокой, "<") - 1);
	
	ЧастиСтроки = СтрЗаменить(ТипСтрокой, ".", Символы.ПС);
	
	Если Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "CatalogRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "СправочникСсылка");
		
	ИначеЕсли Найти(СтрПолучитьСтроку(ЧастиСтроки, 1), "DocumentRef") Тогда
		
		ЧастиСтроки = СтрЗаменить(ЧастиСтроки, СтрПолучитьСтроку(ЧастиСтроки, 1), "ДокументСсылка");
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ЧастиСтроки, Символы.ПС, ".");
	
	
КонецФункции // СсылочныйТипСтрокой()

#КонецЕсли

&НаКлиенте
Функция СсылочныйТипСтрокой(Ссылка, ДопПараметры = Неопределено) Экспорт 

	#Если ВебКлиент Тогда
		
		Возврат СсылочныйТипСтрокойВызовСервера(Ссылка, ДопПараметры);
		
	#Иначе
		
		Возврат СсылочныйТипСтрокойВызовКлиента(Ссылка, ДопПараметры);
		
	#КонецЕсли
	
КонецФункции // СсылочныйТипСтрокой()

&НаСервере
Функция СсылочныйТипСтрокойВызовСервера(Ссылка, ДопПараметры = Неопределено) Экспорт 

	Возврат МодульОбъектаСервер().СсылочныйТипСтрокойСервер(Ссылка, ДопПараметры);
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдКоннекшена(Отказ = Ложь) Экспорт

	Кэш = ГлавноеОкно.Кэш;
	Если ГлобальныйКэш.КэшНастроек.Свойство("ВыбранныеНастройки")
		И ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Свойство("Идентификатор") Тогда
		
		Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
	Иначе
		
		РезультатПодключения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисПолучитьНастройкиСБИС(ГлавноеОкно.Кэш, Отказ);
		
		Если Отказ = Ложь Тогда
			Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
		Иначе
			Возврат РезультатПодключения;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьИдКоннекшена()

// Функция - проверяет объект на принадлежность к типу СБИС
// 
// Возвращаемое значение:
//  Булево - истина если объект принадлежит типу СБИС
//
&НаКлиенте
Функция ЭтоТипСбис(ОбъектПроверка, ТипЗначенияСтрокой)
	
	ТипЗначенияФормат = НРег(ТипЗначенияСтрокой);
	
	Если	ТипЗнч(ОбъектПроверка) = Тип("Структура") Тогда
		
		Если	ОбъектПроверка.Свойство("_класс") Тогда
		
			Возврат ТипЗначенияФормат = НРег(ОбъектПроверка._класс)
		
		ИначеЕсли	ТипЗначенияФормат = "вложениесбис"
			И	ОбъектПроверка.Свойство("ВерсияФормата")
			И	ОбъектПроверка.Свойство("ПодТип")
			И	ОбъектПроверка.Свойство("Тип") Тогда
			
			Возврат Истина;
			
		ИначеЕсли	ТипЗначенияФормат = "сбисисключение"
			И	ОбъектПроверка.Свойство("code")
			И	ОбъектПроверка.Свойство("message")
			И	ОбъектПроверка.Свойство("details") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_ПолучитьФормуОбработки 
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_НайтиФункциюСеансаОбработки 
#КонецОбласти
 
#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСФичами
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_Интерфейс
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСИниИXSLT
#КонецОбласти

