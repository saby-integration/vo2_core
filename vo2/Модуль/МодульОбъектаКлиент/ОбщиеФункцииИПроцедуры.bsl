
Функция ВыбратьДокументыПоТипамВызовСервера(Документы1С, ТипДокумента)
	
	Возврат МодульОбъектаСервер().ВыбратьДокументыПоТипам(Документы1С, ТипДокумента);
	
КонецФункции

// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиенте
Функция НоваяВерсияБольшеКлиент(ВерсияДляСравнения, ВерсияНоваяСравнить) Экспорт

	Возврат СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить);
	
КонецФункции

// Функция - сравнивает две версии по разрядно и сообщает, больше ли новая версия старой, или нет	
//
// Параметры:
//  ВерсияДляСравнения	 - Строка	 - формат 1.1.1.1 старая версия, с которой проводится сравнение
//  ВерсияНоваяСравнить	 - Строка	 - формат 1.1.1.1 новая версия для сравнения
// 
// Возвращаемое значение:
//  Булево - Истина если ВерсияНоваяСравнить больше ВерсияДляСравнения
//
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсииБольшеМеньше(ВерсияДляСравнения, ВерсияНоваяСравнить) 
	
	Если		Не ЗначениеЗаполнено(ВерсияДляСравнения) Тогда
		Возврат Истина;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияНоваяСравнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Версия1Разделить	= СтрЗаменить(ВерсияДляСравнения, ".", Символы.ПС);
	Версия2Разделить	= СтрЗаменить(ВерсияНоваяСравнить, ".", Символы.ПС);
	сЧислоРазрядов		= Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	ОписаниеЧисло		= Новый ОписаниеТипов("Число");
	Для Индекс = 1 По сЧислоРазрядов Цикл
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		Иначе
			Число1Сравнить = 0;
		КонецЕсли;
		
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = ОписаниеЧисло.ПривестиЗначение(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		Иначе
			Число2Сравнить = 0;
		КонецЕсли;
		
		Если		Число1Сравнить = Число2Сравнить		Тогда
			Продолжить;
		ИначеЕсли	Число2Сравнить > Число1Сравнить		Тогда
			Возврат Истина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	

//Функция сериализует версию из формата 1С в формат Число и обратно. Пример в 1С: 3.0.40.40, пример в число: 3 0000 0040 0040
&НаКлиенте                                  
Функция ПривестиВерсию(Версия, ПараметрыПриведения) Экспорт
		
	ВариантПриведения	= ?(ПараметрыПриведения.Свойство("ВариантПриведения"),	ПараметрыПриведения.ВариантПриведения,	"ЧислоВСтроку");
	Разделитель			= ?(ПараметрыПриведения.Свойство("Разделитель"),		ПараметрыПриведения.Разделитель,		".");
	Заполнитель			= ?(ПараметрыПриведения.Свойство("Заполнитель"),		ПараметрыПриведения.Заполнитель,		"0");
	Разрядность			= ?(ПараметрыПриведения.Свойство("Разрядность"),		ПараметрыПриведения.Разрядность,		4);
	ЧислоРазрядов		= ?(ПараметрыПриведения.Свойство("ЧислоРазрядов"),		ПараметрыПриведения.ЧислоРазрядов,		4);
	Результат			= "";
	
	СтрокаВерсии	= СокрЛП(СтрЗаменить(Формат(Версия, "ЧН=0; ЧГ=0"), Символы.НПП, ""));
	
	Если		ВариантПриведения	= "СтрокуВЧисло" Тогда//Переводит из формата 1.1.1.1 в число 1 0001 0001 0001
		МногоуровневаяСтрока = СтрЗаменить(СтрокаВерсии, Разделитель, Символы.ПС);
		Для шаг = 2 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл
			СтрокаРазряда = СтрПолучитьСтроку(МногоуровневаяСтрока, шаг);
			Пока СтрДлина(СтрокаРазряда) < Разрядность Цикл
				СтрокаРазряда = Заполнитель + СтрокаРазряда;
			КонецЦикла;
			Результат = Результат + СтрокаРазряда;
		КонецЦикла;
		Результат = СтрПолучитьСтроку(МногоуровневаяСтрока, 1)	+ Результат;
		Результат = Число(Результат);
	ИначеЕсли	ВариантПриведения	= "ЧислоВСтроку" Тогда//Переводит из формата числа 1 0001 0001 0001 в 1.1.1.1
		Если СтрЧислоВхождений(СтрокаВерсии, Разделитель) = ЧислоРазрядов - 1 Тогда//версия уже сериализована.
			Возврат	СтрокаВерсии;
		КонецЕсли;
		ДробЧислоРазрядов	= СтрДлина(СтрокаВерсии) / Разрядность;
		ЦелЧислоРазрядов	= ?(Цел(ДробЧислоРазрядов) = ДробЧислоРазрядов, ДробЧислоРазрядов, Цел(ДробЧислоРазрядов)	+ 1);
		
		Для шаг = 1 По ЦелЧислоРазрядов Цикл
			Если СтрДлина(СтрокаВерсии) > Разрядность * шаг Тогда 
				СтрокаРазряда	= Сред(СтрокаВерсии, (СтрДлина(СтрокаВерсии)	- Разрядность*шаг)+1, Разрядность);
			Иначе
				СтрокаРазряда	= Сред(СтрокаВерсии, 1, Разрядность-(Разрядность*шаг-СтрДлина(СтрокаВерсии)));
			КонецЕсли;
			Пока	Лев(СтрокаРазряда, 1) = Заполнитель
				И	СтрДлина(СтрокаРазряда) > 1	Цикл
				СтрокаРазряда	= Сред(СтрокаРазряда, 2);
			КонецЦикла;
			Результат	= Разделитель	+ СтрокаРазряда	+ Результат;
		КонецЦикла;
		Если ЧислоРазрядов > ЦелЧислоРазрядов Тогда
			Для	шаг = 1 По ЧислоРазрядов - ЦелЧислоРазрядов	Цикл
				Результат = Разделитель	+ Заполнитель + Результат;
			КонецЦикла;
		КонецЕсли;
		Если Лев(Результат, 1) = Разделитель Тогда
			Результат = Сред(Результат, 2);
		КонецЕсли;
	ИначеЕсли	ВариантПриведения	= "Дозаполнить"	Тогда//дозаполнение версии до стандарта. Пример: версия 1.1.1 станет 1.1.1.0
		ВспомогательныйРазделитель	= ?(ПараметрыПриведения.Свойство("ВспомогательныйРазделитель"), ПараметрыПриведения.ВспомогательныйРазделитель, "-");
		шаг = 0;
		Если Не ПустаяСтрока(СтрокаВерсии) Тогда
			МногоСтрочнаяЗапись = СтрЗаменить(СтрокаВерсии, ВспомогательныйРазделитель, Символы.ПС);
			Пока шаг < СтрЧислоСтрок(МногоСтрочнаяЗапись) Цикл
				шаг = шаг + 1;
				Результат = Результат + СтрПолучитьСтроку(МногоСтрочнаяЗапись, шаг)	+ Разделитель;
			КонецЦикла;
		КонецЕсли;
		Пока шаг < ЧислоРазрядов Цикл//Дозаполнить недостающие разряды
			шаг = шаг + 1;
			Результат = Результат + "0" + Разделитель;
		КонецЦикла;
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции

&НаКлиенте
Процедура СбисОткрытьДокументы(ОписаниеДокументовОткрыть, ДопПараметры=Неопределено) Экспорт
    Перем ДокументыОткрыть;
	
	Если ОписаниеДокументовОткрыть.Свойство("СписокСсылок", ДокументыОткрыть) Тогда	
		
		Для Каждого Документ1С Из ДокументыОткрыть Цикл
			
			СбисОткрытьКарточку1С(Документ1С.Значение);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СбисОткрытьКарточку1С(КарточкаСсылка, ДопПараметры=Неопределено)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ОткрытьЗначение(КарточкаСсылка);
		
	#Иначе
		
		ПоказатьЗначение(, КарточкаСсылка);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьМассовуюОтправкуДокументов(МассивПакетов, ДопПараметры) Экспорт
    Перем ОбработчикРезультатОтправки;
	
	ИспользоватьНовуюОтправку = ПолучитьЗначениеПараметраСбис("ИспользоватьНовуюОтправку") 
							Или (ДопПараметры.Свойство("ИспользоватьНовуюОтправку") И ДопПараметры.ИспользоватьНовуюОтправку);
	Если ИспользоватьНовуюОтправку Тогда	
		ГлавноеОкно.Кэш.СписокНоменклатуры.Очистить();
		
		Если Не ДопПараметры.Свойство("ОбработчикРезультата", ОбработчикРезультатОтправки) Тогда
			ОбработчикРезультатОтправки	= НовыйСбисОписаниеОповещения("ЗапуститьМассовуюОтправкуДокументов_Завершение", МодульОбъектаКлиент());
		КонецЕсли;
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("ДанныеКОтправке",		Новый Структура("СписокПакетов", МассивПакетов));
		ПараметрыОтправки.Вставить("ОбработчикРезультата",	ОбработчикРезультатОтправки);
		ПараметрыОтправки.Вставить("ВерсияОтправки",		2);
		Если ДопПараметры.Свойство("МодульПодготовки") Тогда
			ПараметрыОтправки.Вставить("МодульПодготовки",	ДопПараметры.МодульПодготовки);
		КонецЕсли;
		
		РезультатОтправки = НовыйРезультатОтправки(ПараметрыОтправки);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправки);
		
		РезультатОтправки_МассоваяОтправка(РезультатОтправки);
	Иначе
		
		ДопПараметры.Вставить("ВерсияОтправки", 1);
		КлассОтправки = НовыйРезультатОтправки(ДопПараметры);
		ГлавноеОкно.Кэш.Вставить("РезультатОтправки", КлассОтправки);
		
		ФормыПоискаОтправки = Новый Массив;
		ФормыПоискаОтправки.Добавить("Документ_" + ДопПараметры.ИмяРеестра);
		ФормыПоискаОтправки.Добавить("Документ_Шаблон");
		фрм = НайтиФункциюСеансаОбработки("ОтправитьДокументы", ФормыПоискаОтправки);
		фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, МассивПакетов);
		
	КонецЕсли;
	
КонецФункции

// Процедура - завершение отправки и обработка результата
//
// Параметры:
//  РезультатОтправки	 - Структура РезультатОтправки в старом формате
//  ДопПараметры		 - 	 - 
//
&НаКлиенте
Процедура ЗапуститьМассовуюОтправкуДокументов_Завершение(РезультатОтправки, ДопПараметры=Неопределено) Экспорт
	
	Кэш = ГлавноеОкно.Кэш;
	Кэш.Вставить("РезультатОтправки", МодульОбъектаКлиент().РезультатОтправки_Скопировать(РезультатОтправки, Истина));
	
	фрм = НайтиФункциюСеансаОбработки("ПоказатьРезультатОтправки", "ФормаРезультатОтправки");
	фрм.ПоказатьРезультатОтправки(Кэш);
	Если РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
		ПолучитьФормуОбработки("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - запускает редактор файлов настроек
//
// Параметры:
//  ПараметрыЗапускаВходящие - 	 - 
//
&НаКлиенте
Процедура ЗапуститьРедакторИни(ПараметрыЗапускаВходящие=Неопределено) Экспорт
	
	фрм = ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекОбщее");
	Если фрм = Ложь Тогда
		СбисИсключение = НовыйСбисИсключение(, "ФормаГлавноеОкно.ЗапуститьРедакторИни",,,"Не удалось получить форму редактора файлов настроек");
		СообщитьСбисИсключение(СбисИсключение);
		Возврат;
	КонецЕсли;
    фрм.ЗакрыватьПриЗакрытииВладельца = Истина;
	фрм.Показать(ПараметрыЗапускаВходящие);

КонецПроцедуры

// Процедура - сообщить пользователю
//
// Параметры:
//  ПараметрыСообщения	 - Структура - Текст, СтатусСообщения, ЭлементНазначения, ФормаВладелец
//  ДопПараметры		 - Строка/Структура/ФиксированнаяСтруктура	 - расширение.
//
&НаКлиенте
Процедура СбисСообщить(ПараметрыСообщения, ДопПараметры=Неопределено) Экспорт
	Перем СбисСтатусСообщения, СбисТекстСообщения;
	
	ТихийРежим	= ПолучитьЗначениеПараметраСбис("ТихийРежим") = Истина
				Или	(Не ДопПараметры = Неопределено
					И	(	ТипЗнч(ДопПараметры) = Тип("Структура")
						Или ТипЗнч(ДопПараметры) = Тип("ФиксированнаяСтруктура"))
					И	ДопПараметры.Свойство("ТихийРежим")
					И	ДопПараметры.ТихийРежим);
	
	Если ТихийРежим Тогда
						
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыСообщения) = Тип("Строка") Тогда
		
		СбисТекстСообщения	= ПараметрыСообщения;
		
	ИначеЕсли ЭтоТипСбис(ПараметрыСообщения, "СбисИсключение") Тогда
		
		СообщитьСбисИсключение(ПараметрыСообщения, ДопПараметры);
		Возврат;
		
	Иначе
		
		СбисТекстСообщения	= ПараметрыСообщения.Текст;
		
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если    	ТипЗнч(ПараметрыСообщения) = Тип("Строка")
			Или	Не	ПараметрыСообщения.Свойство("СтатусСообщения", СбисСтатусСообщения) Тогда
			СбисСтатусСообщения = СтатусСообщения.Обычное
		КонецЕсли;
		Сообщить(СбисТекстСообщения, СбисСтатусСообщения);
		
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СбисТекстСообщения;
		
		Если	ТипЗнч(ПараметрыСообщения) = Тип("Структура")
			Или	ТипЗнч(ПараметрыСообщения) = Тип("ФиксированнаяСтруктура") Тогда
			
			Если ПараметрыСообщения.Свойство("ЭлементНазначения") Тогда
				Сообщение.Поле = ПараметрыСообщения.ЭлементНазначения;
			КонецЕсли;
			Если		ПараметрыСообщения.Свойство("ФормаВладелец")
				И Не	ПараметрыСообщения.ФормаВладелец = Неопределено  Тогда
				Сообщение.ИдентификаторНазначения = ПараметрыСообщения.ФормаВладелец.УникальныйИдентификатор;
			КонецЕсли;
			
		КонецЕсли;	
		
		Сообщение.Сообщить(); 
		
	#КонецЕсли	
КонецПроцедуры

// Процедура - Сообщает сбис исключение
//
// Параметры:
//  ИсключениеВходящее	 - Структура, ИнформацияОбОшибке	- экземпляр ExtSysException(СбисИсключение) в разобранном виде, либо в виде сериализованной строки
//  ДопПараметры		 - Структура, Строка	- дополнительные параметры. Если строка, то имя команды для стека при вызове как ИнформацияОбОшибке
//		СтатусСообщения		- Строка	- статус сообщения: "warning" - показать форму предупреждения со ссылкой на решение проблемы. "attention" - показать форму ошибки, "message" - вывод в обычном режиме
//		Отправлять			- Булево, признак отключения отправки ошибки в статистику
//		ИмяКоманды			- Строка для генерации исключения, если как исключение пришла ИнформацияОбОшибке
//
&НаКлиенте
Процедура СообщитьСбисИсключение(ИсключениеВходящее, ДопПараметры=Неопределено) Экспорт
	Перем СтатусОшибки, лРешениеПроблемы, лФормаВладелец, лОтправлятьОшибку;
	
	Если		ТипЗнч(ИсключениеВходящее) = Тип("ИнформацияОбОшибке") Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			ИмяКомандыВСтэк = ДопПараметры.ИмяКоманды;
		Иначе
			ИмяКомандыВСтэк = Строка(ДопПараметры);
			ДопПараметры	= Новый Структура;
		КонецЕсли;
		СбисИсключение = НовыйСбисИсключение(ИсключениеВходящее, ИмяКомандыВСтэк);
	ИначеЕсли 	Не	ТипЗнч(ИсключениеВходящее) = Тип("Структура")
			Или Не	ИсключениеВходящее.Свойство("message")
			Или	Не	ИсключениеВходящее.Свойство("details") Тогда
		Возврат;
	Иначе
		СбисИсключение = ИсключениеВходящее;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
			
		Если 	ДопПараметры.Свойство("Отложенно")
			И	ДопПараметры.Отложенно Тогда
			//Показать ошибку отложенно.
			ДопПараметры.Удалить("Отложенно");
			СбисПараметрыДействия = Новый Структура("ИмяПроцедуры, Модуль, ДополнительныеПараметры, Аргумент");
			СбисПараметрыДействия.ИмяПроцедуры				= "СообщитьСбисИсключение";
			СбисПараметрыДействия.Модуль					= МодульОбъектаКлиент();
			СбисПараметрыДействия.ДополнительныеПараметры	= ДопПараметры;
			СбисПараметрыДействия.Аргумент					= ИсключениеВходящее;
			
			Попытка
				
				ПодключитьОтложенноеДействие(НовыйОтложенноеДействие(СбисПараметрыДействия));
				
			Исключение
				
				СообщитьСбисИсключение(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПодключитьОтложенноеДействие"), Новый Структура("СтатусСообщения", "message"));
				
			КонецПопытки;
			Возврат;
			
		КонецЕсли;
		
		ДопПараметры.Свойство("СтатусСообщения",	СтатусОшибки);
		ДопПараметры.Свойство("ФормаВладелец",		лФормаВладелец);
		ДопПараметры.Свойство("Отправлять",			лОтправлятьОшибку);
		
	КонецЕсли;
	
	ТекстОшибки = СбисИсключение_Представление(СбисИсключение, "сообщение");
	
	//Статус сообщения, если не указан
	Если СтатусОшибки = Неопределено Тогда
		
		Если	СбисИсключение.Свойство("help", лРешениеПроблемы)
			И	ЗначениеЗаполнено(лРешениеПроблемы) Тогда
			СтатусОшибки = "warning";
		Иначе
			СтатусОшибки = "attention";
		КонецЕсли;
		
	КонецЕсли;
	
	//Отправлять ошибку в статистику, если не указано
	Если лОтправлятьОшибку = Неопределено Тогда
		лОтправлятьОшибку = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлобальныйКэш) Тогда
		Если ПолучитьЗначениеПараметраСбис("РежимОтладки") = Истина Тогда
			
			ДанныеВЛог			= Новый Массив;
			лОтладочныеДанные	= Новый Структура("Исключение", СбисИсключение);
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
			
		КонецЕсли;
		
		Если ПолучитьЗначениеПараметраСбис("ТихийРежим") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ (	ДопПараметры.Свойство("НеВызыватьРекурсивно")
				И	ДопПараметры.НеВызыватьРекурсивно) Тогда
			ИсключениеДоп = НовыйСбисИсключение(,"МодульОбъектКлиент.СообщитьСбисИсключение",,"Не определен ГлобальныйКэш");
			СообщитьСбисИсключение(ИсключениеДоп, Новый Структура("СтатусоСообщения, Отправлять, НеВызыватьРекурсивно", "platform_warning", Ложь, Истина));
			СтатусОшибки = "platform_warning";
			лОтправлятьОшибку = Ложь;	
		КонецЕсли;
	КонецЕсли;

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Текст",			ТекстОшибки);
	Если ЗначениеЗаполнено(лРешениеПроблемы) Тогда
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("АдресСсылка",	лРешениеПроблемы);
	КонецЕсли;
	ПараметрыСообщения.Вставить("ФормаВладелец",	лФормаВладелец);
	лОтправлятьОшибку = лОтправлятьОшибку И Не СбисИсключение.code = 775;

	Если		СтатусОшибки = "warning" Тогда
		
		//Важная ошибка, которую обязательно прочитать, либо которая имеет заготовленное решение.
		ФормаПредупреждение = ПолучитьФормуОбработки("ФормаПредупреждения", Новый Структура("Владелец", лФормаВладелец));
		ФормаПредупреждение.ПоказатьПоверх(ПараметрыСообщения);
		
	ИначеЕсли	СтатусОшибки = "attention" Тогда

		//Обычные исключения показываем в информационной панели. В форме показываем только критические ошибки, либо ошибки, имеющие подготовленное решение.
		ПараметрыСообщения.Вставить("СтатусСообщения", СтатусСообщения.Внимание);
		СбисСообщить(ПараметрыСообщения); 
		
	ИначеЕсли СтатусОшибки = "platform_warning" Тогда
		
		//Только на случай, если либо ещё не проинитился кэш, либо нет возможности получить форму предупреждения.
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстОшибки);
		#Иначе
			ПоказатьПредупреждение(,ТекстОшибки);
		#КонецЕсли
		
	Иначе
		
		//Сообщить ошибку с обычным статусом.
		ПараметрыСообщения.Вставить("СтатусСообщения", СтатусСообщения.Обычное);
		СбисСообщить(ПараметрыСообщения);
		
	КонецЕсли;
	//Если не отключено, то отправим информацию о возникшей ошибке
	Если лОтправлятьОшибку Тогда	
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Ошибка", СбисИсключение);
		Попытка
			СбисСтатистика_СформироватьИЗаписать(сбисПараметрыСтатистики, Новый Структура);	
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СообщитьСбисИсключение(НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектКлиент.СформироватьИЗаписатьСтатистикуНаСервис"), Новый Структура("Отправлять", Ложь));
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

// Процедура - Сбис показать вопрос. Идентично ПоказатьВопрос, с учетом модальности ОФ.
//
// Параметры:
//  СбисОписаниеОповещенияОЗавершении	 - СбисОписаниеОповещения	 - обработчик диалога
//  ТекстВопроса						 - Строка					 - 
//  Кнопки								 - Список					 - 
//  Таймаут								 - Таймаут					 - 
//  КнопкаПоУмочанию					 - Кнопка/элемент списка	 - 
//  Заголовок							 - Строка					 - 
//  КнопкаТаймаута						 - Кнопка/элемент списка	 - 
//
&НаКлиенте
Процедура СбисПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмочанию = Неопределено, Заголовок="", КнопкаТаймаута=Неопределено) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВыполнитьСбисОписаниеОповещения(Вопрос(ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута), СбисОписаниеОповещенияОЗавершении);
	#Иначе
		ПоказатьВопрос(СбисОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмочанию, Заголовок, КнопкаТаймаута);
	#КонецЕсли
КонецПроцедуры

// Процедура - завершает работу обработки
//
&НаКлиенте
Процедура СбисЗавершитьРаботу() Экспорт
	
	Оповестить("ЗакрытьСБИС");

	Попытка
		
		ГлавноеОкно.СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, ГлобальныйКэш.Парам));
		
		Если ГлобальныйКэш.СБИС.Авторизован Тогда
			СохранитьМеткиСтатусов(ГлавноеОкно.Кэш);
		КонецЕсли;
		
		Если ГлобальныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
			ГлобальныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
			ГлавноеОкно.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
			ГлавноеОкно.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
		КонецЕсли;
		
		ГлавноеОкно.ОтключитьОбработчикОжидания("ВыполнениеОтложенныхПроцедур");
		ГлавноеОкно.Кэш.Интеграция.Завершить(ГлавноеОкно.Кэш, Новый Структура, Ложь);
		ОбновитьПараметрГлобальногоМодуляДляСервера("ОчиститьГлобальныйКэш");
		
	Исключение
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = НовыйСбисИсключение(ИнфоОбОшибке, "МодульОбъектаКлиент.СбисЗавершитьРаботу");  
		СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "platform_warning"));
				
	КонецПопытки;
	
	
	ГлавноеОкно.ЗавершитьРаботу = Истина; 
	ГлавноеОкно.Закрыть();
	
КонецПроцедуры

//Процедура показывает пользователю выбор из сформированного списка значений
&НаКлиенте
Процедура СбисВыбратьИзСписка(СписокВыбора, ДопПараметры) Экспорт
	
	Если	ДопПараметры.Свойство("ОтметитьЭлементы")
		И	ДопПараметры.ОтметитьЭлементы Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Если СписокВыбора.ОтметитьЭлементы(ДопПараметры.Заголовок) Тогда
				
				ВыполнитьСбисОписаниеОповещения(СписокВыбора, ДопПараметры.Обработчик);
				
			Иначе
				
				ВыполнитьСбисОписаниеОповещения(Неопределено, ДопПараметры.Обработчик);
				
			КонецЕсли;
			
		#Иначе
			
			СписокВыбора.ПоказатьОтметкуЭлементов(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли
		
	ИначеЕсли ДопПараметры.Свойство("ЭлементПривязки") Тогда 
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВыполнитьСбисОписаниеОповещения(ДопПараметры.Форма.ВыбратьИзМеню(СписокВыбора, ДопПараметры.ЭлементПривязки), ДопПараметры.Обработчик);
			
		#Иначе
			
			ДопПараметры.Форма.ПоказатьВыборИзМеню(ДопПараметры.Обработчик, СписокВыбора, ДопПараметры.ЭлементПривязки);
			
		#КонецЕсли	
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ВыполнитьСбисОписаниеОповещения(СписокВыбора.ВыбратьЭлемент(ДопПараметры.Заголовок), ДопПараметры.Обработчик);
			
		#Иначе
			
			СписокВыбора.ПоказатьВыборЭлемента(ДопПараметры.Обработчик, ДопПараметры.Заголовок);
			
		#КонецЕсли	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьОписаниеТипаПоОбъекту(ОбъектТипов) Экспорт

	МассивТипов = Новый Массив;
	Если ТипЗнч(ОбъектТипов) = Тип("Строка") Тогда
		
		СтрокаТиповРазбит	= СтрЗаменить(ОбъектТипов, ",", Символы.ПС);
	
		Попытка
			
			Для НомерСТроки = 1 ПО СтрЧислоСтрок(СтрокаТиповРазбит) Цикл
				
				ТекущийТип = СтрПолучитьСтроку(СтрокаТиповРазбит, НомерСТроки);
				ТекущийТип = СсылочныйТипСтрокой(ТекущийТип);
				МассивТипов.Добавить(Тип(ТекущийТип));
				
			КонецЦикла;
		
			
		Исключение
			
			ОшибкаУстановкиФильтра = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СоздатьОписаниеТипаПоОбъекту");
			ВызватьИсключение(СбисИсключение_Представление(ОшибкаУстановкиФильтра));
			
		КонецПопытки;
		
	Иначе
		
		МассивТипов.Добавить(ТипЗнч(ОбъектТипов));
		
	КонецЕсли;
		
	ОписаниеТипаНовый = Новый ОписаниеТипов(МассивТипов);
 	Возврат ОписаниеТипаНовый;
	
КонецФункции

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура ВыполнитьДействиеСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт 
	Перем ИмяФайла, ПакетВложения,СертификатДляПодписания;
	
	Отказ		= Ложь;
	СоставПакета= ПараметрыДействия.СоставПакета;
	Этап		= ПараметрыДействия.Этап;
	Действие	= ПараметрыДействия.Действие;
	Сертификат	= ПараметрыДействия.Сертификат;
	
	ДопПараметрыЗапроса	= Новый Структура("СообщитьОбОшибке, ВернутьОшибку", Ложь, Истина);
	
	// Назначение действие на этап
	action = Новый Структура("Название", Действие.Название);
	Если Не Сертификат = Неопределено Тогда
		action.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если Не Сертификат = Неопределено И Не Действие.Свойство("Сертификат") Тогда
		Действие.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	Если ПараметрыДействия.Свойство("Комментарий") И Не ПараметрыДействия.Комментарий = "" Тогда
		action.Вставить("Комментарий", ПараметрыДействия.Комментарий);
	КонецЕсли;	
		
	// Назначение этапа
	stage		= Новый Структура("Название, Идентификатор, Действие", Этап.Название, Этап.Идентификатор, action);
	document_in	= Новый Структура("Этап, Идентификатор", stage, СоставПакета.Идентификатор);
	
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		Для Каждого Вложение Из ПакетВложения Цикл 
			              
			ПараметрыЗаписи = Новый Структура;
			Если Вложение.Свойство("ТребуетсяПриложить") И Вложение.ТребуетсяПриложить Тогда
				ПараметрыЗаписи.Вставить("Этап", stage); 	
			КонецЕсли;
	
			Если Не (Вложение.Свойство("ТребуетПодписания") И Вложение.ТребуетПодписания) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЗаписатьВложенияСБИС(СоставПакета, Вложение, ПараметрыЗаписи, Новый Структура("Кэш", ГлавноеОкно.Кэш));
			Исключение
				ВызватьСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ДокументПодготовлен",document_in);
	ИмяФункции = ГлавноеОкно.Кэш.ОбщиеФункции.СбисЗаменитьНедопустимыеСимволы("ПодготовитьДействие" + "_" + Действие.Название + "_" +СоставПакета.Тип);
	
	Если  СоставПакета.Свойство("Вложение") Тогда
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, 
					"Файл_" + СоставПакета.Тип + "_" + СтрЗаменить(СоставПакета.Вложение[0].ВерсияФормата, ".", "_"), "РаботаСДокументами1С");
	Иначе
		фрм = ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, "РаботаСДокументами1С");
	КонецЕсли;
		
	Если не фрм = ложь Тогда
		//фрм.ПодготовитьДействие_Утвердить_ДокОтгрВх(ПараметрыДействия,ГлавноеОкно.Кэш);
		ОбработчикПодготовитьДействие = НовыйСбисОписаниеОповещения(ИмяФункции, фрм);
		ВыполнитьСбисОписаниеОповещения(ПараметрыДействия, ОбработчикПодготовитьДействие);
	КонецЕсли;
	
	// Подготовка этапа
	prepared_document = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ПодготовитьДействие(ГлавноеОкно.Кэш, ПараметрыДействия.ДокументПодготовлен, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(prepared_document, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	РезультатФормирования = ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов.СбисСформироватьТитулы(ГлавноеОкно.Кэш, СоставПакета, Действие, СбисПараметрыТитулов, Отказ);
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатФормирования, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование	= сбисПараметрыТитулов.Шифрование;
	Размер		= attachmentListPrepared.Количество();
	// если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
	ТребуетсяПередачаВложений =	Сертификат <> Неопределено
							И	Сертификат.Ключ.Тип = "Клиентский"
							И	Действие.ТребуетПодписания = "Да";
	
	Если ТребуетсяПередачаВложений Тогда  
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить("Идентификатор", Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить("Имя", Запись.Файл.Имя);
			file.Вставить("Хеш", Запись.Файл.Хеш);
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			Если Запись.Свойство("Зашифрован") И Запись.Зашифрован = "Да" Тогда
				//Для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				//Для SDK должно отвалиться на стадии подготовки.
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить("Ссылка", Запись.Файл.Ссылка);
			КонецЕсли;
			attachment.Вставить("Файл", file);
			attachmentList.Добавить(attachment);
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение", ПакетВложения) Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч = 0 По Размер - 1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип = СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из ПакетВложения Цикл
			Если Вложение.Свойство("Идентификатор")
				И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				//Если есть ИД, то вложение уже готово
				Продолжить;
			КонецЕсли;
			
			Если Не Вложение.Свойство("ИмяФайла", ИмяФайла) Тогда
				//Генерируем имя файла, если не указано
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя + "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + Строка(Новый УникальныйИдентификатор()) + ".xml";
			КонецЕсли;
			ДвоичныеДанныеXMLДокумента = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_СериализоватьСтрокуВBase64(ГлавноеОкно.Кэш, Новый Структура("Строка", Вложение.XMLДокумента), Новый Структура, Отказ);
			Если Отказ Тогда
				ВызватьСбисИсключение(ДвоичныеДанныеXMLДокумента, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
			КонецЕсли;
				
			file		= Новый Структура("Имя, ДвоичныеДанные", ИмяФайла, ДвоичныеДанныеXMLДокумента);
			attachment	= Новый Структура("Файл", file);
			Если Вложение.Название = "Подтверждение заказа" И ЗначениеЗаполнено(ИдПодтвЗаказа) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Удалить(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				Попытка
					// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
					ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип + Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
					Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
						ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
						Если ТребуетсяПередачаВложений Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
							attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
						КонецЕсли;
					Иначе
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецЕсли;
				Исключение
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецПопытки;
			КонецЕсли;
			attachment.Вставить( "Идентификатор",  ИдВложения);
			Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
				attachment.Вставить( "ТребуетШифрования",  "Да");
				Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
					attachment.Вставить( "Тип",  Вложение.Тип);
					attachment.Вставить( "Подтип",  Вложение.ПодТип);
					attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				КонецЕсли;
				Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
					attachment.Вставить( "Дата",  Вложение.Дата);
				КонецЕсли;
				Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
					attachment.Вставить( "Название",  Вложение.Название);
				КонецЕсли;
			КонецЕсли;
			
			attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
			attachmentList.Добавить( attachment );
		КонецЦикла;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		ПараметрыПодписанияВложения = Новый Структура("СертификатДляПодписания, Алгоритм");
		Если ПараметрыДействия.Свойство("СертификатДляПодписания",СертификатДляПодписания) Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанияВложения, ПараметрыДействия);          
		ИначеЕсли Сертификат.Свойство("Доверенность") Тогда
			ПараметрыПодписанияВложения.СертификатДляПодписания = Сертификат;
		КонецЕсли;
		ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", ПараметрыПодписанияВложения);
		
		Если ПараметрыДействия.Свойство("ПараметрыПодписанияВложения",ПараметрыПодписанияВложения) Тогда
			РезультатПодписания = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.сбисПодписатьВложения(ГлавноеОкно.Кэш, attachmentList, ПараметрыДействия, Отказ);
			Если Отказ Тогда 
				ВызватьСбисИсключение(РезультатПодписания, "ОбщиеФункции.СбисВыполнитьДействие");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура("Комментарий, Название, Идентификатор", prepared_action.Комментарий, prepared_action.Название, "");
	Если prepared_action.Свойство("Идентификатор") Тогда
		action.Идентификатор = prepared_action.Идентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура("Действие, Вложение, Идентификатор, Название", action, attachmentList, prepared_stage.Идентификатор, prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч = 0 По КолРедакций - 1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	
	document_in = Новый Структура("Идентификатор, Редакция, Этап", prepared_document.Идентификатор, redactions, stage);
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент);
	КонецЕсли;
	
	// Завершение этапа
	РезультатДействия = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.СБИС_ВыполнитьДействие(ГлавноеОкно.Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	
	// Нужно для задачи в разработку по выводу ФЛК в ЭТРН. Закомментировано пока не решится вопрос с БЛ (с)Сычев, https://online.sbis.ru/opendoc.html?guid=5500b8d3-0e0e-4ad1-840a-fec458b85ecc&client=3
	//Если РезультатДействия.Свойство("code") 
	//	И РезультатДействия.code = 729 Тогда
	//		
	//	ПараметрыОтправки = Новый Структура; 
	//	
	//	МассивПакетов = Новый Массив;
	//	МассивПакетов.Добавить(СоставПакета);
	//	
	//	ПараметрыОтправки.Вставить("ДанныеКОтправке",		Новый Структура("СписокПакетов", МассивПакетов));
	//	ПараметрыОтправки.Вставить("ВерсияОтправки",		2);
	//	
	//	РезультатОтправки = МодульОбъектаКлиент().НовыйРезультатОтправки(ПараметрыОтправки);
	//	
	//	ОтправкаДокументаСБИС = НовыйОтправкаДокументаСБИС(СоставПакета, "Ошибка"); 
	//	ПараметрыОшибки = Новый Структура("Фатальная, Исключение", Ложь, РезультатДействия);
	//	
	//	РезультатОтправки.НеОтправлено = РезультатОтправки.НеОтправлено + 1;
	//	РезультатОтправки_ОбработатьОшибку(РезультатОтправки, ОтправкаДокументаСБИС, ПараметрыОшибки);
	//	
	//	РезультатОтправкиОтдать = РезультатОтправки_Выгрузить(РезультатОтправки);
	//	ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправкиОтдать);
	//	//ГлавноеОкно.Кэш.Вставить("РезультатОтправки", РезультатОтправки);

	//	фрм = НайтиФункциюСеансаОбработки("ПоказатьРезультатОтправки", "ФормаРезультатОтправки");
	//	фрм.ПоказатьРезультатОтправки(ГлавноеОкно.Кэш);

	//Иначе
	Если Отказ Тогда
		ВызватьСбисИсключение(РезультатДействия, "МодульОбъектаКлиент.ВыполнитьОперациюСДокументомСБИС");
	КонецЕсли;
	
КонецПроцедуры 

//Процедура выполняет выбранное действие с пакетом (документом СБИС)
//ПараметрыДействия:
// СоставПакета			- Структура,	обрабатываемый пакет (документ)
// Этап					- Структура,	активный этап
// Действие				- Структура,	действие, которое требуется выполнить
// Сертификат			- Структура,	сертификат, с которым выполняется действие
// Комментарий(необяз)	- Строка,		коммментарий этапа
//ДопПараметры: пока не требуется
&НаКлиенте
Процедура НачатьФормироватьРасхождениеСДокументомСБИС(СписокДляРасхождения, ДопПараметры) Экспорт 
	
	ОбработчикПродолжить = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС", МодульОбъектаКлиент(), ДопПараметры);
	Если Не ЗначениеЗаполнено(СписокДляРасхождения) Тогда
		
		Возврат;
		
	ИначеЕсли СписокДляРасхождения.Количество() = 1 Тогда
		
		ВыполнитьСбисОписаниеОповещения(СписокДляРасхождения[0], ОбработчикПродолжить);
		
	Иначе
		
		СбисВыбратьИзСписка(СписокДляРасхождения, Новый Структура("Обработчик, Заголовок", ОбработчикПродолжить, "Выберите документ расхождения"));
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СформироватьРасхождениеСДокументомСБИС(ПараметрыВходящие, ДопПараметры) Экспорт 
	Перем ВложениеРасхождение, ИниВычиткиРасхождения, ОшибкаФормирования, МФайлОтклонение;
	
	Если		ПараметрыВходящие = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли	ТипЗнч(ПараметрыВходящие) = Тип("ЭлементСпискаЗначений") Тогда
		
		ПараметрыРасхождения = ПараметрыВходящие.Значение;
		
	Иначе
		
		ПараметрыРасхождения = ПараметрыВходящие;
		Вложение = ПараметрыРасхождения.Вложение;
		
	КонецЕсли;   
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;
	ДокументОтклонения	= ПараметрыРасхождения.ИмяОтклонения;
	ИмяИниДокумента		= ПараметрыРасхождения.ИмяИниДокумента;
	ИниДокумента		= ИниПоПараметрам(ИмяИниДокумента);
	
	Если Не ПараметрыРасхождения.Свойство("МФайлОтклонение", МФайлОтклонение) Тогда
		
		МФайлОтклонение = СтрЗаменить(ДокументОтклонения, "_", Символы.ПС);
		МФайлОтклонение = СтрПолучитьСтроку(МФайлОтклонение, 1);
		
	КонецЕсли;
	
	Если Не ПараметрыРасхождения.Свойство("МФайлОтклонение", МФайлОтклонение) Тогда
		
		МФайлОтклонение = СтрЗаменить(ДокументОтклонения, "_", Символы.ПС);
		МФайлОтклонение = СтрПолучитьСтроку(МФайлОтклонение, 1);
		
	КонецЕсли;
	
	//Грязный ини
	МассивФормПоиска	= Новый Массив;
	МассивФормПоиска.Добавить("Файл_" + ДокументОтклонения);
	МассивФормПоиска.Добавить("Файл_Шаблон");
	
	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПолучитьКонтекст_Расхождение", МассивФормПоиска);
	
	Если	ИниДокумента.Свойство("мФайл", ИниВычиткиРасхождения)
		И	ИниВычиткиРасхождения.Свойство(МФайлОтклонение, ИниВычиткиРасхождения) Тогда
		
		//Если есть совпадение с мФайл по отклонению, то берём только этот мФайл.
		ЗначениеИни = Новый Структура("мФайл", Новый Структура(МФайлОтклонение, ИниВычиткиРасхождения));
		
	Иначе
		
		//Считается вся ини для вычитки документа. Медленно и не рекомендуется
		ЗначениеИни = ИниДокумента;
		
	КонецЕсли;
	
	ОписаниеРасхождения = Новый Структура("СоставПакета, Документ1С, ЗначениеИни", ДопПараметры.СоставПакета, ПараметрыРасхождения.Документ1С, ЗначениеИни); 
	КонтекстРасхождение	= МодульКонтекст_Расхождение.ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, Новый Структура("Кэш", ГлавноеОкно.Кэш));
	
	Если Не КонтекстРасхождение.ДокументДанные.Свойство("мФайл") Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не рассчитан!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;
		
	КонецЕсли;
	
	ДопПараметры.Вставить("КонтекстРасхождение",	КонтекстРасхождение);
	ДопПараметры.Вставить("мФайлОтклонение",		мФайлОтклонение);
	ДопПараметры.Вставить("ФормыПоиска",			МассивФормПоиска);
	
	КонтекстРасхождение		= ДопПараметры.КонтекстРасхождение;
	мФайлОтклонение			= ДопПараметры.мФайлОтклонение;
	МассивФормПоиска		= ДопПараметры.ФормыПоиска;
	ОбработчикРезультата	= ДопПараметры.ОбработчикРезультата;
	ИмяИниДокумента			= ПараметрыРасхождения.ИмяИниДокумента;
	
	Если ПараметрыРасхождения.Свойство("ДокументДанные") Тогда
		КонтекстРасхождение.Вставить("ДокументДанные", ПараметрыРасхождения.ДокументДанные);
	КонецЕсли;
	
	//ПрочитатьДокумент
	МассивФормПоискаПрочитать	= Новый Массив;
	МассивФормПоискаПрочитать.Добавить("Документ_" + ИмяИниДокумента);
	МассивФормПоискаПрочитать.Добавить("Документ_Шаблон");

	МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПрочитатьДокумент", МассивФормПоискаПрочитать);
	Если	Не МодульКонтекст_Расхождение.ПрочитатьДокумент(ГлавноеОкно.Кэш, КонтекстРасхождение)
		Или	Не КонтекстРасхождение.СоставПакета.Вложение.Количество() Тогда
		
		Если КонтекстРасхождение.СоставПакета.Свойство("Ошибка") Тогда
			ИсключениеРасхождения = НовыйСбисИсключение(КонтекстРасхождение.СоставПакета.Ошибка, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС");
		Иначе	
			ИсключениеРасхождения = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не сформирован!");
		КонецЕсли;
		ВыполнитьСбисОписаниеОповещения(ИсключениеРасхождения, ДопПараметры.ОбработчикРезультата);
		Возврат;
		
	КонецЕсли;
	
	Вложение = ПараметрыРасхождения.Вложение;
	Если Вложение.Свойство("НоменклатураСопоставлена") И НЕ Вложение.НоменклатураСопоставлена Тогда
		 //Получить классы с вложения
		 //Вызвать форму обратного сопоставления
		ФормаОбратногоСопоставления = ПолучитьФормуОбработки("ФормаОбратногоСопоставления");
		ЗаголовокФормы = "Сопоставление номенклатуры по документу " + Строка(ПараметрыРасхождения.Документ1С);
		
		ПараметрыСопоставления = Новый Структура();
		ПараметрыСопоставления.Вставить("ДокументДанные",			КонтекстРасхождение.ДокументДанные);
		ПараметрыСопоставления.Вставить("Контрагент",				КонтекстРасхождение.Контрагент);
		ПараметрыСопоставления.Вставить("ЗаголовокФормы",			ЗаголовокФормы);
		ПараметрыСопоставления.Вставить("ИдентификаторДокумента",	СоставПакета_Получить(ДопПараметры.СоставПакета, "Идентификатор"));
		ПараметрыСопоставления.Вставить("ПараметрыРасхождения",		ПараметрыРасхождения);
		
		ОбработчикПосле = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления", МодульОбъектаКлиент(), ДопПараметры);
		ФормаОбратногоСопоставления.ОписаниеОповещенияОЗакрытии = ОбработчикПосле;
		ФормаОбратногоСопоставления.Показать(ПараметрыСопоставления);
		
		Возврат;

	КонецЕсли;	
	
	Если Не КонтекстРасхождение.ДокументДанные.Свойство("мФайл") Тогда
		
		ИсключениеОшибки = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не рассчитан!");
		ВыполнитьСбисОписаниеОповещения(ИсключениеОшибки, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	ДопПараметры.Вставить("КонтекстРасхождение",	КонтекстРасхождение);
	ДопПараметры.Вставить("мФайлОтклонение",		мФайлОтклонение);
	ДопПараметры.Вставить("ФормыПоиска",			МассивФормПоиска);
	
	ОбработчикПосле = НовыйСбисОписаниеОповещения("СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления", МодульОбъектаКлиент(), ДопПараметры);
	
	Если ПолучитьЗначениеФичи("РасширенныйФункционалСопоставленияНоменклатуры_ОбратноеСопоставление") Тогда
		
		ФормаОбратногоСопоставления = ПолучитьФормуОбработки("ФормаОбратногоСопоставления");
		ЗаголовокФормы = "Сопоставление номенклатуры по документу " + Строка(ПараметрыРасхождения.Документ1С);
		
		ПараметрыСопоставления = Новый Структура();
		ПараметрыСопоставления.Вставить("ДокументДанные",			КонтекстРасхождение.ДокументДанные);
		ПараметрыСопоставления.Вставить("Контрагент",				КонтекстРасхождение.Контрагент);
		ПараметрыСопоставления.Вставить("ЗаголовокФормы",			ЗаголовокФормы);
		ПараметрыСопоставления.Вставить("ИдентификаторДокумента",	СоставПакета_Получить(ДопПараметры.СоставПакета, "Идентификатор"));
		ПараметрыСопоставления.Вставить("ПараметрыРасхождения",		ПараметрыРасхождения); 
		ПараметрыСопоставления.Вставить("Вложение", 				Вложение);
		
		ФормаОбратногоСопоставления.ОписаниеОповещенияОЗакрытии = ОбработчикПосле;
		ФормаОбратногоСопоставления.Показать(ПараметрыСопоставления);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьСбисОписаниеОповещения(ПараметрыРасхождения, ОбработчикПосле);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасхождениеСДокументомСБИС_ПослеСопоставления(ПараметрыРасхождения, ДопПараметры) Экспорт
	
	// Всё закоментированное вынести на уровень выше
	
	Если ПараметрыРасхождения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонтекстРасхождение		= ДопПараметры.КонтекстРасхождение;
	мФайлОтклонение			= ДопПараметры.мФайлОтклонение;
	МассивФормПоиска		= ДопПараметры.ФормыПоиска;
	//ОбработчикРезультата	= ДопПараметры.ОбработчикРезультата;
	//ИмяИниДокумента			= ПараметрыРасхождения.ИмяИниДокумента;
	//
	//Если ПараметрыРасхождения.Свойство("ДокументДанные") Тогда
	//	КонтекстРасхождение.Вставить("ДокументДанные", ПараметрыРасхождения.ДокументДанные);
	//КонецЕсли;
	//
	////ПрочитатьДокумент
	//МассивФормПоискаПрочитать	= Новый Массив;
	//МассивФормПоискаПрочитать.Добавить("Документ_" + ИмяИниДокумента);
	//МассивФормПоискаПрочитать.Добавить("Документ_Шаблон");

	//МодульКонтекст_Расхождение = НайтиФункциюСеансаОбработки("ПрочитатьДокумент", МассивФормПоискаПрочитать);
	//Если	Не МодульКонтекст_Расхождение.ПрочитатьДокумент(ГлавноеОкно.Кэш, КонтекстРасхождение)
	//	Или	Не КонтекстРасхождение.СоставПакета.Вложение.Количество() Тогда
	//	
	//	Если КонтекстРасхождение.СоставПакета.Свойство("Ошибка") Тогда
	//		ИсключениеРасхождения = НовыйСбисИсключение(КонтекстРасхождение.СоставПакета.Ошибка, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС");
	//	Иначе	
	//		ИсключениеРасхождения = НовыйСбисИсключение(726, "МодульОбъектаКлиент.СформироватьРасхождениеСДокументомСБИС",,, "Документ по настройке " + ИмяИниДокумента + ".мФайл." + МФайлОтклонение + " не сформирован!");
	//	КонецЕсли;
	//	ВыполнитьСбисОписаниеОповещения(ИсключениеРасхождения, ДопПараметры.ОбработчикРезультата);
	//	Возврат;
	//	
	//КонецЕсли;
	
	//Если Вложение.Свойство("НоменклатураСопоставлена") И НЕ Вложение.НоменклатураСопоставлена Тогда
	//	 Получить классы с вложения
	//	 Вызвать форму обратного сопоставления                                             
	//КонецЕсли	
	
	// Аргументами вызова формы обратного расхождения нужно передавать Вложение основным аргументом
	
	
	СтруктураФайлаНаша				= ВложениеСБИС_Получить(КонтекстРасхождение.СоставПакета.Вложение[0], "СтруктураДокумента");
	МодульСформироватьРасхождение	= НайтиФункциюСеансаОбработки("СформироватьРасхождение", МассивФормПоиска);
	РасхождениеСформировано			= Ложь;
	
	Попытка
		
		ПараметрыСформироватьасхождение	= Новый Структура(
		"СтруктураФайлаКонтрагента,				ВложениеНаше, Пакет", 
		ПараметрыРасхождения.СтруктураФайла,	КонтекстРасхождение.СоставПакета.Вложение[0],  КонтекстРасхождение.СоставПакета);
		ВложениеРасхождение		= МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыСформироватьасхождение, ГлавноеОкно.Кэш);
		РасхождениеСформировано = Истина;
		
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		
		ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
		
	КонецПопытки;
	
	Если Не РасхождениеСформировано Тогда
		
		Попытка
			
			ВложениеРасхождение = МодульСформироватьРасхождение.СформироватьРасхождение(ПараметрыРасхождения.СтруктураФайла, СтруктураФайлаНаша, ГлавноеОкно.Кэш);
			ОшибкаФормирования	= Неопределено;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если Не Найти(ИнформацияОбОшибке.Описание, "Слишком много фактических параметров") Тогда
				//Вызов был, перегенерируем ошибку, если свалилось
				ОшибкаФормирования = НовыйСбисИсключение(ИнформацияОбОшибке, "МодульОбъектаКлиент.СформироватьРасхождениеНажатие");
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ОшибкаФормирования = Неопределено Тогда
		
		ВыполнитьСбисОписаниеОповещения(ОшибкаФормирования, ДопПараметры.ОбработчикРезультата);
		Возврат;

	КонецЕсли;

	ВыполнитьСбисОписаниеОповещения(ВложениеРасхождение, ДопПараметры.ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропатчитьВложенияНовымСопоставлением (ПакетыКОтправке, МестныйКэш) Экспорт		
	
	Для Каждого СоставПакета Из ПакетыКОтправке Цикл 
		
		КонтрагентДляСопоставления = СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета);
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл							
			
			Если Вложение.Свойство("КлассыСопоставленияНоменклатур") 
				И Вложение.НоменклатураСопоставлена Тогда
				ОбогащенныеДанныеНоменклатурыДляСопоставления = Вложение.КлассыСопоставленияНоменклатур;
			Иначе
				// 1. Получим ТаблДоки в исходном виде из вложений и сформируем от них набор классов сопоставления номенклатуры. По возможности попытаемся их обогатить через "Массовый поиск"
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				ФормыПоиска = Новый Массив;
				ФормыПоиска.Добавить("Файл_Шаблон");
				
				фрм = НайтиФункциюСеансаОбработки("СформироватьНаборСопоставленийНоменклатурыПоТабличнойЧасти", ФормыПоиска);
				
				ВложениеСБИС_Заполнить(Вложение, КонтрагентДляСопоставления, "КонтрагентДляСопоставления"); 
				Если НЕ фрм = Ложь Тогда  
					НаборСопоставлений = фрм.СформироватьНаборСопоставленийНоменклатурыПоТабличнойЧасти(Вложение, МестныйКэш);
				Иначе
					ВызватьСбисИсключение(, "МодульОбъектаКлиент.ПропатчитьВложенияНовымСопоставлением",,,"Не найдена форма работы с форматом документа");
				КонецЕсли;
				
				ПараметрыДляОбогащения = Новый Структура("Контрагент, Номенклатура, ПоискПо1С");
				
				Если Вложение.Свойство("ГоловнойКонтрагент") Тогда
					ИсточникЗапросаСопоставления = Вложение.ГоловнаяОрганизация;
				Иначе
					ИсточникЗапросаСопоставления = Вложение.Отправитель;
				КонецЕсли;                                                            
				
				ПараметрыДляОбогащения.Вставить("Контрагент",	ИсточникЗапросаСопоставления);
				ПараметрыДляОбогащения.Вставить("Номенклатура",	НаборСопоставлений);
				ПараметрыДляОбогащения.Вставить("ПоискПо1С",	Истина);
				
				СпособСопоставления = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("СпособСопоставленияНоменклатуры"); 
				Если СпособСопоставления = 1 Тогда
					ИмяФормыРаботыСНоменклатурой = "СопоставлениеНоменклатуры_ДБФ"; 
				Иначе
					ИмяФормыРаботыСНоменклатурой = "СопоставлениеНоменклатуры_СБИС";
				КонецЕсли;
				
				ФормаРаботыСНоменклатурой = ГлавноеОкно.сбисНайтиФормуФункции("НоменклатураПоставщика_МассовыйПоиск", ИмяФормыРаботыСНоменклатурой,"", МестныйКэш);
				
				ДопПараметры = Новый Структура("Кэш", МестныйКэш);
				Попытка
					ОбогащенныеДанныеНоменклатурыДляСопоставления =	ФормаРаботыСНоменклатурой.НоменклатураПоставщика_МассовыйПоиск(ПараметрыДляОбогащения, ДопПараметры); 
				Исключение          
					ОбогащенныеДанныеНоменклатурыДляСопоставления = НаборСопоставлений;
					МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), "ФормаРаботыСНоменклатурой.НоменклатураПоставщика_МассовыйПоиск");
				КонецПопытки;
				
				Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("РежимОтладки") Тогда
					
					ДанныеЛогирования = Новый Структура;
					ДанныеЛогирования.Вставить("Тип", 			"СопоставлениеНоменклатуры");
					ДанныеЛогирования.Вставить("Идентификатор", МодульОбъектаКлиент().ВложениеСБИС_Получить(Вложение, "Название"));
					ДанныеЛогирования.Вставить("Вызов", 		ОбогащенныеДанныеНоменклатурыДляСопоставления);
					ДанныеЛогирования.Вставить("Модуль", 		"Файл_Шаблон");
					
					МодульОбъектаКлиент().СохранитьОтладочныеДанныеСБИС(ДанныеЛогирования);
					
				КонецЕсли;
				
			КонецЕсли;   
			
			// 2. В полученных классах произведём пересчёт по коэффициенту единиц измерения
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			МестныйКэш.ОбщиеФункции.ПересчетПоКоэффициентамЕдиницИзмерения(ОбогащенныеДанныеНоменклатурыДляСопоставления);
			МестныйКэш.ОбщиеФункции.ПересчетНДСПоДаннымСтрокиСопоставления(ОбогащенныеДанныеНоменклатурыДляСопоставления);
			Вложение.Вставить("КлассыСопоставленияНоменклатур", ОбогащенныеДанныеНоменклатурыДляСопоставления); 
			НоменклатураСопоставлена = СопоставлениеНоменклатуры_ВсеНоменклатурыСопоставлены(НаборСопоставлений);
			Вложение.Вставить("НоменклатураСопоставлена", НоменклатураСопоставлена);
			
			// 3. Обновлённые данные выгрузим в ТаблДок и запишем его на вложение. ПутьТаблДок тоже подменим
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			ТаблДокНаОсновеКлассов = ВложениеСБИС_Выгрузить(Вложение);
			Вложение.СтруктураФайла.Файл.Документ.ТаблДок.Вставить("СтрТабл", ТаблДокНаОсновеКлассов);
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Функция СформироватьСписокДляВызоваРасхождений(СтрокиОтмеченные, ДопПараметры) Экспорт
	Перем Документ1ССсылка, УзелДокументОтклонения, ИмяДокумента;
	
	ИниКонфигурации		= ИниПоПараметрам("Конфигурация");
	МодульФункцийДок	= ГлобальныйКэш.ТекущийСеанс.Модули.ФункцииДокументов;	//Для рассчитать значение от ини выгрузки
	МодульШаблонДок		= ПолучитьФормуОбработки("Документ_Шаблон");			//Для рассчитать значени от ини загрузки
	РезультатСписок		= Новый СписокЗначений;
	СоставПакета		= ДопПараметры.СоставПакета;
	
	Для Каждого СтрокаТаблДок Из СтрокиОтмеченные Цикл
		
		Если Не СтрокаТаблДок.Документы1С.Количество() Тогда
			Продолжить;
		КонецЕсли;
		ВложениеСБИС		= СтрокаТаблДок.Вложение[0].Значение;
		Документ1ССсылка	= СтрокаТаблДок.Документы1С[0].Значение;
		
		СтруктураФайлаКонтрагента	= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");
		СтруктураИниВложения		= ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураИниФайла");

		Если	СтруктураИниВложения		= Неопределено
			Или	СтруктураФайлаКонтрагента	= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента	= МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1ССсылка, "Имя");
		
		Если СтруктураИниВложения.Свойство("ФайлНастроекРасхождения") Тогда
			
			Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СоставПакета, ИниКонфигурация");
			Контекст.Ини			= СтруктураИниВложения;
			Контекст.Документ		= Документ1ССсылка;
			Контекст.Переменные		= Новый Структура;
			Контекст.СтруктураФайла	= СтруктураФайлаКонтрагента;
			Контекст.СоставПакета	= СоставПакета;
			Контекст.ИниКонфигурация= ИниКонфигурации;
			
			ИмяИниДокумента = МодульШаблонДок.РассчитатьЗначение("ФайлНастроекРасхождения", Контекст);
			Если Не ИмяИниДокумента = Неопределено Тогда
				
				ИмяДокумента = ИмяИниДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИниДокумента = ИниПоПараметрам(ИмяДокумента);
		
		Если ИниДокумента = Неопределено Тогда
			
			//Нет файла настроек
			Продолжить;
			
		КонецЕсли;
		
		УзелДокументОтклонения = МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
		
		Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
			
			//Не указан файл настройки отклонения
			Продолжить;
			
		КонецЕсли;
		
		МассивОтклонений = СтрЗаменить(УзелДокументОтклонения, ",", Символы.ПС);
		
		Для НомерОтклонения = 1 По СтрЧислоСтрок(МассивОтклонений) Цикл
			
			ДокументОтклонения = СтрПолучитьСтроку(МассивОтклонений, НомерОтклонения);
			Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
				
				//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
				
			ИначеЕсли Лев(ДокументОтклонения, 14) = "АктРасхождение" Тогда
				
				//Костыль для акта расхождения - формируется без прямого указания ини отклонения
				
			Иначе
				
				ИниОтклонения = ИниПоПараметрам(ДокументОтклонения);   
				
				Если ИниОтклонения = Неопределено Тогда  
					
					ДокументОтклоненияСервер = "Загрузка_Входящий_" + ДокументОтклонения; 
					ИниОтклонения = ИниПоПараметрам(ДокументОтклоненияСервер); 
										
				КонецЕсли; 
				
				Если ИниОтклонения = Неопределено Тогда 
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
			ПараметрыСписок.Документ1С		= Документ1ССсылка;
			ПараметрыСписок.Вложение		= ВложениеСБИС;
			ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
			ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
			ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
			
			НазваниеРеестра = МодульФункцийДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);

			Если НазваниеРеестра = Неопределено Тогда
				
				НазваниеРеестра = ДокументОтклонения;
				
			КонецЕсли;
			
			РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;

	Если Документ1ССсылка = Неопределено Тогда	
		// нет сопоставление с вложениями - проверим сопоставление с пакетом
		МодульДокументаПоИд = НайтиФункциюСеансаОбработки("ДокументыПоИдПакета", ПолучитьЗначениеПараметраСбис("ИмяМодуляРаботыСоСтатусами"));
		
		Если МодульДокументаПоИд = Ложь Тогда
			Возврат РезультатСписок;
		КонецЕсли;
		
		СписокДокументы1С = МодульДокументаПоИд.ДокументыПоИдПакета(ДопПараметры.СоставПакета.Идентификатор, ИниКонфигурации);
		
		Если Не списокДокументы1С.Количество() Тогда
			Возврат РезультатСписок;
		КонецЕсли;	
		
		Для  Каждого Документ1С Из СписокДокументы1С Цикл
			ИмяДокумента = МодульФункцийДок.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
			ИниДокумента = ИниПоПараметрам(ИмяДокумента);
			
			Если ИниДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УзелДокументОтклонения		= МодульФункцийДок.РассчитатьЗначение("ДокументОтклонения", ИниДокумента);
			Если Не ЗначениеЗаполнено(УзелДокументОтклонения) Тогда
				
				//Не указан файл настройки отклонения
				Продолжить;
				
			КонецЕсли;
			
			МассивОтклонений			= СтрЗаменить(УзелДокументОтклонения, ",", Символы.ПС);
			СтруктураФайлаКонтрагента	= ПолучитьФормуОбработки("Файл_Шаблон").НовыйСтруктураФайла(ДопПараметры.СоставПакета);
			ВложениеСБИС				= НовыйВложениеСБИС();
			
			Для НомерОтклонения = 1 По СтрЧислоСтрок(МассивОтклонений) Цикл
				
				ДокументОтклонения = СтрПолучитьСтроку(МассивОтклонений, НомерОтклонения);
				Если Лев(ДокументОтклонения, 19) = "ПодтверждениеЗаказа" Тогда
					
					//Костыль для подтверждения заказа - формируется без прямого указания ини отклонения
					
				Иначе
					
					ИниОтклонения = ИниПоПараметрам(ДокументОтклонения); 
					
					Если ИниОтклонения = Неопределено Тогда  
						
						ДокументОтклоненияСервер = "Загрузка_Входящий_" + ДокументОтклонения; 
						ИниОтклонения = ИниПоПараметрам(ДокументОтклоненияСервер); 
											
					КонецЕсли; 
					
					Если ИниОтклонения = Неопределено Тогда 
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПараметрыСписок = Новый Структура("Документ1С, Вложение, СтруктураФайла, ИмяИниДокумента, ИмяОтклонения");
				ПараметрыСписок.Документ1С		= Документ1ССсылка;
				ПараметрыСписок.Вложение		= ВложениеСБИС;
				ПараметрыСписок.СтруктураФайла	= СтруктураФайлаКонтрагента;
				ПараметрыСписок.ИмяИниДокумента	= ИмяДокумента;
				ПараметрыСписок.ИмяОтклонения	= ДокументОтклонения;
				
				НазваниеРеестра = МодульФункцийДок.РассчитатьЗначение("Реестр1С_Название", ИниОтклонения);
				
				Если НазваниеРеестра = Неопределено Тогда
					
					НазваниеРеестра = ДокументОтклонения;
					
				КонецЕсли;
				
				РезультатСписок.Добавить(ПараметрыСписок, НазваниеРеестра);
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	Если Не РезультатСписок.Количество() Тогда
		Если		Не УзелДокументОтклонения = Неопределено Тогда
			
			СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + УзелДокументОтклонения;
			ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
			
		ИначеЕсли	Не ИмяДокумента = Неопределено Тогда
			
			Если ИниДокумента = Неопределено Тогда
				
				СообщениеДетализации = "Для формирования расхождения требуется подключить файл настроек: " + ИмяДокумента;
				ВызватьСбисИсключение(610, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			Иначе
				
				СообщениеДетализации = "Для формирования расхождения требуется задать опцию ""ДокументОтклонения"" в настройке " + ИмяДокумента + ".";
				ВызватьСбисИсключение(735, "МодульОбъектаКлиент.СформироватьСписокДляВызоваРасхождений",,, СообщениеДетализации);
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиенте
Процедура УдалитьУзелИзСтруктурыДанных(Текущийузел, Путь) Экспорт
	
	ПутьНовый = Новый СписокЗначений;
	ПутьНовый.ЗагрузитьЗначения(Путь.ВыгрузитьЗначения());
	Если ТипЗнч(Текущийузел) = Тип("Массив") Тогда
		
		Для Каждого СтрокаУзла Из Текущийузел Цикл
			
			УдалитьУзелИзСтруктурыДанных(СтрокаУзла, ПутьНовый);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Текущийузел) = Тип("Структура") Тогда
		
		КлючПути = ПутьНовый[0].Значение;
		Если ПутьНовый.Количество() = 1 Тогда
			
			Текущийузел.Удалить(КлючПути); 
			
		Иначе
			
			УзелПродолжить = Неопределено;
			ПутьНовый.Удалить(0);
			Если ТекущийУзел.Свойство(КлючПути, УзелПродолжить) Тогда
				
				УдалитьУзелИзСтруктурыДанных(УзелПродолжить, ПутьНовый);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ПодобратьСертификатДляДействияСДокументомСБИС(ПараметрыДействия, ДопПараметры=Неопределено) Экспорт
	
	Перем ПодходящийСертДок;

	Если ПараметрыДействия.Действие.Свойство("Сертификат") Тогда 
		Для Каждого Сертификат Из ПараметрыДействия.Действие.Сертификат Цикл
			Если СертификатУстановленЛокально(Сертификат) Тогда
				
				ПодходящийСертДок =  Сертификат;
				Прервать;
				
			ИначеЕсли Сертификат.Ключ.Тип = "Отложенный" 
				Или Сертификат.Ключ.Тип = "ОтложенныйСПодтверждением"
				Или Сертификат.Ключ.Тип = "Серверный" 
				И ПодходящийСертДок = Неопределено Тогда // Проверка на отложенный сертификат 
				
				ПодходящийСертДок = Сертификат;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПодходящийСертДок = Неопределено И ПараметрыДействия.СоставПакета.Свойство("НашаОрганизация") Тогда
		Отказ = Ложь;
		ИННОрг = ?(ПараметрыДействия.СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), ПараметрыДействия.СоставПакета.НашаОрганизация.СвЮЛ.ИНН,ПараметрыДействия.СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		filter = Новый Структура("ИНН", ИННОрг);
		Сертификаты = ГлобальныйКэш.ТекущийСеанс.Модули.Интеграция.ПолучитьСписокСертификатовПоФильтру(ГлавноеОкно.Кэш,filter,Отказ);
		Если Отказ Тогда
			ВызватьСбисИсключение(Сертификаты,"МодульОбъектаКлиент.ПодобратьСертификатДляДействияСДокументомСБИС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сертификаты) Тогда 
			ПодходящийСертДок = Сертификаты[0].Значение;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПодходящийСертДок;
	
КонецФункции

// Возвращает запрашиваемую форму при успехе, вызывает СбисИсключение при неудаче, Ложь, если формы нет.
//
// Параметры:
//  ИмяФормы	 - 	 - 
//  ДопПараметры - 	 - 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьФормуОбработки(СбисИмяФормы, ДопПараметры=Неопределено) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;

	Если Не ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("КэшироватьФорму",	КэшироватьПолученную);
		ДопПараметры.Свойство("ПолучитьНовую",		ПолучитьНовую);
		ДопПараметры.Свойство("Владелец",			СбисВладелецФормы);
		ДопПараметры.Свойство("ОбработкаОбъект",	СбисОбъект1С);
		ДопПараметры.Свойство("Параметры",			СбисПараметрыФормы);
	КонецЕсли;

	Если КэшироватьПолученную = Неопределено Тогда
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если ПолучитьНовую = Неопределено Тогда
		ПолучитьНовую = Ложь;
	КонецЕсли;

	Стандартная			= СбисОбъект1С = Неопределено;
	ПолноеИмяФормы		= ПолучитьФормуОбработки_ПолноеИмяФормы(СбисИмяФормы, СбисОбъект1С);
	БезопасноеИмяФормы	= ПолучитьФормуОбработки_БезопасноеИмяФормы(ПолноеИмяФормы, СбисОбъект1С);
	ЭтоГлавноеОкно		= СбисИмяФормы = "ФормаГлавноеОкно" И Стандартная;
	
	Если ЭтоГлавноеОкно Тогда
		
		//Если ГО установлено, то отдаём его. Иначе требуется получить.
		Если Не ГлавноеОкно = Неопределено Тогда
			
			Возврат ГлавноеОкно;
			
		КонецЕсли;
		
	ИначеЕсли	СбисВладелецФормы = Неопределено Тогда
		
		СбисВладелецФормы = ГлавноеОкно;
		
	КонецЕсли;

	//Взять форму из кэш
	Если Не ГлобальныйКэш = Неопределено Тогда
		Результат = ГлобальныйКэш.ТекущийСеанс.Формы.Получены.Получить(БезопасноеИмяФормы);
	КонецЕсли;
	
	Если		ПолучитьНовую
		Или		ЭтоГлавноеОкно
		Или		Результат = Неопределено Тогда
		
		ЕстьТакаяФормаВОбработках =		ЭтоГлавноеОкно		
								Или		Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(СбисИмяФормы)	<> Неопределено
								Или	Не	Стандартная И ГлобальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(СбисИмяФормы)		<> Неопределено;
								
		Если ЕстьТакаяФормаВОбработках Тогда
			
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				Если Стандартная Тогда
					
					СбисОбъект1С = ЭтотОбъект;
					
				КонецЕсли;
				
				Попытка
					
					Результат = СбисОбъект1С.ПолучитьФорму(СбисИмяФормы, СбисВладелецФормы);
					
				Исключение
					
					ОшибкаПолучения = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
					ВызватьИсключение СбисИсключение_Представление(ОшибкаПолучения);
					
				КонецПопытки;
				
				ПараметрыЗаполнитьНаФорму = Новый ФиксированнаяСтруктура("Параметры, ИмяФормы", СбисПараметрыФормы, СбисИмяФормы);
				ЗаполнитьЗначенияСвойств(Результат, ПараметрыЗаполнитьНаФорму);
				
			#Иначе
				
				Попытка
					
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					
					Если Результат = Неопределено Тогда
						
						ОшибкаПолучения = НовыйСбисИсключение(773, "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",,,"Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
						ВызватьИсключение СбисИсключение_Представление(ОшибкаПолучения);
						
					КонецЕсли;
					
				Исключение
					
					ОшибкаПолучения = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.СбисПолучитьФормуОбработки",773);
					ВызватьИсключение СбисИсключение_Представление(ОшибкаПолучения);
					
				КонецПопытки;
			#КонецЕсли
		Иначе
			
			//Нет такой формы
			Результат = Ложь;
			
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
		
	Иначе
		
		//Совместимость со старыми проверками
		Результат = Ложь;
		
	КонецЕсли;
	
	Если		ЭтоГлавноеОкно Тогда
		
		ОбновитьПараметрГлобальногоМодуля("ГлавноеОкно", Результат);
		
	ИначеЕсли	КэшироватьПолученную Тогда
		
		ПолучитьФормуОбработки_ЗакэшироватьФорму(Результат, БезопасноеИмяФормы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетОбработки(ИмяМакета, ДопПараметры) Экспорт 
	
	Возврат МодульОбъектаСервер().ПолучитьМакетОбработкиНаСервере(ИмяМакета, ДопПараметры);
	
КонецФункции

// Определяет, какую форму необходимо использовать при вызове определенной функции.
//  Возможные параметры:
//
// Параметры:
// 	СбисИмяФункции		- Строка		- Имя функции/порцедуры для поиска.
//	СбисОсновныеФормы	- Массив/Строка	- Набор имен вероятных модулей, где может быть функция
//  ДоПараметры			 - Структура	- 
// 		ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//		КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//		ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//		ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено.
// 
// Возвращаемое значение:
//  Форма - модуль, где может быть вызвана функция по имени
//
&НаКлиенте
Функция НайтиФункциюСеансаОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если ДопПараметры = Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		
	КонецЕсли;
	
	Попытка
		
		//Если тип массив, то ищем перебором в списке форм
		Если ТипЗнч(СбисОсновныеФормы) = Тип("Массив") Тогда
			
			Для Каждого СбисИмяФормы Из СбисОсновныеФормы Цикл
				
				Если Не ЗначениеЗаполнено(СбисИмяФормы) Тогда
					
					Продолжить;
					
				КонецЕсли;
					
				Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисИмяФормы, ДопПараметры);
				
				Если Не Результат = Ложь Тогда
					
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			//Передана одна форма для поиска или через разделитель "," строкой
			НаборПодходящихФорм = СтрЗаменить(СбисОсновныеФормы, ",", Символы.ПС);
			
			Для НомерСтрокиИмяФормы = 1 По СтрЧислоСтрок(НаборПодходящихФорм) Цикл 
				
				СбисИмяФормы = СокрЛП(СтрПолучитьСтроку(НаборПодходящихФорм, НомерСтрокиИмяФормы));
				Если ПустаяСтрока(СбисИмяФормы) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Результат = ПолучитьФормуДляФункцииОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры);
				
				Если Не Результат = Ложь Тогда
					
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение СбисИсключение_Представление(НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.НайтиФункциюСеансаОбработки"));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция - Возвращает дату в миллисекундах
//
// Параметры:
//  ДатаЗначение - Дата	 - Дата, которую надо получить в миллисекундах. Если не указано, то текущая.
// 
// Возвращаемое значение:
//  Число - миллисекунды
//
&НаКлиенте
Функция ПолучитьДатуВМиллисекундах(ДатаЗначение = Неопределено) Экспорт 

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если ДатаЗначение = Неопределено Тогда
		
			ДатаЗначение = ТекущаяДата();
			
		КонецЕсли;
		
	#Иначе
		
		Если ДатаЗначение = Неопределено Тогда
			
			Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
			
		КонецЕсли;
				
	#КонецЕсли
	
	Возврат (ДатаЗначение - '0001.01.01') * 1000 - 10800000;
	

КонецФункции
	
// Процедура записывает значение параметра по имени в кэш ГО и Глобальный кэш
//
// Параметры:
//  ИмяПараметраСбис		 - Строка					 - Ключ параметра
//  ЗначениеПараметраСбис	 - Произвольное значение	 - Значение параметра установить
//  ДопПараметры			 - Структура				 - 
//		Кэш			- экземпляр ЛокальныйКэш, куда установить параметр
//		Глобально	- Булево (Истина), определяет необходимость обновить параметр глобально, или изменение касается только класса ЛокальныйКэш
//		Параметры	- Стуркутра, доп. параметры для изменения
//		Адрес		- Строка, путь в кэше для установки параметра
//
&НаКлиенте
Процедура ИзменитьПараметрТекущегоСеанса(ИмяПараметраСбис, ЗначениеПараметраСбис, ДопПараметры = Неопределено) Экспорт
    Перем ЗначениеКэшПрописать, ЭтоГлобальныйПараметр, ДопПараметрыИзменения;
	Если	Не	ДопПараметры = Неопределено Тогда
		ДопПараметры.Свойство("Кэш",		ЗначениеКэшПрописать);
		ДопПараметры.Свойство("Глобально",	ЭтоГлобальныйПараметр);
		ДопПараметры.Свойство("Параметры",	ДопПараметрыИзменения);
	КонецЕсли;
	Если	ЗначениеКэшПрописать = Неопределено Тогда
		ЗначениеКэшПрописать = ГлавноеОкно.Кэш;
	КонецЕсли;
	Если	ЭтоГлобальныйПараметр = Неопределено Тогда
		ЭтоГлобальныйПараметр = Истина;
	КонецЕсли;
	
	Если		ИмяПараметраСбис = "ТипыПолейФильтра" Тогда
		
		ИзменитьПараметрТекущегоСеанса_УстановитьТипы(ЗначениеКэшПрописать,  ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения);
		
	ИначеЕсли	ИмяПараметраСбис = "ПоискМетаданных" Тогда
		
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.ОписаниеКонфигурации.ПоискМетаданные",	ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "ТипыПолей1С" Тогда
		
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.ОписаниеКонфигурации.ТипыПолей1С", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
		
	ИначеЕсли	ИмяПараметраСбис = "РеквизитыКодаНоменклатуры" Тогда
		
		ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать,
			"ТекущийСеанс.ОписаниеКонфигурации.РеквизитыКодаНоменклатуры",
			ЗначениеПараметраСбис,
			ЭтоГлобальныйПараметр);
		
	Иначе
		
		ТекущийСеансОбъект = ГлобальныйКэш.ТекущийСеанс;
		Если		ТекущийСеансОбъект.Свойство(ИмяПараметраСбис) Тогда
			
			ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
			
		ИначеЕсли	ТекущийСеансОбъект.Параметры.Свойство(ИмяПараметраСбис) Тогда
			
			ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Параметры." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

		ИначеЕсли	ТекущийСеансОбъект.Интерфейс.Свойство(ИмяПараметраСбис) Тогда
			
			ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Интерфейс." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

		ИначеЕсли	ТекущийСеансОбъект.ОписаниеКонфигурации.Свойство(ИмяПараметраСбис) Тогда

			ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.ОписаниеКонфигурации." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);

		ИначеЕсли	ТекущийСеансОбъект.Модули.Свойство(ИмяПараметраСбис) Тогда
			
			ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.Модули." + ИмяПараметраСбис, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрТекущегоСеанса_УстановитьТипы(ЗначениеКэшПрописать, ЗначениеПараметраСбис, ЭтоГлобальныйПараметр, ДопПараметрыИзменения)
    Перем ЗначениеТипа;
	
	Если ЗначениеПараметраСбис.Свойство("ДоговорыКонтрагентов", ЗначениеТипа) Тогда
		ЗначениеПараметраСбис.Вставить("Тип_Договор", ЗначениеТипа);
	КонецЕсли;
	Если ЗначениеПараметраСбис.Свойство("ФильтрКонтрагент", ЗначениеТипа) Тогда
		ЗначениеПараметраСбис.Вставить("Тип_Контрагент", ЗначениеТипа);
	КонецЕсли;
	ЗначениеПараметраСбис.Вставить("Тип_Дата",	Новый ОписаниеТипов("Дата"));
	ЗначениеПараметраСбис.Вставить("Тип_Номер",	Новый ОписаниеТипов("Строка"));
		
	ИзменитьПараметрСбис_ВКэш(ЗначениеКэшПрописать, "ТекущийСеанс.ОписаниеКонфигурации.ТипыПолейФильтра", ЗначениеПараметраСбис, ЭтоГлобальныйПараметр);
	
КонецПроцедуры

&НаКлиенте
Функция ТипСерверногоПараметра(ИмяПараметра)
	Если ИмяПараметра = "download_attachments_on_complete"
		Или ИмяПараметра = "download_attachments_on_update"
		Или ИмяПараметра = "exchange_method"
		Или ИмяПараметра = "run_docflow"
		Или ИмяПараметра = "send_invitations"
		Или ИмяПараметра = "send_type"
		Или ИмяПараметра = "web_interface" Тогда
		Возврат "ОбщаяНастройка";
	ИначеЕсли ИмяПараметра = "advanced_log"	Тогда
		Возврат "ПараметрПодключения";
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

// Процедура перебирает параметры и вызывает метод записи параметра
//
// Параметры:
//  ПараметрыСбис - Массив
//
&НаКлиенте
Процедура ИзменитьПараметрыСбисМассово(ПараметрыСбис) Экспорт
	Для Каждого Парам Из ПараметрыСбис Цикл
		ТипПараметра = ТипСерверногоПараметра(Парам.ИмяПараметра);
		Если ЗначениеЗаполнено(ТипПараметра) Тогда
			Если Парам.ДопПараметры = Неопределено Тогда
				Парам.ДопПараметры = Новый Структура;
			КонецЕсли;
			Парам.ДопПараметры.Вставить("Серверный", ТипПараметра);
		КонецЕсли;
		ИзменитьПараметрСбис(Парам.ИмяПараметра, Парам.ЗначениеПараметра, Парам.ДопПараметры);
	КонецЦикла;
	ИзменитьПараметрыСбисНаСервере(ПараметрыСбис);
КонецПроцедуры

Процедура ИзменитьПараметрыСбисНаСервере(ПараметрыСбис)
	ПараметрыПодключения = Новый Структура;
	ОбщиеНастройки = Новый Структура;
	Для Каждого Парам Из ПараметрыСбис Цикл
		Если Парам.ДопПараметры <> Неопределено Тогда
			ТипПараметра = ?(Парам.ДопПараметры.Свойство("Серверный"), Парам.ДопПараметры.Серверный, "");
			Если ТипПараметра = "ПараметрПодключения" Тогда
				ПараметрыПодключения.Вставить(Парам.ИмяПараметра, Парам.ЗначениеПараметра);	
			ИначеЕсли ТипПараметра = "ОбщаяНастройка" Тогда
				ОбщиеНастройки.Вставить(Парам.ИмяПараметра, Парам.ЗначениеПараметра);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьОбщиеНастройки(ОбщиеНастройки);
	ОбновитьНастройкиПодключения(ПараметрыПодключения);
КонецПроцедуры

#Область include_core_base_Настройки_ОбновитьНастройки
#КонецОбласти

#Область include_core_base_Helpers_ModuleGetters
#КонецОбласти

// Процедура - изменяет элемент формы обработки
//
// Параметры:
//  ОписаниеИзменитьВходящее - Структура	 - Что меняем - 
//		Форма - Форма/ФормаКлиентскогоПриложения, где меняем
//		Реквизит или Путь - Строка, что меняем
//  ИзмененияВходящие		 - Структура	 - что меняем
//		HTML - установить HTML на соответствующий элемент.
//
&НаКлиенте
Процедура ИзменитьЭлементФормыОбработки(ОписаниеИзменитьВходящее, ИзмененияВходящие)	Экспорт
	Перем МодульИзменить;
	
	Если	ТипЗнч(ОписаниеИзменитьВходящее) = Тип("Структура")
		Или	ТипЗнч(ОписаниеИзменитьВходящее) = Тип("ФиксированнаяСтруктура") Тогда
		
		МодульИзменить	= ОписаниеИзменитьВходящее.Форма;
		ИмяПоляИзменить = ОписаниеИзменитьВходящее.Реквизит;
		ЭлементИзменить	= ПолучитьЭлементФормыОбработки(МодульИзменить, ИмяПоляИзменить);
		
	Иначе
		
		ЭлементИзменить = ОписаниеИзменитьВходящее;
		ИмяПоляИзменить	= ЭлементИзменить.Имя;
		ИзмененияВходящие.Свойство("Форма", МодульИзменить);
		
	КонецЕсли;
	
	Если ИзмененияВходящие.Свойство("HTML") Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ПолучитьЭлементФормыОбработки(МодульИзменить, ИмяПоляИзменить).УстановитьТекст(ИзмененияВходящие.HTML);
			
		#Иначе
			
			МодульИзменить[ИмяПоляИзменить] = ИзмененияВходящие.HTML;
			
		#КонецЕсли
		
	ИначеЕсли ИзмененияВходящие.Свойство("УстановитьОграничениеТипа") Тогда
		
		ТипУстановить = ИзмененияВходящие.УстановитьОграничениеТипа;
		Если ТипУстановить = Неопределено Тогда
			
			// Снять ограничени типа
			ТипУстановить = Новый ОписаниеТипов(Неопределено);
			
		КонецЕсли;

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Если ТипЗнч(ЭлементИзменить) = Тип("КолонкаТабличногоПоля") Тогда
				
				ЭлементИзменить = ЭлементИзменить.ЭлементУправления;

			КонецЕсли;	
			
		#КонецЕсли
		
		ЭлементИзменить.ОграничениеТипа = ТипУстановить;
		
	ИначеЕсли ИзмененияВходящие.Свойство("СписокВыбора") Тогда
		
		ЭлементИзменить.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из ИзмененияВходящие.СписокВыбора Цикл
			ЭлементИзменить.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

//Процедура Получает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Функция ПолучитьЗначениеПараметраСбис(ИмяПараметраСбис, ДопПараметры = Неопределено) Экспорт
	Перем ЗначениеПараметраСбис, ИсточникПроверкиПараметра;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ЛокальныйКэш", ИсточникПроверкиПараметра) Тогда
		
		ИсточникПроверкиПараметра = ГлобальныйКэш;
		
	КонецЕсли;
	
	Если ИсточникПроверкиПараметра = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если		Не	ИсточникПроверкиПараметра.Парам.Свойство					(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.Свойство						(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.СБИС.ПараметрыИнтеграции.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Параметры.Свойство	(ИмяПараметраСбис, ЗначениеПараметраСбис)
			И	Не	ИсточникПроверкиПараметра.ТекущийСеанс.Модули.Свойство		(ИмяПараметраСбис, ЗначениеПараметраСбис) Тогда
			
		Возврат Неопределено;
		
	КонецЕсли;
		
	Возврат ЗначениеПараметраСбис;
	
КонецФункции

//Процедура Получает значение параметра по имени в кэш ГО и Глобальный кэш
&НаКлиенте
Функция ПолучитьЗначениеПараметраТекущегоСеанса(ИмяПараметраСеанса, ДопПараметры = Неопределено) Экспорт
	Перем ЗначениеПараметраСбис, ИсточникПроверкиПараметра;
	
	Если		ДопПараметры = Неопределено
		Или	Не	ДопПараметры.Свойство("ТекущийСеанс", ИсточникПроверкиПараметра) Тогда
		
		ИсточникПроверкиПараметра = ГлобальныйКэш.ТекущийСеанс;
		
	КонецЕсли;

	РезультатПоиска = ИсточникПроверкиПараметра.Свойство						(ИмяПараметраСеанса, ЗначениеПараметраСбис)	
		ИЛИ	ИсточникПроверкиПараметра.Интерфейс.Свойство						(ИмяПараметраСеанса, ЗначениеПараметраСбис)
		ИЛИ	ИсточникПроверкиПараметра.Модули.Свойство							(ИмяПараметраСеанса, ЗначениеПараметраСбис)
		ИЛИ	ИсточникПроверкиПараметра.Параметры.Свойство						(ИмяПараметраСеанса, ЗначениеПараметраСбис)
		ИЛИ	ИсточникПроверкиПараметра.ОписаниеКонфигурации.Свойство				(ИмяПараметраСеанса, ЗначениеПараметраСбис)
		ИЛИ	ИсточникПроверкиПараметра.ОписаниеКонфигурации.ТипыПолей1С.Свойство	(ИмяПараметраСеанса, ЗначениеПараметраСбис);
	
		
	Возврат ЗначениеПараметраСбис;
	
КонецФункции

//Функция - возвращает элемент формы по родителю и пути
&НаКлиенте
Функция ПолучитьЭлементФормыОбработки(ОтЭлемента, ПутьКЭлементу) Экспорт
	Перем лИмяТаблицы;
	
	ИмяЭлементаРазбивка = СтрЗаменить(ПутьКЭлементу, ".", Символы.ПС);
	Результат = ОтЭлемента; 
	
	ИсточникиПроверкиОбщие = Новый Массив;
	Для СчетчикРазбивки = 1 По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;
		
		КлючПути = СокрЛП(СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки));
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если		ТипЗнч(Результат) = Тип("Форма") Тогда
				
				ИсточникиПроверкиОбщие.Добавить(Результат.ЭлементыФормы);
				Результат = Неопределено;
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				// В случае страницы, поиск должен быть от формы
				
				Результат = Неопределено;
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				
				Результат = Результат["Колонки"];
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("Панель") Тогда
				
				Результат = Результат["Страницы"];
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("КоманднаяПанель")
					Или	ТипЗнч(Результат) = Тип("Кнопка") Тогда 
					
				Результат = Результат.Кнопки; 
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("ДеревоЗначений")
					Или	ТипЗнч(Результат) = Тип("СтрокаДереваЗначений") Тогда
					
				Результат = Результат[КлючПути];
					
			Иначе
				
				// неизвестный элемент, может быть поиск от другого родительского элемента
				Результат = Неопределено; 
				
			КонецЕсли;
		#Иначе
			
			Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
				
				Результат = Результат.Элементы; 
				
			ИначеЕсли	ТипЗнч(Результат) = Тип("ДанныеФормыДерево")
			    Или		ТипЗнч(Результат) = Тип("ДанныеФормыЭлементДерева") Тогда
				
				Результат = Результат.ПолучитьЭлементы();
				Продолжить;
				
			ИначеЕсли КлючПути = "Надпись" Тогда
				
				Продолжить;
				
			Иначе
				
				Результат = Результат["ПодчиненныеЭлементы"];
				
			КонецЕсли;
		#КонецЕсли
		
		Если КлючПути = "Страницы" Или КлючПути = "Строки" Тогда //1189641556
			
			Продолжить;
			
		КонецЕсли;
		
		ИменаДляПоиска = Новый Массив;
		ИменаДляПоиска.Добавить(КлючПути);
        Если	Не	лИмяТаблицы = Неопределено
            И	Не	Лев(КлючПути, СтрДлина(лИмяТаблицы)) = лИмяТаблицы Тогда
            // Это колонка ТЧ. В пути может уже быть прописано название колонки, либо надо поискать с дополнением имени ТЧ к колонке
			// Пример: Таблица_РеестрДокументов.ТекущийЭтап = Таблица_РеестрДокументов.Таблица_РеестрДокументовТекущийЭтап
            ИменаДляПоиска.Добавить(ОпределитьПолноеИмяКолонки(лИмяТаблицы, КлючПути));
			
		ИначеЕсли КлючПути = "Надпись" Тогда
			
			// Требуется поле надписи элемента.
			// У элемента на ОФ должно быть одноименное поле Надпись{ПолеЭлемента}. У УФ сам элемент им и является
			// Пример: Контент.Загрузка.Документ1С.Надпись
			ИменаДляПоиска.Вставить(0, КлючПути + СокрЛП(СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки - 1)));
			
		КонецЕсли;
		
		ПараметрыНайти = Новый СписокЗначений;
		ПараметрыНайти.ЗагрузитьЗначения(ИсточникиПроверкиОбщие);
		Если Не Результат = Неопределено Тогда
			ПараметрыНайти.Вставить(0, Результат);
		КонецЕсли;
		
		Результат = ПолучитьЭлементФормыОбработки_Найти(ПараметрыНайти, ИменаДляПоиска);

        лИмяТаблицы = Неопределено;
		
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			Если ТипЗнч(Результат) = Тип("ТаблицаФормы") Тогда
					
	            //Для хардкодных таблиц на УФ требуется дописать имя ТЧ в колонку
	            лИмяТаблицы = КлючПути;
				
			КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементФормыОбработки_Найти(ИсточникиПоиска, ИменаПоиска) Экспорт
	Перем Результат;
	
	Для Каждого ИмяПоиска Из ИменаПоиска Цикл
		
		Для Каждого ИсточникПоиска Из ИсточникиПоиска Цикл
			
			Результат = ИсточникПоиска.Значение.Найти(ИмяПоиска);
			
			Если Не Результат = Неопределено Тогда
				
				Возврат Результат;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - формирует двоичные данные по имени файла в папке на клиенте
//
// Параметры:
//  ПутьКФайлуКлиент - Строка	 - полный путь к файлу, ДД которого требуется получить
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные ДД файла по пути. Вызывает СБИС исключение при ошибке
//
&НаКлиенте
Функция ПолучитьBASE64ПоИмениФайлаКлиент(ПутьКФайлуКлиент) Экспорт
	
	# Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФайлыПреобразовать = Новый Массив;
		Попытка
			
			ФайлыПреобразовать.Добавить(Новый ДвоичныеДанные(ПутьКФайлуКлиент));
			Возврат ФайлыВBASE64Сервер(ФайлыПреобразовать)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# Иначе
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлуКлиент));
		ПомещенныеФайлы = Новый Массив;
		
		Попытка
			
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ,Ложь);
			Возврат ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеФайлы)[0];
			
		Исключение
			
			ОшибкаПреобразования = НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.ПолучитьBASE64ПоИмениФайлаКлиент");
			ВызватьИсключение (СбисИсключение_Представление(ОшибкаПреобразования));
			
		КонецПопытки;
		
	# КонецЕсли
	
КонецФункции

// Функция - XMLИз base64
//
// Параметры:
//  ДвоичныеДанныеBase64 - ДвоичныеДанные	- строка ДД для перевода в строку XML
//  ДопПараметры		 - Произвольный	 	- расширение
// 
// Возвращаемое значение:
//  Строка - преобразованное значение
//
&НаКлиенте
Функция XMLСтрокаИзBase64(ДвоичныеДанныеBase64, ДопПараметры = Неопределено) Экспорт
	
	ИмяВремФайла = ПолучитьЗначениеПараметраСбис("ФункцииДокументов").СбисПолучитьИмяВременногоФайлаКлиент("xml");
	ДвоичныеДанныеФайла = Base64Значение(ДвоичныеДанныеBase64);
	ДвоичныеДанныеФайла.Записать(ИмяВремФайла);
	Текст = Новый ЧтениеТекста(ИмяВремФайла);
	
	XMLФайла = Текст.Прочитать();
	Если Найти(XMLФайла, "encoding=""UTF-8""") Тогда
		Текст = Новый ЧтениеТекста(ИмяВремФайла, КодировкаТекста.UTF8);
		XMLФайла = Текст.Прочитать();
	КонецЕсли;
	
	Попытка
		// для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
		Если Лев(XMLФайла,4) = "%PDF" Тогда 
			
			Возврат "";
			
		КонецЕсли;
		
	Исключение
		
		Возврат "";
		
	КонецПопытки;
	
	Возврат XMLФайла;
	
КонецФункции

&НаСервере
Функция ДвоичныеДанныеВBASE64ВызовСервера(ПомещенныеНаСерверФайлы)
	
	Возврат МодульОбъектаСервер().ФайлыВBASE64Сервер(ПомещенныеНаСерверФайлы);
	
КонецФункции

&НаКлиенте
Функция ОпределитьПолноеИмяКолонки(ТчИмя, КолонкаИмя)
    
    Перем ИмяКолонкиШаблон;
    Если Не ГлобальныйКэш.ТекущийСеанс.Интерфейс.Свойство("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон) Тогда
        ИмяКолонкиШаблон = "{ИмяКолонки}";
        Если ГлобальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
            ИмяКолонкиШаблон = "{ТЧ}" + ИмяКолонкиШаблон;
        КонецЕсли;
        ГлобальныйКэш.ТекущийСеанс.Интерфейс.Вставить("ИмяРеквзитаКолонок",    ИмяКолонкиШаблон);
    КонецЕсли;

    Возврат СтрЗаменить(СтрЗаменить(ИмяКолонкиШаблон, "{ИмяКолонки}", КолонкаИмя), "{ТЧ}", ТчИмя);
    
КонецФункции

// Функция отдаёт параметры сервера из его полного представления - код и представление для интерфейса
// Параметры:
//  СбисАдресСервера - online.sbis.ru
// 
// Возвращаемое значение:
//  Структура - параметры сервиса СБИС
//
&НаКлиенте
Функция ПараметрыАдресаСервераСБИС(СбисАдресСервера) Экспорт
	
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	Если Сред(СбисПредставлениеСервера, 1, 4) = "fix-" Тогда
		КодСервиса = "fix";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 5) = "test-" Тогда
		КодСервиса = "test";
	ИначеЕсли Сред(СбисПредставлениеСервера, 1, 6) = "online" Тогда
		КодСервиса = "";
	Иначе
		КодСервиса = "undefine";
	КонецЕсли;
	Возврат Новый Структура("КодСервиса, ПредставлениеСервера", КодСервиса, СбисПредставлениеСервера)
	
КонецФункции

&НаКлиенте
Процедура СбисУстановитьБлокировкуФормы(Форма, ПараметрыБлокировкиУстановить) Экспорт
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдКоннекшена(Отказ = Ложь) Экспорт

	Если Не ПолучитьЗначениеПараметраСбис("ДоступныСерверныеНастройки") Тогда
		// Если интеграция каталог
		Возврат Неопределено;
	КонецЕсли;
	Если ГлобальныйКэш.КэшНастроек.Свойство("ВыбранныеНастройки")
		И ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Свойство("Идентификатор") Тогда
		
		Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
	Иначе
		
		РезультатПодключения = ГлобальныйКэш.ТекущийСеанс.Модули.Настройки.СбисПолучитьНастройкиСБИС(ГлавноеОкно.Кэш, Отказ);
		
		Если Отказ = Ложь Тогда
			Возврат ГлобальныйКэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
		Иначе
			Возврат РезультатПодключения;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьИдКоннекшена()

// Проверяет строку на GUID
//
// Параметры:
//  Значение  - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево   - Результат провеки
//
&НаКлиенте
Функция ЭтоУникальныйИдентификатор(Знач Значение) Экспорт
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Позиция = 1 По СтрДлина(Значение) Цикл

		НарушеноУсловиеУИ = Сред(Шаблон, Позиция, 1) = "X" И НЕ Найти("0123456789ABCDEFabcdef", Сред(Значение, Позиция, 1)) // 0..9, a..f, A..F
						Или Сред(Шаблон, Позиция, 1) = "-" И Сред(Значение, Позиция, 1) <> "-";								// -
		
		Если НарушеноУсловиеУИ Тогда
				Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Разбор параметрок сбис в виде строки фората
// ключ=>значение,...
//
// Параметры:
//   СтрокаПараметров - Строка - Строка параметров
//
// Возвращаемое значение:
//   Соответствие - Параметры в виде соответствия
&НаКлиенте
Функция РазобратьСтрокуПараметровСбис(СтрокаПараметров) Экспорт 

	СтрокаПараметровПС = СтрЗаменить(СтрокаПараметров, ",", Символы.ПС);
	ПараметрыСоответствием = Новый Соответствие;
	
	Для НомерПараметра = 1 По СтрЧислоСтрок(СтрокаПараметровПС) Цикл

		КлючЗначение = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаПараметровПС, НомерПараметра)), "=>", Символы.ПС);
		Ключ = СтрПолучитьСтроку(КлючЗначение, 1);
		Значение = СтрПолучитьСтроку(КлючЗначение, 2);
		ПараметрыСоответствием.Вставить(Сред(Ключ, 2, СтрДлина(Ключ) - 2), Сред(Значение, 2, СтрДлина(Значение) - 2));

	КонецЦикла;
	
	Возврат ПараметрыСоответствием;

КонецФункции

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_ТипыИМетаданные
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_ИзменитьПараметрсбис
#КонецОбласти
#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_ПолучитьФормуОбработки 
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_НайтиФункциюСеансаОбработки 
#КонецОбласти
 
#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСФичами
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_Интерфейс
#КонецОбласти

#Область include_core2_vo2_Модуль_МодульОбъектаКлиент_ОбщиеФункцииИПроцедуры_РаботаСИниИXSLT
#КонецОбласти

