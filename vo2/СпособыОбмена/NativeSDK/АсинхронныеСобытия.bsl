
&НаКлиенте
Процедура WriteDocumentEx_Before_Call(РезультатВызова, ПараметрыВызова) Экспорт
	ПараметрыВызова.Кэш.РезультатОтправки.ДетализацияОтправки.Вставить(ПараметрыВызова.Команда.Идентификатор, Новый Структура("ДатНач, ВремяНачала, ВремяВыполнения",ПараметрыВызова.Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(ПараметрыВызова.Кэш), ТекущаяДата()));
КонецПроцедуры	
	
&НаКлиенте
Процедура WriteDocumentEx_After_Call(РезультатВызова, ПараметрыВызова) Экспорт
	//Если ПараметрыВызова.Отказ Тогда
	//	//Тут ошибка. 
	//	Возврат;
	//КонецЕсли;
	//Если всё ок, то результатом вызова будет QueryID	
	Кэш = ПараметрыВызова.Кэш;
	Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, РезультатВызова,		ПараметрыВызова.СоставПакета);
	Кэш.РезультатОтправки.СформированныеПакеты.Вставить(РезультатВызова,	ПараметрыВызова.СоставПакета); // складываем сюда пакеты, чтобы можно было переотправить. После получения ответов - чистим, чтобы не переполнилась память
КонецПроцедуры

//Обработка события успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Кэш;
	КомандаВызова = ПараметрыОбработки.Команда;
	ИдентификаторОтправки = КомандаВызова.Идентификатор;
	
	Если Кэш.РезультатОтправки.Свойство("НефатальныеОшибкиПодряд") Тогда
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
	КонецЕсли;
	
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ответы.Вставить(ИдентификаторОтправки, РезультатВызова.Result);
	Кэш.РезультатОтправки.СформированныеПакеты.Удалить(ИдентификаторОтправки);
	
	Отправка_ВремяОтправки(Кэш, ИдентификаторОтправки);
КонецПроцедуры

//Обработка события ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш				= ПараметрыОбработки.Кэш;
	КомандаВызова	= ПараметрыОбработки.Команда;
	
	Отправка_ОбработатьОшибкуОтправки(Кэш, КомандаВызова, Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteDocumentEx2_Error"));
	Отправка_ВремяОтправки(Кэш, КомандаВызова.Идентификатор);
КонецПроцедуры

//Обработка события разрыва соединения с плагином
&НаКлиенте
Процедура Disconnected(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	Кэш.СБИС.ОбменВключен = Ложь;
	Если Кэш.Свойство("РезультатОтправки") Тогда
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", РезультатВызова.Данные.details);
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатВызова.Данные);
	//Сообщить("Disconnect");
КонецПроцедуры

//Обработка события разрыва соединения с плагином
&НаКлиенте
Процедура UnValidToken(РезультатВызова, ПараметрыОбработки) Экспорт
    
	Кэш				= ПараметрыОбработки.Основные.Кэш;
	ПотокиЗапущены	= Новый Массив;
	Для Каждого Сбис3КомандОжидается Из Кэш.СБИС.ДанныеИнтеграции.Потоки Цикл
		ПотокиЗапущены.Добавить(Сбис3КомандОжидается.Ключ);
	КонецЦикла;
	Для Каждого ПотокЗапущенИд ИЗ ПотокиЗапущены Цикл
		СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ",ПотокЗапущенИд, РезультатВызова.Тип, РезультатВызова.Данные));
	КонецЦикла;
	
КонецПроцедуры

