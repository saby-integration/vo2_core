
////////////////////////////////////////////////////
/////////////Асинхронные События////////////////////
////////////////////////////////////////////////////

//Обработка события прогресса отправки пакета
&НаКлиенте
Процедура ExtSdk2AsyncProgress(РезультатВызова, ПараметрыОбработки) Экспорт
	//Тут происходит ничего
КонецПроцедуры

&НаКлиенте
Процедура UnValidToken(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Ложь);
	Кэш.ТекущийСеанс.РасчитанныеЗначения.Вставить("ОшибкаНаФормеАвторизации", РезультатВызова.data.message);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	Кэш.ОбщиеФункции.СбисВызватьАвторизацию(Кэш, СбисДополнительныеПараметры);
КонецПроцедуры

//Обработка успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	WriteDocumentEx_MessageПослеОбработки(РезультатВызова.Result, ПараметрыОбработки);
КонецПроцедуры

//Обработка ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	Error = Неопределено;
	Если НЕ РезультатВызова.Свойство("Error", Error) Тогда
		Error = РезультатВызова;	
	КонецЕсли;
	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	WriteDocumentEx_ErrorПослеОбработки(Error, ПараметрыОбработки);
КонецПроцедуры

//Обработка временных файлов, сгенерированных в процессе отправки
&НаКлиенте
Процедура WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки)
	Попытка
		ВложенияОбработаны = ПараметрыОбработки.Команда.Параметры.Document.Вложение;
		Для Каждого ВложениеПакета Из ВложенияОбработаны Цикл
			КлючВременногоФайла = ВложениеПакета;
			Если	Не КлючВременногоФайла.Свойство("Файл",			КлючВременногоФайла)
				Или Не КлючВременногоФайла.Свойство("ПутьКФайлу",	КлючВременногоФайла) Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл = ПараметрыОбработки.Кэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(КлючВременногоФайла);
			Если СбисВременныйФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл.Освободить = Истина;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	ПараметрыОбработки.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_Before_Call(РезультатВызова, ПараметрыВызова) Экспорт
	ПараметрыВызова.Кэш.РезультатОтправки.ДетализацияОтправки.Вставить(ПараметрыВызова.Команда.Идентификатор, Новый Структура("ДатНач, ВремяНачала, ВремяВыполнения",ПараметрыВызова.Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(ПараметрыВызова.Кэш), ТекущаяДата()));
КонецПроцедуры	
	
&НаКлиенте
Процедура WriteDocumentEx_After_Call(РезультатВызова, ПараметрыВызова) Экспорт
	Если ПараметрыВызова.Отказ Тогда
		//Тут ошибка. 
		Возврат;
	КонецЕсли;
	//Если всё ок, то результатом вызова будет QueryID	
	Кэш = ПараметрыВызова.Кэш;
	Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, РезультатВызова, ПараметрыВызова.СоставПакета);
	Кэш.РезультатОтправки.СформированныеПакеты.Вставить(РезультатВызова, ПараметрыВызова.СоставПакета); // складываем сюда пакеты, чтобы можно было переотправить. После получения ответов - чистим, чтобы не переполнилась память
КонецПроцедуры

//Обработка события успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_MessageПослеОбработки(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Кэш;
	КомандаВызова = ПараметрыОбработки.Команда;
	ИдентификаторОтправки = КомандаВызова.Идентификатор;
	
	Если Кэш.РезультатОтправки.Свойство("НефатальныеОшибкиПодряд") Тогда
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
	КонецЕсли;
	
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ответы.Вставить(ИдентификаторОтправки, РезультатВызова);
	Кэш.РезультатОтправки.СформированныеПакеты.Удалить(ИдентификаторОтправки);
	
	Отправка_ВремяОтправки(Кэш, ИдентификаторОтправки);
КонецПроцедуры

//Обработка события ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_ErrorПослеОбработки(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш				= ПараметрыОбработки.Кэш;
	КомандаВызова	= ПараметрыОбработки.Команда;
	
	Отправка_ОбработатьОшибкуОтправки(Кэш, КомандаВызова, Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteDocumentEx2_Error"));
	Отправка_ВремяОтправки(Кэш, КомандаВызова.Идентификатор);
КонецПроцедуры

//Обработчик подписки события сбисДиска ошибка
&НаКлиенте
Процедура UploadToSbisDiskFatalErrorEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	ИдентификаторОтправки = РезультатВызова.data.data.UploadGuid;
	КомандаОтправки = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ", ИдентификаторОтправки,"ERROR",РезультатВызова));
	//Возможно, просрочена отправка, или пришло раньше, чем ожидали.
	Если КомандаОтправки = Неопределено Тогда
		Если	(		ПараметрыОбработки.Дополнительные = Неопределено
				Или Не	ПараметрыОбработки.Дополнительные.ПовторныйВызов) Тогда
			//Это первый раз, когда ловится событие. Добавим в необработанные. Иначе - это повторный вызов вероятно пропущенных событий для снятого потока
			СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтправки, РезультатВызова);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ИсключениеОтПлагина = Кэш.ОбщиеФункции.СбисИсключение(,"UploadToSbisDiskFatalErrorEvent", 400, РезультатВызова.data.data.Message, РезультатВызова.data.data.Message, РезультатВызова.data);
	//TODO40 сделать эту ошибкой нефатальной после завершения синхронизации авторизации в плагине
	Если РезультатВызова.data.data.Свойство("StatusCode") Тогда
		Если		РезультатВызова.data.data.StatusCode = 401 Тогда
			ИсключениеОтПлагина.details = "Авторизуйтесь в СБИС Плагине и попробуйте повторить операцию.";
		ИначеЕсли	РезультатВызова.data.data.Message = "" Тогда
			ИсключениеОтПлагина = Кэш.ОбщиеФункции.СбисИсключение(,"UploadToSbisDiskFatalErrorEvent",400,,"Неизвестная ошибка событие СБИС плагина.",РезультатВызова.data);
		КонецЕсли;
	КонецЕсли;
	СБИСПлагин_ВызватьСобытие(Кэш, ИсключениеОтПлагина, КомандаОтправки, "UploadToSbisDiskFatalErrorEvent");	
КонецПроцедуры	

//Обработчик подписки события сбисДиска успешное завершение закачки
&НаКлиенте
Процедура UploadToSbisDiskCompleteEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	ИдентификаторОтправки = РезультатВызова.data.data.UploadGuid;
	КомандаОтправки = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Ответ", ИдентификаторОтправки,РезультатВызова));
	//Возможно, просрочена отправка, или пришло раньше, чем ожидали. Добавим в список ожидающих подготовки
	Если КомандаОтправки = Неопределено Тогда
		Если	(		ПараметрыОбработки.Дополнительные = Неопределено
				Или Не	ПараметрыОбработки.Дополнительные.ПовторныйВызов) Тогда
			//Это первый раз, когда ловится событие. Добавим в необработанные. Иначе - это повторный вызов вероятно пропущенных событий для снятого потока
			СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтправки, РезультатВызова);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//Зовём событие команды Отправка_UploadToSbisDiskCompleteEvent
	СБИСПлагин_ВызватьСобытие(Кэш, РезультатВызова.data, КомандаОтправки, "UploadToSbisDiskCompleteEvent");
КонецПроцедуры

//Обработчик подписки события сбисДиска успешное завершение закачки кусочка файла
&НаКлиенте
Процедура UploadedChunkEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	//Сообщить(РезультатВызова.data.data.uploadName + " " + РезультатВызова.data.data.uploadPercent);
	//Чтобы событие не считалось неизвестным. Пока нет необходимости что-то делать ещё с этим.
КонецПроцедуры

//Обработка события разрыва соединения с плагином
&НаКлиенте
Процедура Disconnected(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	Кэш.СБИС.ОбменВключен = Ложь;
	Если Кэш.Свойство("РезультатОтправки") Тогда
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", РезультатВызова.data.details);
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатВызова.data);
	//Сообщить("Disconnect");
КонецПроцедуры

