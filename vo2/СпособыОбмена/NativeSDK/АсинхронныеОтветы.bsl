
// Функция - возвращает пул накопленных ответов
//
// Параметры:
//  КэшСБИС	 - КэшСБИС	 - объекты для обработки
// 
// Возвращаемое значение:
//  Массив - накопленные ответы, нуждающиеся в обработке
//
&НаКлиенте
Функция СБИС_ПрочитатьПулОтветов(КэшСБИС) Экспорт
	
	Попытка
		СтрокаXML	= КэшСБИС.ДанныеИнтеграции.Объекты.Компонента.ReadEvents();
		СбисСобытия	= СБИС_РазобратьОтвет(СтрокаXML);
	Исключение
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнформацияОбОшибке(), МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИС_ПрочитатьПулОтветов",773)
	КонецПопытки; 
	   
	//СбисСобытия = XmlSerializer_Decode(Кэш, СтрокаXML, Отказ);
   
	////Временный костыль на проброску необработанных ответов при вызове ExtSDK в промежутке в отправке, чтобы не терять ответы.
	//Если КэшСБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
	//	Для Каждого КлючИЗначениеСобытия Из КэшСБИС.ДанныеИнтеграции.НеизвестныеОтветы Цикл
	//		Для Каждого ОтветЗначение Из КлючИЗначениеСобытия.Значение Цикл
	//			СбисСобытия.
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	
	Возврат СбисСобытия; 
	
КонецФункции

// Разбор сообщения от плагина
//
// Параметры:
//  Сбис3СобытиеОтвет	- Сообщение из пула ответов	 - 
// 
// Возвращаемое значение:
// АсинхронноеСбисСобытие  - 
//
&НаКлиенте
Функция СБИС_ОбработатьОтвет(Сбис3СобытиеОтвет, ДопПараметры=Неопределено) Экспорт
	
    ОбработанноеСобытие = СБИС_ОбработатьСобытиеОтвета(Сбис3СобытиеОтвет, ДопПараметры);
	Возврат МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(ОбработанноеСобытие.queryID, ОбработанноеСобытие.data, ОбработанноеСобытие.type)
	
КонецФункции
	
// Разбор сообщения от плагина
//
// Параметры:
//  Сбис3СобытиеОтвет	- Сообщение из пула ответов	 - 
// 
// Возвращаемое значение:
// АсинхронноеСбисСобытие  - 
//
&НаКлиенте
Функция СБИС_ОбработатьСобытиеОтвета(Сбис3СобытиеОтвет, ДопПараметры=Неопределено) Экспорт
	
	Если		Сбис3СобытиеОтвет.type = "Message" Тогда	//parse_Message
		Сбис3СобытиеОтвет.data	= Сбис3СобытиеОтвет.data;
	ИначеЕсли	Сбис3СобытиеОтвет.type = "Event" Тогда	//parse_Event
		Сбис3СобытиеОтвет.data	= Сбис3СобытиеОтвет.data;
		СбисEventName			= Сбис3СобытиеОтвет.data.eventName;
		
		Сбис3СобытиеОтвет.Вставить("queryID", СбисEventName);
		
		РезультатСобытия	= Неопределено;
		ОшибкаОбработки		= Ложь;
		//костылим имя эвента при чтении ответа.
		Если		СбисEventName = "extsdk2.async.error" Тогда
			Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Error", Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);
			Если Сбис3СобытиеОтвет.data.Свойство("Error") Тогда
				Сбис3СобытиеОтвет.data = Сбис3СобытиеОтвет.data.Error;
			КонецЕсли;
		ИначеЕсли	СбисEventName = "extsdk2.async.complete" Тогда
			Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Message",Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);				 
			Если Сбис3СобытиеОтвет.data.Свойство("Result") Тогда
				Сбис3СобытиеОтвет.data = Сбис3СобытиеОтвет.data.Result;
			КонецЕсли;
		Иначе
			//Обычное событие
		КонецЕсли;
	ИначеЕсли	Сбис3СобытиеОтвет.type = "Error" Тогда	//parse_Error
		Если Сбис3СобытиеОтвет.queryID = "ReadAllXml" Тогда//ошибка сериализатора
			Сбис3СобытиеОтвет.type	= "CriticalError";//Переставим тип, чтобы позвать подписочное событие
			Сбис3СобытиеОтвет.data	= МодульОбъектаКлиент().НовыйСбисИсключение(, "ExtSDK2.ReadAllXml2", 700,"Возникла критическая ошибка при чтении ответа." , Сбис3СобытиеОтвет.data);
		Иначе	
			Сбис3СобытиеОтвет.data = Сбис3СобытиеОтвет.data;
			Если ТипЗнч(Сбис3СобытиеОтвет.data) = Тип("Строка") Тогда
				//Отвалился плагин. Останавливаем обмен
				Если	Найти(Сбис3СобытиеОтвет.data, "disconnect")
					Или	Сбис3СобытиеОтвет.data = "Not connected"
					Или	Сбис3СобытиеОтвет.data = "Server not found" Тогда
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(
						756,	"МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий",,
						"Подключение недоступно", "Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин для дальнейшей работы.");
					Сбис3СобытиеОтвет.queryID	= "SbisPluginClientCOM.Disconnected";
					Сбис3СобытиеОтвет.type		= "Event";//Переставим тип, чтобы позвать подписочное событие
				ИначеЕсли Сбис3СобытиеОтвет.data = "Передан недействительный токен" Тогда
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(
						411, "МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий",, 
						"Для выполнения этой операции необходимо авторизоваться в СБИС Плагин", "Работа пользователя была завершена. Требуется повторная авторизация.");
					Сбис3СобытиеОтвет.queryID	= "UnValidToken";
					Сбис3СобытиеОтвет.type		= "CriticalError";//Переставим тип, чтобы позвать подписочное событие
				Иначе
					//Это обычное исключение
					Сбис3СобытиеОтвет.data = МодульОбъектаКлиент().НовыйСбисИсключение(Сбис3СобытиеОтвет.data, "МодульОбъектаКлиент.СБИСПлагин_ЧтениеОтветовИВызовСобытий");
				КонецЕсли;
			ИначеЕсли	Сбис3СобытиеОтвет.data.Свойство("detail")
					И	Сбис3СобытиеОтвет.data.detail = "#ASYNC" Тогда
				Сбис3СобытиеОтвет.type = "Async";	
			Иначе
				//Обычная ошибка
			КонецЕсли;
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ВызватьСбисИсключение(773, "ExtSDK2.СБИС_ОбработатьОтвет",,,"Не поддерживаемый формат ответа!");
	КонецЕсли;
	Возврат Сбис3СобытиеОтвет;
	
КонецФункции
	
// Функция - генерирует ид запроса для вызова
//
// Параметры:
//  Кэш	 - ЛокальныйКэш	 - 
// 
// Возвращаемое значение:
// Строка  - Ид запроса команды
//
&НаКлиенте
Функция СБИС_ИдЗапросаВызова(Кэш) Экспорт
	
	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СБИС_РазобратьОтвет(ДанныеИзПулаОтвета) Экспорт
	
	Попытка
		Результат = DecodeXmlXdto(ДанныеИзПулаОтвета);
	Исключение
		МодульОбъектаКлиент().ВызватьСбисИсключение(, МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИС_РазобратьОтвет", 773,,ИнформацияОбОшибке().Описание, Новый Структура("message", ДанныеИзПулаОтвета));
	КонецПопытки;

	Возврат Результат.Response; 
	
КонецФункции

//Делает вызов extSDK в плагине
&НаКлиенте
Функция СБИС_ОтправитьКомандуБезОбработки(Кэш, ПараметрыСБИС3Команды, ДопПараметры, Отказ) Экспорт
	Перем Sbi3Module_ID, Call_method, Call_param, Connection_ID, Acc_ID, ПараметрПроверка;
	
	//Если IDConnection не указан, то модуль вызывается напрямую
	Если Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Объекты", ПараметрПроверка) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ОтправитьКомандуБезОбработки", 700,,"Не подключена подсистема взаимодействия со СБИС плагин");
	ИначеЕсли ПараметрыСБИС3Команды.Модуль = "ExtSdk" Тогда
		Sbi3Module_ID = ПараметрПроверка[ПараметрыСБИС3Команды.Модуль];
		Call_Ext = Ложь;
		Если Не ПараметрПроверка.Свойство("ExtSdk1", Connection_ID) Тогда
			Connection_ID = "";
		ИначеЕсли ЗначениеЗаполнено(Connection_ID) Тогда
			Call_Ext = Истина;
		КонецЕсли;
		Если Call_Ext Тогда
			Call_method	= "callMethod";
			Call_param = Новый Структура;
			Call_param.Вставить("idConnection",	Connection_ID);
			Call_param.Вставить("method",		ПараметрыСБИС3Команды.Метод);
			Call_param.Вставить("param",		ПараметрыСБИС3Команды.Параметры);
		Иначе
			Call_method	= ПараметрыСБИС3Команды.Метод;
			Call_param	= Новый Структура("param", ПараметрыСБИС3Команды.Параметры);
		КонецЕсли;
	Иначе
		Call_param = ПараметрыСБИС3Команды.Параметры;
		Call_method= ПараметрыСБИС3Команды.Метод;
		Если Не ПараметрПроверка.Свойство(ПараметрыСБИС3Команды.Модуль, Sbi3Module_ID) Тогда
			Sbi3Module_ID = Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_SabyPluginConnector.СБИСПлагин_GetModule(Кэш, "ExtSdk2", Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Sbi3Module_ID, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВыполнитьМетод");
			КонецЕсли;
		КонецЕсли;
		ПараметрыСБИС3Команды.Свойство("Аккаунт", Acc_ID);
	КонецЕсли;
	
	Call_param	= EncodeXdtoXml(Call_param);
	ПараметрыСБИС3Команды.ВремяВызова = ТекущаяДата();
	
	Если ПараметрыСБИС3Команды.Свойство("Контракт") И ЗначениеЗаполнено(ПараметрыСБИС3Команды.Контракт) Тогда
		MethodName = ПараметрыСБИС3Команды.Контракт + "." + Call_method;
	Иначе
		MethodName = ПараметрыСБИС3Команды.Модуль + "." + Call_method;
	КонецЕсли;
		
	Попытка

		Если	ДопПараметры.Свойство("БезАвторизации") И ДопПараметры.БезАвторизации ИЛИ НЕ ЗначениеЗаполнено(Acc_ID)  Тогда
			
			Хост = Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера;
			РезультатВызова = Кэш.СБИС.ДанныеИнтеграции.Объекты.Компонента.CallMethodWithoutAuth(Sbi3Module_ID, MethodName, Call_param, Хост, Истина, "", ПараметрыСБИС3Команды.Идентификатор);
			
		Иначе
			
			РезультатВызова =  Кэш.СБИС.ДанныеИнтеграции.Объекты.Компонента.CallMethod(Sbi3Module_ID, MethodName, Call_param, Acc_ID, Истина, "", ПараметрыСБИС3Команды.Идентификатор);     
			
		КонецЕсли;
		РезультатВызова = ПараметрыСБИС3Команды.Идентификатор;
	Исключение
		Отказ = Истина;
		РезультатВызова = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), ПараметрыСБИС3Команды.Модуль + "." + Call_method, 700, Call_method,, "Ошибка вызова метода плагина " + Call_method + ". Детально: " + ОписаниеОшибки());
	КонецПопытки;
	Если	ДопПараметры.Свойство("ОчиститьПараметры")
		И	ДопПараметры.ОчиститьПараметры Тогда
		ПараметрыСБИС3Команды.Параметры=Неопределено;
	КонецЕсли;	

	Возврат РезультатВызова;
	
КонецФункции

