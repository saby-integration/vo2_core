
#Область include_core_vo2_СпособыОбмена_NativeSDK_ВнешниеОбертки_АсинхроннаяОтправка
#КонецОбласти

&НаКлиенте
Функция СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExecuteAction", Новый Структура("Document, Action", document_in, Новый Структура), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ВыполнитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИС_ПодготовитьДействие(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "PrepareAction", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПодготовитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат сбисСтрокаВBASE64(ПараметрыСериализовать.Строка);
КонецФункции      

&НаКлиенте
Функция СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат сбисФайлСКлиентаВBASE64(ПараметрыСериализовать.ПолноеИмяФайла);
КонецФункции

&НаКлиенте
Функция СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
	ПараметрыЗаписи		= Новый Структура("Url, FileName", ПараметрыФайла.Ссылка, ПараметрыФайла.ИмяФайла);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СохранитьПоСсылкеВФайл");
	КонецЕсли;
	Возврат ПараметрыФайла.ИмяФайла;
КонецФункции

&НаКлиенте
Функция СБИС_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокИзменений", filter, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СписокИзменений");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ТекущаяДата(Кэш, Отказ=Ложь) Экспорт
	Возврат ТекущаяДата();
КонецФункции	
	
&НаКлиенте
Функция СБИС_ИнформацияОКонтрагенте(Кэш, СтруктураКонтрагента, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИнформацияОКонтрагенте", СтруктураКонтрагента, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ИнформацияОКонтрагенте");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "GetUserInfo", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьИнформациюОТекущемПользователе");
	КонецЕсли;
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция СБИС_ПолучитьСписокАккаунтов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "AccountList", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСписокАккаунтов");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "SwitchAccount", Новый Структура("Param", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПереключитьАккаунт");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеПакета, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
   	Если	ОписаниеПакета.ИдАккаунта = "" Тогда
		Возврат Новый Структура("ИдДокумента, Тикет", ОписаниеПакета.ИдДокумента, "");
	Иначе
		ДанныеТикета = Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта(Кэш, ОписаниеПакета, Ложь);
		Возврат Новый Структура("ИдДокумента, Тикет, СтарыйИдСессии", ОписаниеПакета.ИдДокумента, ДанныеТикета.Тикет, ДанныеТикета.СтарыйИдСессии);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДСгенерировать(Кэш, ПараметрыДокумента, Генератор, ДопПараметры, Отказ) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Генератор");
	МассивПараметров.Добавить(ПараметрыДокумента);
	МассивПараметров.Добавить(Генератор);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "Integration.ФЭДСгенерировать", МассивПараметров, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДСгенерировать");
	Иначе
		Результат = Кэш.ОбщиеФункции.сбисТекстИзBase64(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДМультиСгенерировать(ПараметрыДокумента, НаборПодстановок, ДопПараметры) Экспорт
	
	Попытка
		Кэш = ДопПараметры.Кэш;
		ДопПараметрыВызова = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыДокумента);
		МассивПараметров.Добавить(НаборПодстановок);
		
		Отказ = Ложь;
		Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(ДопПараметры.Кэш, "Integration.FEDMultiGenerate", МассивПараметров, ДопПараметрыВызова, Отказ);
		
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКомандуCallSabyApi2");
		КонецЕсли;
		
		Для Каждого файл Из Результат Цикл
			файл["Тело"] = Кэш.ОбщиеФункции.сбисТекстИзBase64(файл["Тело"])
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДМультиСгенерировать");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ЗагрузитьКомплект(Кэш, ПараметрыКомплекта, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "WriteReportings",  Новый Структура("Catalog", ПараметрыКомплекта), ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteReportings");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ЗаписатьВложение(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "WriteAttachment", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ЗаписатьВложение");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова) Экспорт
	ДопПарметрыВызоваИнтеграции = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(ДопПараметрыВызова.Кэш, "API3.InitConnection", ПараметрыИнит, ДопПарметрыВызоваИнтеграции, ДопПараметрыВызова.Отказ);
	Если ДопПараметрыВызова.Отказ Тогда
		Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен");
		Если Результат.code = 100 Тогда
			СтекВызовов = Результат.stack;
			ЗаписьСтекаПроверить = СтекВызовов[СтекВызовов.ВГраница() - 1];
			Если	ЗаписьСтекаПроверить.Свойство("error")
				И 	Найти(ЗаписьСтекаПроверить.error, "error -1 no error info specified") Тогда
				Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен", 601, "Система не поддерживается");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Вызов функции MappingObject.List. Формирует список
// объектов синхронизируемых объектов определенного типа,
// с данными сопоставления и с расшифровкой естественных ключей
//
// Параметры:
//  Кэш  - Структура - Кэш обработки
//  ДопПоля  - Структура - Набор полей, которыми будут расширены
//					возвращаемые записи.
//	Фильтр	- Структура - Параметры фильтрации выборки.
//	Сортировка	- Структура - Параметры сортировки записей в выборке.
//	Навигация	-	 Структура - Параметры для навигации с типом
//					"постраничная", "бесконечный скролл"
//					или "по курсору".
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция MappingObject_List(Кэш, ДопПоля, Фильтр, Навигация, Отказ = Ложь) Экспорт 

	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт"); 
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ExtraFields",		ДопПоля);
	ПараметрыВызова.Вставить("Filter",		Фильтр);  
	ПараметрыВызова.Вставить("Pagination",	Навигация); 
	//ПараметрыВызова = Новый Массив;
	//ПараметрыВызова.Добавить(ДопПоля);
	//ПараметрыВызова.Добавить(Фильтр);
	//ПараметрыВызова.Добавить(Навигация);
	
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "MappingObject.List", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "MappingObject.List");
	КонецЕсли;
	Возврат Результат;

КонецФункции // MappingObject_List()

&НаКлиенте
Функция ФункционалВключен(Кэш, НазваниеФичи, ДопПараметрыВызова = Неопределено, Отказ = Ложь) Экспорт   
 	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(НазваниеФичи);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSys.FeatureIsOn", ПараметрыКоманды, ДопПараметрыВызова, Отказ) = Истина;
КонецФункции

&НаКлиенте
Функция ExtSys_FeatureIsOn(ПараметрыФичи, ДопПараметры) Экспорт
	Если Не МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Авторизован") Тогда
		//Если ещё не авторизовались, то за фичей не идём, считаем что неопределено.
		Возврат Неопределено;
	КонецЕсли;
	НазваниеФичи = ПараметрыФичи.НазваниеФичи;
	Кэш = ДопПараметры.Кэш;
 	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(НазваниеФичи);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSys.FeatureIsOn", ПараметрыКоманды, ДопПараметрыВызова, Ложь) = Истина;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьСопоставлениеСторон(Кэш, ПараметрыДанныеСторон, ДопПараметры=Неопределено, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь); 
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "ExtSysOrganization.MassFind", ПараметрыДанныеСторон, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//1189641556 Функция получает складские параметры документа
&НаКлиенте
Функция ExtSysMarking_GetParams(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.paramsList);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.GetParams", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции 

//1189641556 Функция формирует данные о проверке кодов маркировки документа
&НаКлиенте
Функция ExtSysMarking_CheckState(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckState", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции     

//1189641556 Функция возвращает данные маркировки (номенклатур/параметров документа и т.п.)
&НаКлиенте
Функция ExtSysMarking_NumList(params, ДопПараметры, Отказ=Ложь) Экспорт 
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить(Новый Массив());
	ПараметрыКоманды.Добавить(params.Фильтр); 
	ПараметрыКоманды.Добавить(Новый Массив());
	ПараметрыКоманды.Добавить(Новый Массив());

	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.NumList", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции   

//1189641556 Функция получеяет параметры из SerialNumber.CustomList
&НаКлиенте
Функция ExtSysMarking_NomCheckState(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.КодНоменклатуры);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.NomCheckState", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции  

//1189641556 Функция устанавливает параметры выбытия кодов маркировки ExtSysMarking.SetParamt
&НаКлиенте
Функция ExtSysMarking_SetParam(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);  
	ПараметрыКоманды.Добавить(params.name); 
	ПараметрыКоманды.Добавить(params.value);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SetParam", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции 

//1189641556 Функция проверяет наличие токена в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckGisSetting(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckGisSetting", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции  

//1189641556 Функция запуск проверку кодов маркировки в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckSnCRPT(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckSnCRPT", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции  

//1189641556 Функция ищет сертификат по отпечатку после чего разбирает его
&НаКлиенте
Функция Сертификат_ПрочитатьПоОтпечатку(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.Отпечаток);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "Сертификат.ПрочитатьПоОтпечатку", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции    

//1189641556 Функция получает информацию по созданию токена ГИС МТ
&НаКлиенте
Функция ExtSysMarking_CheckGisTask(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CheckGisTask", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции    

//1189641556 Функция получает статус проверки документа ГИС МТ
&НаКлиенте
Функция ExtSysMarking_GetResendingConfigForGIS(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.GetResendingConfigForGIS", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции

//1189641556 Функция отправляет коды маркировки в ГИС МТ
&НаКлиенте
Функция ExtSysMarking_SendToGIS(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SendToGIS", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
КонецФункции

// Функция вызывает создание токена в СБИС, для взаимодействия с ГИС МТ ExtSysMarking.CreateGisSetting
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Строка   - Результат вызова. Дата/время вызова или ошибка
//
&НаКлиенте
Функция ExtSysMarking_CreateGisSetting(params, ДопПараметры, Отказ=Ложь) Экспорт 
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);    
	
	ПараметрыКоманды = Новый Массив(); 
	ПараметрыКоманды.Добавить(params);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.CreateGisSetting", ПараметрыКоманды, ДопПараметрыВызова, Отказ);
	
КонецФункции
	
//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция Connector_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "Connector.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция ExtSyncDoc_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSyncDoc.Prepare");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получение объекта на загрузку в 1С
&НаКлиенте
Функция ExtSyncDoc_GetObjectForExecute(Кэш,ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.GetObjectForExecute", Новый Структура("SyncDocId", ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьОбъектНаЗагрузку");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Рассчет объекта на сервисе
&НаКлиенте
Функция ExtSyncDoc_CalcObjectForExecute(Кэш, СтруктураОбъекта, ИдентификаторПосылки, ИмяИни, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.CalcObjectForExecute", Новый Структура("ObjectData,IniName,SyncDocId", СтруктураОбъекта, ИмяИни, ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Обертка метода ExtSyncDoc.Write
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Write(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");   

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Write", ПараметрыМетода, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Write()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_WriteEx(Кэш, ПараметрыВызова, Отказ = Ложь) Экспорт

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");   

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.WriteEx", ПараметрыВызова, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "ExtSyncDoc.WriteEx");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_WriteEx()

// Обертка метода ExtSyncDoc.Execute
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Execute(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "ExtSyncDoc.Execute", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Execute()

// Обертка метода API3.GetSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте     
Функция API3_GetSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт   
	
	ДопПараметры = Новый Структура("АдресРесурса", "/service/?srv=1");
	НовПараметры = Новый Массив;
	НовПараметры.Добавить(ПараметрыМетода.Type);
	НовПараметры.Добавить(ПараметрыМетода.IdList);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "API3.GetSbisObject", НовПараметры, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ПрочитатьАПИОбъектСБИС");
	КонецЕсли;  
	
	Возврат Результат;

КонецФункции // API3_GetSbisObject()

// Функция запускает проверку проверку прослеживаемых позиций через обертку метода RNPT.SendDoc
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция ExtSysMarking_SendDocumentRNPT(params, ДопПараметры, Отказ=Ложь) Экспорт  
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.SendDocumentRNPT", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_SendDocumentRNPT");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции 

// API3.ExtSyncDocRead
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_ExtSyncDocRead(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.ExtSyncDocRead", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // API3.ExtSyncDocRead() 

// Функция получает двоичные данные протокола проверки документа СБИС, на наличие ошибок ФЛК
//
// Параметры:
//  params  - Структура - Параметры фильтрации метода
//  ДопПараметры  - Структура - Набор полей, работа с которыми может расширить результат работы функции.
//
// Возвращаемое значение:
//   Структура   - Результат вызова. Список объектов или ошибка
//
&НаКлиенте
Функция ExtSysMarking_ExportAsHTML(params, ДопПараметры, Отказ=Ложь) Экспорт  
	
	Кэш = ДопПараметры.Кэш;
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(params.ИдДок);
	ПараметрыКоманды.Добавить(params.ИдВложения);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSysMarking.ExportAsHTML", ПараметрыКоманды, ДопПараметрыВызова, Отказ);    
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ExtSysMarking_ExportAsHTML");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// API3.FindSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_FindSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/service/");    
	АргументыВызова = Новый Массив;
	АргументыВызова.Добавить(ПараметрыМетода.Type);
	АргументыВызова.Добавить(ПараметрыМетода.Filter);

	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "API3.FindSbisObject", АргументыВызова, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API3_FindSbisObject");
	КонецЕсли;        
	
	Возврат Результат["result"]; 

КонецФункции // API3.FindSbisObject() 

// MappingObject.UpdateFromData
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция MappingObject_UpdateFromData(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "MappingObject.UpdateFromData", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "MappingObject.UpdateFromData");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // MappingObject.UpdateFromData() 

&НаКлиенте
Функция SearchNomenclatureCollation(Кэш, params, ДопПараметры, Отказ=Ложь) Экспорт 
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", "ContractorNomenclatureCollation.SearchByContractorData");
	
	АргументыВызова = Новый Массив;
	АргументыВызова.Добавить(params.Contractor);
	АргументыВызова.Добавить(params.Data);
	
	ПараметрыВызова.Вставить("Params", АргументыВызова);

	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi2", ПараметрыВызова, ДопПараметры,Отказ);

КонецФункции   

#Область include_core_vo2_СпособыОбмена_NativeSDK_ВнешниеОбертки_ПрикладнаяСтатистика
#КонецОбласти

