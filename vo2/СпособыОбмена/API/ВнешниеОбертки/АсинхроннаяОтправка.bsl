
&НаКлиенте
Процедура WriteDocumentEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	Перем ОшибкаРезультат;
	
    ОшибкаОтправки		= Ложь;
	Кэш					= ДопПараметры.Кэш;
	ПоддержкаОбменаЕИС	= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПоддержкаОбменаЕИС");
	DocumentOut			= АсинхроннаяСБИСКоманда.АргументВызова.ДокументОтправить;
	НеЗапускатьВДО		= DocumentOut.Свойство("НеЗапускатьВДокументооборот")
		И	DocumentOut.НеЗапускатьВДокументооборот = "Да";
	DocumentOut.Вставить("ДопПоля", "ЭтапВернутьВсеСертификаты" + ?(НеЗапускатьВДО И ПоддержкаОбменаЕИС, ",Расширение,ЕИС", ""));
	//Записать в СБИС
	
	СтруктураРезультата = СБИС_ЗаписатьДокумент(Кэш, DocumentOut,,ОшибкаОтправки);
	АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
	
	Если ОшибкаОтправки Тогда
		
		//Ошибка отправки, роняем вызов
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "API.WriteDocumentEx");
		
	ИначеЕсли НеЗапускатьВДО Тогда
			
		//Это и есть ответ
		АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСБИСКоманда.Идентификатор, СтруктураРезультата, "Message");
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);
		Возврат;
			
	КонецЕсли;
			
	// Назначение действия на этап
	action = Новый Структура("Название");
	Если		Не СтруктураРезультата.Этап.Количество() Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "API.WriteDocumentEx",,"Ошибка отправки документа: у документа отсутствуют активные этапы.");
	ИначеЕсли	Не СтруктураРезультата.Этап[0].Действие.Количество() Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "API.WriteDocumentEx",,"Ошибка отправки документа: у этапа документа отсутствуют активные действия.");
	ИначеЕсли	Не СтруктураРезультата.Этап[0].Действие[0].Свойство("Название", action.Название) Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "API.WriteDocumentEx",,"Ошибка отправки документа: у действия этапа отсутствует имя регламента.");
	КонецЕсли;
	
	Если Не ОшибкаРезультат = Неопределено Тогда
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(ОшибкаРезультат, "API.WriteDocumentEx")
		
	КонецЕсли;
	
	СертификатДляПодписания = Неопределено;
	Алгоритм = Неопределено;
	Если	СтруктураРезультата.Этап[0].Действие[0].ТребуетПодписания = "Да"
		И	СтруктураРезультата.Этап[0].Действие[0].Свойство("Сертификат") Тогда
		СертификатВыбран	= Ложь;
		ТекстОшибки			= "";
		Сертификат			= Кэш.ФормаЭП.сбисВыбратьПодходящийСертификат(Кэш, СтруктураРезультата.Этап[0].Действие[0].Сертификат, ТекстОшибки);
		Если Не Сертификат = Ложь Тогда
			action.Вставить("Сертификат", Сертификат.СертификатДок);
			СертификатДляПодписания = Сертификат.СертификатДляПодписания;
			Алгоритм				= Сертификат.Алгоритм;
			СертификатВыбран		= Истина;
		КонецЕсли;

		Если Не СертификатВыбран И ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден подходящий сертификат для подписания документа", "ФормаЭП.сбисВыбратьПодходящийСертификат",,,ТекстОшибки);
			
		КонецЕсли;
	КонецЕсли;
		
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", СтруктураРезультата.Этап[0].Название);
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", СтруктураРезультата.Идентификатор );	
	document_in.Вставить( "Этап", stage );
	
	СтруктураРезультата = СБИС_ПодготовитьДействие(Кэш, document_in,, ОшибкаОтправки);

	Если ОшибкаОтправки Тогда
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "API.WriteDocumentEx")
		
	КонецЕсли;

	// выполняем действие
	
	prepared_document = СтруктураРезультата;
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", prepared_document.Этап[0].Название);
	
	// Назначение действия на этап
	action = Новый Структура;
	action.Вставить("Название", prepared_document.Этап[0].Действие[0].Название);
	Если СтруктураРезультата.Этап[0].Действие[0].свойство("Сертификат") Тогда 
		Если ЗначениеЗаполнено(СертификатДляПодписания) и СтруктураРезультата.Этап[0].Свойство("Вложение") Тогда
			stage.Вставить("Вложение", Новый Массив);
			ТекстОшибки = "";
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", Новый Структура("СертификатДляПодписания, Алгоритм, Сертификат", СертификатДляПодписания, Алгоритм));
			ПараметрыДействия.Вставить("Сертификат", Сертификат.СертификатДок);
			сбисПодписатьВложения(Кэш, prepared_document.Этап[0].Вложение,ПараметрыДействия);
			stage.Вложение = prepared_document.Этап[0].Вложение;
			Если ТекстОшибки<>"" Тогда
				
				МодульОбъектаКлиент().ВызватьСбисИсключение("Не удалось подписать вложение", "ФормаЭП.сбисВыбратьПодходящийСертификат",,,ТекстОшибки);
				
			КонецЕсли;
        КонецЕсли;
		action.Вставить("Сертификат", СтруктураРезультата.Этап[0].Действие[0].Сертификат[0]);
	КонецЕсли;
	
	stage.Вставить("Действие", action);
						
	document_in = Новый Структура;
	document_in.Вставить("Идентификатор",	prepared_document.Идентификатор );	
	document_in.Вставить("Этап",			stage );
	
	
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	
	// Выполнение этапа
	СтруктураРезультата = СБИС_ВыполнитьДействие(Кэш, document_in,,ОшибкаОтправки);

	Если ОшибкаОтправки Тогда
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "API.WriteDocumentEx")
		
	КонецЕсли;
	
	АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСБИСКоманда.Идентификатор, СтруктураРезультата, "Message");
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);
	
КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_Message(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	
	МодульОбъектаКлиент().РезультатОтправки_Асинх_Ответ(АсинхронноеСбисСобытие, ПараметрыОбработки); 
	
КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_Error(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	Перем ТекстОшибки, УИДОшибки;

	Кэш				= ПараметрыОбработки.Кэш;
	РезультатВызова	= АсинхронноеСбисСобытие.Данные;
	
	Если Не РезультатВызова.Свойство("message", ТекстОшибки) Тогда
		РезультатВызова = МодульОбъектаКлиент().НовыйСбисИсключение(РезультатВызова, "API.WriteDocumentEx_Error",,"Не удалось отправить документ")
	КонецЕсли;
	
	Если		Лев(РезультатВызова.message, 14) = "Ошибка WinHTTP" Тогда
		
		ПараметрыОбработки.Вставить("Фатальная", Истина);
		
	ИначеЕсли	РезультатВызова.Свойство("data", УИДОшибки)
			И	ЗначениеЗаполнено(УИДОшибки)
			И	УИДОшибки.Свойство("classid", УИДОшибки)
			И	Лев(врег(УИДОшибки),28)="{00000000-0000-0000-0000-1AA" Тогда // нефатальная ошибка
		
		ПараметрыОбработки.Вставить("Фатальная", Ложь);	
	КонецЕсли;
	
	ПроверитьНаОшибкуФЛК(РезультатВызова);
	МодульОбъектаКлиент().РезультатОтправки_Асинх_Ошибка(АсинхронноеСбисСобытие, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_AfterCall(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	
	//Установим статус пакету, чтобы не занимался поток
	МодульОбъектаКлиент().ОтправкаДокументаСБИС_Установить(ПараметрыОбработки.Команда.АргументВызова, "СтатусПакета", "Обработан");
	МодульОбъектаКлиент().РезультатОтправки_Асинх_ПослеОтправки(АсинхронноеСбисСобытие, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура WriteAttachment(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	Перем ОшибкаРезультат;
	
    ОшибкаОтправки		= Ложь;
	Кэш					= ДопПараметры.Кэш;
	DocumentOut			= АсинхроннаяСБИСКоманда.АргументВызова.ДокументЗаписать;
	//Записать в СБИС
	
	СтруктураРезультата = СБИС_ЗаписатьВложение(Кэш, DocumentOut, Новый Структура, ОшибкаОтправки);
	АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
	
	Если ОшибкаОтправки Тогда
		
		//Ошибка отправки, роняем вызов
		ВызватьИсключение МодульОбъектаКлиент().СбисИсключение_Представление(СтруктураРезультата);
			
	КонецЕсли;
	
	АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСБИСКоманда.Идентификатор, СтруктураРезультата, "Message");
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);
	
КонецПроцедуры

//Обработка успешной отправки пакета
&НаКлиенте
Процедура WriteAttachment_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	
	Если НЕ ПараметрыОбработки.Команда.АргументВызова.СоставПакета.Свойство("НеЗапускатьВДокументооборот")
		ИЛИ НЕ ПараметрыОбработки.Команда.АргументВызова.СоставПакета.НеЗапускатьВДокументооборот Тогда 
		
		ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки", ПараметрыОбработки.Кэш, ПараметрыОбработки.РезультатОтправки);
		ОбработчикОтправки	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ExecuteActionEx", ПараметрыОбработки.Кэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
		Сбис3Команда		= МодульОбъектаКлиент().РезультатОтправки_НовыйАсинхроннаяСбисКоманда(ПараметрыОбработки.РезультатОтправки, ПараметрыОбработки.Команда.АргументВызова, ОбработчикОтправки);
	
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
		
	Иначе
		МодульОбъектаКлиент().РезультатОтправки_Асинх_Ответ(РезультатВызова, ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаОшибкуФЛК(РезультатВызова)
	
	Если НЕ РезультатВызова.Свойство("details") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Найти(РезультатВызова.details, "В некоторых файлах обнаружены ошибки. Отправка с ошибками запрещена") 
		ИЛИ (Найти(РезультатВызова.details, "Документ") И Найти(РезультатВызова.details, "содержит ошибк")) Тогда
		РезультатВызова.code = 729;
	КонецЕсли;
	
КонецПроцедуры
//Асинхронности нет
&НаКлиенте
Функция СБИС_ПрочитатьПулОтветов(КэшСБИС) Экспорт
	
	Возврат Новый Массив;
	
КонецФункции

//Обработка внешнего файла
&НаКлиенте
Процедура Отправка_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ДанныеФайла.Файл.Вставить("ДвоичныеДанные", сбисФайлСКлиентаВBASE64(ДанныеФайла.Вложение.ПолноеИмяФайла)); 
КонецПроцедуры

//Обработка XML файла при отправке. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура Отправка_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт

	ДвоичныеДанныеXML = СбисСтрокаВДвоичныеДанныеКлиент(Кэш, ДанныеФайла.Вложение.XMLДокумента, , Ложь);
	ДанныеФайла.Файл.Вставить("ДвоичныеДанные", СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"") ); 
	
КонецПроцедуры

&НаКлиенте
Функция Отправка_ПодпискиСобытия(ПараметрыСобытий) Экспорт
	
	Кэш = ПараметрыСобытий.Кэш;
	Результат = Новый Структура;
	Результат.Вставить("AfterCall",	Новый Структура("Функция",					"WriteDocumentEx_AfterCall"));
	Результат.Вставить("Error",		Новый Структура("Функция",					"WriteDocumentEx_Error"));
	Результат.Вставить("Message",	Новый Структура("Функция, ФункцияОшибки",	"WriteDocumentEx_Message", "WriteDocumentEx_Error"));
	Возврат Результат;
				
КонецФункции

&НаКлиенте
Функция СБИС_ИдЗапросаВызова(Кэш) Экспорт
	
	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

//Разбор асинхронных сообщений
&НаКлиенте
Функция СБИС_РазобратьОтвет(ДанныеИзПулаОтвета) Экспорт
	
	Возврат Новый Структура;
	
КонецФункции
	
