
&НаКлиенте
Функция СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СБИС_ПодготовитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("API").СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Перем ФайлПоследнегоСобытия;
	
	КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена + "\Состояние\";
	КаталогСостояний = Новый Файл(КаталогСостоянийИмя);
	Если Не КаталогСостояний.Существует() Тогда
		КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена+"\СостояниеОтправки\"
	КонецЕсли;
    ФайлыСтатусов = НайтиФайлы(КаталогСостоянийИмя, "*.native.xml", Истина);
	
	МассивОбработанныхФайлов	= Новый Массив;
	МассивПропущенныхФайлов		= Новый Массив;
	МассивДокументов			= Новый Массив;
	Результат = Новый Структура("Навигация, Документ", Новый Структура("ЕстьЕще", "Нет"), МассивДокументов);
	
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ЧислоЗабрать= ТипЧисло.ПривестиЗначение(filter.Навигация.РазмерСтраницы);
	
	ДатаВремяПроверки		= '0001.01.01';
	ИдентификаторФильтра	= "";
	Если		filter.Свойство("ИдентификаторСобытия") Тогда
		ИдентификаторФильтра = filter.ИдентификаторСобытия;
	ИначеЕсли   filter.Свойство("ДатаВремяС") Тогда
		ДатаВремяПроверки = ДатаВремяИзСтроки(filter.ДатаВремяС);
	КонецЕсли;
	
	Для Каждого Файл Из ФайлыСтатусов Цикл
		Если МассивДокументов.Количество() = ЧислоЗабрать Тогда
			Результат.Навигация.ЕстьЕще = "Да";
			Прервать;
		КонецЕсли;
		
		СтруктураСобытия = СтруктураСобытияИзФайла(Файл, Кэш);
		оДокумент = СтруктураСобытия.Документ;
		
		// Проверяем, к этой ли базе 1С относится файл
		Если Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, оДокумент.НашаОрганизация) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДокументов.Добавить(оДокумент);
		МассивОбработанныхФайлов.Добавить(Файл.ПолноеИмя);
		Продолжить;
		//Игнорируем фильтры пока что, т.к. статусы идут вразнобой в каталоге, надо читать всё и строить карту.
		//Оставляем пока старую логику. Доработать при наличии желающих.
		
		Для Каждого Событие Из оДокумент.Событие Цикл
			Если Не ПустаяСтрока(ИдентификаторФильтра) Тогда
				Если	Не (	Событие.Свойство("Идентификатор")
							И	Событие.Идентификатор = ИдентификаторФильтра) Тогда
					Продолжить;
				КонецЕсли;
				//Найдено событие фильтра.
				//Последнее событие должно быть обработано но в список итого его не передаём, отсчёт идёт ОТ него, добавим в список удалить.
				ФайлПоследнегоСобытия	= Файл;
				
				//Переключаем фильтр на дату/время
				ИдентификаторФильтра	= "";
				ДатаВремяПроверки		= ДатаВремяИзСтроки(Событие.ДатаВремя);
				Прервать;
			КонецЕсли;
			Если Событие.Свойство("ДатаВремя") Тогда
				СобытиеВремя = ДатаВремяИзСтроки(Событие.ДатаВремя);
				Если СобытиеВремя >= ДатаВремяПроверки Тогда
					МассивДокументов.Добавить(оДокумент);
					Если Не ФайлПоследнегоСобытия = Неопределено Тогда
						МассивОбработанныхФайлов.Добавить(ФайлПоследнегоСобытия.ПолноеИмя);
					КонецЕсли;
					ФайлПоследнегоСобытия = Файл;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не ФайлПоследнегоСобытия = Файл Тогда
			//Это файл статусов нашей базы, но он не обрабатывается
			МассивПропущенныхФайлов.Добавить(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЧтенияИзмененийЗавершить = Новый Структура("Кэш", Кэш);
	ПараметрыЧтенияИзмененийЗавершить.Вставить("МассивОбработанныхФайлов",	МассивОбработанныхФайлов);
	ПараметрыЧтенияИзмененийЗавершить.Вставить("МассивПропущенныхФайлов",	МассивПропущенныхФайлов);
	ОбработчикПослеИзменений = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СБИС_СписокИзменений_Завершение", ЭтаФорма, ПараметрыЧтенияИзмененийЗавершить);
	Результат.Вставить("ОбработчикПослеИзменений", ОбработчикПослеИзменений);
	
	Возврат Результат;

КонецФункции

// Процедура - удаляет обработанные файлы
//
// Параметры:
//  РезультатДействияОбновленияСтатусов	 - РезультатДействия	 - результат обновления статусов
//  ДопПараметры						 - Структура	- Кэш, Массивы обработанных файлов
//
&НаКлиенте
Процедура СБИС_СписокИзменений_Завершение(РезультатДействияОбновленияСтатусов, ДопПараметры) Экспорт
	
	Для Каждого ОбработанныйФайл Из ДопПараметры.МассивОбработанныхФайлов Цикл
		Попытка
			УдалитьФайлы(ОбработанныйФайл);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Для Каждого ОбработанныйФайл Из ДопПараметры.МассивПропущенныхФайлов Цикл
		Попытка
			УдалитьФайлы(ОбработанныйФайл);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Функция СБИС_ТекущаяДата(Кэш, Отказ=Ложь) Экспорт
	Возврат ТекущаяДата();
КонецФункции

&НаКлиенте
Функция СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("API").СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_ИнформацияОКонтрагенте(Кэш, СтруктураКонтрагента, ДопПараметры, Отказ) Экспорт
	Отказ = Истина;
	Возврат Кэш.ОбщиеФункции.СбисИсключение(, "СБИС.ИнформацияОКонтрагенте", 601, "Система не поддерживается", "Установленный способ обмена не поддерживается");
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = Новый Структура();
	Результат.Вставить("Фамилия", "Интеграция");
	Результат.Вставить("Имя", "Каталог"); 	
	Результат.Вставить("ИдПерсоны", Кэш.ПараметрыСистемы.Клиент.ИдПользователяИБ);
	Результат.Вставить("НомерАккаунта", Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции);
	Возврат Результат;
КонецФункции    

&НаКлиенте
Функция СБИС_ПолучитьСписокАккаунтов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Список = Новый Массив;
	Список.Добавить(Новый Структура("НомерАккаунта, НазваниеАккаунта", "", Кэш.ГлавноеОкно.КаталогОбмена));
	Возврат Список;
КонецФункции

&НаКлиенте
Функция СБИС_ПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт
	Возврат "Ok";
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеПакета, ДопПараметры) Экспорт

	Возврат Новый Структура("ИдДокумента, Тикет", ОписаниеПакета.ИдДокумента, "");
	
КонецФункции
