
&НаКлиенте
Процедура WriteDocumentEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	
    ОшибкаОтправки	= Ложь;
	Кэш				= ДопПараметры.Кэш;
	DocumentOut		= АсинхроннаяСБИСКоманда.АргументВызова.ДокументОтправить;
	ДокументИсх		= Новый Структура;
	
	СтруктураКонверта = Новый Структура("СписокДокумент", Новый Структура("Документ", ДокументИсх));

	ДокументИсх.Вставить("Идентификатор",	DocumentOut.Идентификатор);
	ДокументИсх.Вставить("Тип",				DocumentOut.Тип);
	Если	DocumentOut.Свойство("Подтип")
		И	ЗначениеЗаполнено(DocumentOut.Подтип) Тогда
		ДокументИсх.Вставить("Подтип",		DocumentOut.Подтип);
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Дата")
		И	ЗначениеЗаполнено(DocumentOut.Дата) Тогда
		ДокументИсх.Вставить("Дата",		DocumentOut.Дата);	
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Номер")
		И	ЗначениеЗаполнено(DocumentOut.Номер) Тогда
		ДокументИсх.Вставить("Номер",		DocumentOut.Номер);	
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Сумма")
		И	ЗначениеЗаполнено(DocumentOut.Сумма) Тогда
		ДокументИсх.Вставить("Сумма",		DocumentOut.Сумма);	
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Примечание")
		И	ЗначениеЗаполнено(DocumentOut.Примечание) Тогда
		ДокументИсх.Вставить("Примечание",	DocumentOut.Примечание);	
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Регламент")
		И	(	DocumentOut.Регламент.Свойство("Идентификатор")
			Или	DocumentOut.Регламент.Свойство("Название")) Тогда
		ДокументИсх.Вставить("Регламент", DocumentOut.Регламент);
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Ответственный")
		И	ЗначениеЗаполнено(DocumentOut.Ответственный) Тогда
		ДокументИсх.Вставить("Ответственный", DocumentOut.Ответственный);
	КонецЕсли;
	
	Если	DocumentOut.Свойство("Подразделение")
		И	ЗначениеЗаполнено(DocumentOut.Подразделение) Тогда
		ДокументИсх.Вставить("Подразделение", DocumentOut.Подразделение);
	КонецЕсли;
	
	Если	DocumentOut.Свойство("ДокументОснование")
		И	ЗначениеЗаполнено(DocumentOut.ДокументОснование) Тогда
		ДокументИсх.Вставить("СписокДокументОснование", Новый Структура("ДокументОснование", DocumentOut.ДокументОснование));
	КонецЕсли;

	ДокументИсх.Вставить("НашаОрганизация",	DocumentOut.НашаОрганизация);
	ДокументИсх.Вставить("Контрагент",		DocumentOut.Контрагент);
	ДокументИсх.Вставить("СписокВложение",	Новый Структура("Вложение", DocumentOut.Вложение));

	ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(СтруктураКонверта, Кэш.СовместимостьМетодов, ОшибкаОтправки);
	
	Если ОшибкаОтправки Тогда
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(ШаблонXML, "ИнтеграцияКаталог.WriteDocumentEx");
		
	КонецЕсли;
	
	КонвертФайл = Новый ТекстовыйДокумент;
	КонвертФайл.УстановитьТекст(ШаблонXML);
	
	ИмяФайла		= "KONVERT" + "__" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + "_" + строка(Новый УникальныйИдентификатор()) + ".native.xml";
	ПолноеИмяФайла	= ПолучитьКаталогОтправки() + ИмяФайла;
	КонвертФайл.Записать(ПолноеИмяФайла, "windows-1251");

	//Состояние для статусов
	ДокументИсх.Вставить("Состояние", Новый Структура("Название", "Выгружен"));
	
	АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(АсинхроннаяСБИСКоманда.Идентификатор, ДокументИсх, "Message");
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(АсинхроннаяСбисКоманда, АсинхронноеСбисСобытие);

КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_AfterCall(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	
	//Установим статус пакету, чтобы не занимался поток
	МодульОбъектаКлиент().ОтправкаДокументаСБИС_Установить(ПараметрыОбработки.Команда.АргументВызова, "СтатусПакета", "Отправлен");
	МодульОбъектаКлиент().РезультатОтправки_Асинх_ПослеОтправки(АсинхронноеСбисСобытие, ПараметрыОбработки);
	
КонецПроцедуры

