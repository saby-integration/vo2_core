
&НаКлиенте
Перем МестныйКэш Экспорт;

#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция СбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат сбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
КонецФункции

&НаКлиенте
Функция СбисСохранитьВФайлПоСсылке(Кэш, СбисПараметрыФайла, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	ПараметрыМетода = Новый Структура("FileName, Url", сбисПараметрыФайла.ИмяФайла);
	Если сбисПараметрыФайла.Свойство("URL") И Лев(сбисПараметрыФайла.URL, 8) = "https://" Тогда   
		ПараметрыМетода.Url = сбисПараметрыФайла.URL;
	ИначеЕсли Не сбисПараметрыФайла.Свойство("URLПолный", ПараметрыМетода.Url) Тогда		
		ПараметрыМетода.Url = сбисПараметрыФайла.Протокол + "://" + сбисПараметрыФайла.Сервер + сбисПараметрыФайла.URL;
	КонецЕсли;
	сбисРезультатЧтения = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(сбисРезультатЧтения,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисСохранитьВФайлПоСсылке", 700, "Неизвестная ошибка подключения", сбисРезультатЧтения.details);
	КонецЕсли;	
	Возврат Истина;	
КонецФункции

////////////////////////////////////////////////////
////////////////////Авторизация/////////////////////
////////////////////////////////////////////////////

//Авторизуется по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Ложь, Истина);
	МестныйКэш = Кэш;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,				Параметры,											ДополнительныеПараметры", 
											"AuthByPassword",	Новый Структура("Login,Password", Логин, Пароль),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", СбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Авторизуется по сертификату	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Истина, Истина);	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,			Параметры,								ДополнительныеПараметры", 
											"AuthByCert",	Новый Структура("Imprint", Сертификат),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Авторизуется по токену	
&НаКлиенте
Функция АвторизоватьсяПоТокену(Кэш,Отказ=Ложь) Экспорт 	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату, БезАвторизации", Ложь, Истина, Ложь, Истина);
	МестныйКэш = Кэш;
	
	Токен = Кэш.ГлавноеОкно.сбисПолучитьФорму("API").ПолучитьТокенДляТекущегоПользователя(Кэш, Отказ);
	Если Отказ Тогда
		Возврат Токен;
	КонецЕсли;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура( "Метод, Параметры, ДополнительныеПараметры", "AuthByToken", Новый Структура("Token", Токен), ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", СбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Результат = СбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);  
	Если Не Отказ Тогда   
		МестныйКэш.Парам.ИдентификаторСессии = Результат;
		сбисПараметрыСтатистики = Новый Структура("Действие, ДетальноеСообщение", "Аутентификация", "По токену");
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(МестныйКэш, сбисПараметрыСтатистики, Ложь);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция получает токен по текущему сиду	
&НаКлиенте
функция ПолучитьТикетДляТекущегоПользователя(Кэш) Экспорт
	Отказ = Ложь;
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadTicket", Новый Структура, Новый Структура,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//Функция обрабатывает результат авторизации
&НаКлиенте
Функция СбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.code = 303 Тогда
		//Если код ошибки - 303, значит ожидается подтверждение аутентификации. Разбираем строку в details ошибки для выборки данных формирования СМС и последующей авторизации.
		addInfo = Новый Структура;
		addInfo.Вставить("Идентификатор",		РезультатАвторизации.dump.ResourceID);
		addInfo.Вставить("ИдентификаторСессии",	РезультатАвторизации.dump.SessionID);
		addInfo.Вставить("МетодВалидации",		РезультатАвторизации.dump.MethodToValidate);
		addInfo.Вставить("ПоСертификату",		ПараметрыРезультата.ДополнительныеПараметры.ПоСертификату);
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	//Плагин сам переключает домен.	
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда
	//	РезультатАвторизации = Кэш.ОбщиеФункции.сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

//Закрывает текущую сессию	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	Отказ				= Ложь;
	Кэш.КэшСертификатов	= Новый Структура;
	ДопПараметрыЗапроса	= Новый Структура;
	Кэш.СБИС.Авторизован = Ложь;
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "TerminateSession", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции	
//Метод устарел, вместо него использовать Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьИнформациюОТекущемПользователе
//Получает строковое представление ФИО о текущем пользователе	
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCurrentUserInfo", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;
	
	Если Не РезультатЗапроса.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли;
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции

//Отправляет код авторизации на номер телефона, указанный в карточке сотрудника
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
КонецФункции

//Функция выполняет подтверждение введенного кода для двухфакторной аутентификации
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, БезАвторизации", Ложь, Истина, Истина);	
	
	ПараметрыЗапроса = Новый Структура("Param", Новый Структура("Код, Идентификатор, ВызываемыйМетод", ПараметрыВвода.ПинКод, ПараметрыПодтверждения.Идентификатор, ПараметрыПодтверждения.МетодВалидации));
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "AuthConfirmCode", ПараметрыЗапроса, ДопПараметры, Отказ);
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получает список сертификатов, пригодных для авторизации	
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш, ТекстОшибки) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат, ВремяОжиданияОтвета, БезАвторизации", Истина, Истина, 120, Истина);      // увеличено время ожидания, т.к. через сбисПараметры можно переопределить только для вызовов после авторизаии
	СписокСертификатов	= Новый СписокЗначений();
	МестныйКэш			= Кэш;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertListForAuth", Новый Структура("Filter", Новый Структура), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		ТекстОшибки = РезультатЗапроса.message;
		Возврат Ложь;
	КонецЕсли;
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАвторизации(Кэш, РезультатЗапроса["Сертификат"]);
	
КонецФункции

&НаКлиенте
Функция СбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Ложь;
КонецФункции

//Проверяет активна ли текущая сессия
&НаКлиенте
Функция СбисСессияДействительна(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат, СообщатьПриОшибке", Истина, Ложь);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПроверитьСессию", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Не Отказ
		И РезультатЗапроса.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СбисИдАккаунта(Кэш) Экспорт
	
	//Тут дело в том, что этот ИД аккаунта это не номер аккаунта в биллинге. Это сессия/токен для корректного вызова СБИС плагин.
	//Переписать использование поля на СбисТокенАвторизации и на поле Авторизация в команде
	Возврат Кэш.Парам.ИдентификаторСессии;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдТекущегоАккаунта(Кэш) Экспорт
	Перем СбисИдАккаунта;
	Если Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдАккаунта", СбисИдАккаунта) Тогда
		Возврат СбисИдАккаунта;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
&НаКлиенте
Функция Аккордеон_ОтключенныеРазделы() Экспорт
	ОтключенныеРазделы = Новый Структура();
	Возврат ОтключенныеРазделы;
КонецФункции
//Устанавливает в SDK настройки подключения		
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "", ДопПараметрыЗапроса=Неопределено, Отказ=Ложь) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии, ДопПараметрыЗапроса, Отказ);
КонецФункции

&НаКлиенте
Функция СбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисУстановитьВремяОжидания(Кэш, ВремяОжидания);
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиПлагина(Кэш, ДопПараметрыЗапроса, Отказ) Экспорт
	Если Не(	(	Кэш.Парам.СпособОбмена = 5 Или Кэш.Парам.СпособОбмена = 7) 
			И		Кэш.Парам.ШифроватьВыборочно = Истина) 
			И	Не	Кэш.Свойство("КаталогЗашифрованных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Параметр = Новый Структура();
	Если ДопПараметрыЗапроса = Неопределено Тогда
		ДопПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	Рез = сбисОтправитьИОбработатьКоманду(Кэш,"GetPluginSettings",Параметр, ДопПараметрыЗапроса,Отказ);	
	Если Не Отказ Тогда
		Если Рез.Свойство("SecureLoading") и Рез.SecureLoading.Свойство("fromFolder") и Рез.SecureLoading.encrypt = Истина Тогда
			Кэш.Вставить("КаталогЗашифрованных", Рез.SecureLoading.fromFolder);	
		КонецЕсли;
	КонецЕсли;
КонецФункции	

////////////////////////////////////////////////////
////////////////////Сертификаты/////////////////////
////////////////////////////////////////////////////

//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	ДопПараметрыЗапроса = Новый Структура;
	Отказ = Ложь;
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		ПараметрыАктивации = Новый Структура;
		ПараметрыАктивации.Вставить("Отпечаток", Сертификат.Отпечаток);
		ПараметрыАктивации.Вставить("КодАктивации", Сертификат.КодАктивации);
		
		РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.АктивироватьСертификат", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Не Отказ;
КонецФункции

//Получает список доступных сертификатов	
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertList", Новый Структура("Filter", filter), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
КонецФункции 

&НаКлиенте
Функция ПолучитьСписокЛокальныхСертификатов(Кэш, filter=Неопределено) Экспорт
	
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertList", Новый Структура("Filter", filter), ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатЗапроса, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ПолучитьСписокЛокальныхСертификатов");
	КонецЕсли;
	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
	
КонецФункции


//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
КонецФункции

//Функция получает код активации для сертификата
&НаКлиенте
Функция ПолучитьКодАктивацииСертификата(Кэш, Сертификат) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура;
	
	ПараметрыАктивации = Новый Структура("Отпечаток", Сертификат.Отпечаток);
	
	РезультатЗапроса = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПолучитьКодАктивацииСертификата", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
	Возврат Не Отказ;
КонецФункции

////////////////////////////////////////////////////
/////////////////Списочные методы///////////////////
////////////////////////////////////////////////////

//Получает список документов реализации с online.sbis.ru 	
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокДокументовОтгрузки(Кэш);
КонецФункции

//Получает статусы документов сбис
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра = Неопределено) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра);
КонецФункции

//Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
КонецФункции

//Получает список документов по событиям с online.sbis.ru	
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru
&НаКлиенте
Функция СбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт	
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция СбисПолучитьСписокЗадач(Кэш, сбисФильтр, Отказ) Экспорт
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат", Истина);
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "API3.TaskList", сбисФильтр, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSDK.сбисПолучитьСписокЗадач");
	КонецЕсли;
	Возврат Результат
КонецФункции	

////////////////////////////////////////////////////
/////////////////Чтение документов//////////////////
////////////////////////////////////////////////////

//Получает структуру документа СБИС
&НаКлиенте
Функция ПрочитатьДокумент(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПрочитатьДокумент(Кэш,ИдДок,ДопПараметры,Отказ);
КонецФункции

//Получает html по xml	
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, Вложение) Экспорт 
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если ТипЗнч(Вложение) = Тип("Структура") Тогда
		document = Новый Структура("XML", Вложение.XMLДокумента);
	Иначе   // для совместимости с внешними функциями (СформироватьРасхождение)
		document = Новый Структура("XML", Вложение);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(document) Тогда
		Возврат "";
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "GenerateHTMLFromXML", document, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РезультатЗапроса;
КонецФункции

//Проверка подписей на вложении	
&НаКлиенте
Функция ПроверитьПодписиВложения(Кэш,Вложение) Экспорт 
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПроверитьПодписиВложения(Кэш,Вложение);
КонецФункции

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) Экспорт 
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьHTMLВложения(Кэш,ИдДок, Вложение);
КонецФункции

////////////////////////////////////////////////////
//////////////////Действия и операции///////////////
////////////////////////////////////////////////////

//Обрабатывает служебные документы организации	
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация)
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация);
КонецФункции

//Отправляет каталог товаров в СБИС	
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОтправитьКаталогТоваров(Кэш,КаталогТоваров);
КонецФункции

&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт 
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	param = Новый Структура("Идентификатор",ИдДок);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ЭмитироватьКМ", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЭмитироватьКМ");
	КонецЕсли;
	Возврат Результат
	
КонецФункции

//Возможные значения параметра 'ГосОперация':
//Госсистема -> Маркировка
//Операция -> ВводВОборот, Списание, ОтправитьКоды, ГотовКВводуВОборот 
//Госсистема -> Прослеживаемость
//Операция -> ПроверкаРНПТ
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;  
	
	ИдентификаторДокумента = Новый Структура("Идентификатор",ИдДок);
	ГосОперация = Новый Структура("Госсистема, Операция", "Маркировка", "ВводВОборот");
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	Иначе
		Для Каждого ТекСтрока ИЗ ГосОперация Цикл
			Ключ = ТекСтрока.Ключ; 
			Если ДопПараметры.Свойство(Ключ) Тогда
				ГосОперация[Ключ] = ДопПараметры[Ключ];
				ДопПараметры.Удалить(Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	param = Новый Массив;
	param.Добавить(ИдентификаторДокумента);
	param.Добавить(ГосОперация);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "СБИС.ЗарегистрироватьВГоссистеме", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЗарегистрироватьВГоссистеме");
	КонецЕсли;
	Возврат Результат
	
КонецФункции


//Использовать ОбщиеФункции.ПолучитьИнформациюОКонтрагенте
//Получает Информацию о контрагенте с онлайна
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	kontr = Новый Структура; 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		kontr.Вставить( "СвФЛ", СтруктураКонтрагента.СвФЛ );	
	Иначе
		kontr.Вставить( "СвЮЛ", СтруктураКонтрагента.СвЮЛ );
	КонецЕсли;
	
	оКонтрагент = СБИС_ИнформацияОКонтрагенте(Кэш, kontr, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оКонтрагент;
КонецФункции

//Выполняет указанное действие по документу СБИС
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета);
КонецФункции

&НаКлиенте
Функция сбисПодписатьВложения(Кэш, attachmentList, ПараметрыДействия, Отказ) Экспорт 
	Для Каждого Вложение Из attachmentList Цикл
		Если ПараметрыДействия.Сертификат.Свойство("Доверенность") Тогда
			ЭЦП = Новый Массив;	
			ЗаписьЭЦП = Новый Структура;
			СертификатЭЦП = Новый Структура;
			СертификатЭЦП.Вставить("Доверенность", ПараметрыДействия.Сертификат.Доверенность);
			ЗаписьЭЦП.Вставить("Сертификат",СертификатЭЦП);
			ЭЦП.Добавить(ЗаписьЭЦП);
			Вложение.Вставить( "Подпись", ЭЦП );
		Иначе 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция СбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ = Ложь;
	
	ПараметрыКоманды = Новый Структура("Идентификатор,Этап", ИдДок, Новый Структура("Название", ЭтапНазвание));
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
	
	оДокумент = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ПовторитьЭтап", ПараметрыКоманды, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, оДокумент);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции

//Сохраняет вложение по ссылке со сбисДиск в указанный файл
&НаКлиенте
Функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	ПараметрыЗаписи = Новый Структура("Url, FileName", Ссылка, ИмяФайла);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
//////////////Сотрудники////////////////////////////
////////////////////////////////////////////////////

&НаКлиенте
функция СбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ);
КонецФункции

////////////////////////////////////////////////////
//////////////Серверные настройки вызов/////////////
////////////////////////////////////////////////////

//Возвращает доступность получения настроек с облака для способа обмена.
&НаКлиенте
Функция ДоступныСерверныеНастройки() Экспорт
	Возврат	Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьXslt(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "GetXslt", , ДопПараметрыЗапроса, Отказ);
	Если Результат.Свойство("result") Тогда
		Результат = Результат.result;
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция ПолучитьИни(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	Если Не ДопПараметрыЗапроса.Свойство("СообщатьПриОшибке") Тогда
		ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	КонецЕсли;
	Если ИмяМетода = "ReadConfig" Тогда
		СбисМетодПозвать = "IntegrationConfig." + ИмяМетода;
		Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, СбисМетодПозвать, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Иначе
		СбисМетодПозвать = "IntegrationConnection." + ИмяМетода;
		Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, СбисМетодПозвать, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
		Если Результат = Неопределено Тогда
			Отказ = Истина;
			Результат = Кэш.ОбщиеФункции.сбисИсключение(, СбисМетодПозвать, 756, "Подключение недоступно", "Возможно оно недоступно для выбранного пользователя, либо было удалено.");
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗаписатьConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConnection.WriteConnection", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConnection.ReadConnectionList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConfig(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "IntegrationConfig.ReadConfigList", Новый Структура("filter,ini", ПараметрыМетода, Неопределено), ДопПараметрыЗапроса, Отказ)
КонецФункции

////////////////////////////////////////////////////
//////////////////Статистика вызов//////////////////
////////////////////////////////////////////////////

//Отправляет собщение о статистике на online
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку", Истина);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.WriteStat", Новый Структура("param", СообщениеСтатистики), ДопПараметры, Отказ);
КонецФункции

//Отправляет собщение о ошибке на online
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	СообщениеОбОшибке.data = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(СообщениеОбОшибке.data);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.WriteError", Новый Структура("param", СообщениеОбОшибке), ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция сбисПроверкаОбновления(Кэш, ИнформацияОТекущейВерсии, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку", Ложь);
	Возврат СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, "API3.GetProductVersionStatus", ИнформацияОТекущейВерсии, ДопПараметры, Отказ);
КонецФункции

////////////////////////////////////////////////////
//////////////////Системные команды/////////////////
////////////////////////////////////////////////////

//Добавляет СБИСПлагин в Кэш	
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	ФормаExtSDK1 = Кэш.ГлавноеОкно.СбисПолучитьФорму("ExtSDK");
	ФормаExtSDK1.МестныйКэш = Кэш;
	МестныйКэш = Кэш;
	//Ставим время по-умолчанию 60 секунд. После меняется при наличии одноименного узла в сбисПараметрах при установке настроек.	
	//Ставим время на отправку по-умолчанию 120 секунд. После меняется при наличии одноименного узла в сбисПараметрах при установке настроек.
	ПараметрыВключения = Новый Структура("ВремяОжиданияОтвета, ВремяОжиданияОтвета_Отправка, КоличествоПотоков, ИнтеграцияИмя", 60, 120, 10, "ExtSdk2");
	Если ЗначениеЗаполнено(ДопПараметры) Тогда 
		ЗаполнитьЗначенияСвойств(ПараметрыВключения, ДопПараметры);
	КонецЕсли;
	РезультатЗапроса = ФормаExtSDK1.ПолучитьМодульИнтеграции(Кэш,ПараметрыВключения,Отказ);
	Если Отказ Тогда
		Возврат ФормаExtSDK1.СбисОценитьРезультатВключения(Кэш, РезультатЗапроса, ДопПараметры, Отказ);
	КонецЕсли;
		
	Кэш.СБИС.ОбменВключен = Истина;
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Вставить("Форма_" + ПараметрыВключения.ИнтеграцияИмя, ЭтаФорма);
	Кэш.СБИС.ПараметрыИнтеграции.ГенераторФЭД = Истина;
	МодульОбъектаКлиент().УстановитьПараметрыГлобальногоМодуля(, Кэш); 
	
	СбисУстановитьПодпискиСбис3Плагина(Кэш);
	Возврат ФормаExtSDK1.СбисОценитьРезультатВключения(Кэш, РезультатЗапроса, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция Завершить(Кэш, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.Сбис.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ЗавершитьExtSDK(Кэш, ДопПараметры, Отказ)
КонецФункции

&НаКлиенте
Процедура СбисУстановитьПодпискиСбис3Плагина(Кэш)
	ПараметрыПодписчиков = Новый Структура("Кэш", Кэш);
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("extsdk2.async.progress", 	Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncProgress",	ПараметрыПодписчиков, ЭтаФорма));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("UnValidToken",  		 	Новый Структура("Функция, Параметры, Модуль", "UnValidToken",			ПараметрыПодписчиков, ЭтаФорма));
	//Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("extsdk2.async.error",		Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncError",		ПараметрыПодписчиков, ЭтаФорма));
	//Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("extsdk2.async.complete",	Новый Структура("Функция, Параметры, Модуль", "ExtSdk2AsyncComplete",	ПараметрыПодписчиков, ЭтаФорма));
КонецПроцедуры

////////////////////////////////////////////////////
/////////////Асинхронные События////////////////////
////////////////////////////////////////////////////

//Обработка события прогресса отправки пакета
&НаКлиенте
Процедура ExtSdk2AsyncProgress(РезультатВызова, ПараметрыОбработки) Экспорт
	//Тут происходит ничего
КонецПроцедуры

&НаКлиенте
Процедура UnValidToken(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	Кэш.СБИС.Авторизован = Ложь;
	Кэш.ТекущийСеанс.РасчитанныеЗначения.Вставить("ОшибкаНаФормеАвторизации", РезультатВызова.data.message);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	Кэш.ОбщиеФункции.СбисВызватьАвторизацию(Кэш, СбисДополнительныеПараметры);
КонецПроцедуры

//Обработка успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	ПараметрыОбработки.Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSdk.WriteDocumentEx_Message(РезультатВызова.Result, ПараметрыОбработки);
КонецПроцедуры

//Обработка ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	Error = Неопределено;
	Если НЕ РезультатВызова.Свойство("Error", Error) Тогда
		Error = РезультатВызова;	
	КонецЕсли;
	WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки);
	ПараметрыОбработки.Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSdk.WriteDocumentEx_Error(Error, ПараметрыОбработки);
КонецПроцедуры

//Обработка временных файлов, сгенерированных в процессе отправки
&НаКлиенте
Процедура WriteDocumentEx_ОбработатьВременныеФайлы(РезультатВызова, ПараметрыОбработки)
	Попытка
		ВложенияОбработаны = ПараметрыОбработки.Команда.Параметры.Document.Вложение;
		Для Каждого ВложениеПакета Из ВложенияОбработаны Цикл
			КлючВременногоФайла = ВложениеПакета;
			Если	Не КлючВременногоФайла.Свойство("Файл",			КлючВременногоФайла)
				Или Не КлючВременногоФайла.Свойство("ПутьКФайлу",	КлючВременногоФайла) Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл = ПараметрыОбработки.Кэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(КлючВременногоФайла);
			Если СбисВременныйФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СбисВременныйФайл.Освободить = Истина;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	ПараметрыОбработки.Кэш.ОбщиеФункции.СбисОчиститьВременныеФайлы();
КонецПроцедуры

////////////////////////////////////////////////////
/////////////////////СБИСПлагин/////////////////////
////////////////////////////////////////////////////

//////// Отправка ////////////////

//Отправляет сформированные пакеты документов	
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки);
КонецФункции

//Точка входа завершения отправки
&НаКлиенте
Процедура СбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисПолучитьОтветыПоОтправке(Кэш);
КонецПроцедуры

&НаКлиенте
Функция Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыПодготовки, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыПодготовки, ДопПараметры, Отказ);
КонецФункции

//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура Отправка_Вызов(Кэш, ПараметрыОтправки, ДопПараметры) Экспорт
	Отказ = Ложь;
	Форма_ExtSDK = Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK;
	ПараметрыВыполнить = Новый Структура("СоставПакета, СтатусПакета, Отказ, Ошибки, ДокументОтправить", ПараметрыОтправки.СоставПакета, ПараметрыОтправки.СтатусПакета, Ложь, Новый Массив);
	Сбис3Команда = Форма_ExtSDK.СБИСПлагин_Команда(Кэш, "WriteDocumentEx",,,Отказ);
	Если Отказ Тогда
		//Упал метод генерации queryID, прерываем отправку.
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Сбис3Команда);
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", Сбис3Команда.details);
		Возврат;
	КонецЕсли;
	Если Не ПараметрыОтправки.Свойство("ДокументОтправить", ПараметрыВыполнить.ДокументОтправить) Тогда
		//Переадресация на форму интеграции для КриптоExtSDK
		Результат = Кэш.Интеграция.Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыВыполнить, Новый Структура, Отказ);
		Если Результат.Отказ Тогда
			ОшибкаПодготовки = Результат.Ошибки[0];//Пока завязка на первую ошибку
			СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(ОшибкаПодготовки, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
			//Чтобы ошибка подготовки пакета попала в итоговый результат
			Форма_ExtSDK.Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, Сбис3Команда.Идентификатор, ПараметрыОтправки.СоставПакета);
			Форма_ExtSDK.Отправка_ОбработатьОшибкуОтправки(Кэш, Сбис3Команда, СбисИсключение);
			Возврат;
		КонецЕсли;
		//Счетчик по обработанным документам
		Кэш.РезультатОтправки.ПорНомер = Кэш.РезультатОтправки.ПорНомер + 1;
	КонецЕсли;
	Если ПараметрыВыполнить.СтатусПакета = "Готов" Тогда
		Сбис3Команда.ВремяОжиданияОтвета = Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета_Отправка;
		Сбис3Команда.Параметры = Новый Структура("Document", ПараметрыВыполнить.ДокументОтправить);
		
		ПараметрыСобытий = Новый Структура("Кэш, СоставПакета", Кэш, ПараметрыОтправки.СоставПакета);
		//Обработка событий остаётся по-старому.
		Сбис3Команда.События.Вставить("Error",			Новый Структура("Функция, Параметры, Модуль",	"WriteDocumentEx_Error",		ПараметрыСобытий, ЭтаФорма));
		Сбис3Команда.События.Вставить("Message",		Новый Структура("Функция, Параметры, Модуль",	"WriteDocumentEx_Message",		ПараметрыСобытий, ЭтаФорма));
		Сбис3Команда.События.Вставить("НеПолученОтвет",	Новый Структура("Функция, Параметры",			"WriteDocumentEx_Error",		ПараметрыСобытий));
		Сбис3Команда.События.Вставить("Before_Call",	Новый Структура("Функция, Параметры",			"WriteDocumentEx_Before_Call",	ПараметрыСобытий));
		Сбис3Команда.События.Вставить("After_Call",		Новый Структура("Функция, Параметры",			"WriteDocumentEx_After_Call",	ПараметрыСобытий));
				
		Результат = Форма_ExtSDK.СБИСПлагин_ОтправитьКоманду_Асинхронно(Кэш, Сбис3Команда, ДопПараметры, Отказ);
		ПараметрыОтправки.СтатусПакета = "Отправлен";
		Если Отказ Тогда
			Сбис3Команда.Ответ = Кэш.ОбщиеФункции.СбисИсключение(Результат.Ответ, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
			Форма_ExtSDK.Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, Сбис3Команда.Идентификатор, ПараметрыОтправки.СоставПакета);
			Форма_ExtSDK.Отправка_ОбработатьОшибкуОтправки(Кэш, Сбис3Команда, Сбис3Команда.Ответ);
		КонецЕсли;
	Иначе
		//Добавим пакет в очередь, пока не будет проставлена пометка Готов
		Кэш.РезультатОтправки.ПодготовленныеКОтправке.Вставить(ПараметрыВыполнить.СоставПакета.Идентификатор, ПараметрыВыполнить);
	КонецЕсли;
	
КонецПроцедуры

////////////Обертки///////////////

&НаКлиенте
Функция СБИСПлагин_ЗаписатьСотрудника(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ЗаписатьСотрудника", param, ДопПараметры,Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЗаписатьСотрудника");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ИмпортНоменклатурыИзCML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИмпортНоменклатурыИзCML", param, ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИмпортНоменклатурыИзCML");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ИнформацияОСлужебныхЭтапах(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИнформацияОСлужебныхЭтапах", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИнформацияОСлужебныхЭтапах");
	КонецЕсли;
	Возврат Результат
КонецФункции	
	
&НаКлиенте
Функция СБИСПлагин_ОбработкаСлужебныхЭтапов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ProcessServiceStagesEx", Новый Структура("Filter", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОбработкаСлужебныхЭтапов");
	КонецЕсли;
	Возврат Результат
КонецФункции

//Обработка внешнего файла в FileLoader. Вызов делается в ExtSDK2
&НаКлиенте
Процедура СБИСПлагин_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ДанныеФайла.Файл.Вставить("ПутьКФайлу", ДанныеФайла.Вложение.ПолноеИмяФайла); 
КонецПроцедуры

//Обработка XML файла при отправке. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура СБИСПлагин_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ВременныйПутьФайлаДокумента = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент();
	ВременныйФайлТекст = Новый ЗаписьТекста(ВременныйПутьФайлаДокумента, "windows-1251");
	ВременныйФайлТекст.Записать(ДанныеФайла.Вложение.XMLДокумента);
	ВременныйФайлТекст.Закрыть();
	ДанныеФайла.Файл.Вставить("ПутьКФайлу", ВременныйПутьФайлаДокумента);
КонецПроцедуры
	
&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокумент(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocument", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокумент");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокументКакHTML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocumentAsHTML", Новый Структура("Parameter", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокументКакHTML");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_РасшифроватьФайл(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "DecryptFile2", Новый Структура("Param", param), ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_РасшифроватьФайл");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокДокументов(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокДокументов", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadDocuments");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокИзменений", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadDocuments");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокНашихОрганизаций(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокНашихОрганизаций", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadOurOrganizations");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокДокументовПоСобытиям(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокДокументовПоСобытиям", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_СписокДокументовПоСобытиям");
	КонецЕсли;
	Возврат Результат;
КонецФункции

#Область include_core_vo2_СпособыОбмена_ExtSDK_2_ВнешниеОбертки
#КонецОбласти

////////////////////////////////////////////////////
///////////////////Прочие функции///////////////////
////////////////////////////////////////////////////

// Заглушка (SDK)
&НаКлиенте
Функция ВключитьОтладку(Кэш, КаталогОтладки) Экспорт
КонецФункции

// Заглушка (SDK)
&НаКлиенте
Функция ОтключитьОтладку(Кэш) Экспорт
КонецФункции

// Изменяет каталог отладки с соответствующими проверками
&НаКлиенте
Функция УстановитьКаталогОтладки(Кэш) Экспорт
	ГлавноеОкно = Кэш.ГлавноеОкно;
	КаталогДоИзменения = Кэш.Парам.КаталогОтладки;
	
	// Если никакой каталог не задан и мы поставили галку, то открывать выбор каталога
	Если	ГлавноеОкно.РежимОтладки 
		И	ГлавноеОкно.РежимОтладки <> Кэш.Парам.РежимОтладки
		И	ГлавноеОкно.КаталогОтладки = "" Тогда
		РежимВыбора = Истина;
	Иначе
		РежимВыбора = Ложь;
	КонецЕсли;
	
	Попытка
		КаталогИзменен = УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора);	
	Исключение
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(, "ExtSDK2.УстановитьКаталогОтладкиРекурсивно", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
		ГлавноеОкно.КаталогОтладки = КаталогДоИзменения;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат КаталогИзменен;
КонецФункции

&НаКлиенте
Функция УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест = "")
	Если ГлавноеОкно.КаталогОтладки = "" Тогда
		Если РежимВыбора Тогда
			ОтказОтВыбора = Ложь;
			л_КаталогОтладки = ГлавноеОкно.сбисВыбратьКаталог(КаталогТест, ОтказОтВыбора);
			Если ОтказОтВыбора Тогда
				ГлавноеОкно.РежимОтладки = Ложь;
				Возврат Истина;
			КонецЕсли;
			ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
		Иначе
			ГлавноеОкно.РежимОтладки = Ложь;
		КонецЕсли;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		//Каталог менялся руками, проверить что такой есть
	Иначе
		л_КаталогОтладки = ГлавноеОкно.сбисФорматКаталога(ГлавноеОкно.КаталогОтладки);
		Файл = Новый Файл(ГлавноеОкно.КаталогОтладки);
		Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда
			КаталогТест	= ГлавноеОкно.КаталогОтладки;
			РежимВыбора	= Истина;
			ГлавноеОкно.КаталогОтладки = "";
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
			Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		КонецЕсли;
		ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
	КонецЕсли;
КонецФункции

//Получает список документов по событиям с online.sbis.ru	
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьСписокСобытий(Кэш, ТипРеестра);
КонецФункции

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция СбисПолучитьСписокДокументов(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПолучитьСписокДокументов(Кэш);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьДанныеФайла(Кэш,Ссылка);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка);
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
функция СбисПолучитьФайл(Кэш,Ссылка) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПолучитьФайл(Кэш,Ссылка);
КонецФункции

&НаКлиенте
функция СБИСЗаписатьВложения(Кэш,СоставПакета, Вложение) экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИСЗаписатьВложения(Кэш, СоставПакета, Вложение);
КонецФункции

//Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
&НаКлиенте
Функция СбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета)
КонецФункции

//Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.ОбработкаСлужебныхДокументов(Кэш);
КонецФункции

//Получает текущую дату в миллисекундах с начала 1970г
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисТекущаяДатаМСек(Кэш);	
КонецФункции

//Если более часа не проверяли статусы, то выводим красное предупреждение	
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры

//Получает Информацию о подписанте документа
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисПодписант(Кэш, ИНН);
КонецФункции

//Получает Информацию о контрагенте с онлайна
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название);
КонецФункции

//Выполняет указанный метод и возвращает результат, либо генерирует и сообщает ошибку.
//Дополнительные параметры - структура, для управления выводом и возвратом результата в случае ошибок. 
//	Возможные значения: СообщатьПриОшибке(Истина),ВернутьОшибку(Ложь),ЕстьРезультат(Ложь), ЖдатьОтвета(Истина). 
//	Так же в качестве дополнительного параметра может быть передана структура Поток и Идентификатор для выполнения запроса.
//Отказ - булево, определяет наличие ошибок в процессе выполнения метода и что вернулось в качестве результата. Если Истина, то структура ошибки с полями "code, message, details"
&НаКлиенте
Функция СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallIntegrationApi(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыCallIntegrationApi = Новый Массив;
	Если Не ПараметрыМетода = Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			ПараметрыCallIntegrationApi.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", Новый Структура("param", ПараметрыCallIntegrationApi));
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallIntegrationApi", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", ПараметрыМетода);
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры,Отказ) Экспорт
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Method", Метод);
	ПараметрыВызова.Вставить("Params", ПараметрыМетода);
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СбисОтправитьИОбработатьКоманду(Кэш, "CallSabyApi2", ПараметрыВызова, ДопПараметры,Отказ);
КонецФункции

&НаКлиенте
Функция ОбновитьЗаписьСопоставления(Кэш, Фильтр, Данные, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "MappingObject.FindAndUpdate", Новый Структура("Filter,Data", Фильтр, Данные), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции
