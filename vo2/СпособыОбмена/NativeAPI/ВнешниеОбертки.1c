&НаКлиенте
Функция СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ВыполнитьДействие", Новый Структура("Документ",document_in), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_ВыполнитьДействие");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПодготовитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПодготовитьДействие", Новый Структура("Документ",document_in), ДопПараметры, Отказ);	
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_ПодготовитьДействие");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат сбисСтрокаВBASE64(ПараметрыСериализовать.Строка);
КонецФункции

&НаКлиенте
Функция СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат сбисФайлСКлиентаВBASE64(ПараметрыСериализовать.ПолноеИмяФайла);
КонецФункции  

//Функция сохраняет по ссылке в файл в зависимости от среды и настройки "вызовы на клиенте".
//При успехе возвращает ссылку на файл, куда сохранили
//При неудаче структуру ошибки
&НаКлиенте
Функция СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ) Экспорт
	ПараметрыВызова = Новый Структура("АдресРесурса", ПараметрыФайла.Ссылка);
	ИмяФайлаПолучить = ПараметрыФайла.ИмяФайла;
	Если Не ЗначениеЗаполнено(ИмяФайлаПолучить) Тогда
		ИмяФайлаПолучить = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("tmp");
	КонецЕсли;
	//#Если ВебКлиент Тогда
	//	Результат = СохранитьВложениеПоСсылкеВФайлНаСервере(КэшДляЗапросаНаСервере(Кэш), ПараметрыВызова, Отказ);
	//	Если Отказ Тогда
	//		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
	//	КонецЕсли;
	//	//Получаем файл с сервера
	//	Результат = СбисПолучитьФайлНаКлиент(Кэш, ИмяФайлаПолучить, Результат, Отказ);
	//	Если Отказ Тогда
	//		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
	//	КонецЕсли;
	//#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	//	ПараметрыВызова.Вставить("ПутьКФайлу", ИмяФайлаПолучить);
	//	Результат = СбисОтправитьИОбработатьКомандуGETНаКлиенте(Кэш, ПараметрыВызова, Отказ);
	//	Если Отказ Тогда
	//		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
	//	КонецЕсли;
	//#Иначе
		//Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			ПараметрыВызова.Вставить("ПутьКФайлу", ИмяФайлаПолучить);
			Результат = СбисОтправитьИОбработатьКомандуGETНаКлиенте(Кэш, ПараметрыВызова, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
			КонецЕсли;
	//	Иначе
	//		Результат = СохранитьВложениеПоСсылкеВФайлНаСервере(КэшДляЗапросаНаСервере(Кэш), ПараметрыВызова, Отказ);
	//		Если Отказ Тогда
	//			Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
	//		КонецЕсли;
	//		//Получаем файл с сервера
	//		Результат = СбисПолучитьФайлНаКлиент(Кэш, ИмяФайлаПолучить, Результат, Отказ);
	//		Если Отказ Тогда
	//			Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_СохранитьПоСсылкеВФайл");
	//		КонецЕсли;
	//	КонецЕсли;
	//#КонецЕсли
	Возврат ИмяФайлаПолучить;
КонецФункции

&НаКлиенте
Функция СБИС_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	СтруктураПараметровЗапроса	= Новый Структура("Фильтр", filter);
	ДопПараметрыВызова			= Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокИзменений", СтруктураПараметровЗапроса, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СписокИзменений");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Возвращает текущую дату/время. Для вызовов сервера - время на сервере.
&НаКлиенте
Функция СБИС_ТекущаяДата(Кэш, Отказ=Ложь) Экспорт
	
	Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
		Возврат ТекущаяДата();
	КонецЕсли;		
	ДопПараметры				= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	СтруктураПараметровЗапроса	= Новый Структура("Параметр", Новый Структура);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОВерсии", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат ТекущаяДата();
	КонецЕсли;
	Возврат РезультатЗапроса.ВнешнийИнтерфейс.ДатаВремяЗапроса;
	
КонецФункции

&НаКлиенте
Функция СБИС_ИнформацияОКонтрагенте(Кэш, СтруктураКонтрагента, ДопПараметры, Отказ) Экспорт
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОКонтрагенте", Новый Структура("Участник", СтруктураКонтрагента), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(СтруктураРезультата, "API.СБИС_ИнформацияОКонтрагенте");
	КонецЕсли;
	
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, param, ДопПараметры, Отказ) Экспорт
	param.Вставить("ДопПоля", "Аккаунт,ИдПрофиля");
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОТекущемПользователе", Новый Структура("Параметр", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_ПолучитьИнформациюОТекущемПользователе");
	КонецЕсли;
	Возврат Результат;
КонецФункции   

&НаКлиенте
Функция СБИС_ПолучитьСписокАккаунтов(Кэш, param, ДопПараметры, Отказ) Экспорт
	ДопПараметры.Вставить("АдресРесурса", "auth/service/?srv=1"); 
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокАккаунтов", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_ПолучитьСписокАккаунтов");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт
	ДопПараметры.Вставить("АдресРесурса", "auth/service/?srv=1");
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПереключитьАккаунт", Новый Структура("Параметр", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  "API.СБИС_ПереключитьАккаунт");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеПакета, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Если	ОписаниеПакета.ИдАккаунта = "" Тогда
		Возврат Новый Структура("ИдДокумента, Тикет", ОписаниеПакета.ИдДокумента, "");
	Иначе
		ДанныеТикета = Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта(Кэш, ОписаниеПакета, Ложь);
		Возврат Новый Структура("ИдДокумента, Тикет, СтарыйИдСессии", ОписаниеПакета.ИдДокумента, ДанныеТикета.Тикет, ДанныеТикета.СтарыйИдСессии);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДМультиСгенерировать(ПараметрыДокумента, НаборПодстановок, ДопПараметры) Экспорт
	
	Попытка
		Кэш = ДопПараметры.Кэш;
		ДопПараметрыВызова = Новый Структура("СообщатьПриОшибке, ВернутьОшибку",  Ложь, Истина);
		
		Отказ = Ложь;
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Format",			ПараметрыДокумента);
		ПараметрыВызова.Вставить("SubstitutionList",НаборПодстановок);
		Результат = СбисОтправитьИОбработатьКоманду(ДопПараметры.Кэш, "Integration.FEDMultiGenerate", ПараметрыВызова, ДопПараметрыВызова, Отказ);
		
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКомандуCallSabyApi2");
		КонецЕсли;
		
		Для Каждого файл Из Результат Цикл
			файл["Тело"] = Кэш.ОбщиеФункции.сбисТекстИзBase64(файл["Тело"])
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДМультиСгенерировать");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция СБИС_ЗаписатьВложение(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ЗаписатьВложение", Новый Структура("Документ", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ЗаписатьВложение");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова) Экспорт
	
	ДопПарметрыВызоваИнтеграции = Новый Структура("АдресРесурса, СообщатьПриОшибке, ВернутьОшибку", "/integration_config/service/", Ложь, Истина);
	
	Результат = СбисОтправитьИОбработатьКоманду(ДопПараметрыВызова.Кэш, "API3.InitConnection", ПараметрыИнит, ДопПарметрыВызоваИнтеграции, ДопПараметрыВызова.Отказ);
	Если ДопПараметрыВызова.Отказ Тогда
		Возврат ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ФункционалВключен(Кэш, ИмяМетода, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	ДопПараметры = Новый Структура; 
	Возврат СбисОтправитьИОбработатьКоманду(Кэш, "ExtSys.FeatureIsOn", Новый Структура("name", ИмяМетода), ДопПараметры, Отказ) = Истина;
КонецФункции

&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт

	//Возврат Истина;
	
	сбисДополнительныеПараметрыОшибки = Новый Структура("АдресРесурса, СообщатьПриОшибке, ВернутьОшибку", "/integration_config/service/", Ложь, Истина);
	СообщениеОбОшибке.data = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(СообщениеОбОшибке.data);
	
	СтруктураПараметровЗапроса = Новый Структура("error", СообщениеОбОшибке);
	Возврат СбисОтправитьИОбработатьКоманду(Кэш, "API3.WriteError", СтруктураПараметровЗапроса, сбисДополнительныеПараметрыОшибки, Отказ);
КонецФункции

&НаКлиенте
Функция сбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
		Возврат РезультатАвторизации;
	КонецЕсли;
	//Если РезультатАвторизации.details = "Для входа введите полученный код подтверждения." Тогда
	//	РезультатАвторизации.message= "Требуется подтверждение действия";
	//	РезультатАвторизации.code	= 303;
	//ИначеЕсли РезультатАвторизации.code = 775 Тогда
	//	РезультатАвторизации.details= "Не удалось авторизоваться по " + ?(ПараметрыРезультата.Параметры.Свойство("Логин"), "логину/паролю.", "сертификату.");
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда//Переключимся на альтернативный домен и повторим авторизацию
	//	Возврат сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	//КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции


