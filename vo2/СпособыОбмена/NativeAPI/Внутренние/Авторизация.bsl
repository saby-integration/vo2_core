 // Авторизуется по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт 	
	МестныйКэш	= Кэш;
	КэшПарам = Новый Структура("ПолнаяВерсияПродукта,ТипПрокси,ПроксиСервер,ПроксиПорт,ПроксиЛогин,ПроксиПароль,UserAgent");
	ЗаполнитьЗначенияСвойств(КэшПарам, Кэш.Парам);//Отправляем только те параметры, что нужны для вызова команды, чтобы не перегружать вызов сервера.
	КэшПарам.Вставить("АдресСервера",Кэш.СБИС.АдресСервера);
	КэшПарам.Вставить("СовместимостьМетодов",Кэш.СовместимостьМетодов);
	
	ДопПараметры= Новый Структура("СообщатьПриОшибке, ЕстьРезультат, ИдСессии, АдресРесурса", Ложь, Истина, "", "/auth/service/");
	ИмяМетода	= "СБИС.Аутентифицировать";
	СтруктураПараметровЗапроса = Новый Структура("Логин, Пароль", Логин, Пароль);
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

&НаКлиенте
Функция АвторизоватьсяПриложением(КэшПарам, ИДПриложения, КлючПриложения, КлючАутентификации,Отказ=Ложь) Экспорт 	
	ДопПараметры= Новый Структура("ИдСессии, АдресРесурса", "", "/oauth/service/");
	ИмяМетода	= "";
	
	СтруктураПараметровЗапроса = Новый Структура("app_client_id, app_secret, secret_key", ИДПриложения, КлючПриложения, КлючАутентификации);
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	Рез = сбисОтправитьИОбработатьКоманду(КэшПарам, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		ПараметрыРезультат.Вставить("Результат", Рез);
	Иначе
		ПараметрыРезультат.Вставить("Результат", Рез.sid);
	КонецЕсли;
	Возврат ПараметрыРезультат;
КонецФункции

// Авторизуется по сертификату		
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	МестныйКэш	= Кэш;
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса", Истина, "", "/auth/service/");
	ИмяМетода	= "СБИС.АутентифицироватьПоСертификату";
	
	СертДвоичныеДанные = Кэш.ФормаЭП.сбисДвоичныеДанныеСертификатаПоОтпечатку(Кэш,Сертификат); 
	СтруктураПараметровЗапроса = Новый Структура("Сертификат", Новый Структура("ДвоичныеДанные", СертДвоичныеДанные));
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	РезультатАвторизации = сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат РезультатАвторизации;	
	КонецЕсли;
	ДвоичныеДанные = Base64Значение(РезультатАвторизации);  
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.txt";
	Попытка
		Кэш.ФормаЭП.сбисРасшифровать(Кэш, ДвоичныеДанные, ИмяВрФ);
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат Кэш.СБИС.МодульОбъектаКлиент.НовыйСбисИсключение(, "сбисРасшифровать", 785, "Ошибка 1С при выполнении метода ""Расшифровать""", ИнформацияОбОшибке.Описание+?(ИнформацияОбОшибке.Причина<>Неопределено," Причина: "+ИнформацияОбОшибке.Причина.Описание,""));
	КонецПопытки;
	
	ЧтениеОтвета = Новый ЧтениеТекста(ИмяВрФ, КодировкаТекста.UTF8, Символы.ПС);
	Результат = ЧтениеОтвета.Прочитать();
	ЧтениеОтвета.Закрыть(); 
	Попытка
		УдалитьФайлы(ИмяВрФ);
	Исключение
	КонецПопытки;
	ПараметрыРезультат.Вставить("Результат", Результат);
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

// Авторизуется по токену	
&НаКлиенте
Функция АвторизоватьсяПоТокену(Кэш,Отказ=Ложь) Экспорт 	
	МестныйКэш	= Кэш;
	
	Токен = ПолучитьТокенДляТекущегоПользователя(Кэш,Отказ);
	Если Отказ Тогда
		Возврат Токен;
	КонецЕсли;
	
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса", Истина, "", "/auth/service/");
	ИмяМетода	= "СБИС.ExternalAuth";
	
	СтруктураПараметровЗапроса = Новый Структура("Token, Params", Токен, Новый Структура());
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);

КонецФункции
//Закрывает текущую сессию	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("АдресРесурса", "/auth/service/");
	сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.Выход", Новый Структура, ДопПараметры, Отказ);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Ложь);
КонецФункции

//Выполняет вызов отправки кода СМС для подтверждения авторизации
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса, ИдСессии", Истина, "/auth/service/", ПараметрыПодтверждения.ИдентификаторСессии);
	СтруктураПараметровЗапроса = Новый Структура("Идентификатор", ПараметрыПодтверждения.Идентификатор);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыПодтверждения.МетодОтправкиКодаПодтверждения, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось отправить код аутентификации.";
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//Функция делает вызов отправки кода в СМС для подтверждения входа
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса, ИдСессии", Истина, "/auth/service/", ПараметрыПодтверждения.ИдентификаторСессии);
	
	СтруктураПараметровЗапроса = Новый Структура("Код, Идентификатор", ПараметрыВвода.ПинКод, ПараметрыПодтверждения.Идентификатор);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПодтвердитьВход", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details= "Не удалось отправить код аутентификации.";
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Истина);
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

// Получает список сертификатов для авторизации	
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса", Истина, "", "/auth/service/");
	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	СертификатыДляАвторизации = Кэш.ФормаЭП.сбисСписокСертификатовДляАвторизации(Кэш, ТекстОшибки);
	Если ТекстОшибки <> "" Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
		
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура("Сертификат", СертификатыДляАвторизации));
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокСертификатовДляАутентификации", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Сертификаты не найдены.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Возврат СписокСертификатов;
	КонецЕсли;

	Object = РезультатЗапроса;
	ObjectList = Неопределено;
	Object.Свойство("Сертификат",ObjectList);
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
				Если Сертификат.Свойство("ДействителенПо") Тогда
					Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
						ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
					Иначе
						ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
					КонецЕсли;
				КонецЕсли;
				 СписокСертификатов.Добавить(Сертификат, Кэш.ОбщиеФункции.ПолучитьПредставлениеСертификата(Сертификат, "[ФИО].([Должность])., [Название].(ИНН [ИНН])., действителен до [ДействителенПо]", Истина, "ДЛФ=DD"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции

//Проверяет действительность текущей сессии
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса", Истина, "/auth/service/");
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПроверитьСессию", Новый Структура, ДопПараметры, Отказ);
	Если Не Отказ
		И Результат.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

