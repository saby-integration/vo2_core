
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ = Ложь) Экспорт 
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ОбменВключен",					Истина);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИнтеграцияИмя",					"SABYHttpClient");
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СтатусыВРазрезеРегламента", 	Истина);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Потоки_МаксимальноеКоличество",	10);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Отправка_РазмерПачки",			10);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИспользоватьНовуюОтправку",		Истина);
	
	СведенияОбИнтеграции = СведенияОбИнтеграции();
	Для Каждого ПараметрИнтеграции Из СведенияОбИнтеграции.Параметры Цикл
		
		МодульОбъектаКлиент().ИзменитьПараметрСбис(ПараметрИнтеграции.Ключ, ПараметрИнтеграции.Значение);
		
	КонецЦикла;
		
	ПараметрыПодключенияКомпоненты	= Новый Структура("ИмяОбработки, ИмяМакета, ИмяКомпоненты", "SABYHttpClient", "SABYHttpsClient", "SABYHttpsClient");
	ОбработчикЗавершенияПодключения	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ПослеПодключенияКомпоненты", Кэш.Интеграция);
	
	Компонента = МодульОбъектаКлиент().ВнешняяКомпонента_Новый(ПараметрыПодключенияКомпоненты);
   	Компонента.ОбработчикЗавершенияПодключения = ОбработчикЗавершенияПодключения; //В серверные вызовы его передать нельзя, поэтому определим сейчас
	
	Попытка
		ВнешняяКомпонента = МодульОбъектаКлиент().ВнешняяКомпонента_Получить(Компонента);
	Исключение
		СбисИсключение = ИнформацияОбОшибке();
		МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Если ВнешняяКомпонента = Неопределено Тогда
		
		МодульОбъектаКлиент().ИзменитьПараметрСбис("ОтложенныйЗапуск", Истина);	
		Отказ = Истина;
		Возврат Ложь;
		
	// блок для обновления компоненты после обновления в справочнике ВО, закоментирован из-за недокументированного поведения методов 1С	
	//ИначеЕсли НЕ ВнешняяКомпонента.ВерсияВХранилище = ВнешняяКомпонента.ОбъектКомпоненты.ВерсияКомпоненты Тогда
	//	
	//	МодульОбъектаКлиент().ИзменитьПараметрСбис("ОтложенныйЗапуск", Истина);
	//	ВнешняяКомпонента.ПринудительнаяУстановка	= Истина;
	//	ВнешняяКомпонента.ВыполненаУстановка		= Ложь;
	//	Отказ = Истина;
	//	МодульОбъектаКлиент().ВнешняяКомпонента_Получить(Компонента);
	//	Возврат Ложь;

	Иначе
		
		ПослеПодключенияКомпоненты(ВнешняяКомпонента);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СведенияОбИнтеграции() Экспорт

	ЛокальныйКэш = МодульОбъектаКлиент().ПолучитьТекущийЛокальныйКэш();
	
	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("ГенераторФЭД",		Истина);
	ПараметрыИнтеграции.Вставить("Шифрование",			Ложь);
	ПараметрыИнтеграции.Вставить("МногопоточныйРежим",	Истина);
	ПараметрыИнтеграции.Вставить("ДоступныСерверныеНастройки",	Истина);
	
	Возврат Новый Структура(
	"Имя, Версия, Модуль, Параметры", 
	"SABYHttpClient", "", ЭтаФорма, ПараметрыИнтеграции);
	
КонецФункции

&НаКлиенте
Функция Завершить(Кэш, ДопонительныеПараметры, Отказ) Экспорт
	Возврат Истина;
КонецФункции 

&НаКлиенте
Процедура  ПослеПодключенияКомпоненты(Компонента, ДопПараметры = Неопределено) Экспорт
		
	ОбъектыИнтеграции = Новый Структура ("Компонента", Компонента.ОбъектКомпоненты);	
	ВладелецФормы.Кэш.СБИС.ДанныеИнтеграции.Вставить("Объекты", ОбъектыИнтеграции);
	
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Версия",		Компонента.ОбъектКомпоненты.ВерсияКомпоненты);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Интеграция",	ЭтаФорма);
    МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ДанныеИнтеграции", ВладелецФормы.Кэш.СБИС.ДанныеИнтеграции); 
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ОтложенныйЗапуск") Тогда
		ВладелецФормы.Кэш.ГлавноеОкно.ПослеОткрытияАвторизация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисКомпонента_Команда(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ)
	Перем Результат, СообщатьПриОшибке, ИдСессии, АдресРесурса, РезультатОтвет;

	Если ДопПараметры.Свойство("Идентификатор") Тогда
		Идентификатор = ДопПараметры.Идентификатор;
	Иначе	
		Идентификатор = Строка(Новый УникальныйИдентификатор);
    КонецЕсли;
	Результат = Новый Структура(
	"Метод,	Параметры, Идентификатор,	Модуль, Аккаунт, Ответ, ВремяОжиданияОтвета, ВремяВызова, ВремяПолучения, Запрос", //Спилить лишнее
	Метод,	ПараметрыМетода,	Идентификатор,	Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя);
	
	Если Не ДопПараметры.Свойство("ВремяОжиданияОтвета", Результат.ВремяОжиданияОтвета) Тогда
		Результат.ВремяОжиданияОтвета = Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета;
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ИдСессии", ИдСессии) Тогда
		ИдСессии = Кэш.Парам.ИдентификаторСессии;
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("АдресРесурса", АдресРесурса) Тогда
		АдресРесурса = "/service/?srv=1";
	КонецЕсли;

	Запрос = Новый Соответствие();
	Запрос = Новый Структура();
	Запрос.Вставить("Url", Кэш.СБИС.АдресСервера+Прав(АдресРесурса,СтрДлина(АдресРесурса)-1));
	Запрос.Вставить("SabyMethod", Метод);

	ТекстЗапроса = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(ПараметрыМетода);		
	Запрос.Вставить("SabyParams",ТекстЗапроса);
	
	Если ДопПараметры.Свойство("Type") Тогда
		Запрос.Вставить("Type", ДопПараметры.Type); 	
	Иначе	
		Запрос.Вставить("Type", "POST");
	КонецЕсли;
	
	Запрос.Вставить("QueryId",Идентификатор);
	
	Headers = Новый Массив;	
	Header = Новый Структура();
	Header.Вставить("name","Content-Type"); 
	Header.Вставить("value","application/json;charset=utf-8");	
	Headers.Добавить(Header);

	Если НЕ ИдСессии = Неопределено Тогда
		
		Header = Новый Структура();
		Header.Вставить("name", "X-SBISSessionID"); 
		Header.Вставить("value", ИдСессии);                                      
		Headers.Добавить(Header);
		
	КонецЕсли;
	
	Запрос.Вставить("Headers", Headers);
	Запрос.Вставить("DictAsStruct",Истина);
	
	//Добавить Попытку исключение с СообщатьПриОшибке
	ЗапросXml = EncodeXdtoXml(Запрос);  
	Результат.Запрос = ЗапросXml;
	
	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Функция СбисОтправитьКомандуАсинхронно(Кэш, Команда, ДопПараметры, Отказ) 
	Перем ПреобразовыватьДаты, СообщатьПриОшибке, ИдСессии, АдресРесурса, РезультатОтвет;
	  
	Команда.ВремяВызова = ТекущаяДата(); 

	//Добавить Попытку исключение

	РезультатВызова = Кэш.СБИС.ДанныеИнтеграции.Объекты.Компонента.Request(Команда.Запрос);
	
	Возврат РезультатВызова;
	
КонецФункции

&НаКлиенте
Функция СбисПолучитьОтвет_Синхронно(Кэш, Команда, ДопПараметры, Отказ)
	Перем Результат;

	Результат = Неопределено; 
	Пока Истина Цикл
		//Обернуть в попытку
		РезультатПолученияXml = Кэш.СБИС.ДанныеИнтеграции.Объекты.Компонента.ReadAllResponse();
		
		Если ЗначениеЗаполнено(РезультатПолученияXml) Тогда
			РезультатСоответствие = DecodeXmlXdto(РезультатПолученияXml);
			РезультатПолучения = ПолучитьСтруктуруИзСоответствия(РезультатСоответствие);
			Для Каждого Ответ Из РезультатПолучения.Response Цикл
				Если Команда.Идентификатор = Ответ.QueryId Тогда
					Результат = Ответ.Result;
					Возврат Результат;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
				
		Если	Не Результат = Неопределено 				
			Или	Не Команда.ВремяОжиданияОтвета Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	
			Прервать;
		ИначеЕсли ТекущаяДата() - Команда.ВремяВызова > Команда.ВремяОжиданияОтвета Тогда
			//Установленный на команде таймаут
			Отказ = Истина;
			Результат = Кэш.ОбщиеФункции.СбисИсключение(, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьОтвет_Синхронно",775,, Команда.Метод + "() не вернул ответ за разумное время",,"https://sbis.ru/help/integration/1C_set/modul/typical_errors/plugin_answer");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруИзСоответствия(ЗначВход) Экспорт
	
	СтруктураВозврат=Новый Структура;
	
	Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
		
		ФлагОщибка=Ложь;
		
		Для Каждого р Из ЗначВход Цикл
			Попытка
				СтруктураВозврат.Вставить(р.Ключ,ПолучитьСтруктуруИзСоответствия(р.Значение));
			Исключение
				ФлагОщибка=Истина;
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
			СтруктураВозврат = Новый Массив;
			Для Каждого р Из ЗначВход Цикл
				ДопСтруктура=Новый Структура;
				ДопСтруктура.Вставить("Ключ",р.Ключ);
				ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
				СтруктураВозврат.Добавить(ДопСтруктура);
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураВозврат; 
		
	ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
		
		НовыйМассив=Новый Массив;
		Для Каждого ЭлМ Из ЗначВход Цикл
			НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
		КонецЦикла;
		Возврат НовыйМассив;
		
	КонецЕсли;
	
	Возврат ЗначВход; 
	
КонецФункции

&НаКлиенте
Функция МассивСтруктурВСтруктуру(МассивСтруктур)
	
	Результат = Новый Структура;
	
	Для Каждого СтруктураМассива Из МассивСтруктур Цикл 
		
		Попытка	
			Результат.Вставить(XMLСтрока(СтруктураМассива.Ключ), СтруктураМассива.Значение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СбисОбработатьРезультат_Синхронно(Кэш, Команда, ДопПараметры, Отказ)
	Перем Результат;
	
	СбисРезультат = Команда.Ответ;
	
	
	Если СбисРезультат.Data.Свойство("error", Результат) Тогда
		Отказ = Истина;
		Результат = МодульОбъектаКлиент().НовыйСбисИсключение(Результат, Команда.Метод);		
	ИначеЕсли СбисРезультат.Data.Свойство("result", Результат) Тогда	
		
	Иначе
		//Метод не вернул результат. Проверить, должно ли так быть. (Для метода, у которого однозначно должен быть ответ это ошибка)
		Если	ДопПараметры.Свойство("ЕстьРезультат")
			И	ДопПараметры.ЕстьРезультат Тогда
			Отказ = Истина;
			Результат = Кэш.ОбщиеФункции.СбисИсключение(,Команда.Метод,400,,"Отсутствует результат выполнения метода " + Команда.Метод + "()");
		Иначе
			Результат = Неопределено;
		КонецЕсли;		
	КонецЕсли;
		
	Возврат Результат;
	  
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ) Экспорт
	Если ДопПараметры = Неопределено Тогда
		 ДопПараметры = Новый Структура;
	КонецЕсли;
	 
    Команда = СбисКомпонента_Команда(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда 
		//Сделать исключение
		//Возврат Кэш.ОбщиеФункции.СбисИсключение(Сбис3Команда,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКоманду");
	КонецЕсли;
		
	ИД = СбисОтправитьКомандуАсинхронно(Кэш, Команда, ДопПараметры, Отказ);

	Если Не Отказ Тогда	
		Если ДопПараметры.Свойство("Асинх") И ДопПараметры.Асинх Тогда
			Возврат ИД;	
		Иначе
			РезультатВызова = СбисПолучитьОтвет_Синхронно(Кэш, Команда, ДопПараметры, Отказ);
			Команда.Ответ = РезультатВызова;  
			//Проверим ответ на наличие ошибок
			Результат = СбисОбработатьРезультат_Синхронно(Кэш, Команда, ДопПараметры, Отказ);
			Если Отказ Тогда
			//	Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.ИнтеграцияИмя + "." + Метод);
				Если Не ДопПараметры.Свойство("СообщатьПриОшибке")
					Или	ДопПараметры.СообщатьПриОшибке Тогда
					Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
				КонецЕсли;
				Если 	(	ДопПараметры.Свойство("ВернутьОшибку")
					И	Не	ДопПараметры.ВернутьОшибку) Тогда
					Возврат Неопределено; 
				КонецЕсли;
			КонецЕсли;
            Возврат Результат;

		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция сбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Булево(СтрЧислоВхождений(АдресСервера, ".saby.ru"));
КонецФункции


//Функция переключает выбранный сервер на резерв
&НаКлиенте
Функция сбисПереключитьДомен(Кэш, ПараметрыВызова, Отказ) Экспорт
	
	РезультатАвторизации = ПараметрыВызова.Результат;
	Если	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен
		Или	(	ПараметрыВызова.Свойство("ПроверкаВыполнена")
			И	ПараметрыВызова.ПроверваВыполнена) Тогда//Уже включен резервный домен, или проверка была выполнена выходим
		Возврат РезультатАвторизации;
	КонецЕсли;
	Отказ = Ложь;
	СтрокаЗамена1 = ".sbis.ru";
	СтрокаЗамена2 = ".saby.ru";
	
	//Пробуем сделать запрос на резервный адрес если не включено.
	Кэш.СБИС.АдресСервера = СтрЗаменить(Кэш.СБИС.АдресСервера, СтрокаЗамена1, СтрокаЗамена2);
	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен = Истина;
	
	Отказ = Ложь;
	РезультатАвторизации2 = Кэш.Интеграция.СформироватьНастройкиПодключения(Кэш);
	Если Отказ Тогда
		Возврат РезультатАвторизации2;
	КонецЕсли;
	ПараметрыВызова.Вставить("Результат", Кэш.Интеграция.сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыВызова.Метод, ПараметрыВызова.Параметры, ПараметрыВызова.ДополнительныеПараметры, Отказ));
	ПараметрыВызова.Вставить("ПроверкаВыполнена", Истина);
	РезультатАвторизации2 = Кэш.Интеграция.сбисРезультатАвторизации(Кэш, ПараметрыВызова, Отказ);
	Если	Отказ 
		И	РезультатАвторизации2.code = 759 Тогда//Резервный адрес не доступен, может быть проблема прокси, либо неверно указан адрес. Вернём как было
		Кэш.СБИС.АдресСервера = СтрЗаменить(Кэш.СБИС.АдресСервера, СтрокаЗамена2, СтрокаЗамена1);
	Иначе
		РезультатАвторизации = РезультатАвторизации2;
	КонецЕсли;
	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен = сбисВключенРезервныйДомен(Кэш, Кэш.СБИС.АдресСервера);
	Возврат РезультатАвторизации;
	
КонецФункции


