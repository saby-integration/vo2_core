

//Методы взаимодействия с сервисом IntegrationConfig для выполнеия последовательности команд Write, Prepare, Execute.
//  Отправка данных по загружаемым в 1С объектам на сервис IntegrationConfig
&НаКлиенте
Функция ЗаписатьПосылкуСОбъектами(Кэш,СтруктураПослыки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат =  сбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Write", Новый Структура("param", СтруктураПослыки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ЗаписатьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Ожидание подготовки данных к загрузке объектов 1С на сервисе IntegrationConfig
&НаКлиенте
Функция ПодготовитьПосылкуПорционно(Кэш, ИдентификаторПосылки, Отказ) Экспорт
	requiredActionsCount	= 1;
	countProcessed			= 0;
	allObjects				= 1;
	countError				= 0;
	Для Сч = 0 По 4500 Цикл
		Результат = ПодготовитьПосылкуСОбъектамиПорционно(Кэш, ИдентификаторПосылки, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуПорционно");
		КонецЕсли;
		Если Результат.Свойство("all_objects") Тогда
			allObjects		= Результат.all_objects;
			countProcessed	= Результат.count_processed;
			countError		= Результат.count_error;
		КонецЕсли;
		requiredActionsCount = Результат.requiredActions.Количество();
		Если requiredActionsCount = 0 И countProcessed + countError >= allObjects Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Отказ = Истина;
	Возврат Кэш.ОбщиеФункции.сбисИсключение("Не удалось обработать запрос, повторите попытку позже или уменьшите количество строк в документе.", "API.ПодготовитьПосылкуПорционно");
КонецФункции

//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция ПодготовитьПосылкуСОбъектамиПорционно(Кэш, ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "Connector.Prepare", Новый Структура("ConnectorName,SyncDocId,ReturnIterationResults", "Saby", ИдентификаторПосылки, Истина), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig
&НаКлиенте
Функция ПодготовитьПосылкуСОбъектами(Кэш, ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "Connector.Prepare", Новый Структура("ConnectorName,SyncDocId", "Saby", ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получение объекта на загрузку в 1С
&НаКлиенте
Функция ПолучитьОбъектНаЗагрузку(Кэш,ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.GetObjectForExecute", Новый Структура("SyncDocId", ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьОбъектНаЗагрузку");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Рассчет объекта на сервисе
&НаКлиенте
Функция РассчитатьОбъектыНаЗапись(Кэш, СтруктураОбъекта, ИдентификаторПосылки, ИмяИни, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.CalcObjectForExecute", Новый Структура("ObjectData,IniName,SyncDocId", СтруктураОбъекта, ИмяИни, ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Обновление записи Маппинга объекта на сервисе
&НаКлиенте
Функция ОбновитьЗаписьСопоставления(Кэш, Фильтр, Данные, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "MappingObject.FindAndUpdate", Новый Структура("Filter,Data", Фильтр, Данные), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Запись объекта 1С на сервис
&НаКлиенте
Функция ОбновитьОбъектСБИСИзОбъекта1С(Кэш, СтруктураОбъекта, ИдентификаторПодключения, Отказ) Экспорт	
	СтруктураЗаписиДокумента = Новый Структура;
	СтруктураЗаписиДокумента.Вставить("Uuid", Строка(Новый УникальныйИдентификатор));
	СтруктураЗаписиДокумента.Вставить("Data", Новый Структура("ini_name", "СинхВыгрузка_АвансовыйОтчет"));
	
	МассивОбъектов = Новый Массив;
	СтруктураЗаписиОбъекта = Новый Структура;
	СтруктураЗаписиОбъекта.Вставить("Type", "Документы.АвансовыйОтчет");
	СтруктураЗаписиОбъекта.Вставить("StatusId", "Обработан");
	СтруктураЗаписиОбъекта.Вставить("Data", Новый Структура("raw_data,data_is", СтруктураОбъекта, СтруктураОбъекта));
	МассивОбъектов.Добавить(СтруктураЗаписиОбъекта);
	
	СтруктураПакета = Новый Структура("ConnectionId,ExtSyncDoc,ExtSyncObj", ИдентификаторПодключения, СтруктураЗаписиДокумента, МассивОбъектов); 
	
	ПараметрыЧтения = Новый Структура("param", СтруктураПакета);
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");
	ИдентификаторЗаписиДокумента = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Write", ПараметрыЧтения, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(ИдентификаторЗаписиДокумента, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;
	
	ПараметрыЧтения = Новый Структура("param", Новый Структура("SyncDocId", ИдентификаторЗаписиДокумента));
	РезультатСобытия = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Execute", ПараметрыЧтения, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		РезультатСобытия = Кэш.ОбщиеФункции.СбисИсключение(РезультатСобытия, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;
	Возврат РезультатСобытия; 
КонецФункции

//Получение структуры API3 объекта с сервиса
&НаКлиенте
Функция ПрочитатьАПИОбъектСБИС(Кэш, ИдСБИС, ИмяСБИС, Отказ) Экспорт
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ИдСБИС);
	
	ПараметрыЧтения = Новый Структура("Type,IdList", ИмяСБИС, МассивИдентификаторов);
    ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	СтруктураОбъекта = сбисОтправитьИОбработатьКоманду(Кэш, "API3.GetSbisObject", ПараметрыЧтения, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СтруктураОбъекта, "API.ПрочитатьАПИОбъектСБИС");
	КонецЕсли;
	
	Для Индекс = 0 По СтруктураОбъекта.Количество() - 1 Цикл
        ЛокальныйОбъект = СтруктураОбъекта[Индекс];
		Если ЛокальныйОбъект.Свойство("error") Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ЛокальныйОбъект.error, "API.ПрочитатьАПИОбъектСБИС");
		Иначе
			Возврат ЛокальныйОбъект;
		КонецЕсли;
    КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ExtSys_FeatureIsOn(ПараметрыФичи, ДопПараметрыВызова) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь); 
	Возврат СбисОтправитьИОбработатьКоманду(ДопПараметрыВызова.Кэш, "ExtSys.FeatureIsOn", Новый Структура("name", ПараметрыФичи.НазваниеФичи), ДопПараметры, Ложь) = Истина;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьСопоставлениеСторон(Кэш, ПараметрыДанныеУчастников, ДопПараметры=Неопределено, Отказ) Экспорт
	ДопПараметры = Новый Структура;
	ПараметрыВызова = Новый Структура("data", ПараметрыДанныеУчастников);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSysOrganization.MassFind", ПараметрыВызова, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
//////////////Серверные настройки вызов/////////////
////////////////////////////////////////////////////
&НаКлиенте
Функция ПолучитьXslt(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	ПараметрыЗапроса = Новый Структура("mask", "*.xslt");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "API301.FindXSLT", ПараметрыЗапроса, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	Результат = Кэш.РаботаСJSON.сбисПрочитатьJSON(Результат);
	Если Результат.Свойство("data") Тогда
		Результат = Результат.data;
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция ПолучитьИни(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса",	"/integration_config/service/");
	ДопПараметрыЗапроса.Вставить("РежимКонвертации","Стандарт");
	сбисСервис = "IntegrationConnection";
	Если ИмяМетода = "ReadConfig" Тогда                                     
		сбисСервис = "IntegrationConfig";
	КонецЕсли;
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, сбисСервис + "." + ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Результат = МассивСтруктурВСтруктуру(Результат);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьИни");
	ИначеЕсли Результат = Null Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.сбисИсключение(,"API.ПолучитьИни", 756, "Подключение недоступно", "Возможно оно недоступно для выбранного пользователя, либо было удалено.");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗаписатьConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConnection.WriteConnection", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса",	"/integration_config/service/");
	ДопПараметрыЗапроса.Вставить("РежимКонвертации","Стандарт");
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConnection.ReadConnectionList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConfig(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConfig.ReadConfigList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	Возврат сбисRecordSet_to_1C(РезультатЗапроса, Отказ);
	
КонецФункции

&НаКлиенте
Функция сбисRecordSet_to_1C(сбисСписокЗаписей, Отказ) Экспорт 
	сбисДанные		= Неопределено;
	сбисКлючи		= Неопределено;
	сбисРезультат	= Новый Массив;
	Если Не ТипЗнч(сбисСписокЗаписей) = Тип("Структура")
		Или	Не сбисСписокЗаписей.Свойство("d", сбисДанные)
		Или Не сбисСписокЗаписей.Свойство("s", сбисКлючи)Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Переданая структура не имеет формат RecordSet");
	КонецЕсли;
	Для Каждого СтрокаДанных Из сбисДанные Цикл
		сбисСтрокаРезультат = Новый Структура;
		Для ИндексКлюча = 0 По сбисКлючи.Количество()-1 Цикл
			Попытка
				сбисСтрокаРезультат.Вставить(сбисКлючи[ИндексКлюча]["n"], СтрокаДанных[ИндексКлюча]);
			Исключение
				//Некорректные ключи не обрабатываются
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		сбисРезультат.Добавить(сбисСтрокаРезультат);
	КонецЦикла;
	Возврат сбисРезультат;
	
КонецФункции




