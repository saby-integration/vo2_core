
&НаКлиенте
Процедура WriteDocumentEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	Перем ОшибкаРезультат;
	
    ОшибкаОтправки		= Ложь;
	Кэш					= ДопПараметры.Кэш;
	DocumentOut			= АсинхроннаяСБИСКоманда.АргументВызова.ДокументОтправить;
	//Записать в СБИС
	
	СтруктураРезультата = СБИС_ЗаписатьДокумент(Кэш, DocumentOut,Новый Структура("Асинх, Идентификатор",Истина,АсинхроннаяСБИСКоманда.Идентификатор),ОшибкаОтправки);
	АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
	
	Если ОшибкаОтправки Тогда		
		//Ошибка отправки, роняем вызов
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "SABYHttpClient.WriteDocumentEx",,"Не удалось отправить документ");
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура WriteDocument_Message(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт 
	
	Сертификат			= Ложь;	
	СтруктураРезультата = АсинхронноеСбисСобытие.Данные;	
	
	Если		Не СтруктураРезультата.Этап.Количество() Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "SABYHttpClient.WriteDocument_Message",,"Ошибка отправки документа: у документа отсутствуют активные этапы.");
	ИначеЕсли	Не СтруктураРезультата.Этап[0].Действие.Количество() Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "SABYHttpClient.WriteDocument_Message",,"Ошибка отправки документа: у этапа документа отсутствуют активные действия.");
	ИначеЕсли	Не СтруктураРезультата.Этап[0].Действие[0].Свойство("Название") Тогда
		ОшибкаРезультат = МодульОбъектаКлиент().НовыйСбисИсключение(300, "SABYHttpClient.WriteDocument_Message",,"Ошибка отправки документа: у действия этапа отсутствует имя регламента.");
	КонецЕсли;
	
	Если Не ОшибкаРезультат = Неопределено Тогда		
		МодульОбъектаКлиент().ВызватьСбисИсключение(ОшибкаРезультат, "SABYHttpClient.WriteDocument_Message")		
	КонецЕсли;

	Если	СтруктураРезультата.Этап[0].Действие[0].ТребуетПодписания = "Да"
		И	СтруктураРезультата.Этап[0].Действие[0].Свойство("Сертификат") Тогда
		СертификатВыбран = Ложь;
		ТекстОшибки = "";
		Сертификат = ПараметрыОбработки.Кэш.ФормаЭП.сбисВыбратьПодходящийСертификат(ПараметрыОбработки.Кэш, СтруктураРезультата.Этап[0].Действие[0].Сертификат, ТекстОшибки);
		Если Сертификат = Ложь И ТекстОшибки <> "" Тогда
			
			МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден подходящий сертификат для подписания документа", "ФормаЭП.сбисВыбратьПодходящийСертификат",,,ТекстОшибки);
			
		КонецЕсли;		
	КонецЕсли;
	
	ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки, Сертификат", ПараметрыОбработки.Кэш, СтруктураРезультата, Сертификат);
	ОбработчикОтправки	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("PrepareAction", ПараметрыОбработки.Кэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
	Сбис3Команда		= МодульОбъектаКлиент().РезультатОтправки_НовыйАсинхроннаяСбисКоманда(ПараметрыОбработки.РезультатОтправки,  ПараметрыОбработки.Команда.АргументВызова, ОбработчикОтправки);

	ПараметрыСобытий	= Новый Структура("Кэш, РезультатОтправки, Команда, Сертификат", ПараметрыОбработки.Кэш, ПараметрыОбработки.РезультатОтправки, Сбис3Команда, Сертификат);
	События				= ПодготовкаДействия_ПодпискиСобытия(ПараметрыСобытий);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", События);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "ПараметрыСобытий", ПараметрыСобытий);
	
	Попытка
		
		МодульОбъектаКлиент().РезультатОтправки_АсинхроннаяСбисКоманда_Выполнить(АсинхронноеСбисСобытие, Сбис3Команда);
		
	Исключение
		
		//Упала отправка в поток, сами пропишем ошибку
		АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор,
								МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура WriteDocumentEx_Error(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	Перем ТекстОшибки, УИДОшибки;

	Кэш				= ПараметрыОбработки.Кэш;
	РезультатВызова	= АсинхронноеСбисСобытие.Данные;
	
	Если Не РезультатВызова.Свойство("message", ТекстОшибки) Тогда
		РезультатВызова = МодульОбъектаКлиент().НовыйСбисИсключение(РезультатВызова, "SABYHttpClient.WriteDocumentEx_Error",,"Не удалось отправить документ")
	КонецЕсли;
	
	Если		Лев(РезультатВызова.message, 14) = "Ошибка WinHTTP" Тогда
		
		ПараметрыОбработки.Вставить("Фатальная", Истина);
		
	ИначеЕсли	РезультатВызова.Свойство("data", УИДОшибки)
			И	ЗначениеЗаполнено(УИДОшибки)
			И	УИДОшибки.Свойство("classid", УИДОшибки)
			И	Лев(врег(УИДОшибки),28)="{00000000-0000-0000-0000-1AA" Тогда // нефатальная ошибка
		
		ПараметрыОбработки.Вставить("Фатальная", Ложь);
		
	КонецЕсли;
	
	МодульОбъектаКлиент().РезультатОтправки_Асинх_Ошибка(АсинхронноеСбисСобытие, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура PrepareAction(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	
	АсинхроннаяСБИСКоманда.ВремяВызова	= ТекущаяДата();	
	Сертификат							= ДопПараметры.Сертификат;
	СтруктураРезультата					= ДопПараметры.РезультатОтправки;
	СертификатДляПодписания				= Неопределено;
	Алгоритм							= Неопределено; 
	action								= Новый Структура("Название");

	Если		СтруктураРезультата.Этап[0].Действие[0].ТребуетПодписания = "Да"
			И	СтруктураРезультата.Этап[0].Действие[0].Свойство("Сертификат") 
			И НЕ Сертификат = Ложь Тогда
				action.Вставить("Сертификат", Сертификат.СертификатДок);
	КонецЕсли;
		
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", СтруктураРезультата.Этап[0].Название);
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", СтруктураРезультата.Идентификатор );	
	document_in.Вставить( "Этап", stage );
	ОшибкаПодготовки = Ложь;
	СтруктураРезультата = СБИС_ПодготовитьДействие(ДопПараметры.Кэш, document_in,Новый Структура("Асинх, Идентификатор",Истина, АсинхроннаяСБИСКоманда.Идентификатор),ОшибкаПодготовки);
	
	Если ОшибкаПодготовки Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "SabyHttpClient.PrepareAction")	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PrepareAction_Message(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	
	СтруктураРезультата = АсинхронноеСбисСобытие.Данные;
	ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки, Сертификат", ПараметрыОбработки.Кэш, СтруктураРезультата, ПараметрыОбработки.Сертификат);
	ОбработчикОтправки	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("ExecuteAction", ПараметрыОбработки.Кэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
	Сбис3Команда		= МодульОбъектаКлиент().РезультатОтправки_НовыйАсинхроннаяСбисКоманда(ПараметрыОбработки.РезультатОтправки,  ПараметрыОбработки.Команда.АргументВызова, ОбработчикОтправки);

	ПараметрыСобытий	= Новый Структура("Кэш, РезультатОтправки, Команда, Сертификат", ПараметрыОбработки.Кэш, ПараметрыОбработки.РезультатОтправки, Сбис3Команда, ПараметрыОбработки.Сертификат);
	События				= ВыполнитьДействие_ПодпискиСобытия(ПараметрыСобытий);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", События);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "ПараметрыСобытий", ПараметрыСобытий);

	
	Попытка
		
		МодульОбъектаКлиент().РезультатОтправки_АсинхроннаяСбисКоманда_Выполнить(АсинхронноеСбисСобытие, Сбис3Команда);
		
	Исключение
		
		//Упала отправка в поток, сами пропишем ошибку
		АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор,
								МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура PrepareExecuteAction_AfterCall(АсинхронноеСбисСобытие, ПараметрыОбработки) Экспорт
	МодульОбъектаКлиент().РезультатОтправки_АсинхроннаяСбисКоманда_ЗанятьПоток(ПараметрыОбработки.РезультатОтправки, ПараметрыОбработки.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ExecuteAction(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
 	//	 выполняем действие
	АсинхроннаяСБИСКоманда.ВремяВызова = ТекущаяДата();
	prepared_document	= ДопПараметры.РезультатОтправки;
	Сертификат			= ДопПараметры.Сертификат; 
	Кэш					= ДопПараметры.Кэш;
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", prepared_document.Этап[0].Название);
	
	// Назначение действия на этап
	action = Новый Структура;
	action.Вставить("Название", prepared_document.Этап[0].Действие[0].Название);
	Если prepared_document.Этап[0].Действие[0].свойство("Сертификат") Тогда 
		Если ЗначениеЗаполнено(Сертификат.СертификатДляПодписания) и prepared_document.Этап[0].Свойство("Вложение") Тогда
			stage.Вставить("Вложение", Новый Массив);
			ТекстОшибки = ""; 
			
			Для Каждого Вложение Из prepared_document.Этап[0].Вложение Цикл
				ВложениеВыполнить = Новый Структура("Идентификатор, Файл", Вложение.Идентификатор, Вложение.Файл);
				ПолноеИмяФайла = КаталогВременныхФайлов()+ Вложение.Файл.Имя;   // файл с онлайна
				СохранитьВложениеПоСсылкеВФайл(Кэш,Вложение.Файл.Ссылка,ПолноеИмяФайла);
				Подпись = Кэш.ФормаЭП.сбисПодписатьФайл(Кэш, ПолноеИмяФайла, Сертификат.СертификатДляПодписания, Сертификат.Алгоритм, ТекстОшибки); 
				Если ТекстОшибки<>"" Тогда
					Прервать;	
				КонецЕсли;
				ЭЦП = Новый Массив;	
				ЗаписьЭЦП = Новый Структура;
				ФайлЭЦП = Новый Структура;
				ИмяФайлаПодписи = Лев(Вложение.Файл.Имя, Найти(Вложение.Файл.Имя,"."))+"sgn";
				ФайлЭЦП.Вставить( "Имя", ИмяФайлаПодписи ); 
				ФайлЭЦП.Вставить( "ДвоичныеДанные", Подпись); 
				ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
				ЭЦП.Добавить(ЗаписьЭЦП);
				ВложениеВыполнить.Вставить( "Подпись", ЭЦП );
				stage.Вложение.Добавить(ВложениеВыполнить);
			КонецЦикла;
			
			Если ТекстОшибки<>"" Тогда				
				МодульОбъектаКлиент().ВызватьСбисИсключение("Не удалось подписать вложение", "ФормаЭП.сбисВыбратьПодходящийСертификат",,,ТекстОшибки);				
			КонецЕсли;
			
	    КонецЕсли;
		action.Вставить("Сертификат", prepared_document.Этап[0].Действие[0].Сертификат[0]);
	КонецЕсли;
	
	stage.Вставить("Действие", action);
						
	document_in = Новый Структура;
	document_in.Вставить("Идентификатор",	prepared_document.Идентификатор );	
	document_in.Вставить("Этап",			stage );
	
	
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	ОшибкаВыполнения = Ложь;	
	// Выполнение этапа
	СтруктураРезультата = СБИС_ВыполнитьДействие(Кэш, document_in,Новый Структура("Асинх, Идентификатор",Истина, АсинхроннаяСБИСКоманда.Идентификатор),ОшибкаВыполнения);
	
	Если ОшибкаВыполнения Тогда		
		МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураРезультата, "SABYHttpClient.ExecuteAction")		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте                                                                                        
Функция СБИС_ПрочитатьПулОтветов(КэшСБИС) Экспорт
	
	Попытка
		СтрокаXML	= КэшСБИС.ДанныеИнтеграции.Объекты.Компонента.ReadAllResponse();
		СбисСобытияСоответствие = DecodeXmlXdto(СтрокаXML);
		СбисСобытия = ПолучитьСтруктуруИзСоответствия(СбисСобытияСоответствие);
	Исключение
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнформацияОбОшибке(), МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя") + ".СБИС_ПрочитатьПулОтветов",773)
	КонецПопытки;
	
	Возврат СбисСобытия.Response;

КонецФункции

//Разбираем асинх ответы, возвращаем асинхсобытие
&НаКлиенте
Функция СБИС_ОбработатьОтвет(Сбис3СобытиеОтвет, ДопПараметры=Неопределено) Экспорт
	
	Если Сбис3СобытиеОтвет.Result.Data.Свойство("Error") Тогда 
		Возврат МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(Сбис3СобытиеОтвет.queryID, Сбис3СобытиеОтвет.Result.Data.error, "Error");
	Иначе		
		Возврат МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(Сбис3СобытиеОтвет.queryID, Сбис3СобытиеОтвет.Result.Data.result, "Message");
	КонецЕсли;
	
КонецФункции

//Обработка внешнего файла
&НаКлиенте
Процедура Отправка_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ДанныеФайла.Файл.Вставить("ДвоичныеДанные", сбисФайлСКлиентаВBASE64(ДанныеФайла.Вложение.ПолноеИмяФайла)); 
КонецПроцедуры

//Обработка XML файла при отправке. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура Отправка_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт

	ДвоичныеДанныеXML = СбисСтрокаВДвоичныеДанныеКлиент(Кэш, ДанныеФайла.Вложение.XMLДокумента, , Ложь);
	ДанныеФайла.Файл.Вставить("ДвоичныеДанные", СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"") ); 
	
КонецПроцедуры

&НаКлиенте
Функция Отправка_ПодпискиСобытия(ПараметрыСобытий) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Error",			Новый Структура("Функция",	"WriteDocumentEx_Error"));
	Результат.Вставить("Message",		Новый Структура("Функция",	"WriteDocument_Message"));
	Возврат Результат;
				
КонецФункции

&НаКлиенте
Функция ПодготовкаДействия_ПодпискиСобытия(ПараметрыСобытий) Экспорт	

	Результат = Новый Структура;
	Результат.Вставить("Error",			Новый Структура("Функция",	"WriteDocumentEx_Error"));
	Результат.Вставить("Message",		Новый Структура("Функция",	"PrepareAction_Message"));
	Результат.Вставить("AfterCall",		Новый Структура("Функция",	"PrepareExecuteAction_AfterCall"));		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьДействие_ПодпискиСобытия(ПараметрыСобытий) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Error",			Новый Структура("Функция",	"WriteDocumentEx_Error"));
	Результат.Вставить("Message",		ПараметрыСобытий.РезультатОтправки.ПодпискиДляКоманд.Message);
	Результат.Вставить("AfterCall",		Новый Структура("Функция",	"PrepareExecuteAction_AfterCall"));		
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Функция СБИС_ИдЗапросаВызова(Кэш) Экспорт
	
	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

//Разбор асинхронных сообщений
&НаКлиенте
Функция СБИС_РазобратьОтвет(ДанныеИзПулаОтвета) Экспорт
	
	Возврат Новый Структура;
	
КонецФункции
	
