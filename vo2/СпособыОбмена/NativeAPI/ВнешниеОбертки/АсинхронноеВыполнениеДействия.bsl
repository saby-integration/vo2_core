
// Процедура выполняет расширенное выполнение действия над документом. Вызываются методы СБИС.ПодготовитьДействие и СБИС.ВыполнитьДействие
//
// Параметры:
//  АсинхроннаяСБИСКоманда	 - 	Структура - Данные отправки документа - СоставПакета, Документ, СтатусПакета 
//  ДопПараметры			 - 	Структура - Набор полей, работа с которыми может расширить результат работы процедуры 
//
&НаКлиенте
Процедура ExecuteActionEx(АсинхроннаяСБИСКоманда, ДопПараметры) Экспорт
	Перем ОшибкаРезультат;
	
    ОшибкаОтправки		= Ложь;
	Кэш					= ДопПараметры.Кэш;	
	ПараметрыСобытий	= Новый Структура("НеЗаниматьПоток",Истина);
	
	ПараметрыСобытий.Вставить("Команда"				, АсинхроннаяСБИСКоманда.ПараметрыСобытий.Команда);
	ПараметрыСобытий.Вставить("Кэш"					, АсинхроннаяСБИСКоманда.ПараметрыСобытий.Кэш);
	ПараметрыСобытий.Вставить("РезультатОтправки"	, АсинхроннаяСБИСКоманда.ПараметрыСобытий.РезультатОтправки);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(АсинхроннаяСБИСКоманда,"ПараметрыСобытий",ПараметрыСобытий);
	
	action = Новый Структура("Название"); 
	Этап = АсинхроннаяСБИСКоманда.АргументВызова.СтатусЭДО.Этап;
	Действие = Этап.Действие[0];
	Сертификат	= Ложь;	
	СертификатДляПодписания = Неопределено;
	Алгоритм = Неопределено;
	
	Если	Действие.ТребуетПодписания = "Да"
		И	Действие.Свойство("Сертификат") Тогда
		СертификатВыбран = Ложь;
		ТекстОшибки = "";
		Сертификат = Кэш.ФормаЭП.сбисВыбратьПодходящийСертификат(Кэш, Действие.Сертификат, ТекстОшибки);
		Если Сертификат<>Ложь Тогда
			action.Вставить("Сертификат", Сертификат.СертификатДок);
			СертификатДляПодписания = Сертификат.СертификатДляПодписания;
			Алгоритм = Сертификат.Алгоритм;
			СертификатВыбран = Истина;
		КонецЕсли;

		Если Не СертификатВыбран и ТекстОшибки <> "" Тогда
			
			МодульОбъектаКлиент().ВызватьСбисИсключение("Не найден подходящий сертификат для подписания документа", "ФормаЭП.сбисВыбратьПодходящийСертификат",,,ТекстОшибки);
			
		КонецЕсли;
	КонецЕсли;
		
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Действие", action);
		
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", АсинхроннаяСБИСКоманда.АргументВызова.ИдентификаторОтправки );	
	document_in.Вставить( "Этап", stage );

	МодульОбъектаКлиент().ОтправкаДокументаСБИС_Установить(АсинхроннаяСБИСКоманда.АргументВызова, "СтатусПакета", "ОтправленВПоток");
	
	ПараметрыОтправки	= Новый Структура("Кэш, РезультатОтправки, document_in", ДопПараметры.Кэш, АсинхроннаяСБИСКоманда.АргументВызова.ДокументОтправить, document_in);
	ОбработчикОтправки	= МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("PrepareAction", ДопПараметры.Кэш.ТекущийСеанс.Модули.Интеграция, ПараметрыОтправки);
	Сбис3Команда		= МодульОбъектаКлиент().РезультатОтправки_НовыйАсинхроннаяСбисКоманда(ДопПараметры.РезультатОтправки,  АсинхроннаяСБИСКоманда.АргументВызова, ОбработчикОтправки);

	ПараметрыСобытий	= Новый Структура("Кэш, РезультатОтправки, Команда", ДопПараметры.Кэш, ДопПараметры.РезультатОтправки, Сбис3Команда);
	ПараметрыСОбытий.Вставить("Сертификат",Сертификат);	
	События				= ПодготовкаДействия_ПодпискиСобытия(ПараметрыСобытий);
	
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "События", События);
	МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Установить(Сбис3Команда, "ПараметрыСобытий", ПараметрыСобытий);
	
	Попытка
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_Выполнить(Сбис3Команда);
	Исключение
		
		//Упала отправка в поток, сами пропишем ошибку
		АсинхронноеСбисСобытие = МодульОбъектаКлиент().НовыйАсинхронноеСбисСобытие(Сбис3Команда.Идентификатор,
								МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "МодульОбъектаКлиент.РезультатОтправки_Асинх_Отправка"), "Error");
		МодульОбъектаКлиент().АсинхроннаяСбисКоманда_ВызватьСобытие(Сбис3Команда, АсинхронноеСбисСобытие);
		
	КонецПопытки;
	
КонецПроцедуры

