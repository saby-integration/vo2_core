
&НаКлиенте
Функция СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш, Сбис3КомандыОжидаются=Неопределено, ДопПараметры=Неопределено, Отказ)
	Результат	= Новый Соответствие;
	МестныйКэш	= Кэш;
	//TODO40 обработка исключений от плагина
	Попытка
		СтрокаXML = Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.ReadAllXml2();
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadAllXml2", 773,,"Ошибка обработки ответа от плагина. Детально: " + ОписаниеОшибки());
	КонецПопытки;
	СбисСобытия			= XmlSerializer_Decode(Кэш, СтрокаXML, Отказ);
	ПараметрыСобытий	= Новый Структура("ВремяПолучения", ТекущаяДата());
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисСобытия, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
	КонецЕсли;
	Для Каждого Сбис3СобытиеИзСтека Из СбисСобытия Цикл
		Попытка
			Сбис3СобытиеОтвет = Кэш.Интеграция.СБИС_ОбработатьОтвет(Сбис3СобытиеИзСтека, ПараметрыСобытий);
		Исключение
			Отказ = Истина;
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
		КонецПопытки;
		
		ОтветОбработан = Ложь;
		Если 		Сбис3СобытиеОтвет.Тип = "Event" Тогда
			РезультатСобытия	= Неопределено;
			ОшибкаОбработки		= Ложь;
			//костылим имя эвента при чтении ответа.
			Если СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, Сбис3СобытиеОтвет,,РезультатСобытия, ОшибкаОбработки) Тогда
				Если ОшибкаОбработки Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатСобытия, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
				Иначе
					ОтветОбработан = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли   Сбис3СобытиеОтвет.Тип = "CriticalError" Тогда
			
			ОтветОбработан = СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, Сбис3СобытиеОтвет);
			Если Не ОтветОбработан Тогда

				//Восстановить QueryID - не подписочная крит. ошибка
				Сбис3СобытиеОтвет.queryID = Сбис3СобытиеИзСтека.queryID;
				
			КонецЕсли;
			Если Не Сбис3КомандыОжидаются = Неопределено Тогда

				//Прописать ошибку в ответ
				Для Каждого Сбис3КомандОжидается Из Сбис3КомандыОжидаются Цикл
					КомандаОбрабатываемогоОтвета = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ",Сбис3КомандОжидается.Ключ,Сбис3СобытиеОтвет.Тип,Сбис3СобытиеОтвет.Данные));
					Если Не КомандаОбрабатываемогоОтвета = Неопределено Тогда

						ОтветОбработан = СБИСПлагин_ВызватьСобытие(Кэш, Сбис3СобытиеОтвет.Данные, КомандаОбрабатываемогоОтвета, Сбис3СобытиеОтвет.Тип);
						КомандаОбрабатываемогоОтвета.Вставить("Ответ", Сбис3СобытиеОтвет);
						Результат.Вставить(Сбис3КомандОжидается.Ключ, КомандаОбрабатываемогоОтвета); 
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Возврат Результат;
			
		ИначеЕсли 	Сбис3СобытиеОтвет.Тип = "Async" Тогда

			//Если это асинхронное событие, то проставим в команду что есть ответ, но поток не снимается а продолжается его ожидание
			АсинхронныйПоток = Кэш.СБИС.ДанныеИнтеграции.Потоки.Получить(Сбис3СобытиеОтвет.queryID);
			Если Не АсинхронныйПоток = Неопределено Тогда
				АсинхронныйПоток.Ответ = Сбис3СобытиеОтвет.data;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ИдентификаторСобытия = Сбис3СобытиеОтвет.Идентификатор;
		//После чтения ответа, посмотрим что с ним сделать:
		//1. Есть соответствующий запрос, отправленный ранее. Тогда надо освободить поток и проверить наличие подписки на тип ответа и вызвать обработчик.
		//2. Мы ожидаем этот ответ синхронно, тогда добавим его в результат чтения.
		//3. Если не 1 и не 2, то добавим полученный ответ в список "ненужных", при необходимости обработать, или выгрузить в лог (включить режим отладки).
		
		КомандаОбрабатываемогоОтвета = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ",ИдентификаторСобытия,Сбис3СобытиеОтвет.Тип,Сбис3СобытиеОтвет.Данные));
		Если Не КомандаОбрабатываемогоОтвета = Неопределено Тогда
			//Пришёл ответ на занятый поток
			КомандаОбрабатываемогоОтвета.ВремяПолучения = Сбис3СобытиеОтвет.Получено;
			ОтветОбработан = СБИСПлагин_ВызватьСобытие(Кэш, Сбис3СобытиеОтвет.Данные, КомандаОбрабатываемогоОтвета, Сбис3СобытиеОтвет.Тип);
		КонецЕсли;
		
		//Если команда ожидается как ответ, подготовим результат
		КомандаНаВозврат = Неопределено;
		Если Не Сбис3КомандыОжидаются = Неопределено Тогда
			КомандаНаВозврат = Сбис3КомандыОжидаются.Получить(ИдентификаторСобытия);
		КонецЕсли;
		Если КомандаНаВозврат = Неопределено Тогда
			Если Не ОтветОбработан Тогда
				СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторСобытия, Сбис3СобытиеОтвет);
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		КомандаНаВозврат.Вставить("Ответ", Сбис3СобытиеОтвет);
		КомандаНаВозврат.ВремяПолучения = Сбис3СобытиеОтвет.Получено;
		Результат.Вставить(ИдентификаторСобытия, КомандаНаВозврат);
		Сбис3КомандыОжидаются.Удалить(ИдентификаторСобытия);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//Добавляет не ожидаемый ответ от плагина в список на обработку/очистку. Подключает очищалку. 
&НаКлиенте
Процедура СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтвета, НеобработанныйОтвет) Экспорт
	НеобработанныеКоманды = Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Получить(ИдентификаторОтвета);
	Если НеобработанныеКоманды = Неопределено Тогда
		НеобработанныеКоманды = Новый Массив;
	КонецЕсли;
	НеобработанныеКоманды.Добавить(Новый Структура("Ответ, ВремяПолучения",НеобработанныйОтвет,ТекущаяДата()));
	Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Вставить(ИдентификаторОтвета, НеобработанныеКоманды);
	СБИСПлагин_ОчиститьНевостребованныеОтветы();
КонецПроцедуры

//Вызов обработчика события
&НаКлиенте
Функция СБИСПлагин_ВызватьСобытие(Кэш, РезультатВызова=Неопределено, Сбис3Команда, КлючСобытия, Отказ=Ложь)
	Перем СобытиеВыполнить;
	Если Не Сбис3Команда.События.Свойство(КлючСобытия, СобытиеВыполнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	СобытиеВыполнить.Параметры.Вставить("Отказ",	Отказ);
	СобытиеВыполнить.Параметры.Вставить("Команда",	Сбис3Команда);
	СобытиеВыполнить.Параметры.Вставить("Тип",		КлючСобытия);
	
	СБИСПлагин_ВызватьФункциюСобытия(Кэш, РезультатВызова, СобытиеВыполнить);
	Возврат Истина;
КонецФункции

//Делает вызов события
&НаКлиенте
Процедура СБИСПлагин_ВызватьФункциюСобытия(Кэш, РезультатВызова=Неопределено, СобытиеВыполнить)
	Перем СбисМодуль, СбисФункция;
	Если Не СобытиеВыполнить.Свойство("Модуль", СбисМодуль) Тогда
		СбисМодуль = ЭтаФорма;
	КонецЕсли;
	Если Не СобытиеВыполнить.Свойство("Функция", СбисФункция) Тогда
		СбисФункция = "СБИСПлагин_ПереадресацияПоРезультату";
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Выполнить("СбисМодуль." + СбисФункция + "(РезультатВызова, СобытиеВыполнить.Параметры)");
	#Иначе
		СбисОписаниеОповещения = Новый ОписаниеОповещения(СбисФункция, СбисМодуль, СобытиеВыполнить.Параметры);
		ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова);
	#КонецЕсли
	
КонецПроцедуры

//Обрабатываем необработанные в срок ответы, чистим их по времени существования ответа
&НаКлиенте
Процедура СБИСПлагин_ОчиститьНевостребованныеОтветы() Экспорт
	Кэш = МестныйКэш;
	Если	Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Плагин")//Костыль на случай переключения на другой способ обмена. Уже всё почищено. 
		Или	Не Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
		Возврат;
	КонецЕсли;

	ТочкаПроверки = ТекущаяДата();
	КлючиОтветовНеВостребованы = Новый Массив;
	Для Каждого КлючИЗначениеОтвета Из Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы Цикл
		ИндексКоманд = 0;
		Пока ИндексКоманд < КлючИЗначениеОтвета.Значение.Количество() Цикл
			КомандаНевостребована = КлючИЗначениеОтвета.Значение[ИндексКоманд];
			Если ТочкаПроверки - КомандаНевостребована.ВремяПолучения > Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета Тогда
				Если Кэш.Парам.РежимОтладки Тогда
					//Дампаем в лог необработанные события если надо
					лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Сообщение", "UNCALLED", "ExtSDK", "Unknown", ТочкаПроверки, Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(КлючИЗначениеОтвета.Значение));
					ДанныеВЛог = Новый Массив;
					ДанныеВЛог.Добавить(лОтладочныеДанные);
					Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
				КонецЕсли;
				КлючИЗначениеОтвета.Значение.Удалить(ИндексКоманд);
			Иначе
				ИндексКоманд = ИндексКоманд + 1;
			КонецЕсли;
		КонецЦикла;
		Если Не КлючИЗначениеОтвета.Значение.Количество() Тогда
			КлючиОтветовНеВостребованы.Добавить(КлючИЗначениеОтвета.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из КлючиОтветовНеВостребованы Цикл
		Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Удалить(КлючУдалить);
	КонецЦикла;
	//Каждую минуту в режиме простоя повторно проверяем оставшиеся невостребованными сообщения, пока не будут почищены все.
	Если Кэш.СБИС.ДанныеИнтеграции.НеизвестныеОтветы.Количество() Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("СБИСПлагин_ОчиститьНевостребованныеОтветы", 60, Истина);
	КонецЕсли;
КонецПроцедуры
	
//Занимает поток
&НаКлиенте
Процедура СБИСПлагин_ЗанятьПоток(Кэш, ИдентификаторПотока, Сбис3Команда) Экспорт
	
	МодульОбъектаКлиент().ИзменитьПараметрСБИС("Потоки_КоличествоСвободных", МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Потоки_КоличествоСвободных") - 1);
	Кэш.СБИС.ДанныеИнтеграции.Потоки.Вставить(ИдентификаторПотока, СБИС3Команда);
	Если Кэш.Парам.РежимОтладки Тогда
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "CALL", Сбис3Команда.Модуль, Сбис3Команда.Метод, Сбис3Команда.ВремяВызова, Сбис3Команда.Идентификатор, Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(Сбис3Команда.Параметры));
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;

	//Сообщить(Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных);
КонецПроцедуры

//Освобождает ожидаемый поток, возвращает завершенную команду потока 
&НаКлиенте
Функция СБИСПлагин_ОсвободитьПоток(Кэш, СбисОписаниеСобытия) Экспорт
	ИдентификаторСобытия = СбисОписаниеСобытия.Идентификатор;
	КомандаВыполнена = Кэш.СБИС.ДанныеИнтеграции.Потоки.Получить(ИдентификаторСобытия);
	Если Не КомандаВыполнена = Неопределено Тогда
		МодульОбъектаКлиент().ИзменитьПараметрСБИС("Потоки_КоличествоСвободных", МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("Потоки_КоличествоСвободных") + 1);
		Кэш.СБИС.ДанныеИнтеграции.Потоки.Удалить(ИдентификаторСобытия);
		Если Кэш.Парам.РежимОтладки Тогда
			СбисТипОтвета = "MESSAGE";
			СбисТекстОтвета = "";
			Если СбисОписаниеСобытия.Свойство("Тип") Тогда
				СбисТипОтвета = ВРег(СбисОписаниеСобытия.Тип);
			КонецЕсли;	
			Если СбисОписаниеСобытия.Свойство("Ответ") Тогда
				СбисТекстОтвета = Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(СбисОписаниеСобытия.Ответ);
			КонецЕсли;
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", СбисТипОтвета, КомандаВыполнена.Модуль, КомандаВыполнена.Метод, ТекущаяДата(), КомандаВыполнена.Идентификатор, СбисТекстОтвета);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
	КонецЕсли;
	//Сообщить(Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных);
	Возврат КомандаВыполнена;
КонецФункции

