
&НаКлиенте
Функция СБИС_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExecuteAction", Новый Структура("Document, Action", document_in, Новый Структура), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ВыполнитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИС_ПодготовитьДействие(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "PrepareAction", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПодготовитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИС_СериализоватьСтрокуВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ) Экспорт
	Возврат Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK.СБИС_СериализоватьФайлВBase64(Кэш, ПараметрыСериализовать, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция СБИС_СохранитьПоСсылкеВФайл(Кэш, ПараметрыФайла, ДопПараметры, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
	ПараметрыЗаписи		= Новый Структура("Url, FileName", ПараметрыФайла.Ссылка, ПараметрыФайла.ИмяФайла);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURLToFile", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СохранитьПоСсылкеВФайл");
	КонецЕсли;
	Возврат ПараметрыФайла.ИмяФайла;
КонецФункции

&НаКлиенте
Функция СБИС_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.СписокИзменений", filter, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_СписокИзменений");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ТекущаяДата(Кэш, Отказ=Ложь) Экспорт
	Возврат ТекущаяДата();
КонецФункции	
	
&НаКлиенте
Функция СБИС_ИнформацияОКонтрагенте(Кэш, СтруктураКонтрагента, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "СБИС.ИнформацияОКонтрагенте", СтруктураКонтрагента, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ИнформацияОКонтрагенте");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьИнформациюОТекущемПользователе(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "GetUserInfo", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьИнформациюОТекущемПользователе");
	КонецЕсли;
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция СБИС_ПолучитьСписокАккаунтов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "AccountList", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСписокАккаунтов");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПереключитьАккаунт(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "SwitchAccount", Новый Структура("Param", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПереключитьАккаунт");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьПараметрыПакетаДляОткрытияОнлайн(ОписаниеПакета, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
   	Если	ОписаниеПакета.ИдАккаунта = "" Тогда
		Возврат Новый Структура("ИдДокумента, Тикет", ОписаниеПакета.ИдДокумента, "");
	Иначе
		ДанныеТикета = Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьТикетДляАккаунта(Кэш, ОписаниеПакета, Ложь);
		Возврат Новый Структура("ИдДокумента, Тикет, СтарыйИдСессии", ОписаниеПакета.ИдДокумента, ДанныеТикета.Тикет, ДанныеТикета.СтарыйИдСессии);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДСгенерировать(Кэш, ПараметрыДокумента, Генератор, ДопПараметры, Отказ) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Генератор");
	МассивПараметров.Добавить(ПараметрыДокумента);
	МассивПараметров.Добавить(Генератор);
	
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "Integration.ФЭДСгенерировать", МассивПараметров, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДСгенерировать");
	Иначе
		Результат = Кэш.ОбщиеФункции.сбисТекстИзBase64(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ФЭДМультиСгенерировать(ПараметрыДокумента, НаборПодстановок, ДопПараметры) Экспорт
	
	Попытка
		Кэш = ДопПараметры.Кэш;
		ДопПараметрыВызова = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку", Истина, Ложь, Истина);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыДокумента);
		МассивПараметров.Добавить(НаборПодстановок);
		
		Отказ = Ложь;
		Результат = СбисОтправитьИОбработатьКомандуCallSabyApi2(ДопПараметры.Кэш, "Integration.FEDMultiGenerate", МассивПараметров, ДопПараметрыВызова, Отказ);
		
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКомандуCallSabyApi2");
		КонецЕсли;
		
		Для Каждого файл Из Результат Цикл
			файл["Тело"] = Кэш.ОбщиеФункции.сбисТекстИзBase64(файл["Тело"])
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Интеграция_ФЭДМультиСгенерировать");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция Интеграция_ЗагрузитьКомплект(Кэш, ПараметрыКомплекта, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "WriteReportings",  Новый Структура("Catalog", ПараметрыКомплекта), ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteReportings");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИС_ЗаписатьВложение(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "WriteAttachment", Новый Структура("Document", param), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ЗаписатьВложение");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция АПИ3_ИнитКоннекшен(ПараметрыИнит, ДопПараметрыВызова) Экспорт
	ДопПарметрыВызоваИнтеграции = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);
	Результат = СбисОтправитьИОбработатьКомандуCallIntegrationApi(ДопПараметрыВызова.Кэш, "API3.InitConnection", ПараметрыИнит, ДопПарметрыВызоваИнтеграции, ДопПараметрыВызова.Отказ);
	Если ДопПараметрыВызова.Отказ Тогда
		Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен");
		Если Результат.code = 100 Тогда
			СтекВызовов = Результат.stack;
			ЗаписьСтекаПроверить = СтекВызовов[СтекВызовов.ВГраница() - 1];
			Если	ЗаписьСтекаПроверить.Свойство("error")
				И 	Найти(ЗаписьСтекаПроверить.error, "error -1 no error info specified") Тогда
				Результат = ДопПараметрыВызова.Кэш.ОбщиеФункции.сбисИсключение(Результат,  ДопПараметрыВызова.Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".АПИ3_ИнитКоннекшен", 601, "Система не поддерживается");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ExtSys_FeatureIsOn(ПараметрыФичи, ДопПараметры) Экспорт
	НазваниеФичи = ПараметрыФичи.НазваниеФичи;
	Кэш = ДопПараметры.Кэш;
 	ДопПараметрыВызова = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь);  
	ПараметрыКоманды = Новый Массив();  
	ПараметрыКоманды.Добавить(НазваниеФичи);
	Возврат СбисОтправитьИОбработатьКомандуCallSabyApi2(Кэш, "ExtSys.FeatureIsOn", ПараметрыКоманды, ДопПараметрыВызова, Ложь) = Истина;
КонецФункции

&НаКлиенте
Функция СБИС_ПолучитьСопоставлениеСторон(Кэш, ПараметрыДанныеСторон, ДопПараметры=Неопределено, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку, СообщатьПриОшибке", Истина, Ложь); 
	Результат = СбисОтправитьИОбработатьКомандуCallSabyApi(Кэш, "ExtSysOrganization.MassFind", ПараметрыДанныеСторон, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИС_ПолучитьСопоставлениеСторон");
	КонецЕсли;
	Возврат Результат;
КонецФункции

