
#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
	// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
	Попытка	
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		Контекст.Вставить("ИтогСумма",0);
		Контекст.Вставить("ИтогСуммаБезНалога",0);
		Контекст.Вставить("ИтогСуммаНДС",0);
		Контекст.Вставить("ИтогКоличество",0);
		Контекст.Вставить("ИтогБрутто",0);
		Контекст.Вставить("ИтогНетто",0);
		Контекст.Вставить("ИтогКолМест",0);
		
		Контекст.Вставить("ПредИтогСумма",0);
		Контекст.Вставить("ПредИтогСуммаБезНалога",0);
		Контекст.Вставить("ПредИтогСуммаНДС",0);
		Контекст.Вставить("НДСИсчисляетсяАгентом", Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина);
		НоменклатураКодКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураКодКонтрагента", Контекст.ФайлДанные,Кэш);  // надо сопоставить номенклатуру перед отправкой
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Контекст.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		
		ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
			Возврат Истина;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мТаблДетал") Тогда
			Контекст.Вставить("ТаблДетал",Новый Структура());                 
			Контекст.ТаблДетал.Вставить("СтрТабл",Новый Массив);	
			ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст);
		КонецЕсли;
		
		ИтогТабл=Новый Структура;
		ИтогТабл.Вставить("Кол_во", Формат(Контекст.ИтогКоличество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000"));
		ИтогТабл.Вставить("Сумма", Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
		ИтогТабл.Вставить("НДС",Новый Структура);
		ИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		Если Контекст.ИтогКолМест>0 Тогда
			ИтогТабл.Вставить("Упаковка",Новый Структура);
			ИтогТабл.Упаковка.Вставить("КолМест",Формат(Контекст.ИтогКолМест, "ЧЦ=17; ЧДЦ=0; ЧРД=.; ЧГ=0; ЧН=0"));	
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("ЕдиницаИзмеренияВеса") Тогда
			ЕдиницаИзмеренияВеса = Контекст.ФайлДанные.ЕдиницаИзмеренияВеса;
				ИтогТаблБрутто = Новый Структура;
			Если Контекст.ФайлДанные.Свойство("МассаБруттоИтогПрописью") Тогда
				ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаБруттоИтогПрописью", Контекст.ФайлДанные,Кэш));  
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			ИначеЕсли Контекст.ИтогБрутто > 0 Тогда
				ИтогТаблБрутто.Вставить("Кол_во", Формат(Контекст.ИтогБрутто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогБрутто);
					ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблБрутто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			КонецЕсли;
			
			Если Контекст.ИтогНетто > 0 Тогда
				ИтогТаблНетто = Новый Структура;
				ИтогТаблНетто.Вставить("Кол_во", Формат(Контекст.ИтогНетто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогНетто);
					ИтогТаблНетто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблНетто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Нетто", ИтогТаблНетто);
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Свойство("ЕстьПредыдущиеДанные") Тогда
			ПредИтогТабл=Новый Структура;
			ПредИтогТабл.Вставить("Сумма", Формат(Контекст.ПредИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ПредИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ПредИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			ПредИтогТабл.Вставить("НДС",Новый Структура);
			ПредИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ПредИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("ПредИтогТабл",ПредИтогТабл);
		КонецЕсли;
		
		//Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		Док.Файл.Документ.Вставить("Основание",Новый Массив);
		
		Валюта =  Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта_КодОКВ", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Валюта) Тогда
			Док.Файл.Документ.Вставить("Валюта",Новый Структура);
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Валюта",Контекст.ФайлДанные,Док.Файл.Документ.Валюта);
		КонецЕсли;
		
		Отправитель = "";
		Получатель = "";
		ЗапретРедакций = Ложь;
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("мСторона") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
				Если Параметр.Значение.Свойство("Роль") Тогда
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
				Иначе
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ОтправительРоль Тогда
					Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ПолучательРоль Тогда
					ЗапретРедакций = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапретРедакций",Параметр.Значение,Кэш);
				КонецЕсли;
				Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
				Если Сторона<>Неопределено Тогда
					Док.Файл.Документ.Вставить(Роль,Сторона);
				КонецЕсли;
			КонецЦикла;
			Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(721, "Файл_Шаблон.ПолучитьШапкуИзДокумента1С",,,"Не удалось определить ИНН получателя документа " + Строка(Контекст.Документ));
			КонецЕсли;
			Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(721, "Файл_Шаблон.ПолучитьШапкуИзДокумента1С",,,"Не удалось определить ИНН отправителя документа " + Строка(Контекст.Документ));
			КонецЕсли;
			// Если Грузоотправитель и грузополучатель нужны, но они не попали в файл, то берем их с отправителя и получателя
			Если Не Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") или (Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") и Контекст.ЗаполнятьГрузотпрГрузполуч = Истина) Тогда
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузоотправитель") и Не Док.Файл.Документ.Свойство("Грузоотправитель") Тогда
					КопироватьГрузоотправителяС = ОтправительРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузоотправителяС") Тогда
						КопироватьГрузоотправителяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузоотправителяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузоотправителяС) Тогда
						Док.Файл.Документ.Вставить("Грузоотправитель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузоотправитель,Док.Файл.Документ[КопироватьГрузоотправителяС]);
					КонецЕсли;	
				КонецЕсли;
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузополучатель") и Не Док.Файл.Документ.Свойство("Грузополучатель") Тогда
					КопироватьГрузополучателяС = ПолучательРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузополучателяС") Тогда
						КопироватьГрузополучателяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузополучателяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузополучателяС) Тогда
						Док.Файл.Документ.Вставить("Грузополучатель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузополучатель,Док.Файл.Документ[КопироватьГрузополучателяС]);   
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Отправитель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ОтправительРоль]); 
			Получатель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ПолучательРоль]); 
			Если ЗапретРедакций = Истина Тогда
				Получатель.Вставить("ЗапретРедакций", Истина);		
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("АдресДоставки") И Контекст.ФайлДанные.АдресДоставки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресДоставки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресДоставки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("АдресПогрузки") И Контекст.ФайлДанные.АдресПогрузки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресПогрузки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресПогрузки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мОснование") Тогда
			ПолучитьДанныеИзДокумента1С_мОснование(Кэш, Док, Контекст);
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда
			Док.Файл.Документ.Вставить("Параметр",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли; 
		
		Если Контекст.ФайлДанные.Свойство("мТранспортноеСредство") Тогда
			Док.Файл.Документ.Вставить("ТранспортноеСредство",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мТранспортноеСредство Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				ТранспортноеСредство = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТранспортноеСредство",Контекст.ФайлДанные,ТранспортноеСредство);
				Док.Файл.Документ.ТранспортноеСредство.Добавить(ТранспортноеСредство);
			КонецЦикла;
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);  
		СвязанныеДокументы1С = Кэш.ОбщиеФункции.сбисПолучитьСвязанныеДокументы1С(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		Если Контекст.НДСИсчисляетсяАгентом Тогда
			СуммаВложения = Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		Иначе
			СуммаВложения = Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		КонецЕсли;
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения+" на сумму "+СуммаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		Провести = Кэш.ОбщиеФункции.РассчитатьЗначение("Провести", Контекст.ФайлДанные,Кэш); // alo Провести
		ИспользоватьГенератор = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьГенератор", Контекст.ФайлДанные,Кэш);
		
		Док.Файл.Документ.Вставить("ТаблДок", Контекст.ТаблДок);
		Если Контекст.Свойство("ТаблДетал") И Контекст.ТаблДетал.СтрТабл.Количество() > 0 Тогда
			Док.Файл.Документ.Вставить("ТаблДетал", Контекст.ТаблДетал);
		КонецЕсли;
		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование, Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер,Сумма", Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения,СуммаВложения);
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Вложение.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Примечание) Тогда
			Вложение.Вставить("Примечание",Примечание);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Вложение.Вставить("Сертификат",Сертификат);	
		КонецЕсли;
		Если ТипЗнч(ИспользоватьГенератор) = Тип("Булево") Тогда
			Вложение.Вставить("ИспользоватьГенератор", ИспользоватьГенератор);
		КонецЕсли;
		
		МодульОбъектаКлиент().ПропатчитьФайлВложенияСБИС(Вложение, Новый Структура("ГрязныйИни, ПолучательРоль, ОтправительРоль", Контекст.ФайлДанные, ПолучательРоль, ОтправительРоль));
				
		ДопПоля= Новый Структура;	// alo ДопПоля
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДопПоля",Контекст.ФайлДанные,ДопПоля);
		Если ЗначениеЗаполнено(ДопПоля) Тогда
			Вложение.Вставить("ДопПоля",ДопПоля);
		Конецесли;
		Если ЗначениеЗаполнено(Провести) Тогда // alo Провести
			Вложение.Вставить("Провести",Провести);	
		КонецЕсли;   
		Если ЗначениеЗаполнено(СвязанныеДокументы1С) Тогда
			СвязанныеДокументы1С.Вставить(0, Контекст.Документ);
			Вложение.Вставить("Документы1С",СвязанныеДокументы1С);	
		КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		
		ИмяФормыПоФормату = "Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента", ИмяФормыПоФормату, "Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
		КонецЕсли;
		Возврат Истина;
		
	Исключение
		ИсключениеФормирования = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "Файл_Шаблон.ПолучитьШапкуИзДокумента1С");
		Контекст.СоставПакета.Вставить("Ошибка", ИсключениеФормирования);
		Возврат Ложь;
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст) Экспорт
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДетал Цикл
		
		Если Контекст.Свойство("СписокТЧ") Тогда  
			Если Контекст.СписокТЧ.НайтиПоЗначению(Параметр.Ключ)<>Неопределено Тогда
				Продолжить;
			Иначе
				Контекст.СписокТЧ.Добавить(Параметр.Ключ);
			КонецЕсли;
		КонецЕсли;		
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
			ТабЧастьДокумента = Параметр.Значение;
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
			ТабЧастьДокумента = Новый Массив;
			ТабЧастьДокумента.Добавить(Параметр.Значение);
		Иначе   // табличная часть вычисляется с помощью функции
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		КонецЕсли;
		
		Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
			сч=0;
			Для Каждого Стр Из ТабЧастьДокумента Цикл
				сч=сч+1;
				НоваяСтрока = Новый Структура;
				//все значения ТаблДок_ внутри мТаблДетал
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
				Если НЕ НоваяСтрока.Свойство("ПорНомер") Тогда
					НоваяСтрока.Вставить("ПорНомер",Строка(сч)); 
				КонецЕсли;
				//поддержка параметров
				Если Стр.Свойство("мПараметр") Тогда
					НоваяСтрока.Вставить("Параметр", Новый Массив);
					Для Каждого Элемент Из Стр.мПараметр Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
						Параметр = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
						НоваяСтрока.Параметр.Добавить(Параметр);
					КонецЦикла;
				КонецЕсли;
				//поддержка характеристик
				СтруктураХарактеристика = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Характеристика",Стр,СтруктураХарактеристика);
				Если СтруктураХарактеристика.Количество()>0 Тогда
					НоваяСтрока.Вставить("Характеристика",СтруктураХарактеристика);
				КонецЕсли;
				
				ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтрокиДетализации","Файл_"+Контекст.ФайлДанные.Файл_Формат+"_"+СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_"),"Файл_Шаблон", Кэш);
				Если фрм<>Ложь Тогда
					ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки_Детал(НоваяСтрока, Кэш, Контекст, Стр);	
				КонецЕсли;
				Если ДобавлятьСтроку<>Ложь Тогда
					Контекст.ТаблДетал.СтрТабл.Добавить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ПолучитьРеквизитыДокумента(Кэш, Ини,РеквизитыДляПоиска,Вложение,Строка) Экспорт
	Перем СуммаВложения;
	// Процедура получает реквизиты документа, необходимые для сопоставления
	//Если ((Кэш.Парам.РежимСопоставления = 1) и (Вложение.Тип = "АктВР" или Вложение.Тип = "ЭДОНакл")) или ((Кэш.Парам.РежимСопоставления = 2) и (Вложение.Тип = "СчФктр")) Тогда // сопоставляем накладные и акты
	//тип1С = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Имя",Ини,Кэш);
	типы1С = Новый СписокЗначений;
	Если Ини.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумента Из Ини.мДокумент Цикл
			Если РазделДокумента.Значение.Свойство("Документ") Тогда
				типы1С.Добавить(Сред(РазделДокумента.Значение.Документ.Значение, Найти(РазделДокумента.Значение.Документ.Значение,".")+1));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Номер = Сред(Вложение.Название, Найти(Вложение.Название, "№ ")+2);//парсим название.
	//Номер = Лев(Номер, Найти(Номер, " от ")-1);
	//Дата = Сред(Вложение.Название, Найти(Вложение.Название, " от ")+4, 10);
	//Если Найти(Дата, " ") Тогда
	//	Дата = Лев(Дата, Найти(Дата, " ")-1);
	//	Если СтрДлина(Дата) = 8 Тогда
	//		Дата = Лев(Дата, 6)+"20"+Прав(Дата, 2);
	//КонецЕсли;
	//КонецЕсли;
	//Дата = Дата(Сред(Дата,7,4), Сред(Дата,4,2), Лев(Дата, 2));
	// << alo Меркурий 
	если Вложение= неопределено тогда
		Сумма = 0;
		Дата = "";
		Номер = "";
		Документы1С = Новый СписокЗначений;
		Название = "";
		Идентификатор = "";
	иначе
		Дата = Вложение.Дата;
		Номер= Вложение.Номер;
		Документы1С = Вложение.Документы1С;
		Название = Вложение.Название;
		Идентификатор=Вложение.Идентификатор; 
		
		Если 	НЕ Вложение.Свойство("Сумма",СуммаВложения) 
			И 	НЕ Вложение.Свойство("СуммаБезНДС", СуммаВложения) Тогда
			НомерСуммыВСтроке = Найти(Вложение.Название, "на сумму ");
			Если НомерСуммыВСтроке Тогда
				НомерСуммыВСтроке = НомерСуммыВСтроке + 9;
			Иначе
				НомерСуммыВСтроке = Найти(Вложение.Название, "= ");
				Если НомерСуммыВСтроке Тогда
					НомерСуммыВСтроке = НомерСуммыВСтроке +2;
				КонецЕсли;
			КонецЕсли; 
			Если НомерСуммыВСтроке Тогда 
				Сумма = Сред(Вложение.Название,НомерСуммыВСтроке);
				Если Найти(Сумма, "р.")>0 Тогда
					СуммаВложения = Лев(Сумма, Найти(Сумма, "р.")-1);
				ИначеЕсли Найти(Сумма, ",")>0 Тогда // если валюта не рубль
					СуммаВложения = Лев(Сумма, Найти(Сумма, ",")-1);	
				КонецЕсли; 
				СуммаВложения =  СтрЗаменить(СуммаВложения," ","");
			КонецЕсли;		
		КонецЕсли;
		Попытка
			Сумма = Число(СуммаВложения);
		Исключение
			Сумма = 0; 
		КонецПопытки;
	конецесли;
	Если РеквизитыДляПоиска.Свойство("Сумма") Тогда
		РеквизитыДляПоиска.Сумма = РеквизитыДляПоиска.Сумма + Сумма;
	иначе
		//Сумма1С = 0;
		//Если ЗначениеЗаполнено(Вложение.Документы1С) Тогда
		//	Попытка
		//		Сумма1С = Вложение.Документы1С[0].Значение.СуммаДокумента;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		РеквизитыДляПоиска.Вставить("Статус", Строка.Статус);
		РеквизитыДляПоиска.Вставить("Дата", Дата);
		РеквизитыДляПоиска.Вставить("Номер", Номер);
		РеквизитыДляПоиска.Вставить("Сумма", Сумма);
		РеквизитыДляПоиска.Вставить("типы1С", типы1С);
		РеквизитыДляПоиска.Вставить("ТипСБИС", Строка.СоставПакета[0].Значение.Тип);
		РеквизитыДляПоиска.Вставить("Документы1С", Документы1С);
		РеквизитыДляПоиска.Вставить("РанееСопоставленныеДокументы1С", Документы1С);   // Нужен, чтобы в случае выбора другого документа, для предыдущего удалить идентификатор и статус
		//РеквизитыДляПоиска.Вставить("Сумма1С", Сумма1С);
		РеквизитыДляПоиска.Вставить("НазваниеСБИС", Название);
		РеквизитыДляПоиска.Вставить("СоставПакета", Строка.СоставПакета[0].Значение);
		РеквизитыДляПоиска.Вставить("Контрагент", Строка.СоставПакета[0].Значение.Контрагент);
		РеквизитыДляПоиска.Вставить("НашаОрганизация", Строка.СоставПакета[0].Значение.НашаОрганизация);
		РеквизитыДляПоиска.Вставить("ИдВложения", Идентификатор);		
		// alo Меркурий >>
	КонецЕсли;
КонецПроцедуры	
&НаКлиенте
Функция СформироватьРасхождение(ДанныеВложений, Кэш) Экспорт
	СтруктураФайлаКонтрагента	= ДанныеВложений.СтруктураФайлаКонтрагента;
	СтруктураФайлаНаша			= ДанныеВложений.ВложениеНаше.СтруктураДокумента;
	Док							= СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша);
	ОшибкаПреобразования = Ложь;
	
	ПараметрыСгенерироватьВходящие = Новый Структура;
	ПараметрыСгенерироватьВходящие.Вставить("Вложение", 			ДанныеВложений.ВложениеНаше);
	ПараметрыСгенерироватьВходящие.Вставить("СтруктураДокумента",	Док);
	ПараметрыСгенерироватьВходящие.Вставить("МетодПодготовки",		"СформироватьРасхождениеДляГенератора");
	Попытка
		НаборВложений = МодульОбъектаКлиент().СгенерироватьНаборВложенийВПакет(ПараметрыСгенерироватьВходящие);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", "Файл_Шаблон.СформироватьРасхождение"));
		Возврат Неопределено;
	КонецПопытки;
	
	//Первое вложение - основное.
	ВложениеРасхождения	= НаборВложений[0];
	ВложениеРасхождения.Документы1С.Очистить();
	ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, ВложениеРасхождения);
	ВложениеРасхождения.Вставить("ТекстHTML", ТекстHTML);
	Возврат ВложениеРасхождения;
КонецФункции
Функция СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша) Экспорт
	Док  = Новый Структура;
	Док.Вставить("Файл",Новый Структура);
	Док.Файл.Вставить("Формат",СтруктураФайлаНаша.Файл.Формат);
	Док.Файл.Вставить("ВерсияФормата",СтруктураФайлаНаша.Файл.ВерсияФормата);
	Док.Файл.Вставить("Имя",СтруктураФайлаНаша.Файл.Имя);
	Если СтруктураФайлаНаша.Файл.Свойство("КодФормы") тогда
		Док.Файл.Вставить("КодФормы",СтруктураФайлаНаша.Файл.КодФормы);
	КонецЕсли;
	Док.Файл.Вставить("Документ",Новый Структура);
	Для Каждого Элемент Из СтруктураФайлаНаша.Файл.Документ Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Структура") и ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Док.Файл.Документ.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	// Вставим примечание из заказа-основания, если не заполняется явно в ИНИ
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ")
		И (НЕ Док.Файл.Документ.Свойство("Примечание") ИЛИ НЕ ЗначениеЗаполнено(Док.Файл.Документ.Примечание))
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Примечание") Тогда
		
			Док.Файл.Документ.Вставить("Примечание", СтруктураФайлаКонтрагента.Файл.Документ.Примечание);
			
	КонецЕсли;
	
	Док.Файл.Документ.Вставить("Основание",Новый Массив);
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") Тогда
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер,Название",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер,СтруктураФайлаКонтрагента.Файл.Формат));
	Иначе
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер));
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Отправитель") Тогда
		Док.Файл.Документ.Вставить("Отправитель",СтруктураФайлаКонтрагента.Файл.Документ.Отправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Отправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Получатель") Тогда
		Док.Файл.Документ.Вставить("Получатель",СтруктураФайлаКонтрагента.Файл.Документ.Получатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Получатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузоотправитель") Тогда
		Док.Файл.Документ.Вставить("Грузоотправитель",СтруктураФайлаКонтрагента.Файл.Документ.Грузоотправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузоотправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузополучатель") Тогда
		Док.Файл.Документ.Вставить("Грузополучатель",СтруктураФайлаКонтрагента.Файл.Документ.Грузополучатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузополучатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Поставщик") Тогда
		Док.Файл.Документ.Вставить("Поставщик",СтруктураФайлаКонтрагента.Файл.Документ.Поставщик);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Поставщик);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Покупатель") Тогда
		Док.Файл.Документ.Вставить("Покупатель",СтруктураФайлаКонтрагента.Файл.Документ.Покупатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Покупатель);
	КонецЕсли;
	
	// Заполним параметры заказа по документу контрагента
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") 
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Параметр") Тогда
		ПараметрыКЗаполнению = СтруктураФайлаКонтрагента.Файл.Документ.Параметр;
		МассивПараметров = Новый Массив;
		Если ТипЗнч(ПараметрыКЗаполнению) = Тип("Структура") Тогда
			Для Каждого ПараметрКЗаполнению Из ПараметрыКЗаполнению Цикл
				СтруктураПараметр = Новый Структура("Имя, Значение",ПараметрКЗаполнению.Ключ,ПараметрКЗаполнению.Значение);
				МассивПараметров.Добавить(СтруктураПараметр);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрыКЗаполнению) = Тип("Массив") Тогда
			МассивПараметров = ПараметрыКЗаполнению;		
		КонецЕсли;
		Док.Файл.Документ.Вставить("Параметр", МассивПараметров);
	КонецЕсли;
	
	Если СтруктураФайлаНаша.Файл.Документ.Свойство("Параметр") Тогда
		// Для заказа произведем замену параметров, которые заполнились из СтруктураФайлаКонтрагента
		Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") И Док.Файл.Документ.Свойство("Параметр") Тогда
			КолвоПараметровКонтрагента = Док.Файл.Документ.Параметр.Количество();
			Для Каждого Параметр Из СтруктураФайлаНаша.Файл.Документ.Параметр Цикл
				ПараметрОбновлен = Ложь;
				Для ПозицияОбхода = 0 По КолвоПараметровКонтрагента - 1 Цикл
					Если Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Имя = Параметр.Имя Тогда
						Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Значение = Параметр.Значение;
						ПараметрОбновлен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ПараметрОбновлен Тогда
					Док.Файл.Документ.Параметр.Добавить(Параметр);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Док.Файл.Документ.Вставить("Параметр", СтруктураФайлаНаша.Файл.Документ.Параметр);
		КонецЕсли;
	КонецЕсли;
	
	ТабЧастьНаша = МассивСтруктурВТаблицуЗначений(СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл);
	ТабЧастьНаша.Колонки.Добавить("ЕстьВФайлеКонтрагента", Новый ОписаниеТипов("Булево"));
	ЕстьПорНомерВФайлеКонтрагента = Ложь;
	Если СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0].Свойство("ПорНомерВФайлеКонтрагента") Тогда
		ЕстьПорНомерВФайлеКонтрагента = Истина;	
	КонецЕсли;
	
	ТабЧастьКонтрагента = Новый Соответствие;   // сворачиваем табличную часть по идентификатору строки
	Для Каждого СтрТабл Из СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.СтрТабл Цикл
		Если СтрТабл.Свойство("Идентификатор") и ЗначениеЗаполнено(СтрТабл.Идентификатор) И НЕ ЕстьПорНомерВФайлеКонтрагента Тогда
			СтрокаСоответствия = ТабЧастьКонтрагента.Получить(СтрТабл.Идентификатор);
			Если СтрокаСоответствия = Неопределено Тогда
				ТабЧастьКонтрагента.Вставить(СтрТабл.Идентификатор, СтрТабл);	
			Иначе
				Если СтрТабл.Свойство("Кол_во") и СтрокаСоответствия.Свойство("Кол_во") Тогда
					СтрокаСоответствия.Кол_во = Формат(Число(СтрокаСоответствия.Кол_во)+Число(СтрТабл.Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
				КонецЕсли;
				Если СтрТабл.Свойство("СуммаБезНал") и СтрокаСоответствия.Свойство("СуммаБезНал") Тогда
					СтрокаСоответствия.СуммаБезНал = Формат(Число(СтрокаСоответствия.СуммаБезНал)+Число(СтрТабл.СуммаБезНал),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("Сумма") и СтрокаСоответствия.Свойство("Сумма") Тогда
					СтрокаСоответствия.Сумма = Формат(Число(СтрокаСоответствия.Сумма)+Число(СтрТабл.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("НДС") и СтрТабл.НДС.Свойство("Сумма") и СтрокаСоответствия.Свойство("НДС") и СтрокаСоответствия.НДС.Свойство("Сумма") Тогда
					СтрокаСоответствия.НДС.Сумма = Формат(Число(СтрокаСоответствия.НДС.Сумма)+Число(СтрТабл.НДС.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ТабЧастьКонтрагента.Вставить(Новый УникальныйИдентификатор, СтрТабл);	
		КонецЕсли;
	КонецЦикла;
	
	ИтогСумма = 0;
	ИтогКоличество = 0;
	ИтогСуммаБезНал = 0;
	ИтогНДС = 0;
	СтрОтклонения = Новый Массив;
	Для Каждого СтрокаСоответствия Из ТабЧастьКонтрагента Цикл
		СтрТабл = СтрокаСоответствия.Значение;
		НоваяСтрока = Новый Структура();
		Если СтрТабл.Свойство("КодПокупателя") Тогда
			НоваяСтрока.Вставить("КодПокупателя", СтрТабл.КодПокупателя);
		КонецЕсли;
		Если СтрТабл.Свойство("КодПоставщика") Тогда
			НоваяСтрока.Вставить("КодПоставщика", СтрТабл.КодПоставщика);
		КонецЕсли;
		Номенклатура = Неопределено;
		ОКЕИ = Неопределено;
		ХарактеристикаНоменклатуры = Неопределено;
		СтрТабл.Свойство("Номенклатура", Номенклатура);
		//СтрТабл.Свойство("ОКЕИ", ОКЕИ);
		СтрТабл.Свойство("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		//Отбор = Новый Структура("Номенклатура, ОКЕИ", Номенклатура, ОКЕИ);
		Если ЕстьПорНомерВФайлеКонтрагента Тогда
			Отбор = Новый Структура("ПорНомерВФайлеКонтрагента", СтрТабл.ПорНомер);
		Иначе
			Отбор = Новый Структура("Номенклатура", Номенклатура);
			
			Если ТабЧастьНаша.Колонки.Найти("ХарактеристикаНоменклатуры")<>Неопределено Тогда
				Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
					Отбор.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				Иначе
					Отбор.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НайденныеСтроки = ТабЧастьНаша.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.ЕстьВФайлеКонтрагента = Истина;
			Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
				Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
					НоваяСтрока.Вставить(Поле.Ключ, НайденнаяСтрока[Поле.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Попытка
				ИтогСумма = ИтогСумма+НайденнаяСтрока.Сумма;
				ИтогКоличество = ИтогКоличество+НайденнаяСтрока.Кол_во;
				ИтогСуммаБезНал = ИтогСуммаБезНал+НайденнаяСтрока.СуммаБезНал;
				ИтогНДС = ИтогНДС+НайденнаяСтрока.НДС.Сумма;
			Исключение
			КонецПопытки;
		Иначе     // если удалили строки в загруженном документе
			НоваяСтрока.Вставить("Название", ?(СтрТабл.Свойство("Название"),СтрТабл.Название,""));
			НоваяСтрока.Вставить("Кол_во", "0");
			НоваяСтрока.Вставить("Цена", "0");
			НоваяСтрока.Вставить("СуммаБезНал", "0");
			НоваяСтрока.Вставить("Сумма", "0");  
			Если СтрТабл.Свойство("GTIN") Тогда
				НоваяСтрока.Вставить("GTIN", СтрТабл.GTIN);	
			КонецЕсли;  
			Если СтрТабл.Свойство("ОКЕИ") Тогда
				НоваяСтрока.Вставить("ОКЕИ", СтрТабл.ОКЕИ);	
			КонецЕсли;  
			Если СтрТабл.Свойство("ЕдИзм") Тогда
				НоваяСтрока.Вставить("ЕдИзм", СтрТабл.ЕдИзм);	
			КонецЕсли;
		КонецЕсли;
		ПредСтрТабл = Новый Структура;
		Для Каждого Поле Из СтрТабл Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры"
				И Поле.Ключ<>"ИмяТЧ"
				И Поле.Ключ<>"НомерСтрокиТЧ"
				И Поле.Ключ<>"НеЗагружать" Тогда   // эти поля добавляются в структуру файла при загрузке, при выгрузке расхождения они не нужны
				ПредСтрТабл.Вставить(Поле.Ключ, Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		ПреобразоватьПараметрыВМассив(ПредСтрТабл);
		НоваяСтрока.Вставить("ПредСтрТабл", ПредСтрТабл);
		СтрОтклонения.Добавить(НоваяСтрока);
	КонецЦикла;
	// Если добавились строки, которых не было в файле контрагента
	НашиСтроки = ТабЧастьНаша.НайтиСтроки(Новый Структура("ЕстьВФайлеКонтрагента", Ложь)); 
	Для Каждого СтрТабл Из НашиСтроки Цикл
		НоваяСтрока = Новый Структура();
		Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
				НоваяСтрока.Вставить(Поле.Ключ, СтрТабл[Поле.Ключ]);
			КонецЕсли;
		КонецЦикла;
		СтрОтклонения.Добавить(НоваяСтрока);
		Попытка
			ИтогСумма = ИтогСумма+СтрТабл.Сумма;
			ИтогКоличество = ИтогКоличество+СтрТабл.Кол_во;
			ИтогСуммаБезНал = ИтогСуммаБезНал+СтрТабл.СуммаБезНал;
			ИтогНДС = ИтогНДС+СтрТабл.НДС.Сумма;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Док.Файл.Документ.Вставить("ТаблДок", Новый Структура);
	Док.Файл.Документ.ТаблДок.Вставить("ИтогТабл",Новый Массив);
	ИтогТабл = Новый Структура("Сумма,Кол_во,СуммаБезНал,НДС",ИтогСумма,ИтогКоличество,ИтогСуммаБезНал,Новый Структура("Сумма",ИтогНДС));
	Если СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Свойство("ИтогТабл") Тогда
		ИтогТабл.Вставить("ПредИтогТабл", СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.ИтогТабл);
	КонецЕсли;
	Док.Файл.Документ.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
	Док.Файл.Документ.ТаблДок.Вставить("СтрТабл", СтрОтклонения);
	Возврат Док;
КонецФункции
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);
		Попытка
			СтрТ.ОКЕИ = СокрЛП(СтрТ.ОКЕИ);	
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции
Функция ПреобразоватьПараметрыВМассив(СтруктураУчастника)
	Если СтруктураУчастника.Свойство("Параметр") и ТипЗнч(СтруктураУчастника.Параметр) = Тип("Структура") Тогда
		МассивПараметров = Новый Массив;
		Для Каждого Элемент Из СтруктураУчастника.Параметр Цикл
			СтруктураПараметра = Новый Структура("Имя, Значение", Элемент.Ключ, Элемент.Значение);
			Массивпараметров.Добавить(СтруктураПараметра);
		КонецЦикла;
		СтруктураУчастника.Вставить("Параметр", Массивпараметров);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеИзДокумента1С_мОснование(Кэш, Док, Контекст) Экспорт
	Для Каждого Параметр Из Контекст.ФайлДанные.мОснование Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из Параметр.Значение Цикл
				ВременныйКонтекстФайлДанные = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Контекст.ФайлДанные,,Ложь);
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ВременныйКонтекстФайлДанные,Элемент);
				Основание = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ВременныйКонтекстФайлДанные,Основание);
				Док.Файл.Документ.Основание.Добавить(Основание);	
			КонецЦикла;
		Иначе
			ВременныйКонтекстФайлДанные = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Контекст.ФайлДанные,,Ложь);
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ВременныйКонтекстФайлДанные,Параметр.Значение);
			Основание = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ВременныйКонтекстФайлДанные,Основание);
			Док.Файл.Документ.Основание.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//KES МОТП ИСМП--->
&НаКлиенте
Функция ОбработатьСложныйУзел(СложныйУзел,СтараяСтрока,НоваяСтрока,Кэш)
	
	Для Каждого Элемент Из СложныйУзел Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			//перебрать массив
			Для Каждого ЭлементыУзла Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементыУзла) = Тип("Структура") Тогда
					ЗаполнитьСложныйУзел(ЭлементыУзла,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш)
				КонецЕсли;
			КонецЦикла;
			//Только в одном исключительном случае структуру превращаем в массив на данном этапе - НомСредИдентТов
			//Конструкция  <мНомСредИдентТов Имя="НомСредИдентТов"> <мКИЗ Имя="КИЗ"> без описания НомСредИдентТов!
		ИначеЕсли (Элемент.Ключ = "НомСредИдентТов" ИЛИ Элемент.Ключ = "КИЗ" ИЛИ Элемент.Ключ = "НомУпак")
			И ТипЗнч(Элемент.Значение)=Тип("Структура") Тогда 
			ЗаполнитьСложныйУзел(Элемент.Значение,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьСложныйУзел(СложныйУзелСтруктура,ИмяУзла,СтараяСтрока,НоваяСтрока,Кэш)
	
	СтруктураВложеннойСтроки = Новый Структура;
	Для Каждого ЭлементСтруктурыСтр Из СложныйУзелСтруктура Цикл
		
		Если НЕ НоваяСтрока.Свойство(ИмяУзла) Тогда
			НоваяСтрока.Вставить(ИмяУзла,Новый Массив);
		КонецЕсли;

		//ещё один вложенный сложный узел? Должен быть в ини после простых узлов
		Если ТипЗнч(ЭлементСтруктурыСтр.Значение)=Тип("Структура") Тогда
			ОбработатьСложныйУзел(ЭлементСтруктурыСтр.Значение,СтараяСтрока,СтруктураВложеннойСтроки,Кэш);
			Продолжить;
		КонецЕсли;
		
		//узел_атрибут (НомСредИдентТов_ИдентТрансУпак, КИЗ_Значение, НомУпак_Значение)
		Поз = Найти(ЭлементСтруктурыСтр.Ключ,"_");
		Если Поз = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВложеннойСтроки.Вставить(Сред(ЭлементСтруктурыСтр.Ключ,Поз+1),Кэш.ОбщиеФункции.РассчитатьЗначение(ЭлементСтруктурыСтр.Ключ, СложныйУзелСтруктура, Кэш));
		
	КонецЦикла;
	Если НоваяСтрока.Свойство(ИмяУзла) Тогда
		НоваяСтрока[ИмяУзла].Добавить(СтруктураВложеннойСтроки);
	КонецЕсли;
	
КонецПроцедуры
//<--- KES МОТП ИСМП

//Функция формирует к отправке пакет корреспонденции
&НаКлиенте
Функция СформироватьПакетКорреспонденции(Кэш=Неопределено, ПараметрыФормированияПакета=Неопределено, Отказ=Неопределено) Экспорт
	Если	Кэш = Неопределено
		И	ПараметрыФормированияПакета = Неопределено
		И	Отказ = Неопределено Тогда
		//Тестовый вызов
		Возврат Неопределено;
	КонецЕсли;
	СписокФайлов = ПараметрыФормированияПакета.СписокФайлов;
	КорреспонденцияКОтправке= Новый Массив;
	//Для вложений, которые требует конвертации в XML, создадим временные файлы.
	Для Каждого Строка Из СписокФайлов Цикл
		СбисВложение	= Неопределено;
		СтруктураФайла	= Неопределено;
		Для Каждого ПараметрФайла Из Строка.ПараметрыФайла Цикл
			Если ПараметрФайла.Представление = "Вложение" Тогда
				СбисВложение = ПараметрФайла.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если	Не ЗначениеЗаполнено(СбисВложение)
			Или Не СбисВложение.Свойство("СтруктураДокумента", СтруктураФайла) Тогда
			КорреспонденцияКОтправке.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла", Строка.ПолноеИмяФайла,Строка.ИмяФайла));
			Продолжить;
		КонецЕсли;
		СбисВложение.Вставить("Получатель", ПараметрыФормированияПакета.Получатель);
		СбисВложение.Вставить("Отправитель", ПараметрыФормированияПакета.Отправитель);
		ОшибкаПреобразования = Ложь;
		КлючПреобразования = Кэш.ОбщиеФункции.сбисИмяXSLTДляВложения(Кэш, СтруктураФайла.Файл, СбисВложение);
		Если Кэш.ОбщиеФункции.ГенераторВключенДляДокумента(Кэш, СбисВложение) Тогда
			ВложениеПодстановка = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисВложение,,Истина);
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрименитьПодстановку", "Файл_Шаблон_" + СтрЗаменить(СбисВложение.ВерсияФормата, ".", "_"), "Файл_Шаблон", Кэш); 
			Если фрм = Ложь Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(,"Файл_Шаблон.СформироватьПакетКорреспонденции",,"Не найдена подстановка");
			КонецЕсли;
			XML_Шаблон = фрм.ПрименитьПодстановку(Кэш, ВложениеПодстановка, Новый Структура, ОшибкаПреобразования);
			Если ОшибкаПреобразования Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(XML_Шаблон, "Файл_Шаблон.СформироватьПакетКорреспонденции");
			КонецЕсли;
		Иначе	
			ДопПараметрыПреобразования = Новый Структура;
			Если СбисВложение.ОписаниеФайла.Свойство("Кодировка") Тогда
				ДопПараметрыПреобразования.Вставить("Кодировка", СбисВложение.ОписаниеФайла.Кодировка);
			КонецЕсли;
			//Костыль для старой отправки файла прайса - формируем с простыми элементами и только коммерческую информацию
			СтруктураФайлаКОтправке = СтруктураФайла;
			Если Лев(КлючПреобразования, 10) = "CommerceML" Тогда
				СтруктураФайлаКОтправке = Новый Структура("КоммерческаяИнформация");
				ЗаполнитьЗначенияСвойств(СтруктураФайлаКОтправке, СтруктураФайла.Файл);
				ДопПараметрыПреобразования.Вставить("СПростымиЭлементами", Истина);
			КонецЕсли;
			XML_Шаблон = Кэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, СтруктураФайлаКОтправке, КлючПреобразования, ДопПараметрыПреобразования, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(XML_Шаблон, "Файл_Шаблон.СформироватьПакетКорреспонденции");
			КонецЕсли;
			//ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(Док, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
		КонецЕсли;
		ПараметрыФайлаКЗаписи = Новый Структура;
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ПараметрыФайлаКЗаписи, СбисВложение.ОписаниеФайла);
		ПараметрыФайлаКЗаписи.Вставить("Данные", XML_Шаблон);
		ПараметрыФайлаКЗаписи.Имя = ПараметрыФайлаКЗаписи.Имя + "_" + КлючПреобразования;
		XML_Описание = Кэш.ОбщиеФункции.сбисЗаписатьФайл_Клиент(Кэш, ПараметрыФайлаКЗаписи, Отказ);
		КорреспонденцияКОтправке.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла", XML_Описание.ПолноеИмя,XML_Описание.Имя));
	КонецЦикла;
	Возврат КорреспонденцияКОтправке;
КонецФункции

//Функция формирует контекст для чтения из документа 1с
&НаКлиенте
Функция ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	ЗначениеИни = ОписаниеРасхождения.ЗначениеИни;
    Документ1С = ОписаниеРасхождения.Документ1С;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С); 
	ЗначениеИни.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	Контекст.Вставить("ДокументДанные", Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(ЗначениеИни, Документ1С, Кэш.КэшЗначенийИни, Кэш.Парам));  // alo Меркурий
	
	Возврат Контекст;
КонецФункции
  
// Функция для получения карты сравнения для поиска расхождений
//
&НаКлиенте
Функция ПолучитьКартуСравнения() Экспорт
	Карта = Новый Структура("Отправитель, Получатель, ТаблДок");
	Карта.Отправитель = Новый Структура("СвЮЛ, СвФЛ");
	Карта.Получатель = Новый Структура("СвЮЛ, СвФЛ");
	Карта.ТаблДок = Новый Структура("СтрТабл, ИтогТабл");
	Карта.ТаблДок.СтрТабл = Новый Структура("КлючПоиска, КлючСравнения");
	Карта.ТаблДок.СтрТабл.КлючПоиска = Новый Структура("Название", "");
	Карта.ТаблДок.СтрТабл.КлючСравнения = Новый Структура("Сумма, Кол_во, НДС", 0, 0);
	Карта.ТаблДок.СтрТабл.КлючСравнения.НДС = Новый Структура("Сумма", 0);
	Карта.ТаблДок.ИтогТабл = Новый Структура("КлючПоиска, КлючСравнения");
	Карта.ТаблДок.ИтогТабл.КлючСравнения = Новый Структура("Сумма, Кол_во, НДС", 0, 0);
	Карта.ТаблДок.ИтогТабл.КлючСравнения.НДС = Новый Структура("Сумма", 0);
	
	Возврат Карта;
КонецФункции

#Область include_core2_vo2_Файл_Шаблон_3_01_КлассСтруктураДокумента
#КонецОбласти

#Область include_core2_vo2_Файл_Шаблон_ОбработатьТабличнуюЧастьДокументаСБИС
#КонецОбласти

#Область include_core2_vo2_Файл_Шаблон_ПолучитьТабличнуюЧастьДокумента1С
#КонецОбласти

#Область include_core2_vo2_Файл_Шаблон_ГенераторФЭД
#КонецОбласти
