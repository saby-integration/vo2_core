
#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

//Функция запускает создание документа по ТОРГ-2 с предварительным поиском существующего документа
&НаКлиенте
Функция СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С = Неопределено) Экспорт

	Попытка
		Документ1СПроверка = Документ1С;
		ЗаполнитьДокументыОснования(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1СПроверка);
		Если		Документ1С = Неопределено
			И	Не	Документ1СПроверка = Неопределено Тогда
			Документ1С = Документ1СПроверка;
			//Нашли документ. Надо повторить операцию
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		СбисИсключение	= МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "Файл_ТОРГ2_3_01.СоздатьДокумент");
		Если СбисИсключение.code = 760 Тогда
			МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "message"));
		Иначе
			МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;

	//Если МассивОснований.Количество()=0 тогда   // пришел один СФ
	//	ФорматВерсияФайла = Вложение.СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтрЗаменить(Вложение.СтруктураФайла.Файл.ВерсияФормата,".", "_"), " ", "");
	//	Ини = Кэш.ОбщиеФункции.сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайла);
	//	Аванс = Ложь;
	//	Если Вложение.СтруктураФайла.Файл.Свойство("Документ") и Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") и Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ИдВизуализации") и Найти(нрег(Вложение.СтруктураФайла.Файл.Документ.Параметр.ИдВизуализации), "аванс")>0 Тогда
	//		Аванс = Истина;
	//	КонецЕсли;
	//	Если ИниДок.Свойство("мОснование") и Не Аванс Тогда   // перебираем основания в инишке фактуры
	//		Для каждого Основание Из ИниДок.мОснование Цикл
	//			Если Основание.Значение.Свойство("Основание_Документ") и Основание.Значение.Основание_Документ.Свойство("Тип") Тогда
	//				Попытка
	//					ТипыОснований = Новый ОписаниеТипов(Основание.Значение.Основание_Документ.Тип);
	//					ДокументПоступления = Неопределено;
	//					ИниПервогоОснования = Неопределено;
	//					СписокДокументов = Новый СписокЗначений;
	//					сч = 1;
	//					Для Каждого РазделДок Из Ини.мДокумент Цикл   // Ищем в инишке фактуры мДокумент с типом, который может быть основанием СФ
	//						ТипМДок = Сред(РазделДок.Значение.Документ.Значение, Найти(РазделДок.Значение.Документ.Значение, ".")+1);
	//						Если ТипыОснований.СодержитТип(Тип("ДокументСсылка."+ТипМДок)) Тогда	
	//							ИниПост = РазделДок.Значение;
	//							Если сч = 1 Тогда
	//								ИниПервогоОснования = РазделДок.Значение;
	//							КонецЕсли;
	//							сч = сч + 1; 
	//                            фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+РазделДок.Ключ,"Документ_Шаблон",Кэш);
	//							ТекущийДокументПоступления = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С,РазделДок.Ключ);  // уже есть связанный документ поступления
	//							
	//							Если Не ЗначениеЗаполнено(ТекущийДокументПоступления) Тогда  // если нет связанного документа поступления, пытаемся найти его по реквизитам основания из СФ
	//								РеквизитыДляПоиска = Новый Структура;
	//								РеквизитыДляПоиска.Вставить("НашаОрганизация", СоставПакета.НашаОрганизация);
	//								РеквизитыДляПоиска.Вставить("Контрагент", СоставПакета.Контрагент);
	//								Если ИниПост.Свойство("Документ_ДатаВх") Тогда
	//									Если ИниПост.Документ_ДатаВх.Свойство("Данные") Тогда
	//										ДатаПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_ДатаВх.Данные, Вложение.СтруктураФайла);
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеДата") Тогда
	//										ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеДата;
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Дата") Тогда
	//										ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Дата;
	//									КонецЕсли;	
	//									Попытка
	//										ДатаПост = Дата(Сред(ДатаПост,7,4),Сред(ДатаПост,4,2),Лев(ДатаПост,2));
	//										РеквизитыДляПоиска.Вставить("Дата", ДатаПост);
	//									Исключение
	//									КонецПопытки;
	//								КонецЕсли;
	//								Если ИниПост.Свойство("Документ_НомерВх") Тогда
	//									Если ИниПост.Документ_НомерВх.Свойство("Данные") Тогда
	//										НомерПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_НомерВх.Данные, Вложение.СтруктураФайла);
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеНомер") Тогда
	//										НомерПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеНомер;
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Номер") Тогда
	//										НомерПост = Вложение.СтруктураФайла.Файл.Документ.Номер;
	//									КонецЕсли;
	//									Если ЗначениеЗаполнено(НомерПост) Тогда
	//										РеквизитыДляПоиска.Вставить("Номер", НомерПост);
	//									КонецЕсли;
	//								КонецЕсли;
	//								Если РеквизитыДляПоиска.Свойство("Дата") и РеквизитыДляПоиска.Свойство("Номер") Тогда
	//									фрмНайтиДок = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа","РаботаСДокументами1С",,Кэш);
	//									фрмНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, ИниПост, Кэш.Ини, Кэш.Парам, РеквизитыДляПоиска);
	//								КонецЕсли;										
	//							КонецЕсли;
	//							Если СписокДокументов.Количество()>0 Тогда  // если нашли подходящий документ, берем его, иначе создаем новый
	//								ДокументПоступления	= СписокДокументов[0].Значение;
	//								ТекстСообщения		= "Найден подходящий документ-основание "+строка(ДокументПоступления);
	//								ДанныеДозаполнить	= Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
	//								//AU если заполняем детализацию, то не сообщаем сразу.
	//								Если ДанныеДозаполнить.ЗаполнитьДетализацию Тогда
	//									ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", ДокументПоступления, ИниПост.Документ.Значение, "Найден.", ТекстСообщения);
	//									Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДозаполнить.СтрокаДетализации, ПараметыЗаполнения);
	//								Иначе
	//									Сообщить("Для документа " + Вложение.Название + " н" + Сред(ТекстСообщения, 2));
	//								КонецЕсли;
	//								Прервать;
	//							КонецЕсли;
	//						КонецЕсли;
	//					КонецЦикла;
	//					Если СписокДокументов.Количество()=0 и ЗначениеЗаполнено(ИниПервогоОснования)Тогда  // если не нашли подходящий документ, создаем новый
	//						//AU если заполнение детализации происходит внутри функции создания документа.
	//						ДокументПоступления = фрм.СоздатьДокумент(Кэш,Вложение,ИниПервогоОснования,СоставПакета,МассивОснований, ТекущийДокументПоступления);
	//					КонецЕсли;
	//					Если ЗначениеЗаполнено(ДокументПоступления) Тогда
	//						МассивОснований.Добавить(Новый Структура("ДокОснование, МассивТабЧастей", ДокументПоступления, Новый Массив));
	//					КонецЕсли;
	//				Исключение
	//					Сообщить(ОписаниеОшибки());
	//				КонецПопытки;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("Документ_Шаблон").СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументыОснования(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С)
	
	Если Не Документ1С = Неопределено Тогда
		Возврат;//Есть установленный документ, который перезаполняем
	КонецЕсли;
	
	Отказ = Ложь;
		
	Если Вложение.Документы1С.Количество() Тогда
		
		Документ1С = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С, Вложение.ТипДокумента);
		
		Если Не Документ1С = Неопределено Тогда
			Возврат;//Нашли установленный документ, который перезаполняем в списке оснований
		КонецЕсли;
		
	КонецЕсли;		

	ПараметрыПоискаДокумента = Новый Структура;
	ПараметрыПоискаДокумента.Вставить("СоставПакета", СоставПакета);
	
	//Сперва делаем поиск текущего типа документа для перезаполнения
	СписокДокументов = МодульОбъектаКлиент().ВложениеСБИС_НайтиПодходящиеДокументы(Вложение, ПараметрыПоискаДокумента);
	
	Если СписокДокументов.Количество() Тогда  
		// если нашли подходящий документ, берем его, иначе создаем новый
		Документ1С			= СписокДокументов[0];
		ТекстСообщения		= "Найден подходящий документ " + строка(Документ1С);
		ДанныеДозаполнить	= Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
		//AU если заполняем детализацию, то не сообщаем сразу.
		Если ДанныеДозаполнить.ЗаполнитьДетализацию Тогда
			ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", Документ1С, ИниДок.Документ.Значение, "Найден.", ТекстСообщения);
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДозаполнить.СтрокаДетализации, ПараметыЗаполнения);
			ДанныеДозаполнить.СтрокаДетализации.Сообщение = "Найден сществуюущий подходящий документ. Повторите загрузку для перезаполнения.";
		Иначе
			Сообщить("Для документа " + Вложение.Название + " н" + Сред(ТекстСообщения, 2));
		КонецЕсли;
		
		Возврат
	КонецЕсли;
	
	УзелИниОснования = Неопределено;
	Если	ИниДок.Свойство("Документ_Основание", УзелИниОснования)
		И	УзелИниОснования.Свойство("Тип", УзелИниОснования) Тогда
		ДокументТип = СтрЗаменить(УзелИниОснования, ",", Символы.ПС);
		ПолныйИни	= МодульОбъектаКлиент().ВложениеСБИС_Получить(Вложение, "ФайлИни");
		Для НомерСтрокиТип = 1 По СтрЧислоСтрок(ДокументТип) Цикл
			ТипОснованияПоиск = СтрЗаменить(СтрПолучитьСтроку(ДокументТип, НомерСтрокиТип), ".", Символы.ПС);
			ТипОснованияПоиск = СтрПолучитьСтроку(ТипОснованияПоиск, 2);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры