
#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

//Функция запускает создание документа по ТОРГ-2 с предварительным поиском существующего документа
&НаКлиенте
Функция СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С = Неопределено) Экспорт

	Попытка
		Документ1СПроверка = Документ1С;
		ЗаполнитьДокументыОснования(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1СПроверка);
		Если		Документ1С = Неопределено
			И	Не	Документ1СПроверка = Неопределено Тогда
			Документ1С = Документ1СПроверка;
			//Нашли документ. Надо повторить операцию
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		СбисИсключение	= МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "Файл_ТОРГ2_3_01.СоздатьДокумент");
		Если СбисИсключение.code = 760 Тогда
			МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение, Новый Структура("СтатусСообщения", "message"));
		Иначе
			МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;

	//Если МассивОснований.Количество()=0 тогда   // пришел один СФ
	//	ФорматВерсияФайла = Вложение.СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтрЗаменить(Вложение.СтруктураФайла.Файл.ВерсияФормата,".", "_"), " ", "");
	//	Ини = Кэш.ОбщиеФункции.сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайла);
	//	Аванс = Ложь;
	//	Если Вложение.СтруктураФайла.Файл.Свойство("Документ") и Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") и Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ИдВизуализации") и Найти(нрег(Вложение.СтруктураФайла.Файл.Документ.Параметр.ИдВизуализации), "аванс")>0 Тогда
	//		Аванс = Истина;
	//	КонецЕсли;
	//	Если ИниДок.Свойство("мОснование") и Не Аванс Тогда   // перебираем основания в инишке фактуры
	//		Для каждого Основание Из ИниДок.мОснование Цикл
	//			Если Основание.Значение.Свойство("Основание_Документ") и Основание.Значение.Основание_Документ.Свойство("Тип") Тогда
	//				Попытка
	//					ТипыОснований = Новый ОписаниеТипов(Основание.Значение.Основание_Документ.Тип);
	//					ДокументПоступления = Неопределено;
	//					ИниПервогоОснования = Неопределено;
	//					СписокДокументов = Новый СписокЗначений;
	//					сч = 1;
	//					Для Каждого РазделДок Из Ини.мДокумент Цикл   // Ищем в инишке фактуры мДокумент с типом, который может быть основанием СФ
	//						ТипМДок = Сред(РазделДок.Значение.Документ.Значение, Найти(РазделДок.Значение.Документ.Значение, ".")+1);
	//						Если ТипыОснований.СодержитТип(Тип("ДокументСсылка."+ТипМДок)) Тогда	
	//							ИниПост = РазделДок.Значение;
	//							Если сч = 1 Тогда
	//								ИниПервогоОснования = РазделДок.Значение;
	//							КонецЕсли;
	//							сч = сч + 1; 
	//                            фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+РазделДок.Ключ,"Документ_Шаблон",Кэш);
	//							ТекущийДокументПоступления = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С,РазделДок.Ключ);  // уже есть связанный документ поступления
	//							
	//							Если Не ЗначениеЗаполнено(ТекущийДокументПоступления) Тогда  // если нет связанного документа поступления, пытаемся найти его по реквизитам основания из СФ
	//								РеквизитыДляПоиска = Новый Структура;
	//								РеквизитыДляПоиска.Вставить("НашаОрганизация", СоставПакета.НашаОрганизация);
	//								РеквизитыДляПоиска.Вставить("Контрагент", СоставПакета.Контрагент);
	//								Если ИниПост.Свойство("Документ_ДатаВх") Тогда
	//									Если ИниПост.Документ_ДатаВх.Свойство("Данные") Тогда
	//										ДатаПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_ДатаВх.Данные, Вложение.СтруктураФайла);
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеДата") Тогда
	//										ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеДата;
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Дата") Тогда
	//										ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Дата;
	//									КонецЕсли;	
	//									Попытка
	//										ДатаПост = Дата(Сред(ДатаПост,7,4),Сред(ДатаПост,4,2),Лев(ДатаПост,2));
	//										РеквизитыДляПоиска.Вставить("Дата", ДатаПост);
	//									Исключение
	//									КонецПопытки;
	//								КонецЕсли;
	//								Если ИниПост.Свойство("Документ_НомерВх") Тогда
	//									Если ИниПост.Документ_НомерВх.Свойство("Данные") Тогда
	//										НомерПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_НомерВх.Данные, Вложение.СтруктураФайла);
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеНомер") Тогда
	//										НомерПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеНомер;
	//									ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Номер") Тогда
	//										НомерПост = Вложение.СтруктураФайла.Файл.Документ.Номер;
	//									КонецЕсли;
	//									Если ЗначениеЗаполнено(НомерПост) Тогда
	//										РеквизитыДляПоиска.Вставить("Номер", НомерПост);
	//									КонецЕсли;
	//								КонецЕсли;
	//								Если РеквизитыДляПоиска.Свойство("Дата") и РеквизитыДляПоиска.Свойство("Номер") Тогда
	//									фрмНайтиДок = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа","РаботаСДокументами1С",,Кэш);
	//									фрмНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, ИниПост, Кэш.Ини, Кэш.Парам, РеквизитыДляПоиска);
	//								КонецЕсли;										
	//							КонецЕсли;
	//							Если СписокДокументов.Количество()>0 Тогда  // если нашли подходящий документ, берем его, иначе создаем новый
	//								ДокументПоступления	= СписокДокументов[0].Значение;
	//								ТекстСообщения		= "Найден подходящий документ-основание "+строка(ДокументПоступления);
	//								ДанныеДозаполнить	= Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
	//								//AU если заполняем детализацию, то не сообщаем сразу.
	//								Если ДанныеДозаполнить.ЗаполнитьДетализацию Тогда
	//									ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", ДокументПоступления, ИниПост.Документ.Значение, "Найден.", ТекстСообщения);
	//									Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДозаполнить.СтрокаДетализации, ПараметыЗаполнения);
	//								Иначе
	//									Сообщить("Для документа " + Вложение.Название + " н" + Сред(ТекстСообщения, 2));
	//								КонецЕсли;
	//								Прервать;
	//							КонецЕсли;
	//						КонецЕсли;
	//					КонецЦикла;
	//					Если СписокДокументов.Количество()=0 и ЗначениеЗаполнено(ИниПервогоОснования)Тогда  // если не нашли подходящий документ, создаем новый
	//						//AU если заполнение детализации происходит внутри функции создания документа.
	//						ДокументПоступления = фрм.СоздатьДокумент(Кэш,Вложение,ИниПервогоОснования,СоставПакета,МассивОснований, ТекущийДокументПоступления);
	//					КонецЕсли;
	//					Если ЗначениеЗаполнено(ДокументПоступления) Тогда
	//						МассивОснований.Добавить(Новый Структура("ДокОснование, МассивТабЧастей", ДокументПоступления, Новый Массив));
	//					КонецЕсли;
	//				Исключение
	//					Сообщить(ОписаниеОшибки());
	//				КонецПопытки;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("Документ_Шаблон").СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументыОснования(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С)
	
	Если Не Документ1С = Неопределено Тогда
		Возврат;//Есть установленный документ, который перезаполняем
	КонецЕсли;
	
	Отказ = Ложь;
		
	Если Вложение.Документы1С.Количество() Тогда
		
		Документ1С = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С, Вложение.ТипДокумента);
		
		Если Не Документ1С = Неопределено Тогда
			Возврат;//Нашли установленный документ, который перезаполняем в списке оснований
		КонецЕсли;
		
	КонецЕсли;		

	ПараметрыПоискаДокумента = Новый Структура;
	ПараметрыПоискаДокумента.Вставить("СоставПакета", СоставПакета);
	
	//Сперва делаем поиск текущего типа документа для перезаполнения
	СписокДокументов = МодульОбъектаКлиент().ВложениеСБИС_НайтиПодходящиеДокументы(Вложение, ПараметрыПоискаДокумента);
	
	Если СписокДокументов.Количество() Тогда  
		// если нашли подходящий документ, берем его, иначе создаем новый
		Документ1С			= СписокДокументов[0];
		ТекстСообщения		= "Найден подходящий документ " + строка(Документ1С);
		ДанныеДозаполнить	= Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
		//AU если заполняем детализацию, то не сообщаем сразу.
		Если ДанныеДозаполнить.ЗаполнитьДетализацию Тогда
			ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", Документ1С, ИниДок.Документ.Значение, "Найден.", ТекстСообщения);
			Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДозаполнить.СтрокаДетализации, ПараметыЗаполнения);
			ДанныеДозаполнить.СтрокаДетализации.Сообщение = "Найден сществуюущий подходящий документ. Повторите загрузку для перезаполнения.";
		Иначе
			Сообщить("Для документа " + Вложение.Название + " н" + Сред(ТекстСообщения, 2));
		КонецЕсли;
		
		Возврат
	КонецЕсли;
	
	УзелИниОснования = Неопределено;
	Если	ИниДок.Свойство("Документ_Основание", УзелИниОснования)
		И	УзелИниОснования.Свойство("Тип", УзелИниОснования) Тогда
		ДокументТип = СтрЗаменить(УзелИниОснования, ",", Символы.ПС);
		ПолныйИни	= МодульОбъектаКлиент().ВложениеСБИС_Получить(Вложение, "ФайлИни");
		Для НомерСтрокиТип = 1 По СтрЧислоСтрок(ДокументТип) Цикл
			ТипОснованияПоиск = СтрЗаменить(СтрПолучитьСтроку(ДокументТип, НомерСтрокиТип), ".", Символы.ПС);
			ТипОснованияПоиск = СтрПолучитьСтроку(ТипОснованияПоиск, 2);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
	// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
	Попытка	
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		Контекст.Вставить("ИтогСумма",0);
		Контекст.Вставить("ИтогСуммаБезНалога",0);
		Контекст.Вставить("ИтогСуммаНДС",0);
		Контекст.Вставить("ИтогКоличество",0);
		Контекст.Вставить("ИтогБрутто",0);
		Контекст.Вставить("ИтогНетто",0);
		Контекст.Вставить("ИтогКолМест",0);
		
		Контекст.Вставить("ПредИтогСумма",0);
		Контекст.Вставить("ПредИтогСуммаБезНалога",0);
		Контекст.Вставить("ПредИтогСуммаНДС",0);
		Контекст.Вставить("НДСИсчисляетсяАгентом", Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина);
		НоменклатураКодКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураКодКонтрагента", Контекст.ФайлДанные,Кэш);  // надо сопоставить номенклатуру перед отправкой
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Контекст.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		                      
		фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПолучитьТабличнуюЧастьДокумента1С","Файл_Шаблон");
		фрм.ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
			Возврат Истина;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мТаблДетал") Тогда
			Контекст.Вставить("ТаблДетал",Новый Структура());                 
			Контекст.ТаблДетал.Вставить("СтрТабл",Новый Массив);
			фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПолучитьДетализациюТабЧастиДокумента1С","Файл_Шаблон");
			фрм.ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст);
		КонецЕсли;
		
		ИтогТабл=Новый Структура;
		ИтогТабл.Вставить("Кол_во", Формат(Контекст.ИтогКоличество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000"));
		ИтогТабл.Вставить("Сумма", Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
		ИтогТабл.Вставить("НДС",Новый Структура);
		ИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		Если Контекст.ИтогКолМест>0 Тогда
			ИтогТабл.Вставить("Упаковка",Новый Структура);
			ИтогТабл.Упаковка.Вставить("КолМест",Формат(Контекст.ИтогКолМест, "ЧЦ=17; ЧДЦ=0; ЧРД=.; ЧГ=0; ЧН=0"));	
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("ЕдиницаИзмеренияВеса") Тогда
			ЕдиницаИзмеренияВеса = Контекст.ФайлДанные.ЕдиницаИзмеренияВеса;
				ИтогТаблБрутто = Новый Структура;
			Если Контекст.ФайлДанные.Свойство("МассаБруттоИтогПрописью") Тогда
				ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаБруттоИтогПрописью", Контекст.ФайлДанные,Кэш));  
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			ИначеЕсли Контекст.ИтогБрутто > 0 Тогда
				ИтогТаблБрутто.Вставить("Кол_во", Формат(Контекст.ИтогБрутто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогБрутто);
					ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблБрутто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			КонецЕсли;
			
			Если Контекст.ИтогНетто > 0 Тогда
				ИтогТаблНетто = Новый Структура;
				ИтогТаблНетто.Вставить("Кол_во", Формат(Контекст.ИтогНетто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогНетто);
					ИтогТаблНетто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблНетто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Нетто", ИтогТаблНетто);
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Свойство("ЕстьПредыдущиеДанные") Тогда
			ПредИтогТабл=Новый Структура;
			ПредИтогТабл.Вставить("Сумма", Формат(Контекст.ПредИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ПредИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ПредИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			ПредИтогТабл.Вставить("НДС",Новый Структура);
			ПредИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ПредИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("ПредИтогТабл",ПредИтогТабл);
		КонецЕсли;
		
		//Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		Док.Файл.Документ.Вставить("Основание",Новый Массив);
		
		Валюта =  Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта_КодОКВ", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Валюта) Тогда
			Док.Файл.Документ.Вставить("Валюта",Новый Структура);
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Валюта",Контекст.ФайлДанные,Док.Файл.Документ.Валюта);
		КонецЕсли;
		
		Отправитель = "";
		Получатель = "";
		ЗапретРедакций = Ложь;
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("мСторона") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
				Если Параметр.Значение.Свойство("Роль") Тогда
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
				Иначе
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ОтправительРоль Тогда
					Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ПолучательРоль Тогда
					ЗапретРедакций = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапретРедакций",Параметр.Значение,Кэш);
				КонецЕсли;
				Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
				Если Сторона<>Неопределено Тогда
					Док.Файл.Документ.Вставить(Роль,Сторона);
				КонецЕсли;
			КонецЦикла;
			Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(721, "Файл_Шаблон.ПолучитьШапкуИзДокумента1С",,,"Не удалось определить ИНН получателя документа " + Строка(Контекст.Документ));
			КонецЕсли;
			Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(721, "Файл_Шаблон.ПолучитьШапкуИзДокумента1С",,,"Не удалось определить ИНН отправителя документа " + Строка(Контекст.Документ));
			КонецЕсли;
			// Если Грузоотправитель и грузополучатель нужны, но они не попали в файл, то берем их с отправителя и получателя
			Если Не Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") или (Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") и Контекст.ЗаполнятьГрузотпрГрузполуч = Истина) Тогда
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузоотправитель") и Не Док.Файл.Документ.Свойство("Грузоотправитель") Тогда
					КопироватьГрузоотправителяС = ОтправительРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузоотправителяС") Тогда
						КопироватьГрузоотправителяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузоотправителяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузоотправителяС) Тогда
						Док.Файл.Документ.Вставить("Грузоотправитель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузоотправитель,Док.Файл.Документ[КопироватьГрузоотправителяС]);
					КонецЕсли;	
				КонецЕсли;
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузополучатель") и Не Док.Файл.Документ.Свойство("Грузополучатель") Тогда
					КопироватьГрузополучателяС = ПолучательРоль; 
					Если Контекст.ФайлДанные.Свойство("КопироватьГрузополучателяС") Тогда
						КопироватьГрузополучателяС=Кэш.ОбщиеФункции.РассчитатьЗначение("КопироватьГрузополучателяС", Контекст.ФайлДанные, Кэш);  
					КонецЕсли;
					Если Док.Файл.Документ.Свойство(КопироватьГрузополучателяС) Тогда
						Док.Файл.Документ.Вставить("Грузополучатель",Новый Структура);		
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузополучатель,Док.Файл.Документ[КопироватьГрузополучателяС]);   
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Отправитель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ОтправительРоль]); 
			Получатель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ПолучательРоль]); 
			Если ЗапретРедакций = Истина Тогда
				Получатель.Вставить("ЗапретРедакций", Истина);		
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("АдресДоставки") И Контекст.ФайлДанные.АдресДоставки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресДоставки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресДоставки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("АдресПогрузки") И Контекст.ФайлДанные.АдресПогрузки <> Неопределено Тогда
			Док.Файл.Документ.Вставить("АдресПогрузки", Кэш.ОбщиеФункции.РассчитатьЗначение("АдресПогрузки", Контекст.ФайлДанные, Кэш));
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мОснование") Тогда
			//НайтиФункциюСеансаОбработки(СбисИмяФункции, СбисОсновныеФормы, ДопПараметры = Неопределено) Экспорт
			фрм = МодульОбъектаКлиент().НайтиФункциюСеансаОбработки("ПолучитьДанныеИзДокумента1С_мОснование", "Файл_Шаблон");
			фрм.ПолучитьДанныеИзДокумента1С_мОснование(Кэш, Док, Контекст);
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда
			Док.Файл.Документ.Вставить("Параметр",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли; 
		
		Если Контекст.ФайлДанные.Свойство("мТранспортноеСредство") Тогда
			Док.Файл.Документ.Вставить("ТранспортноеСредство",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мТранспортноеСредство Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				ТранспортноеСредство = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТранспортноеСредство",Контекст.ФайлДанные,ТранспортноеСредство);
				Док.Файл.Документ.ТранспортноеСредство.Добавить(ТранспортноеСредство);
			КонецЦикла;
		КонецЕсли;   
		
		Если Контекст.ФайлДанные.Свойство("СодСоб") Тогда
			
			 Док.Файл.Документ.Вставить("СодСоб","Настоящий Акт составлен комиссией, которая произвела осмотр прибывшего груза и установила: доставлен товар по сопроводительному {номер} {дата} документу");
			
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);  
		СвязанныеДокументы1С = Кэш.ОбщиеФункции.сбисПолучитьСвязанныеДокументы1С(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		Если Контекст.НДСИсчисляетсяАгентом Тогда
			СуммаВложения = Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		Иначе
			СуммаВложения = Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		КонецЕсли;
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения+" на сумму "+СуммаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		Провести = Кэш.ОбщиеФункции.РассчитатьЗначение("Провести", Контекст.ФайлДанные,Кэш); // alo Провести
		ИспользоватьГенератор = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьГенератор", Контекст.ФайлДанные,Кэш);
		
		Док.Файл.Документ.Вставить("ТаблДок", Контекст.ТаблДок);
		Если Контекст.Свойство("ТаблДетал") И Контекст.ТаблДетал.СтрТабл.Количество() > 0 Тогда
			Док.Файл.Документ.Вставить("ТаблДетал", Контекст.ТаблДетал);
		КонецЕсли;
		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование, Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер,Сумма", Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения,СуммаВложения);
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Вложение.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Примечание) Тогда
			Вложение.Вставить("Примечание",Примечание);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Вложение.Вставить("Сертификат",Сертификат);	
		КонецЕсли;
		Если ТипЗнч(ИспользоватьГенератор) = Тип("Булево") Тогда
			Вложение.Вставить("ИспользоватьГенератор", ИспользоватьГенератор);
		КонецЕсли;
		
		МодульОбъектаКлиент().ПропатчитьФайлВложенияСБИС(Вложение, Новый Структура("ГрязныйИни, ПолучательРоль, ОтправительРоль", Контекст.ФайлДанные, ПолучательРоль, ОтправительРоль));
				
		ДопПоля= Новый Структура;	// alo ДопПоля
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДопПоля",Контекст.ФайлДанные,ДопПоля);
		Если ЗначениеЗаполнено(ДопПоля) Тогда
			Вложение.Вставить("ДопПоля",ДопПоля);
		Конецесли;
		Если ЗначениеЗаполнено(Провести) Тогда // alo Провести
			Вложение.Вставить("Провести",Провести);	
		КонецЕсли;   
		Если ЗначениеЗаполнено(СвязанныеДокументы1С) Тогда
			СвязанныеДокументы1С.Вставить(0, Контекст.Документ);
			Вложение.Вставить("Документы1С",СвязанныеДокументы1С);	
		КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		
		ИмяФормыПоФормату = "Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента", ИмяФормыПоФормату, "Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
		КонецЕсли;
		Возврат Истина;
		
	Исключение
		ИсключениеФормирования = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "Файл_Шаблон.ПолучитьШапкуИзДокумента1С");
		Контекст.СоставПакета.Вставить("Ошибка", ИсключениеФормирования);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция СформироватьДокументДляГенератора(ПараметрыФормированияВходящие, Кэш) Экспорт
	
	Док		= ПараметрыФормированияВходящие.Документ;
	Вложение= ПараметрыФормированияВходящие.Вложение;
	
	ТекДокумент = Док.Файл.Документ;
	ТекДокумент.Вставить("ДефНомИспрСФ",  "-");
	ТекДокумент.Вставить("ДефДатаИспрСФ", "-");
	ТекДокумент.Вставить("ПоФактХЖ", 	Вложение.Название);
	ТекДокумент.Вставить("НаимДокОпр", 	ТекДокумент.Название);
	
	//СодСоб = Новый Структура();
	//СодСоб.Вставить("СодСоб","");
	//
	//Док.Файл.Документ.Вставить("")
	
	Возврат Док;
	
КонецФункции