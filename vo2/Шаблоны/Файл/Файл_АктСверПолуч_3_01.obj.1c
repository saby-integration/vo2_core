
&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
// вызываем ту же функцию из формы Файл_СчФктр_3_01	
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьДанныеИзДокумента1С","Файл_АктСвер_3_01","", Кэш);
	ДанныеДокументаПолучены = фрм.ПолучитьДанныеИзДокумента1С(Кэш,Контекст);
	Если ДанныеДокументаПолучены И Контекст.ДокументДанные.ВходящийКонтекст.ИспользоватьНовыйФорматАктаСверки Тогда
		СтруктураФайлаНаша = Контекст.СоставПакета.Вложение[0].СтруктураДокумента.Файл;  
		СтруктураФайлаНаша.Вставить("ПризнРазн", ?(Контекст.ТаблДок.СтрТабл.Количество(), 2, 1));
		
		СтруктураФайлаНаша.Вставить("ИдОтпр", Контекст.ВложениеКонтрагента.СтруктураФайла.Файл.Имя);
		СтруктураФайлаНаша.Вставить("ДатаОтпр", Контекст.ВложениеКонтрагента.СтруктураФайла.Файл.Документ.Дата);
		СтруктураФайлаНаша.Вставить("ВремяОтпр", Контекст.ВложениеКонтрагента.СтруктураФайла.Файл.Документ.Время);   
		
		ЭпВBase64 = Кэш.Интеграция.СБИС_СериализоватьСтрокуВBase64(Кэш, Новый Структура("Строка", Контекст.ВложениеКонтрагента.Подпись[0].Сертификат.Отпечаток), Новый Структура, Ложь);		
		СтруктураФайлаНаша.Вставить("ЭП", ЭпВBase64);		
	КонецЕсли;
	          
	Возврат ДанныеДокументаПолучены;
КонецФункции

&НаКлиенте
Функция СформироватьРасхождение(ДанныеВложений, Кэш) Экспорт
	СтруктураФайлаКонтрагента = ДанныеВложений.СтруктураФайлаКонтрагента;
	СтруктураФайлаНаша = ДанныеВложений.ВложениеНаше.СтруктураДокумента;
	Док = СтруктураФайлаНаша;
	ОшибкаПреобразования = Ложь;
	ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(Док, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
	Если ОшибкаПреобразования Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ШаблонXML);
		Возврат Неопределено;
	КонецЕсли;
	ДанныеВложений.ВложениеНаше.Вставить("XMLДокумента", ШаблонXML);
	ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, ДанныеВложений.ВложениеНаше);
	Вложение = Новый Структура("СтруктураФайла,XMLДокумента,Название,ТекстHTML, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата", Док, ШаблонXML, ДанныеВложений.ВложениеНаше.Название,ТекстHTML, ДанныеВложений.ВложениеНаше.Тип, ДанныеВложений.ВложениеНаше.ПодТип, ДанныеВложений.ВложениеНаше.ВерсияФормата,ДанныеВложений.ВложениеНаше.ПодВерсияФормата);
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Параметр") 
	   И СтруктураФайлаКонтрагента.Файл.Документ.Параметр.Свойство("КНД") Тогда	  
		ШаблонXML = Кэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктуры(Кэш, Вложение);
		Вложение.XMLДокумента = ШаблонXML;	
		Вложение.ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, Вложение); 
		Вложение.Вставить("ТребуетПодписания", Истина);
	КонецЕсли; 
	Возврат Вложение;
КонецФункции

&НаКлиенте
Процедура ОбработчикТабличногоДокумента(Кэш, Контекст, Параметр) Экспорт
	сч=0;  
	ИспользоватьНовыйФорматАктаСверки = Контекст.ДокументДанные.ВходящийКонтекст.ИспользоватьНовыйФорматАктаСверки;
	ИтогиОснования = Новый Структура;
	ОбщиеИтоги = Новый Структура("Отправитель", Новый Структура("ИтогДебет,ИтогКредит, ИтогРасхДебет, ИтогРасхКредит", 0, 0, 0, 0));
	
	Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
		ТабЧастьДокумента = Параметр.Значение;
	Иначе
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
		//В случае, если получаем данные из документа через Узел ДанныеПоВзаиморасчетам, то функция/запрос должны вернуть структуру с полями ТабЧастьДокумента, НачальныйОстаток
		//Иначе будет посчитано старым алгоритмом, с обращением к узлам ОстатокНаНачало, ТаблДок
		ДанныеДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ДанныеПоВзаиморасчетам", Контекст.ФайлДанные, Кэш);
		Если ДанныеДокумента = Неопределено Тогда
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		Иначе
			ТабЧастьДокумента = ДанныеДокумента.ТабЧастьДокумента;
			ОстаткиНачало = ДанныеДокумента.Остатки;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр Из ТабЧастьДокумента Цикл  
		сч=сч+1;
		НоваяСтрока = Новый Структура;
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);			
		
		ТаблДокКонтрагента = Контекст.ВложениеКонтрагента.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
		ДокументСопоставлен = Ложь;       
		РасхождениеДебет = 0; 
		РасхождениеКредит = 0; 
		Для Каждого СтрокаКонтрагента из ТаблДокКонтрагента Цикл
			Если СтрокаКонтрагента.Примечание = НоваяСтрока.Примечание Тогда 
				ДокументСопоставлен = Истина;
				РасхождениеДебет = Формат(Число(НоваяСтрока.Дебет) - Число(СтрокаКонтрагента.Дебет),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="); 
				РасхождениеКредит = Формат(Число(НоваяСтрока.Кредит) - Число(СтрокаКонтрагента.Кредит),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="); 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//если документа нет в файле контрагента тогда расхождение вся сумма 
		Если Не ДокументСопоставлен Тогда
			РасхождениеДебет = НоваяСтрока.Дебет; 
			РасхождениеКредит = НоваяСтрока.Кредит; 
		КонецЕсли;
		
		Если ИспользоватьНовыйФорматАктаСверки Тогда
			НоваяСтрока.Вставить("ИтогоРасх", Формат(Число(РасхождениеДебет)+Число(РасхождениеКредит),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(Стр.ДокументТабл) Тогда
			НоваяСтрока.Вставить("Название", Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Стр.ДокументТабл, "Синоним"));
		Иначе
			НоваяСтрока.Вставить("Название", Стр.ТаблДок_Примечание);
		КонецЕсли;
		
		
		
		Если Стр.Свойство("мОснование") Тогда
			
			Для Каждого ПараметрОснование Из Стр.мОснование Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр, ПараметрОснование.Значение);
				Основание = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание", Стр, Основание);
				НоваяСтрока.Вставить("Основание", Основание);
				
				УнИдентификатор = СтрЗаменить("Д" + Стр.Основание.УникальныйИдентификатор(), "-", "");
				Если не ИтогиОснования.Свойство(Стр.ТаблДок_Раздел) Тогда
					ИтогиОснования.Вставить(Стр.ТаблДок_Раздел, Новый Структура);
				КонецЕсли;
				Если не ИтогиОснования[Стр.ТаблДок_Раздел].Свойство(УнИдентификатор) Тогда
					УзелОснования = Новый Структура;
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуру(УзелОснования, Основание);
					ИтогиОснования[Стр.ТаблДок_Раздел].Вставить(УнИдентификатор, Новый Структура("Основание, УзелОснования, Дебет, Кредит, НачальноеСальдоДт, НачальноеСальдоКт, КонечноеСальдоДт, КонечноеСальдоКт, РасхождениеДебет, РасхождениеКредит", Стр.Основание, УзелОснования, 0, 0, 0, 0, 0, 0, 0, 0));
				КонецЕсли;
				ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Дебет = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Дебет + НоваяСтрока.Дебет;
				ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Кредит = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Кредит + НоваяСтрока.Кредит;
				
				Попытка  
					Если ИспользоватьНовыйФорматАктаСверки Тогда
						ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].РасхождениеДебет = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].РасхождениеДебет + РасхождениеДебет;
						ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].РасхождениеКредит = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].РасхождениеКредит + РасхождениеКредит;
					КонецЕсли;	
					
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоДт = Стр.мОснование.Договор.НачальноеСальдоДт;
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоКт = Стр.мОснование.Договор.НачальноеСальдоКт;
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].КонечноеСальдоДт = Стр.мОснование.Договор.КонечноеСальдоДт;
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].КонечноеСальдоКт = Стр.мОснование.Договор.КонечноеСальдоКт;
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		Если Стр.Свойство("мПараметр") Тогда
			НоваяСтрока.Вставить("Параметр", Новый Массив);
			Для Каждого Элемент Из Стр.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
				НоваяСтрока.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли; 
		
		Если не ОбщиеИтоги.Свойство(Стр.ТаблДок_Раздел) Тогда
			ОбщиеИтоги.Вставить(Стр.ТаблДок_Раздел, Новый Структура("ИтогДебет,ИтогКредит", 0, 0));
		КонецЕсли;
		
		ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогДебет = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогДебет + НоваяСтрока.Дебет;
		ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогКредит = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогКредит + НоваяСтрока.Кредит;
		ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогРасхДебет = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогРасхДебет + РасхождениеДебет;
		ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогРасхКредит = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогРасхКредит + РасхождениеКредит;
		
		Контекст.ТаблДок.СтрТабл.Добавить(НоваяСтрока);
	КонецЦикла;
		
	Для Каждого Элемент Из ОбщиеИтоги Цикл
		//Заполним начальное сальдо
		НачСальдо = Новый Структура;
		Если ЗначениеЗаполнено(ОстаткиНачало) Тогда
			Если Элемент.Ключ = "Отправитель" Тогда
				НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебет));
				НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредит));
			Иначе
				НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебетКонтрагент));
				НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредитКонтрагент));
			КонецЕсли;
		Иначе	
			ОстатокНаНачало = Кэш.ОбщиеФункции.РассчитатьЗначение("ОстатокНаНачало", Контекст.ФайлДанные, Кэш);
			Если Элемент.Ключ = "Отправитель" Тогда
				НачСальдоДебет = Макс(0, Число(ОстатокНаНачало));
				НачСальдоКредит = Макс(0, -Число(ОстатокНаНачало));
			Иначе
				НачСальдоДебет = Макс(0, -Число(ОстатокНаНачало));
				НачСальдоКредит = Макс(0, Число(ОстатокНаНачало));
			КонецЕсли;
		КонецЕсли;
		НачСальдо.Вставить("Дебет", Формат(НачСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		НачСальдо.Вставить("Кредит", Формат(НачСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		НачСальдо.Вставить("Тип", "Сальдо начальное");	
		НачСальдо.Вставить("Дата", Контекст.ФайлДанные.Период_ДатаНач);	
		НачСальдо.Вставить("Раздел", Элемент.Ключ);
		Контекст.ТаблДок.ИтогТабл.Добавить(НачСальдо);
		
		//Заполним итоги по оборотам
		ИтогТабл = Новый Структура;
		ИтогТабл.Вставить("Дебет", Формат(Элемент.Значение.ИтогДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("Кредит", Формат(Элемент.Значение.ИтогКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("Тип", "Обороты");		
		ИтогТабл.Вставить("Раздел", Элемент.Ключ); 
		//Добавим в итоги обротов итоги по основанию
		ИтогТабл.Вставить("Основание", Новый Массив);
		Если ИтогиОснования.Свойство(Элемент.Ключ) Тогда
			Для каждого Строка из ИтогиОснования[Элемент.Ключ] Цикл
				Основание = Строка.Значение.УзелОснования;
				Основание.Вставить("Дебет", Строка.Значение.Дебет);
				Основание.Вставить("Кредит", Строка.Значение.Кредит);	
				
				Если ИспользоватьНовыйФорматАктаСверки Тогда
					Основание.Вставить("НачальноеСальдоДт", Формат(Строка.Значение.НачальноеСальдоДт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
					Основание.Вставить("НачальноеСальдоКт", Формат(Строка.Значение.НачальноеСальдоКт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
					Остаток = Основание.НачальноеСальдоДт - Основание.НачальноеСальдоКт + Основание.Дебет - Основание.Кредит;
					Если Остаток > 0 Тогда
						ОснованиеИтогоКт = 0;
						ОснованиеИтогоДт = Остаток;
					Иначе
						ОснованиеИтогоКт = -Остаток;
						ОснованиеИтогоДт = 0;
					КонецЕсли;
					Основание.Вставить("КонечноеСальдоДт", Формат(ОснованиеИтогоДт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
					Основание.Вставить("КонечноеСальдоКт", Формат(ОснованиеИтогоКт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
					Основание.Вставить("РасхождениеДебет", Формат(Строка.Значение.РасхождениеДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
					Основание.Вставить("РасхождениеКредит", Формат(Строка.Значение.РасхождениеКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
				КонецЕсли;
				
				ИтогТабл.Основание.Добавить(Основание);
			КонецЦикла;	
		КонецЕсли;
					
		//Рассчитаем и заполним конечное сальдо
		КонСальдо = Новый Структура;		
		КонСальдоДебет = Макс(0, НачСальдоДебет - НачСальдоКредит + Элемент.Значение.ИтогДебет - Элемент.Значение.ИтогКредит);
		КонСальдоКредит = Макс(0, НачСальдоКредит - НачСальдоДебет + Элемент.Значение.ИтогКредит - Элемент.Значение.ИтогДебет);
		КонСальдо.Вставить("Дебет", Формат(КонСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		КонСальдо.Вставить("Кредит", Формат(КонСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		КонСальдо.Вставить("Тип", "Сальдо конечное");	
		КонСальдо.Вставить("Дата", Контекст.ФайлДанные.Период_ДатаКнц);	
		КонСальдо.Вставить("Раздел", Элемент.Ключ);//Берем раздел из последней строки табличной части
		Контекст.ТаблДок.ИтогТабл.Добавить(КонСальдо);	
		
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
		Если ИспользоватьНовыйФорматАктаСверки Тогда
			ИтогРасхождение = Новый Структура;  
			ИтогРасхождение.Вставить("Тип", "Расхождение");	
			ИтогРасхождение.Вставить("Дебет", Формат(Элемент.Значение.ИтогРасхДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));   
			ИтогРасхождение.Вставить("Кредит", Формат(Элемент.Значение.ИтогРасхКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			Контекст.ТаблДок.ИтогТабл.Добавить(ИтогРасхождение); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	 

&НаКлиенте
Функция ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	ЗначениеИни = ОписаниеРасхождения.ЗначениеИни;
    Документ1С = ОписаниеРасхождения.Документ1С;

	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С); 

	Если ОписаниеРасхождения.Свойство("СоставПакета") И ОписаниеРасхождения.СоставПакета.Вложение.Количество() Тогда
		ВложениеКонтрагента = ОписаниеРасхождения.СоставПакета.Вложение[0]; 
		Контекст.Вставить("ВложениеКонтрагента", ВложениеКонтрагента);
		ВходящийКонтекстРасчета = Новый Структура; 
		ВходящийКонтекстРасчета.Вставить("ИспользоватьНовыйФорматАктаСверки", ВложениеКонтрагента.Подтип = "1110332");
		ЗначениеИни.Вставить("ВходящийКонтекст", Новый Структура("Значение,РассчитанноеЗначение", "", ВходящийКонтекстРасчета));
	КонецЕсли;
	
	ЗначениеИни.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	Контекст.Вставить("ДокументДанные", Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(ЗначениеИни, Документ1С, Кэш.КэшЗначенийИни, Кэш.Парам));  // alo Меркурий
	
	Возврат Контекст;
КонецФункции

