
&НаКлиенте
Перем Файл_Шаблон_Модуль;

#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти
 
#Область include_core2_vo2_Файл_ПодтверждениеЗаказа_302_ГенераторФЭД
#КонецОбласти 


//Функция формирует контекст для чтения из документа 1с
&НаКлиенте
Функция ПолучитьКонтекст_Расхождение(ОписаниеРасхождения, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	ЗначениеИни = ОписаниеРасхождения.ЗначениеИни;
    Документ1С = ОписаниеРасхождения.Документ1С;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С); 
	ЗначениеИни.Вставить("ИспользоватьШтрихкодыНоменклатурыКонтрагентов",	Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов, Кэш.Парам.ИспользоватьШтрихкодыНоменклатурыКонтрагентов));
	Контекст.Вставить("ДокументДанные", Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(ЗначениеИни, Документ1С, Кэш.КэшЗначенийИни, Кэш.Парам));  // alo Меркурий
	Контекст.Вставить("Контрагент", ОписаниеРасхождения.СоставПакета.Контрагент);
	
	Возврат Контекст;
КонецФункции       

Функция СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша) Экспорт
	Док  = Новый Структура;
	Док.Вставить("Файл",Новый Структура);
	Док.Файл.Вставить("Формат",СтруктураФайлаНаша.Файл.Формат);
	Док.Файл.Вставить("ВерсияФормата",СтруктураФайлаНаша.Файл.ВерсияФормата);
	Док.Файл.Вставить("Имя",СтруктураФайлаНаша.Файл.Имя);
	Если СтруктураФайлаНаша.Файл.Свойство("КодФормы") тогда
		Док.Файл.Вставить("КодФормы",СтруктураФайлаНаша.Файл.КодФормы);
	КонецЕсли;
	Док.Файл.Вставить("Документ",Новый Структура);
	Для Каждого Элемент Из СтруктураФайлаНаша.Файл.Документ Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Структура") и ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Док.Файл.Документ.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	// Вставим примечание из заказа-основания, если не заполняется явно в ИНИ
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ")
		И (НЕ Док.Файл.Документ.Свойство("Примечание") ИЛИ НЕ ЗначениеЗаполнено(Док.Файл.Документ.Примечание))
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Примечание") Тогда
		
			Док.Файл.Документ.Вставить("Примечание", СтруктураФайлаКонтрагента.Файл.Документ.Примечание);
			
	КонецЕсли;
	
	Док.Файл.Документ.Вставить("Основание",Новый Массив);
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") Тогда
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер,Название",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер,СтруктураФайлаКонтрагента.Файл.Формат));
	Иначе
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер));
	КонецЕсли; 
	Док.Файл.Документ.Вставить("Стороны",Новый Структура);
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Отправитель") Тогда
		Док.Файл.Документ.Стороны.Вставить("Отправитель",СтруктураФайлаНаша.Файл.Документ.Стороны.Отправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Отправитель);
	КонецЕсли;
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Получатель") Тогда
		Док.Файл.Документ.Стороны.Вставить("Получатель",СтруктураФайлаНаша.Файл.Документ.Стороны.Получатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Получатель);
	КонецЕсли;
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Грузоотправитель") Тогда
		Док.Файл.Документ.Стороны.Вставить("Грузоотправитель",СтруктураФайлаНаша.Файл.Документ.Стороны.Грузоотправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Грузоотправитель);
	КонецЕсли;
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Грузополучатель") Тогда
		Док.Файл.Документ.Стороны.Вставить("Грузополучатель",СтруктураФайлаНаша.Файл.Документ.Стороны.Грузополучатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Грузополучатель);
	КонецЕсли;
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Поставщик") Тогда
		Док.Файл.Документ.Стороны.Вставить("Поставщик",СтруктураФайлаНаша.Файл.Документ.Стороны.Поставщик);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Поставщик);
	КонецЕсли;
	Если СтруктураФайлаНаша.Файл.Документ.Стороны.Свойство("Покупатель") Тогда
		Док.Файл.Документ.Стороны.Вставить("Покупатель",СтруктураФайлаНаша.Файл.Документ.Стороны.Покупатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Стороны.Покупатель);
	КонецЕсли;
	
	// Заполним параметры заказа по документу контрагента
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") 
		И СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Параметр") Тогда
		ПараметрыКЗаполнению = СтруктураФайлаКонтрагента.Файл.Документ.Параметр;
		МассивПараметров = Новый Массив;
		Если ТипЗнч(ПараметрыКЗаполнению) = Тип("Структура") Тогда
			Для Каждого ПараметрКЗаполнению Из ПараметрыКЗаполнению Цикл
				СтруктураПараметр = Новый Структура("Имя, Значение",ПараметрКЗаполнению.Ключ,ПараметрКЗаполнению.Значение);
				МассивПараметров.Добавить(СтруктураПараметр);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрыКЗаполнению) = Тип("Массив") Тогда
			МассивПараметров = ПараметрыКЗаполнению;		
		КонецЕсли;
		Док.Файл.Документ.Вставить("Параметр", МассивПараметров);
	КонецЕсли;
	
	Если СтруктураФайлаНаша.Файл.Документ.Свойство("Параметр") Тогда
		// Для заказа произведем замену параметров, которые заполнились из СтруктураФайлаКонтрагента
		Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") И Док.Файл.Документ.Свойство("Параметр") Тогда
			КолвоПараметровКонтрагента = Док.Файл.Документ.Параметр.Количество();
			Для Каждого Параметр Из СтруктураФайлаНаша.Файл.Документ.Параметр Цикл
				ПараметрОбновлен = Ложь;
				Для ПозицияОбхода = 0 По КолвоПараметровКонтрагента - 1 Цикл
					Если Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Имя = Параметр.Имя Тогда
						Док.Файл.Документ.Параметр.Получить(ПозицияОбхода).Значение = Параметр.Значение;
						ПараметрОбновлен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ПараметрОбновлен Тогда
					Док.Файл.Документ.Параметр.Добавить(Параметр);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Док.Файл.Документ.Вставить("Параметр", СтруктураФайлаНаша.Файл.Документ.Параметр);
		КонецЕсли;
	КонецЕсли;
	
	ТабЧастьНаша = МассивСтруктурВТаблицуЗначений(СтруктураФайлаНаша.Файл.Документ.СписокСтрТабл.СтрТабл);
	ТабЧастьНаша.Колонки.Добавить("ЕстьВФайлеКонтрагента", Новый ОписаниеТипов("Булево"));
	ЕстьПорНомерВФайлеКонтрагента = Ложь;
	Если СтруктураФайлаНаша.Файл.Документ.СписокСтрТабл.СтрТабл[0].Свойство("ПорНомерВФайлеКонтрагента") Тогда
		ЕстьПорНомерВФайлеКонтрагента = Истина;	
	КонецЕсли;
	
	ТабЧастьКонтрагента = Новый Соответствие;   // сворачиваем табличную часть по идентификатору строки
	Для Каждого СтрТабл Из СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.СтрТабл Цикл
		Если СтрТабл.Свойство("Идентификатор") и ЗначениеЗаполнено(СтрТабл.Идентификатор) И НЕ ЕстьПорНомерВФайлеКонтрагента Тогда
			СтрокаСоответствия = ТабЧастьКонтрагента.Получить(СтрТабл.Идентификатор);
			Если СтрокаСоответствия = Неопределено Тогда
				ТабЧастьКонтрагента.Вставить(СтрТабл.Идентификатор, СтрТабл);	
			Иначе
				Если СтрТабл.Свойство("Кол_во") и СтрокаСоответствия.Свойство("Кол_во") Тогда
					СтрокаСоответствия.Кол_во = Формат(Число(СтрокаСоответствия.Кол_во)+Число(СтрТабл.Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
				КонецЕсли;
				Если СтрТабл.Свойство("СуммаБезНал") и СтрокаСоответствия.Свойство("СуммаБезНал") Тогда
					СтрокаСоответствия.СуммаБезНал = Формат(Число(СтрокаСоответствия.СуммаБезНал)+Число(СтрТабл.СуммаБезНал),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("Сумма") и СтрокаСоответствия.Свойство("Сумма") Тогда
					СтрокаСоответствия.Сумма = Формат(Число(СтрокаСоответствия.Сумма)+Число(СтрТабл.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("НДС") и СтрТабл.НДС.Свойство("Сумма") и СтрокаСоответствия.Свойство("НДС") и СтрокаСоответствия.НДС.Свойство("Сумма") Тогда
					СтрокаСоответствия.НДС.Сумма = Формат(Число(СтрокаСоответствия.НДС.Сумма)+Число(СтрТабл.НДС.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ТабЧастьКонтрагента.Вставить(Новый УникальныйИдентификатор, СтрТабл);	
		КонецЕсли;
	КонецЦикла;
	
	ИтогСумма = 0;
	ИтогКоличество = 0;
	ИтогСуммаБезНал = 0;
	ИтогНДС = 0;
	СтрОтклонения = Новый Массив;
	Для Каждого СтрокаСоответствия Из ТабЧастьКонтрагента Цикл
		СтрТабл = СтрокаСоответствия.Значение;
		НоваяСтрока = Новый Структура();
		Если СтрТабл.Свойство("КодПокупателя") Тогда
			НоваяСтрока.Вставить("КодПокупателя", СтрТабл.КодПокупателя);
		КонецЕсли;
		Если СтрТабл.Свойство("КодПоставщика") Тогда
			НоваяСтрока.Вставить("КодПоставщика", СтрТабл.КодПоставщика);
		КонецЕсли;
		Номенклатура = Неопределено;
		ОКЕИ = Неопределено;
		ХарактеристикаНоменклатуры = Неопределено;
		СтрТабл.Свойство("Номенклатура", Номенклатура);
		//СтрТабл.Свойство("ОКЕИ", ОКЕИ);
		СтрТабл.Свойство("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		//Отбор = Новый Структура("Номенклатура, ОКЕИ", Номенклатура, ОКЕИ);
		Если ЕстьПорНомерВФайлеКонтрагента Тогда
			Отбор = Новый Структура("ПорНомерВФайлеКонтрагента", СтрТабл.ПорНомер);
		Иначе
			Отбор = Новый Структура("Номенклатура", Номенклатура);
			
			Если ТабЧастьНаша.Колонки.Найти("ХарактеристикаНоменклатуры")<>Неопределено Тогда
				Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
					Отбор.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				Иначе
					Отбор.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НайденныеСтроки = ТабЧастьНаша.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.ЕстьВФайлеКонтрагента = Истина;
			Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.СписокСтрТабл.СтрТабл[0] Цикл
				Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
					НоваяСтрока.Вставить(Поле.Ключ, НайденнаяСтрока[Поле.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Попытка
				ИтогСумма = ИтогСумма+НайденнаяСтрока.Сумма;
				ИтогКоличество = ИтогКоличество+НайденнаяСтрока.Кол_во;
				ИтогСуммаБезНал = ИтогСуммаБезНал+НайденнаяСтрока.СуммаБезНал;
				ИтогНДС = ИтогНДС+НайденнаяСтрока.НДС.Сумма;
			Исключение
			КонецПопытки;
		Иначе     // если удалили строки в загруженном документе
			НоваяСтрока.Вставить("Название", ?(СтрТабл.Свойство("Название"),СтрТабл.Название,""));
			НоваяСтрока.Вставить("Кол_во", "0");
			НоваяСтрока.Вставить("Цена", "0");
			НоваяСтрока.Вставить("СуммаБезНал", "0");
			НоваяСтрока.Вставить("Сумма", "0");  
			Если СтрТабл.Свойство("GTIN") Тогда
				НоваяСтрока.Вставить("GTIN", СтрТабл.GTIN);	
			КонецЕсли;  
			Если СтрТабл.Свойство("ОКЕИ") Тогда
				НоваяСтрока.Вставить("ОКЕИ", СтрТабл.ОКЕИ);	
			КонецЕсли;  
			Если СтрТабл.Свойство("ЕдИзм") Тогда
				НоваяСтрока.Вставить("ЕдИзм", СтрТабл.ЕдИзм);	
			КонецЕсли;
		КонецЕсли;
		ПредСтрТабл = Новый Структура;
		Для Каждого Поле Из СтрТабл Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры"
				И Поле.Ключ<>"ИмяТЧ"
				И Поле.Ключ<>"НомерСтрокиТЧ"
				И Поле.Ключ<>"НеЗагружать" Тогда   // эти поля добавляются в структуру файла при загрузке, при выгрузке расхождения они не нужны
				ПредСтрТабл.Вставить(Поле.Ключ, Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		ПреобразоватьПараметрыВМассив(ПредСтрТабл);
		НоваяСтрока.Вставить("ПредСтрТабл", ПредСтрТабл);
		СтрОтклонения.Добавить(НоваяСтрока);
	КонецЦикла;
	// Если добавились строки, которых не было в файле контрагента
	НашиСтроки = ТабЧастьНаша.НайтиСтроки(Новый Структура("ЕстьВФайлеКонтрагента", Ложь)); 
	Для Каждого СтрТабл Из НашиСтроки Цикл
		НоваяСтрока = Новый Структура();
		Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.СписокСтрТабл.СтрТабл[0] Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
				НоваяСтрока.Вставить(Поле.Ключ, СтрТабл[Поле.Ключ]);
			КонецЕсли;
		КонецЦикла;
		СтрОтклонения.Добавить(НоваяСтрока);
		Попытка
			ИтогСумма = ИтогСумма+СтрТабл.Сумма;
			ИтогКоличество = ИтогКоличество+СтрТабл.Кол_во;
			ИтогСуммаБезНал = ИтогСуммаБезНал+СтрТабл.СуммаБезНал;
			ИтогНДС = ИтогНДС+СтрТабл.НДС.Сумма;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Док.Файл.Документ.Вставить("СписокСтрТабл", Новый Структура);
	Док.Файл.Документ.СписокСтрТабл.Вставить("ИтогТабл",Новый Массив);
	ИтогТабл = Новый Структура("Сумма,Кол_во,СуммаБезНал,НДС",ИтогСумма,ИтогКоличество,ИтогСуммаБезНал,Новый Структура("Сумма",ИтогНДС));
	Если СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Свойство("ИтогТабл") Тогда
		ИтогТабл.Вставить("ПредИтогТабл",СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.ИтогТабл);
	КонецЕсли;
	Док.Файл.Документ.СписокСтрТабл.ИтогТабл.Добавить(ИтогТабл);
	Док.Файл.Документ.СписокСтрТабл.Вставить("СтрТабл", СтрОтклонения);
	Возврат Док;
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);
		Попытка
			СтрТ.ОКЕИ = СокрЛП(СтрТ.ОКЕИ);	
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции    

Функция ПреобразоватьПараметрыВМассив(СтруктураУчастника)
	Если СтруктураУчастника.Свойство("Параметр") и ТипЗнч(СтруктураУчастника.Параметр) = Тип("Структура") Тогда
		МассивПараметров = Новый Массив;
		Для Каждого Элемент Из СтруктураУчастника.Параметр Цикл
			СтруктураПараметра = Новый Структура("Имя, Значение", Элемент.Ключ, Элемент.Значение);
			Массивпараметров.Добавить(СтруктураПараметра);
		КонецЦикла;
		СтруктураУчастника.Вставить("Параметр", Массивпараметров);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СформироватьРасхождение(ДанныеВложений, Кэш) Экспорт
	СтруктураФайлаКонтрагента	= ДанныеВложений.СтруктураФайлаКонтрагента;
	СтруктураФайлаНаша			= ДанныеВложений.ВложениеНаше.СтруктураДокумента;
	Док							= СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша);
	ОшибкаПреобразования = Ложь;
	
	ПараметрыСгенерироватьВходящие = Новый Структура;
	ПараметрыСгенерироватьВходящие.Вставить("Вложение", 			ДанныеВложений.ВложениеНаше);
	ПараметрыСгенерироватьВходящие.Вставить("СтруктураДокумента",	Док);
	ПараметрыСгенерироватьВходящие.Вставить("МетодПодготовки",		"СформироватьРасхождениеДляГенератора");
	Попытка
		НаборВложений = МодульОбъектаКлиент().СгенерироватьНаборВложенийВПакет(ПараметрыСгенерироватьВходящие);
	Исключение
		МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", "Файл_Шаблон.СформироватьРасхождение"));
		Возврат Неопределено;
	КонецПопытки;
	
	//Первое вложение - основное.
	ВложениеРасхождения	= НаборВложений[0];
	ВложениеРасхождения.Документы1С.Очистить();
	ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, ВложениеРасхождения);
	ВложениеРасхождения.Вставить("ТекстHTML", ТекстHTML);
	Возврат ВложениеРасхождения;
КонецФункции   

&НаКлиенте
Процедура ПропатчитьСтруктуруВложения(ВложениеСБИС, ДопПараметры) Экспорт
	
	УдаляемыеУзлы = Новый Массив;
	УдаляемыеУзлы.Добавить("Файл.Документ.Покупатель.Адрес.АдрРФ.НаимРегион");
	УдаляемыеУзлы.Добавить("Файл.Документ.Поставщик.Адрес.АдрРФ.НаимРегион");
	УдаляемыеУзлы.Добавить("Файл.Документ.Грузоотправитель.Адрес.АдрРФ.НаимРегион");
	УдаляемыеУзлы.Добавить("Файл.Документ.Грузополучатель.Адрес.АдрРФ.НаимРегион");

	УдаляемыеУзлы.Добавить("Файл.Документ.Покупатель.Адрес.АдрИно.НаимСтран");
	УдаляемыеУзлы.Добавить("Файл.Документ.Поставщик.Адрес.АдрИно.НаимСтран");
	УдаляемыеУзлы.Добавить("Файл.Документ.Грузоотправитель.Адрес.АдрИно.НаимСтран");
	УдаляемыеУзлы.Добавить("Файл.Документ.Грузополучатель.Адрес.АдрИно.НаимСтран");

	// Удаление лишнего
	Для каждого ПутьУзла Из УдаляемыеУзлы Цикл
		
		РазобранныеУзла = СтрЗаменить(ПутьУзла, ".", Символы.ПС);
		ТекущийУзел = МодульОбъектаКлиент().ВложениеСБИС_Получить(ВложениеСБИС, "СтруктураФайла");

		Для УровеньСтруктуры = 1 По СтрЧислоСтрок(РазобранныеУзла) - 1 Цикл

			Если НЕ ТекущийУзел.Свойство(СтрПолучитьСтроку(РазобранныеУзла, УровеньСтруктуры), ТекущийУзел) Тогда
				Прервать;
			КонецЕсли;

			Если УровеньСтруктуры = СтрЧислоСтрок(РазобранныеУзла) - 1 Тогда
				ТекущийУзел.Удалить(СтрПолучитьСтроку(РазобранныеУзла, УровеньСтруктуры));
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры
