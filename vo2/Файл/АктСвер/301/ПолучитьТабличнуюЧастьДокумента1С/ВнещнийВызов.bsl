

// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
		
	СбисИмяФункции = "Файл_АктСвер_3_01.ПолучитьШапкуИзДокумента1С";       
	
	Попытка		
		
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		
		ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		//Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
		//	Возврат Истина;
		//КонецЕсли;		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		
		СписокУзлов = Новый СписокЗначений;
		Период  = Новый Структура;
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Период",Контекст.ФайлДанные, Период);
		СписокУзлов.Добавить(Период, "Период");
		//Док.Файл.Документ.Вставить("Период",Новый Структура);
		//ЗаполнитьАтрибуты(Кэш,"Период",Контекст.ФайлДанные,Док.Файл.Документ.Период);
		ЗапретРедакций = Ложь;
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда   
			
			ОтправительРоль = "Отправитель";           
			
		КонецЕсли;                   
		
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда  
			
			ПолучательРоль = "Получатель";         
			
		КонецЕсли;                  
		
		Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
			
			Если Параметр.Значение.Свойство("Роль") Тогда    
				
				Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);      
				
			Иначе                        
				
				Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);      
				
			КонецЕсли;    
			
			Если Роль = ОтправительРоль Тогда 
				
				Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш); 
				
			КонецЕсли;      
			
			Если Роль = ПолучательРоль Тогда   
				
				ЗапретРедакций = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапретРедакций",Параметр.Значение,Кэш); 
				
			КонецЕсли;    
			
			Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????  
			
			Если Сторона<>Неопределено Тогда     
				
				СписокУзлов.Добавить(Сторона, Роль);
				
			КонецЕсли;  
			
		КонецЦикла; 
		
		//Сортируем узлы по алфавиту
		СписокУзлов.СортироватьПоПредставлению(); 
		
		Для Сч = 0 по СписокУзлов.Количество()-1 Цикл
			
			Док.Файл.Документ.Вставить(СписокУзлов.Получить(Сч).Представление, СписокУзлов.Получить(Сч).Значение); 
			
		КонецЦикла;
		
		Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда 
			
			СбисДетализация = "Не удалось определить ИНН получателя документа " + Строка(Контекст.Документ);
			МодульОбъектаКлиент().ВызватьСбисИсключение(721, СбисИмяФункции,,, СбисДетализация);
			
		КонецЕсли;   
		
		Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
			
			СбисДетализация = "Не удалось определить ИНН отправителя документа " + Строка(Контекст.Документ);
			МодульОбъектаКлиент().ВызватьСбисИсключение(721, СбисИмяФункции,,, СбисДетализация);
			
		КонецЕсли;      
		
		Отправитель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ОтправительРоль]); 
		Получатель = Кэш.ОбщиеФункции.сбисСкопироватьОбъектНаКлиенте(Док.Файл.Документ[ПолучательРоль]);
		
		Если ЗапретРедакций = Истина Тогда  
			
			Получатель.Вставить("ЗапретРедакций", Истина);	
			
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда 
			
			Док.Файл.Документ.Вставить("Параметр",Новый Массив); 
			
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр); 
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш, Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш, Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш, Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш, Контекст);  
		СвязанныеДокументы1С = Кэш.ОбщиеФункции.сбисПолучитьСвязанныеДокументы1С(Кэш, Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		СуммаВложения = Формат(0, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название + " № " + НомерВложения + " от " + ДатаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		
		Док.Файл.Документ.Вставить("ТаблДок",Контекст.ТаблДок);
		
		Вложение = Новый Структура;
		Вложение.Вставить("СтруктураДокумента",	Док);
		Вложение.Вставить("Отправитель",		Отправитель);
		Вложение.Вставить("Получатель",			Получатель);
		Вложение.Вставить("Ответственный",		ОтветственныйСтруктура);
		Вложение.Вставить("Подразделение",		ПодразделениеСтруктура);
		Вложение.Вставить("Регламент",			РегламентСтруктура);
		Вложение.Вставить("ДокументОснование",	ОснованияМассив);
		Вложение.Вставить("Документ1С",			Контекст.Документ);
		Вложение.Вставить("Название",			НазваниеВложения);
		Вложение.Вставить("Тип",				Тип);
		Вложение.Вставить("ПодТип",				ПодТип);
		Вложение.Вставить("ВерсияФормата",		ВерсияФормата);
		Вложение.Вставить("ПодВерсияФормата",	ПодВерсияФормата);
		Вложение.Вставить("Дата",				ДатаВложения);
		Вложение.Вставить("Номер",				НомерВложения);
		Вложение.Вставить("Сумма",				СуммаВложения);
		
		Если ЗначениеЗаполнено(Примечание) Тогда 
			
			Вложение.Вставить("Примечание",Примечание);	
			
		КонецЕсли;     
		
		Если ЗначениеЗаполнено(Сертификат) Тогда
			
			Вложение.Вставить("Сертификат",Сертификат);	 
			
		КонецЕсли;                                 
		
		Если ЗначениеЗаполнено(СвязанныеДокументы1С) Тогда   
			
			СвязанныеДокументы1С.Вставить(0, Контекст.Документ);
			Вложение.Вставить("Документы1С",СвязанныеДокументы1С);
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура("ГрязныйИни, ПолучательРоль, ОтправительРоль", Контекст.ФайлДанные, ПолучательРоль, ОтправительРоль);
		МодульОбъектаКлиент().ПропатчитьФайлВложенияСБИС(Вложение, ДопПараметры);
		
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		
		СбисОсновнаяФорма = "Файл_" + Контекст.ФайлДанные.Файл_Формат + "_" + СтрЗаменить(СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_" ), " ", "");
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента", СбисОсновнаяФорма, "Файл_Шаблон", Кэш);
		
		Если фрм <> Ложь Тогда
			
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
			
		КонецЕсли;

		Возврат Истина;
		
	Исключение  
		
		ИсключениеФормирования = МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), СбисИмяФункции);
		Контекст.СоставПакета.Вставить("Ошибка", ИсключениеФормирования);
		
		Возврат Ложь;     
		
	КонецПопытки;    
	
КонецФункции

// Функция формирует структуру табличной части файла	
&НаКлиенте
Функция ПолучитьТабличнуюЧастьДокумента1С(Кэш, Контекст) Экспорт
	
	Перем ДанныеДокумента, Остатки;

	ВременныйКонтекст = Новый Структура;
	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ВременныйКонтекст, Контекст);
	ВременныйКонтекст.Вставить("СписокДоговоров", Новый СписокЗначений);
	
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДок Цикл
		
		Если ВременныйКонтекст.Свойство("ВложениеКонтрагента") Тогда
			
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ОбработчикТабличногоДокумента","Файл_АктСверПолуч_3_01","", Кэш);
			фрм.ОбработчикТабличногоДокумента(Кэш, ВременныйКонтекст, Параметр);
			
		Иначе                           
			
			ОбработчикТабличногоДокумента(Кэш, ВременныйКонтекст, Параметр);	
			
		КонецЕсли;			   
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Контекст, ВременныйКонтекст);
	
КонецФункции	 

&НаКлиенте
Процедура ОбработчикТабличногоДокумента(Кэш, Контекст, Параметр) Экспорт

	ИтогиОснования = Новый Структура;
	ОбщиеИтоги = Новый Структура("Отправитель");
	
	Если Контекст.ТаблДок.ИтогТабл.Количество() >= 3
		И Контекст.ТаблДок.ИтогТабл[1].Тип = "Обороты"
		И Контекст.ТаблДок.ИтогТабл[1].Раздел = "Отправитель" Тогда
		
		ОбщиеИтоги.Отправитель = Новый Структура("ИтогДебет, ИтогКредит", Число(Контекст.ТаблДок.ИтогТабл[1].Дебет), Число(Контекст.ТаблДок.ИтогТабл[1].Кредит));
		
	Иначе 
		
		ОбщиеИтоги.Отправитель = Новый Структура("ИтогДебет, ИтогКредит", 0, 0);
		
	КонецЕсли;
	
	Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
		
		ТабЧастьДокумента = Параметр.Значение;
		
	Иначе  
		
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
		//В случае, если получаем данные из документа через Узел ДанныеПоВзаиморасчетам, то функция/запрос должны вернуть структуру с полями ТабЧастьДокумента, НачальныйОстаток
		//Иначе будет посчитано старым алгоритмом, с обращением к узлам ОстатокНаНачало, ТаблДок
		ДанныеДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ДанныеПоВзаиморасчетам", Контекст.ФайлДанные, Кэш);
		
		Если ДанныеДокумента = Неопределено Тогда         
			
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);  
			
		Иначе                            
			
			ТабЧастьДокумента = ДанныеДокумента.ТабЧастьДокумента;
			ОстаткиНачало = ДанныеДокумента.Остатки;        
			
		КонецЕсли;        
		
	КонецЕсли;  
	
	СальдоПоДоговорам = Кэш.ОбщиеФункции.РассчитатьЗначение("СальдоПоДоговорам", Контекст.ФайлДанные, Кэш);
	
	Для Каждого Стр Из ТабЧастьДокумента Цикл
		
		Если Число(Стр.ТаблДок_Кредит) + Число(Стр.ТаблДок_Дебет) = 0 Тогда 
			
			Продолжить;   
			
		КонецЕсли;    
		
		ДопПараметрыОбработки = Новый Структура;
		ДопПараметрыОбработки.Вставить("Кэш",				Кэш);
		ДопПараметрыОбработки.Вставить("Контекст",			Контекст);
		ДопПараметрыОбработки.Вставить("ИтогиОснования",	ИтогиОснования);
		ДопПараметрыОбработки.Вставить("СальдоПоДоговорам",	СальдоПоДоговорам);
		ДопПараметрыОбработки.Вставить("ОбщиеИтоги",		ОбщиеИтоги);
		
		ОбработатьДокумент(Стр, ДопПараметрыОбработки);
		
	КонецЦикла;	
	
	// Пологаем, что договоры приходят уже с точным сальдо за весь период
	// независимо от количество ТаблДок с одним разделом - Отправитель:
	// т.е. складывать по разным ТаблДок не нужно.
	//
	// Сальдо по документу тоже приходит по разово. Складывать по разным ТаблДок не нужно
	
	Для Каждого Элемент Из ОбщиеИтоги Цикл
		
		СмещениеПоРазделу = ?(Элемент.Ключ = "Отправитель", 0, 3);
		
		//Заполним начальное сальдо, если ранее не заполняли                       
		Если Контекст.ТаблДок.ИтогТабл.Количество() > СмещениеПоРазделу
			И Контекст.ТаблДок.ИтогТабл[0 + СмещениеПоРазделу].Раздел = Элемент.Ключ
			И Контекст.ТаблДок.ИтогТабл[0 + СмещениеПоРазделу].Тип = "Сальдо начальное" Тогда
			
			НачСальдо = Контекст.ТаблДок.ИтогТабл[0];
			
		Иначе 
			
			НачСальдо = ЗаполнитьИтоги_НачальноеСальдо(Кэш, Контекст, ОстаткиНачало, Элемент);
			
		КонецЕсли;
		
		//Заполним итоги по оборотам
		ЗаполнитьИтоги_Обороты(Кэш, Контекст, ИтогиОснования, Элемент);
		
		//Рассчитаем и заполним конечное сальдо
		Если Контекст.ТаблДок.ИтогТабл.Количество() >= 3 + СмещениеПоРазделу
			И Контекст.ТаблДок.ИтогТабл[2 + СмещениеПоРазделу].Раздел = Элемент.Ключ
			И Контекст.ТаблДок.ИтогТабл[2 + СмещениеПоРазделу].Тип = "Сальдо конечное" Тогда
			
			ЗаполнитьИтоги_КонечноеСальдо(Кэш, Контекст, НачСальдо, Элемент);
			
		Иначе 
			
			ЗаполнитьИтоги_КонечноеСальдо(Кэш, Контекст, НачСальдо, Элемент); 
			
		КонецЕсли;
		
	КонецЦикла;     
	
КонецПроцедуры	 


