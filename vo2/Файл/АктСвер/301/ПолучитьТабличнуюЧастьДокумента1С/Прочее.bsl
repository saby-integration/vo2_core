
// Процедура заполениет данные по договору
//
// Параметры:
//  СтрокаТаблДок		 - Структура	 - Строка мТаблДок, сформированная в ини
//  ПараметрОснование	 - Структура	 - Строка мОснование, сформаированная в ини
//  ДопПараметры		 - Структура	 - Состоит из
//		Кэш - Структура - Кэш обработки
//		Контекст - Структура - Контекст заполнения структуры документа
//		ИтогиОснования - Структура - Сальдо и обороты по основаниям
//		НоваяСтрока - Структура - Строка, формируемая для итогового документа
//		СальдоПоДоговорам - Структура - Сальдо по догворам
//
&НаКлиенте
Процедура ОбработатьДоговор(СтрокаТаблДок, ПараметрОснование, ДопПараметры)
	
	Кэш					= ДопПараметры.Кэш;
	Контекст			= ДопПараметры.Контекст;
	ИтогиОснования		= ДопПараметры.ИтогиОснования;
	НоваяСтрока			= ДопПараметры.НоваяСтрока;
	СальдоПоДоговорам	= ДопПараметры.СальдоПоДоговорам;

	Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(СтрокаТаблДок, ПараметрОснование.Значение);
	Основание = Новый Структура();
	Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш, "Основание", СтрокаТаблДок, Основание);
	НоваяСтрока.Вставить("Основание", Основание);
	
	Если СтрокаТаблДок.Основание = Неопределено Тогда 
		УнИдентификатор = "Д00000000000000000000000000000000";
	Иначе
		УнИдентификатор = СтрЗаменить("Д" + СтрокаТаблДок.Основание.УникальныйИдентификатор(), "-", "");
	КонецЕсли;
	
	Если не ИтогиОснования.Свойство(СтрокаТаблДок.ТаблДок_Раздел) Тогда
		
		ИтогиОснования.Вставить(СтрокаТаблДок.ТаблДок_Раздел, Новый Структура);
		
	КонецЕсли; 
	
	Если Не ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел].Свойство(УнИдентификатор) Тогда
		
		УзелОснования = Новый Структура;
		Кэш.ОбщиеФункции.сбисСкопироватьСтруктуру(УзелОснования, Основание);
		
		ОписаниеОСнования = Новый Структура;
		ОписаниеОСнования.Вставить("Основание",			СтрокаТаблДок.Основание);
		ОписаниеОСнования.Вставить("УзелОснования",		УзелОснования);
		ОписаниеОСнования.Вставить("Дебет",				0);
		ОписаниеОСнования.Вставить("Кредит",			0);
		ОписаниеОСнования.Вставить("НачальноеСальдоДт",	0);
		ОписаниеОСнования.Вставить("НачальноеСальдоКт",	0);
		ОписаниеОСнования.Вставить("КонечноеСальдоДт",	0);
		ОписаниеОСнования.Вставить("КонечноеСальдоКт",	0);
		
		ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел].Вставить(УнИдентификатор, ОписаниеОСнования);
		
	КонецЕсли;
		
	ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].Дебет = ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].Дебет + НоваяСтрока.Дебет;
	ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].Кредит = ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].Кредит + НоваяСтрока.Кредит;
	
	Если Контекст.ФайлДанные.Свойство("ИспользоватьНовыйФорматАктаСверки")	
		И Контекст.ФайлДанные.ИспользоватьНовыйФорматАктаСверки
		И ЗначениеЗаполнено(СальдоПоДоговорам) Тогда
		
		ТекДоговор = СтрокаТаблДок.мОснование.Договор.Основание;
		
		Для Каждого СальдоПоДоговору Из СальдоПоДоговорам Цикл 
			
			Если ТекДоговор = СальдоПоДоговору.Договор Тогда  
				
				ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоДт = СальдоПоДоговору.НачОстатокПоДоговоруДт;
				ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоКт = СальдоПоДоговору.НачОстатокПоДоговоруКт;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоДт	= СтрокаТаблДок.мОснование.Договор.НачальноеСальдоДт;
		ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].НачальноеСальдоКт	= СтрокаТаблДок.мОснование.Договор.НачальноеСальдоКт;
		ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].КонечноеСальдоДт	= СтрокаТаблДок.мОснование.Договор.КонечноеСальдоДт;
		ИтогиОснования[СтрокаТаблДок.ТаблДок_Раздел][УнИдентификатор].КонечноеСальдоКт	= СтрокаТаблДок.мОснование.Договор.КонечноеСальдоКт; 
		
	Исключение
	КонецПопытки;

КонецПроцедуры

// Процедура формирует строку таблицы документа
//
// Параметры:
//  СтрокаТаблДок		 - Структура	 - Строка мТаблДок, сформированная в ини
//  ДопПараметры		 - Структура	 - Состоит из
//		Кэш - Структура - Кэш обработки
//		Контекст - Структура - Контекст заполнения структуры документа
//		ИтогиОснования - Структура - Сальдо и обороты по основаниям
//		НоваяСтрока - Структура - Строка, формируемая для итогового документа
//		СальдоПоДоговорам - Структура - Сальдо по догворам
//
&НаКлиенте
Процедура ОбработатьДокумент(СтрокаТаблДок, ДопПараметры)
	
	Кэш				= ДопПараметры.Кэш;
	Контекст		= ДопПараметры.Контекст;
	ИтогиОснования	= ДопПараметры.ИтогиОснования; 
	ОбщиеИтоги		= ДопПараметры.ОбщиеИтоги;

	НоваяСтрока = Новый Структура;
	Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш, "ТаблДок", СтрокаТаблДок, НоваяСтрока);			
	
	Если ЗначениеЗаполнено(СтрокаТаблДок.ДокументТабл)
		И (МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИспользоватьНовыйФорматАктаСверки") = Истина
			Или Не СтрокаТаблДок.Свойство("ТаблДок_Примечание")) Тогда
		
		НоваяСтрока.Вставить("Название", Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(СтрокаТаблДок.ДокументТабл, "Синоним"));
		
	Иначе
		
		НоваяСтрока.Вставить("Название", СтрокаТаблДок.ТаблДок_Примечание);
		
	КонецЕсли;
	
	Если СтрокаТаблДок.Свойство("мОснование") Тогда
		
		Для Каждого ПараметрОснование Из СтрокаТаблДок.мОснование Цикл
			
			ДопПараметры.Вставить("НоваяСтрока", НоваяСтрока);
			ОбработатьДоговор(СтрокаТаблДок, ПараметрОснование, ДопПараметры);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если СтрокаТаблДок.Свойство("мПараметр") Тогда
		
		НоваяСтрока.Вставить("Параметр", Новый Массив); 
		
		Для Каждого Элемент Из СтрокаТаблДок.мПараметр Цикл
			
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(СтрокаТаблДок,Элемент.Значение);
			Параметр = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",СтрокаТаблДок,Параметр);
			НоваяСтрока.Параметр.Добавить(Параметр);   
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если не ОбщиеИтоги.Свойство(СтрокаТаблДок.ТаблДок_Раздел) Тогда 
		
		ОбщиеИтоги.Вставить(СтрокаТаблДок.ТаблДок_Раздел, Новый Структура("ИтогДебет,ИтогКредит", 0, 0));
		
	КонецЕсли;
	
	ОбщиеИтоги[СтрокаТаблДок.ТаблДок_Раздел].ИтогДебет	= ОбщиеИтоги[СтрокаТаблДок.ТаблДок_Раздел].ИтогДебет	+ НоваяСтрока.Дебет;
	ОбщиеИтоги[СтрокаТаблДок.ТаблДок_Раздел].ИтогКредит	= ОбщиеИтоги[СтрокаТаблДок.ТаблДок_Раздел].ИтогКредит	+ НоваяСтрока.Кредит;
	
	Контекст.ТаблДок.СтрТабл.Добавить(НоваяСтрока);

КонецПроцедуры

// Функция заполняет начальное сальдо по документу
//
// Параметры:
//  Кэш					 - Структура	 - Кэш Внешней обработки
//  Контекст			 - Структура	 - Контекст заполнения структуры документа
//  ОстаткиНачало		 - Структура	 - Начальные остатка из ини
//  ЭлементОбщихИтогов	 - КлючИЗначение	 - Элемент общих итогов
// 
// Возвращаемое значение:
//  Структура - Строка итогов в итоговом документе
//
&НаКлиенте
Функция ЗаполнитьИтоги_НачальноеСальдо(Кэш, Контекст, ОстаткиНачало, ЭлементОбщихИтогов)

	НачСальдо = Новый Структура;
	
	Если ЗначениеЗаполнено(ОстаткиНачало) Тогда
		
		Если ЭлементОбщихИтогов.Ключ = "Отправитель" Тогда
			
			НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебет));
			НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредит));
			
		Иначе                                 
			
			НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебетКонтрагент));
			НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредитКонтрагент));   
			
		КонецЕсли; 
		
	Иначе
		
		ОстатокНаНачало = Кэш.ОбщиеФункции.РассчитатьЗначение("ОстатокНаНачало", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(ОстатокНаНачало) Тогда
			Если ЭлементОбщихИтогов.Ключ = "Отправитель" Тогда      
				
				НачСальдоДебет = Макс(0, Число(ОстатокНаНачало));
				НачСальдоКредит = Макс(0, -Число(ОстатокНаНачало));  
				
			Иначе                                                   
				
				НачСальдоДебет = Макс(0, -Число(ОстатокНаНачало));
				НачСальдоКредит = Макс(0, Число(ОстатокНаНачало));  
				
			КонецЕсли;
		Иначе             
			
			НачСальдоДебет = 0;
			НачСальдоКредит = 0;   
			
		КонецЕсли;
	КонецЕсли;     
	
	НачСальдо.Вставить("Дебет",		Формат(НачСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
	НачСальдо.Вставить("Кредит",	Формат(НачСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
	НачСальдо.Вставить("Тип",		"Сальдо начальное");	
	НачСальдо.Вставить("Дата",		Контекст.ФайлДанные.Период_ДатаНач);	
	НачСальдо.Вставить("Раздел",	ЭлементОбщихИтогов.Ключ);
	
	Контекст.ТаблДок.ИтогТабл.Добавить(НачСальдо);
	
	Возврат НачСальдо;

КонецФункции

// Функция заполняет начальное сальдо по документу
//
// Параметры:
//  Кэш					 - Структура	 - Кэш Внешней обработки
//  Контекст			 - Структура	 - Контекст заполнения структуры документа
//  ОстаткиНачало		 - Структура	 - Начальные остатка из ини
//  ЭлементОбщихИтогов	 - КлючИЗначение	 - Элемент общих итогов
// 
// Возвращаемое значение:
//  Структура - Строка итогов в итоговом документе
//
&НаКлиенте
Функция ЗаполнитьИтоги_Обороты(Кэш, Контекст, ИтогиОснования, ЭлементОбщихИтогов)

	СмещениеПоРазделу = ?(ЭлементОбщихИтогов.Ключ = "Отправитель", 0, 3);
	
	Если Контекст.ТаблДок.ИтогТабл.Количество() >= 2 + СмещениеПоРазделу Тогда
		
		ИтогТабл = Контекст.ТаблДок.ИтогТабл[1 + СмещениеПоРазделу];
		ИтогТабл.Дебет 	= Формат(ЭлементОбщихИтогов.Значение.ИтогДебет,		"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
		ИтогТабл.Кредит	= Формат(ЭлементОбщихИтогов.Значение.ИтогКредит,	"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		
	Иначе
		
		ИтогТабл = Новый Структура;
		ИтогТабл.Вставить("Дебет", Формат(ЭлементОбщихИтогов.Значение.ИтогДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("Кредит", Формат(ЭлементОбщихИтогов.Значение.ИтогКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("Тип", "Обороты");		
		ИтогТабл.Вставить("Раздел", ЭлементОбщихИтогов.Ключ);
		//Добавим в итоги обротов итоги по основанию
		ИтогТабл.Вставить("Основание", Новый Массив);
		
	КонецЕсли;
	  
	
	Если ИтогиОснования.Свойство(ЭлементОбщихИтогов.Ключ) Тогда 
		
		Для каждого Строка из ИтогиОснования[ЭлементОбщихИтогов.Ключ] Цикл
			
			Если Не Контекст.СписокДоговоров.НайтиПоЗначению(Строка.Значение.Основание) = Неопределено Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			Основание = Строка.Значение.УзелОснования;
			Основание.Вставить("Дебет", Формат(Строка.Значение.Дебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			Основание.Вставить("Кредит", Формат(Строка.Значение.Кредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			Основание.Вставить("НачальноеСальдоДт", Формат(Строка.Значение.НачальноеСальдоДт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			Основание.Вставить("НачальноеСальдоКт", Формат(Строка.Значение.НачальноеСальдоКт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00")); 
			
			Остаток = Основание.НачальноеСальдоДт - Основание.НачальноеСальдоКт + Основание.Дебет - Основание.Кредит;
			
			Если Остаток > 0 Тогда  
				
				ОснованиеИтогоКт = 0;
				ОснованиеИтогоДт = Остаток;  
				
			Иначе         
				
				ОснованиеИтогоКт = -Остаток;
				ОснованиеИтогоДт = 0;  
				
			КонецЕсли;      
			
			Основание.Вставить("КонечноеСальдоДт", Формат(ОснованиеИтогоДт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			Основание.Вставить("КонечноеСальдоКт", Формат(ОснованиеИтогоКт, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			
			ИтогТабл.Основание.Добавить(Основание);
			
			Контекст.СписокДоговоров.Добавить(Строка.Значение.Основание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контекст.ТаблДок.ИтогТабл.Количество() < 2 + СмещениеПоРазделу Тогда
		
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
	Иначе 
		
		Контекст.ТаблДок.ИтогТабл[1 + СмещениеПоРазделу] = ИтогТабл;
		
	КонецЕсли;
	
	Возврат ИтогТабл;
	
КонецФункции

// Функция заполняет начальное сальдо по документу
//
// Параметры:
//  Кэш					 - Структура	 - Кэш Внешней обработки
//  Контекст			 - Структура	 - Контекст заполнения структуры документа
//  ОстаткиНачало		 - Структура	 - Начальные остатка из ини
//  ЭлементОбщихИтогов	 - КлючИЗначение	 - Элемент общих итогов
// 
// Возвращаемое значение:
//  Структура - Строка итогов в итоговом документе
//
&НаКлиенте
Функция ЗаполнитьИтоги_КонечноеСальдо(Кэш, Контекст, НачСальдо, ЭлементОбщихИтогов)
	
	СмещениеПоРазделу = ?(ЭлементОбщихИтогов.Ключ = "Отправитель", 0, 3);
	
	КонСальдо = Новый Структура;		
	КонСальдоДебет = Макс(0, НачСальдо.Дебет - НачСальдо.Кредит + ЭлементОбщихИтогов.Значение.ИтогДебет - ЭлементОбщихИтогов.Значение.ИтогКредит);
	КонСальдоКредит = Макс(0, НачСальдо.Кредит - НачСальдо.Дебет + ЭлементОбщихИтогов.Значение.ИтогКредит - ЭлементОбщихИтогов.Значение.ИтогДебет);
	КонСальдо.Вставить("Дебет", Формат(КонСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
	КонСальдо.Вставить("Кредит", Формат(КонСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
	КонСальдо.Вставить("Тип", "Сальдо конечное");	
	КонСальдо.Вставить("Дата", Контекст.ФайлДанные.Период_ДатаКнц);	
	КонСальдо.Вставить("Раздел", ЭлементОбщихИтогов.Ключ);//Берем раздел из последней строки табличной части
	
	Если Контекст.ТаблДок.ИтогТабл.Количество() < 3 + СмещениеПоРазделу Тогда
		
		Контекст.ТаблДок.ИтогТабл.Добавить(КонСальдо);
		
	Иначе 
		
		Контекст.ТаблДок.ИтогТабл[2 + СмещениеПоРазделу] = КонСальдо;
		
	КонецЕсли;
	
	Возврат КонСальдо;

КонецФункции // ЗаполнитьИтоги_КонечноеСальдо()


