
&НаКлиенте
Процедура ЗаполнитьГенераторДаннымиВложения(Кэш, Генератор, Вложение, ДопПараметры)
	
	ЗаполнитьОбщиеДанные(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Получатель",			ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Грузополучатель",	ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Отправитель",		ДопПараметры);
	ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, "Грузоотправитель",	ДопПараметры);
	ЗаполнитьПодписант(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьТабличныеДанные(Кэш, Генератор, Вложение, ДопПараметры);
	ЗаполнитьИтоги(Кэш, Генератор, Вложение, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщиеДанные(Кэш, Генератор, Вложение, ДопПараметры)
	
	ТекФайл = Вложение.СтруктураДокумента.Файл;
	ТекДокумент = ТекФайл.Документ;
	
	Если ТекФайл.Свойство("Дата") И ТекФайл.Свойство("Время") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ДатаИнфПр", ТекФайл, "Дата");
		УстановитьЗначениеПоКлючу(Генератор, "ВремИнфПр", ТекФайл, "Время");
	Иначе
		Генератор.Вставить("ДатаИнфПр", Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
		Генератор.Вставить("ВремИнфПр", Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	КонецЕсли;
	
	ПараметрыПриведенияНомера = Новый Структура("КлючПриведения", "Номер");

	Генератор.Вставить("ВремИнфИсп", 	Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	Генератор.Вставить("ИдФайл", 		ТекФайл.Имя);
	Генератор.Вставить("Дата", 			ТекДокумент.Дата);
	
	УстановитьЗначениеПоКлючу(Генератор, "Номер",					ТекДокумент, ПараметрыПриведенияНомера);
	УстановитьЗначениеПоКлючу(Генератор, "ДефНомИспрСФ",			ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ДефДатаИспрСФ",			ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПоФактХЖ",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "НаимДокОпр",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПРД",						ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "НомИспрСФ",				ТекДокумент, ПараметрыПриведенияНомера);
	УстановитьЗначениеПоКлючу(Генератор, "ДатаИспрСФ",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Основание",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Параметры",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СчФ",						ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПередатДокумОсн",			ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "ПередатДокум",			ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "Срок",					ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СрокВремя",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "СвСчФакт.ИдГосКон",		ТекДокумент, "ИдГосКон");
	УстановитьЗначениеПоКлючу(Генератор, "Функция",					ТекДокумент, "Тип");
	УстановитьЗначениеПоКлючу(Генератор, "СвТранГруз",				ТекДокумент);
	УстановитьЗначениеПоКлючу(Генератор, "КодФормы",				ТекФайл);
	УстановитьЗначениеПоКлючу(Генератор, "СвПерВещ",				ТекДокумент);    
	УстановитьЗначениеПоКлючу(Генератор, "СвСчФакт.ОбстФормСЧФ",	ТекДокумент, "ОбстФормСЧФ");
	
	Если ТекДокумент.Свойство("НомОсн") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "НомОсн",	ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДатаОсн", ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "НаимОсн",	ТекДокумент);
	КонецЕсли; 
	
	Если ТекДокумент.Свойство("СодСоб") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "СодСоб",	ТекДокумент);
	КонецЕсли;
	
	Если ТекДокумент.Свойство("ДокПодтвОтгр") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.ДатаДокОтгр", ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НомДокОтгр",  ТекДокумент);
		УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НаимДокОтгр", ТекДокумент);
	КонецЕсли;
	Если Вложение.Свойство("Регламент") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "СодОпер", Вложение.Регламент, "Название");
	КонецЕсли;
	Если ТекДокумент.Свойство("Валюта") Тогда
		ЗаполнитьВалюту(Кэш, Генератор, ТекДокумент.Валюта, ДопПараметры);
	КонецЕсли;
	Если	ТекДокумент.Свойство("Исправление")
		И	ТекДокумент.Исправление = Истина Тогда//Проверка на Истина, т.к. может быть занулено через пустую строку
		
		Попытка
			Генератор.Вставить("НомИспрСФ", 	ТекДокумент.НомерИсправления);
			Генератор.Вставить("Номер", 		ТекДокумент.НомерИсходного);
		Исключение
		КонецПопытки;
		
		Попытка
			Генератор.Вставить("ДатаИспрСФ",	ТекДокумент.Дата);
			Генератор.Вставить("Дата", 			ТекДокумент.ДатаИсходного);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет сторону в генератор
&НаКлиенте
Процедура ЗаполнитьПоИмениСтороны(Кэш, Генератор, Вложение, ИмяСтороны, ДопПараметры) Экспорт
	Перем СбисФормыПоиска, СбисОсновнаяФорма;
	//фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ИсточникДанных_ИтогТабл", "Файл_Шаблон_" + СтрЗаменить(Вложение.СтруктураДокумента.Файл.ВерсияФормата, ".", "_"), "Файл_Шаблон");
	Если Не ДопПараметры.Свойство("ФормыПоиска", СбисФормыПоиска) Тогда
		СбисФормыПоиска = Новый Массив
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ИсточникДанных_ПолучитьДанныеСтороныПоИмени", СбисФормыПоиска, Новый Структура, Ложь);
	Если фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	
	Данные = фрм.ИсточникДанных_ПолучитьДанныеСтороныПоИмени(Кэш, Вложение, ИмяСтороны);
	
	Если Данные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Данные.Свойство("ОнЖе") Тогда
		УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".ОнЖе", Данные, "ОнЖе");
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".Название",	Данные, "Название");
	УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".GLN",		Данные, "GLN");
	
	ЗаполнитьРегистрационныеДанныеЛица	(Кэш, Генератор, Данные,			ИмяСтороны);
	ЗаполнитьБанковскиеРеквизиты		(Кэш, Генератор, ИмяСтороны + ".",	Данные);
	ЗаполнитьКонтактныеДанные			(Кэш, Генератор, ИмяСтороны + ".",	Данные);
	ЗаполнитьАдресныеДанные				(Кэш, Генератор, ИмяСтороны,		Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРегистрационныеДанныеЛица(Кэш, Генератор, Данные, ИмяСтороны)
	Перем КлючДанные, ЗначениеДанные;
	
	Если Данные.Свойство("СвЮЛ", ЗначениеДанные) Тогда
		КлючДанные = "СвЮл";
		Генератор.Вставить(ИмяСтороны + ".СвЮл.Название",	"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.КПП",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефКПП",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ОГРН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.БИН",		"");
	ИначеЕсли Данные.Свойство("СвФЛ", ЗначениеДанные) Тогда
		КлючДанные = "СвФл";
		Генератор.Вставить(ИмяСтороны + ".СвФл.Название",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Фамилия",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Имя",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Отчество",	"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ДефИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ОГРН",		ИмяСтороны + "." + КлючДанные + ".СвГосРегИП");    
		Генератор.Вставить(ИмяСтороны + ".СвФл.ИИН",		""); 
	ИначеЕсли Данные.Свойство("СвИП", ЗначениеДанные) Тогда
		КлючДанные = "СвИп";
		Генератор.Вставить(ИмяСтороны + ".СвИп.ИНН",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Фамилия",	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Имя",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Отчество",	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.ОКПО",		"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.СвГосРегИП",	"");
	ИначеЕсли Данные.Свойство("СвИн", ЗначениеДанные) Тогда
		КлючДанные = "СвИн";
		Генератор.Вставить(ИмяСтороны + ".СвИн.Идентиф",	"");
		Генератор.Вставить(ИмяСтороны + ".СвИн.Название",	"");
	Иначе
		Возврат;
	КонецЕсли;
	ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяСтороны + "." + КлючДанные + ".", ЗначениеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБанковскиеРеквизиты(Кэш, Генератор, ИмяРеквизита, Данные)
	
	Если Данные.Свойство("БанкРекв") Тогда
		
		СтруктураБанкРекв = Данные.БанкРекв;
		
		Генератор.Вставить(ИмяРеквизита + "НомерСчета", 	"");
		Генератор.Вставить(ИмяРеквизита + "БИК", 			"");
		Генератор.Вставить(ИмяРеквизита + "КорСчет", 		"");
		Генератор.Вставить(ИмяРеквизита + "НаимБанк", 		"");
		
		Если	ЗначениеЗаполнено(СтруктураБанкРекв.РСчет)
			И	(	ЗначениеЗаполнено(СтруктураБанкРекв.БИК)
				Или	ЗначениеЗаполнено(СтруктураБанкРекв.НаимБанк)
				Или	ЗначениеЗаполнено(СтруктураБанкРекв.КСчет)) Тогда

			УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "НомерСчета",	СтруктураБанкРекв, "РСчет");
			УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "БИК",			СтруктураБанкРекв, "БИК");
			УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "КорСчет",		СтруктураБанкРекв, "КСчет");
			УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "НаимБанк",		СтруктураБанкРекв, "НаимБанк");
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактныеДанные(Кэш, Генератор, ИмяРеквизита, Данные)
	
	Если Данные.Свойство("Контакт") Тогда
		
		УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Email",   Данные.Контакт, "EMAIL");
		УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Телефон", Данные.Контакт, "Телефон");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресныеДанные(Кэш, Генератор, ИмяСтороны, Данные)
	
	Если Не Данные.Свойство("Адрес") Или Не Данные.Адрес.Количество() Тогда
		Возврат;
	КонецЕсли;
	ИсточникАдрес = Данные.Адрес;
	Если ТипЗнч(ИсточникАдрес) = Тип("Массив") Тогда
		ИсточникАдрес = ИсточникАдрес[0];
	КонецЕсли;
	ПараметрыФормат = Новый Структура("ПрефиксСторона, ПрефиксПолей, КодСтраны, АдрИноТекст", ИмяСтороны + ".Адрес.Адр", "Адр", "КодСтр", "АдрТекст");
	ЗаполнитьПоАдреснымДанным(Кэш, Генератор, ИсточникАдрес, ПараметрыФормат)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАдреснымДанным(Кэш, Генератор, ИсточникАдрес, ПараметрыФормат)

	СтруктураАдреса = ОпределитьСтруктуруАдреса(ИсточникАдрес);
	
	Если СтруктураАдреса.Свойство("АдрРФ") Тогда
		
		//Российский адрес по классификатору
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Город",		"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Дом",		"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Индекс",	"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Кварт",		"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "КодРегион",	"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Улица",		"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Корпус",	"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "НаселПункт","");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей + "Район",		"");
		
		//Вынести в подготовку документа.
		Если СтруктураАдреса.АдрРФ.Свойство("Город") И СтруктураАдреса.АдрРФ.Свойство("КодРегион") Тогда
			Если Не ЗначениеЗаполнено(СтруктураАдреса.АдрРФ.Город) И ЗначениеЗаполнено(СтруктураАдреса.АдрРФ.КодРегион) Тогда
				Если СтруктураАдреса.АдрРФ.КодРегион = 77 Тогда
					СтруктураАдреса.АдрРФ.Город	= "Москва ";
				ИначеЕсли СтруктураАдреса.АдрРФ.КодРегион = 78 Тогда
					СтруктураАдреса.АдрРФ.Город = "Санкт-Петербург";
				ИначеЕсли СтруктураАдреса.АдрРФ.КодРегион = 92 Тогда
					СтруктураАдреса.АдрРФ.Город = "Севастополь";
				КонецЕсли;   
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ПараметрыФормат.ПрефиксСторона + "РФ." + ПараметрыФормат.ПрефиксПолей, СтруктураАдреса.АдрРФ);
		
	ИначеЕсли	СтруктураАдреса.Свойство("АдрТекст") Тогда
		
		//Российский адрес в произвольной форме
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "Ино." + ПараметрыФормат.АдрИноТекст,	СтруктураАдреса.АдрТекст);
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "Ино." + ПараметрыФормат.КодСтраны,		"643");
		
	ИначеЕсли	СтруктураАдреса.Свойство("АдрИно") Тогда
		
		//Иностранный адрес
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "Ино." + ПараметрыФормат.АдрИноТекст,	"");
		Генератор.Вставить(ПараметрыФормат.ПрефиксСторона + "Ино." + ПараметрыФормат.КодСтраны,		"");
		
		ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ПараметрыФормат.ПрефиксСторона + "Ино.", СтруктураАдреса.АдрИно);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьВалюту(Кэш, Генератор, Данные, ДопПараметры)
	УстановитьЗначениеПоКлючу(Генератор, "КодОКВ",		Данные); 
	ЗаполненныйКодГенератор = Генератор.Получить("КодОКВ");
	Если ЗаполненныйКодГенератор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если		ЗаполненныйКодГенератор = "643" Тогда
		Генератор.Вставить("НаимОКВ", "Российский рубль");
	ИНачеЕсли	ЗаполненныйКодГенератор = "840" Тогда
		Генератор.Вставить("НаимОКВ", "Доллар США");
	ИначеЕсли	ЗаполненныйКодГенератор = "978" Тогда
		Генератор.Вставить("НаимОКВ", "Евро");
	Иначе
		УстановитьЗначениеПоКлючу(Генератор, "НаимОКВ", Данные, "Название"); 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГенераторПоСтруктуре(Кэш, Генератор, ИмяРеквизита, СтруктураДанных)
	
	Для Каждого ТекРеквизит ИЗ СтруктураДанных Цикл
		
		Ключ = ИмяРеквизита + ТекРеквизит.Ключ;
		
		ЗначениеВГенераторе = Генератор.Получить(Ключ);
		Если ЗначениеВГенераторе = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		ТекРеквизитЗначение = СокрЛП(ТекРеквизит.Значение);  // Некоторые конфы ставят лишние пробелы
		//Если требуется положить по новому пути, то смотрим на значение, указанное в генераторе 
		Если ЗначениеЗаполнено(ЗначениеВГенераторе) Тогда
			Генератор.Вставить(ЗначениеВГенераторе, ТекРеквизитЗначение);
			Генератор.Удалить(Ключ);
		Иначе
			Генератор.Вставить(Ключ, ТекРеквизитЗначение);
		КонецЕсли;
			//Генератор.Вставить(Ключ, ТекРеквизит.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодписант(Кэш, Генератор, Вложение, ДопПараметры) Экспорт
	
	ТекДокумент = Вложение.СтруктураДокумента.Файл.Документ;
	
	Если НЕ ТекДокумент.Свойство("Подписант") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.ОблПолн", ТекДокумент.Подписант, "ОблПолн");
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.Статус", ТекДокумент.Подписант, "Статус");
	УстановитьЗначениеПоКлючу(Генератор, "Подписант.ОснПолн", ТекДокумент.Подписант, "ОснПолн");
	
	Если Вложение.Отправитель.Свойство("СвЮЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвЮЛ;
		ЭтоИП = Ложь;
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвФЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвФЛ;
		ЭтоИП = Истина; //в формате (УкдКсчфДис_1115133, УпдСчфДоп_1115131) узла ФЛ нет
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвИП") Тогда
		СтруктураЛица = Вложение.Отправитель.СвИП;
		ЭтоИП = Истина;
		
	Иначе
		Возврат;	
	КонецЕсли;   
	
	КлючИдентификатора = МодульОбъектаКлиент().Сторона_Получить(Вложение.Отправитель, "КлючИдентификатора");
	
	Если ЭтоИП Тогда
		
		Подписант = "Подписант.ИП.";
		
		Генератор.Вставить(Подписант + "СвГосРегИП", "");
		Генератор.Вставить(Подписант + "ИННФЛ", СтруктураЛица[КлючИдентификатора]);
		
		ЗаполнитьФИО(Кэш, Генератор, Подписант, СтруктураЛица);
		
	Иначе
		
		Подписант = "Подписант.ЮЛ.";
		
		Генератор.Вставить(Подписант + "Должн", "");
		Генератор.Вставить(Подписант + "ИННЮЛ", СтруктураЛица[КлючИдентификатора]);
		
		ЗаполнитьФИО(Кэш, Генератор, Подписант, Вложение.Ответственный);			
		
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Кэш, Генератор, ИмяРеквизита, СтруктураФИО)
	
	Если СтруктураФИО.Свойство("Фамилия") Тогда
		Генератор.Вставить(ИмяРеквизита + "Фамилия", СтруктураФИО.Фамилия);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Имя") Тогда
		Генератор.Вставить(ИмяРеквизита + "Имя", СтруктураФИО.Имя);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Отчество") Тогда
		Генератор.Вставить(ИмяРеквизита + "Отчество", СтруктураФИО.Отчество);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанные(Кэш, Генератор, Вложение, ДопПараметры)
	Отказ = Ложь;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ИсточникДанных_ПолучитьТабличнуюЧастьДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	ТабличнаяЧастьДокумента = фрм.ИсточникДанных_ПолучитьТабличнуюЧастьДокумента(Кэш, Вложение, "СтрТабл");
	
	Если ТабличнаяЧастьДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ОбработчикДанных_ПолучитьТабличнуюЧастьДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	ДопПараметрыОбработки = Новый Структура("Генератор, Вложение, Кэш, ДополнительныеПараметры", Генератор, Вложение, Кэш, ДопПараметры);
	
	Генератор.Вставить("ТабличныеДанные", Новый Массив);
	Для Каждого ТекСтрока ИЗ ТабличнаяЧастьДокумента Цикл
		ПараметрыОбработчика = Новый Структура("ИсточникДанных, ДанныеРезультат, Суффикс", ТекСтрока, Новый Соответствие(), "");
		фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ОбработчикДанных_ЗаполнитьСтрокуТабличнойЧастиДокумента", ДопПараметры.ФормыПоиска, Новый Структура, Отказ);
		Попытка
			фрм.ОбработчикДанных_ЗаполнитьСтрокуТабличнойЧастиДокумента(ПараметрыОбработчика, ДопПараметрыОбработки); 
			//1190164679
			ДобавлятьСтроку = ПараметрыОбработчика.ДанныеРезультат.Получить("ДобавлятьСтроку");
			Если НЕ ДобавлятьСтроку = Неопределено И НЕ ДобавлятьСтроку Тогда
				Продолжить;
			КонецЕсли;
			Генератор["ТабличныеДанные"].Добавить(ПараметрыОбработчика.ДанныеРезультат);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Кэш.ОбщиеФункции.СбисВызватьИсключение(ИнфоОбОшибке, "Файл_Шаблон.ЗаполнитьТабличныеДанные");
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеАкциз(Аргумент, ДопПараметры) Экспорт
	Перем Суффикс;
	Если Не Аргумент.Свойство("Суффикс", Суффикс) Тогда
		Суффикс = ""
	КонецЕсли;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Акциз") Тогда
		Возврат
	КонецЕсли;
	Если Источник.Акциз.Сумма = "без акциза" Тогда
		УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс, Источник.Акциз.Сумма, Новый Структура("ИскатьВИсточнике", Ложь));
	Иначе
		УстановитьЗначениеПоКлючу(Приемник, "Акциз" + Суффикс,		Источник.Акциз, "Сумма");
		УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс,	"");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеСуммаНДС(Аргумент, ДопПараметры)
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ДефНДС" + Суффикс, Источник);
	УстановитьЗначениеПоКлючу(Приемник, "БезНДС" + Суффикс, Источник);
	
	Если Не Источник.Свойство("НДС") Тогда
		Возврат;
	ИначеЕсли Источник.НДС.Свойство("Ставка") Тогда
		Если Источник.НДС.Ставка <> "без НДС" Тогда
			УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
		КонецЕсли;
	Иначе
		УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеЕдИзм(Аргумент, ДопПараметры) Экспорт
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ЕдИзм" + Суффикс, Источник, "ЕдИзм");
	УстановитьЗначениеПоКлючу(Приемник, "ЕдКод" + Суффикс, Источник, "ОКЕИ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеСтранаПроизводства(Аргумент, ДопПараметры)
	Отказ = Ложь;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	ФормыДляПоиска = ДопПараметры.ДополнительныеПараметры.ФормыПоиска;
	фрм = ДопПараметры.Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(ДопПараметры.Кэш, "ИсточникДанных_ПолучитьСтранаПроизводства", ФормыДляПоиска, Новый Структура, Отказ);
	Если Отказ Тогда
		ДопПараметры.Кэш.ОбщиеФункции.СбисВызватьИсключение(фрм, "Файл_Шаблон.ЗаполнитьТабличныеДанныеСтранаПроизводства");
	ИначеЕсли фрм = Ложь Тогда
		фрм = ЭтаФорма;
	КонецЕсли;
	
	СтранаПроизводства = фрм.ИсточникДанных_ПолучитьСтранаПроизводства(ДопПараметры.Кэш, Источник);
	
	Если СтранаПроизводства = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ПустаяСтрока(СтранаПроизводства.КодСтраныПроизводства) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Приемник, "КодСтраныПроизводства",СтранаПроизводства);
	УстановитьЗначениеПоКлючу(Приемник, "СтранаПроизводства",	СтранаПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеНомСредИдентТов(Аргумент, ДопПараметры)
	Перем мИсточникИдентТов;
	
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("НомСредИдентТов") Тогда
		Возврат;
	КонецЕсли;
		
	КИЗ		= 		 Новый Массив;
	НомУпак	= 		 Новый Массив; 
	
	НомСредИдентТов = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ Источник.НомСредИдентТов Цикл
		Если	ТекСтрока.Свойство("КИЗ", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Массив") Тогда
			Для Каждого ТекКИЗ ИЗ мИсточникИдентТов Цикл
				КИЗ.Добавить(Новый Структура("Номер", ТекКИЗ.Значение));	
			КонецЦикла;
		КонецЕсли;
		Если	ТекСтрока.Свойство("НомУпак", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Массив") Тогда
			Для Каждого ТекКИЗ ИЗ мИсточникИдентТов Цикл
				НомУпак.Добавить(Новый Структура("Номер", ТекКИЗ.Значение));	
			КонецЦикла;
		КонецЕсли;
		Если	ТекСтрока.Свойство("ИдентТрансУпак", мИсточникИдентТов)
			И	ТипЗнч(мИсточникИдентТов) = Тип("Строка") Тогда
			НомСредИдентТов.Добавить(Новый Структура("ИдентТрансУпак", мИсточникИдентТов));
		КонецЕсли;
	КонецЦикла;  
	
	Если КИЗ.Количество() Тогда
		НомСредИдентТов.Добавить(Новый Структура("КИЗ", КИЗ));
	КонецЕсли;
	Если НомУпак.Количество() Тогда
		НомСредИдентТов.Добавить(Новый Структура("НомУпак", НомУпак)); 
	КонецЕсли;    
	
	УстановитьЗначениеПоКлючу(Приемник, "НомСредИдентТов" + Суффикс, НомСредИдентТов, Новый Структура("ИскатьВИсточнике", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеУпаковка(Аргумент, ДопПараметры) Экспорт
	Перем сУпаковка;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Упаковка", сУпаковка) Тогда
		Возврат;
	КонецЕсли;
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Вместимость", сУпаковка, "Вместимость");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Код", 		сУпаковка, "Код");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Название", 	сУпаковка, "Название");
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Количество", 	сУпаковка, "КолМест");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеБрутто(Аргумент, ДопПараметры)
	
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	Если Не Источник.Свойство("Брутто") Тогда
		Возврат
	КонецЕсли;
	УстановитьЗначениеПоКлючу(Приемник, "Брутто", Источник.Брутто, Новый Структура("КлючПриведения, КлючПоиска", "Количество", "Кол_во"));		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеRnptData(Аргумент, ДопПараметры)
	Перем иСведПРослеж;
	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("СведПрослеж", иСведПРослеж) Тогда
		Возврат;
	КонецЕсли;
		
	RnptData = Новый Массив;
	Корректировка = Источник.Свойство("ПредСтрТабл") И Источник.ПредСтрТабл.Свойство("СведПрослеж");
	
	Для Каждого ТекСтрока ИЗ иСведПРослеж Цикл
		
		Марка = Новый Структура("MuCode, MuName, Rnpt, RnptQty",
			СокрЛП(ТекСтрока.ЕдИзмПрослеж),
			ТекСтрока.НаимЕдИзмПрослеж,
			СокрЛП(ТекСтрока.НомТовПрослеж),
			ТекСтрока.КолВЕдПрослеж);
			
		Если Корректировка Тогда
			
			Если ТекСтрока.Свойство("УвелКолВЕдПрослеж") Тогда
				Марка.Вставить("DiffUp", ТекСтрока.УвелКолВЕдПрослеж);
			КонецЕсли;
			
			Если ТекСтрока.Свойство("УмКолВЕдПрослеж") Тогда
				Марка.Вставить("DiffDown", ТекСтрока.УмКолВЕдПрослеж);
			КонецЕсли;
			
			Если ТекСтрока.Свойство("ПредКолВЕдПрослеж") Тогда
				Марка.Вставить("BeforeQty", ТекСтрока.ПредКолВЕдПрослеж);
			КонецЕсли;
			
		КонецЕсли;
			
		RnptData.Добавить(Марка);
		
	КонецЦикла;
	
	Если RnptData.Количество() Тогда
		УстановитьЗначениеПоКлючу(Приемник, "RnptData", RnptData, Новый Структура("ИскатьВИсточнике", Ложь));
	КонецЕсли;                                                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеНДСЗначениеНДСТип(Аргумент, ДопПараметры) Экспорт
	
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
		
	УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "");
	Процент = "";
	
	Если Не Источник.Свойство("НДС") Тогда
		Возврат;
	ИначеЕсли Источник.НДС.Свойство("ТипСтавки") Тогда
		Если Источник.НДС.ТипСтавки = "процент" Тогда
			Если ДопПараметры.Свойство("СимволПроцент") Тогда 
				Процент = ДопПараметры.СимволПроцент;
			Иначе
				Процент = "%";
			КонецЕсли;
		ИначеЕсли Источник.НДС.ТипСтавки = "текст" Тогда
			Если Источник.НДС.Ставка = "без НДС" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, Источник.НДС.Ставка);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.НДС.Свойство("Ставка") Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, Источник.НДС.Ставка + Процент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеЦенаБезНДС(Аргумент, ДопПараметры)
	Суффикс		= Аргумент.Суффикс;
	Источник	= Аргумент.ИсточникДанных;
	Приемник	= Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(Приемник, "ЦенаБезНДС" + Суффикс, Источник, "Цена");
КонецПроцедуры

//Процедура заполняет ТЧ с учетом суффикса в строку. Для ПредСТрТабл, например, должно быть сформировано тоже самое, только с суффиксом До
&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеПоСуффиксу(Аргумент, ДопПараметры)
	ЗаполнитьТабличныеДанныеСуммаНДС			(Аргумент, ДопПараметры); 
	ЗаполнитьТабличныеДанныеЕдИзм				(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеНДСЗначениеНДСТип	(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеЦенаБезНДС			(Аргумент, ДопПараметры);
	ЗаполнитьТабличныеДанныеНомСредИдентТов		(Аргумент, ДопПараметры); 
	ЗаполнитьТабличныеДанныеАкциз				(Аргумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеОбщие(Аргумент, ДопПараметры) Экспорт
	
	ТекСтрока = Аргумент.ИсточникДанных;
	ТекДанные = Аргумент.ДанныеРезультат;
	
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомер", 		ТекСтрока, "Код");
	УстановитьЗначениеПоКлючу(ТекДанные, "Количество", 		ТекСтрока, Новый Структура("КлючПриведения, КлючПоиска", "Количество", "Кол_во"));
	УстановитьЗначениеПоКлючу(ТекДанные, "Наименование", 	ТекСтрока, "Название");
	УстановитьЗначениеПоКлючу(ТекДанные, "Цена", 			ТекСтрока, "ЦенаСНДС");
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенБезНДС", 	ТекСтрока, "СуммаБезНал");
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦен", 		ТекСтрока, "Сумма");
	УстановитьЗначениеПоКлючу(ТекДанные, "Артикул", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ПорНомер", 		ТекСтрока);
	
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефСуммаЦен", 				ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефНДС", 						ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефЕдКод",					ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ДефКодСтраныПроизводства",	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ГТД", 						ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ИнфПол", 						ТекСтрока); 
	
	Если ТекСтрока.Свойство("Характеристика") 
		 И ТекСтрока.Характеристика.Свойство("Значение")
		 И ЗначениеЗаполнено(ТекСтрока.Характеристика.Значение) Тогда
		 
		 УстановитьЗначениеПоКлючу(ТекДанные, "КодПартии",					ТекСтрока, "Характеристика.Значение");
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(ТекДанные, "GTIN", 			ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомерСтор", 	ТекСтрока, "КодПокупателя");
	УстановитьЗначениеПоКлючу(ТекДанные, "КодПокупателя", 	ТекСтрока, "КодПокупателя");
	УстановитьЗначениеПоКлючу(ТекДанные, "НомНомер", 		ТекСтрока, "КодПоставщика");
	УстановитьЗначениеПоКлючу(ТекДанные, "ПрТовРаб",		ТекСтрока, "Тип");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеКорректировочные(Аргумент, ДопПараметры) Экспорт

	ТекСтрока = Аргумент.ИсточникДанных;
	ТекДанные = Аргумент.ДанныеРезультат;
	
	Если Не (	ТекСтрока.Свойство("АкцизУвел")
			И	ТекСтрока.АкцизУвел = "0.00") Тогда
		//Если Акциз не менялся, то он не передаётся.
		УстановитьЗначениеПоКлючу(ТекДанные, "АкцизУвел", 	ТекСтрока);
		УстановитьЗначениеПоКлючу(ТекДанные, "АкцизУм", 	ТекСтрока);
	КонецЕсли;
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенУвел", 	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенУм", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаНДСУвел", 	ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СуммаНДСУм", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СтоимУвел", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "СтоимУм", 		ТекСтрока);
	УстановитьЗначениеПоКлючу(ТекДанные, "ПорНомер1",		ТекСтрока, "ПорНомТовВСЧФ");
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьТабличныеДанныеПредСтрТабл(Аргумент, ДопПараметры) Экспорт
	Перем иПредСтрТабл, КоличествоДок;

	Источник = Аргумент.ИсточникДанных;
	Приемник = Аргумент.ДанныеРезультат;
	
	Если Не Источник.Свойство("ПредСтрТабл", иПредСтрТабл) Тогда
		Возврат;
	КонецЕсли;
	АргументЗаполнить = Новый Структура("ИсточникДанных, ДанныеРезультат, Суффикс", иПредСтрТабл, Приемник, "До");
	
	ЗаполнитьТабличныеДанныеПоСуффиксу(АргументЗаполнить, ДопПараметры);
	
	УстановитьЗначениеПоКлючу(Приемник, "КоличествоДок", 	АргументЗаполнить.ИсточникДанных, Новый Структура("КлючПриведения, КлючПоиска", "Количество", "Кол_во"));
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенДо", 		АргументЗаполнить.ИсточникДанных, "Сумма");
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенБезНДСДо", АргументЗаполнить.ИсточникДанных, "СуммаБезНал");
	
	//Костыль для удаления КолТовДо
	Попытка
		КоличествоДок = Число(Приемник.Получить("КоличествоДок"));
		Если КоличествоДок = 0 Тогда
			Приемник.Удалить("КоличествоДок");
		КонецЕсли;
	Исключение
		//Не числовое значение в приемнике. Пока без обработки
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтоги(Кэш, Генератор, Вложение, ДопПараметры)
	
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ИсточникДанных_ИтогТабл", "Файл_Шаблон_" + СтрЗаменить(Вложение.СтруктураДокумента.Файл.ВерсияФормата, ".", "_"), "Файл_Шаблон");
	ИтогиДокумента = фрм.ИсточникДанных_ИтогТабл(Кэш, Вложение);
	
	Если ИтогиДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураИтоги	= ИтогиДокумента.СтруктураИтоги; 
	ИмяТабл			= ИтогиДокумента.ИмяТабл; 
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".Сумма",			СтруктураИтоги, "Сумма");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДС",		СтруктураИтоги, "СуммаБезНал");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДС",		СтруктураИтоги, "СуммаБезНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".ДефСумма",			СтруктураИтоги, "ДефСумма");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДС",			СтруктураИтоги, "БезНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".ДефНДС",			СтруктураИтоги, "ДефНДС");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДСУвел",	СтруктураИтоги, "СуммаБезНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаБезНДСУм",	СтруктураИтоги, "СуммаБезНДСУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаУвел",		СтруктураИтоги, "СуммаУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаУм",			СтруктураИтоги, "СуммаУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДСУвел",		СтруктураИтоги, "СуммаНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДСУм",		СтруктураИтоги, "СуммаНДСУм");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДСУвел",		СтруктураИтоги, "БезНДСУвел");
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".БезНДСУм",			СтруктураИтоги, "БезНДСУм");
	
	Если СтруктураИтоги.Свойство("НДС") Тогда
		Если НЕ (СтруктураИтоги.Свойство("БезНДС") И СтруктураИтоги.БезНДС = "без НДС") Тогда
			УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".СуммаНДС", СтруктураИтоги.НДС, "Сумма");	
		КонецЕсли;
	КонецЕсли;
	ПараметрыДляКоличества = Новый Структура("КлючПриведения, КлючПоиска", "Количество", "Кол_во");
	
	Если СтруктураИтоги.Свойство("Нетто") Тогда
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".Кол_во", СтруктураИтоги.Нетто,	ПараметрыДляКоличества);
	КонецЕсли;
	Если СтруктураИтоги.Свойство("Брутто") Тогда
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".БруттоВс", СтруктураИтоги.Брутто,	ПараметрыДляКоличества);
	КонецЕсли;
	Если СтруктураИтоги.Свойство("Упаковка") Тогда
		ПараметрыДляКоличества.КлючПоиска = "КолМест";
		УстановитьЗначениеПоКлючу(Генератор,  ИмяТабл + ".Упаковка.КолМест", СтруктураИтоги.Упаковка, ПараметрыДляКоличества);
	КонецЕсли;
	
КонецПроцедуры

