
//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаКлиенте
Функция СбисПолучитьСвойствоОбъектаНаКлиенте(ОписаниеСвойства, Кэш)
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства);
	СсылкаНаСвойство = ПараметрыСоединения.КэшСвойствОбъектов.Получить(КлючСвойства);
	Если СсылкаНаСвойство = Неопределено Тогда
		Возврат ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства);
	КонецЕсли;
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция возвращает ключ свойства с учетом регамлента и установленного кода сервиса на клиенте
&НаКлиенте
Функция СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если Не ПараметрыСоединения.СвойстваВРазрезеКодаСервиса.НайтиПоЗначению(НРег(КлючСвойства)) = Неопределено Тогда
		КлючСвойства = ПараметрыСоединения.КодСервиса + КлючСвойства;
	КонецЕсли;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция возвращает имя свойства с учетом регамлента
&НаКлиентеНаСервереБезКонтекста
Функция СбисПолучитьИмяСвойстваДокумента(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаСервере
Функция СбисПолучитьСвойствоОбъектаНаСервере(ОписаниеСвойства)
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства);
	СсылкаНаСвойство = ПараметрыСоединения.КэшСвойствОбъектов.Получить(КлючСвойства);
	Если СсылкаНаСвойство = Неопределено Тогда
		СсылкаНаСвойство = ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства);
	КонецЕсли;
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
&НаСервере
Функция ИзвлечьСвойствоПоОписаниюНаСервере(КлючСвойства)
	СсылкаНаСвойство = ПланыВидовХарактеристик[ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(КлючСвойства, Истина).Ссылка;
	ПараметрыСоединения.КэшСвойствОбъектов.Вставить(КлючСвойства, СсылкаНаСвойство);
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция возвращает ключ свойства с учетом регамлента и установленного кода сервиса на сервере
&НаСервере
Функция СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если Не ПараметрыСоединения.СвойстваВРазрезеКодаСервиса.НайтиПоЗначению(НРег(КлючСвойства)) = Неопределено Тогда
		КлючСвойства = ПараметрыСоединения.КодСервиса + КлючСвойства;
	КонецЕсли;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция добавляет записи в план видов характеристик, необходимые для хранения статусов и идентификаторов в регистрах сведений	
&НаСервере
Процедура ДобавитьЗаписиВПланВидовХарактеристикНаСервере()
	ИмяПланаВидовХарактеристикСвойствОбъектов 	= ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СправочникСвойствОбъектов 					= ПараметрыСоединения.СправочникСвойствОбъектов; 
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) = Неопределено Тогда
		ВызватьИсключение("В конфигурации отсутствует план видов характеристик " + ИмяПланаВидовХарактеристикСвойствОбъектов + ".");
	КонецЕсли;  
	Отказ = Ложь;
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_Ид"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_ИдВложения"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_Статус"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СтатусГос"));
	СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_ТекущийЭтап"));

	Если ПараметрыСоединения.СохранятьРасхождения Тогда 
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СравнениеЗначение"));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", "ДокументСБИС_СравнениеСтатус"));
	КонецЕсли;
	
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_Идентификатор",	ИмяПланаВидовХарактеристикСвойствОбъектов, "Строка", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_СпособДоставки",	ИмяПланаВидовХарактеристикСвойствОбъектов, "СправочникСвойствОбъектов", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_КодФилиала",		ИмяПланаВидовХарактеристикСвойствОбъектов, "Строка", Отказ);
	СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_ЗапретРедакций",	ИмяПланаВидовХарактеристикСвойствОбъектов, "Булево", Отказ);
	
    МассивСтатусРегламент = ПараметрыСоединения.МассивСтатусРегламент;
	Для Каждого Элемент Из МассивСтатусРегламент Цикл  
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_Ид",			Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_ИдВложения",	Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_Статус",		Элемент));
		СбисДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя, Регламент", "ДокументСБИС_СтатусГос",	Элемент));
	КонецЦикла;
	Если Отказ = Истина Тогда
		ВызватьИсключение("Возникли проблемы при создании дополнительных свойств для документов и контрагентов. Для корректного создания дополнительных свойств необходимо провести первичный запуск обработки под пользователем с правами на план видов характеристик "+ИмяПланаВидовХарактеристикСвойствОбъектов+". Для этого обратитесь к вашему администратору 1С.");	
	КонецЕсли;
	
КонецПроцедуры

//Функция добавляет запись в план видов характеристик
&НаСервере
Функция СбисДобавитьЗаписьВПланВидовХарактеристик(ОписаниеСвойства)
	
	Перем НазначениеСвойства;
	КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаСервере(ОписаниеСвойства);
	ОписаниеСвойства.Свойство("Назначение", НазначениеСвойства);
	ИмяПланаВидовХарактеристикСвойствОбъектов = ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов;
	
	ЕстьРеквизитВиден						= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Виден")<>Неопределено;
	ЕстьРеквизитДоступен					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Доступен")<>Неопределено;
	ЕстьРеквизитЭтоДополнительноеСведение	= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ЭтоДополнительноеСведение")<>Неопределено;
	ЕстьРеквизитВидСвойств					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ВидСвойств")<>Неопределено;
	
	НайденнаяЗапись = СбисПолучитьСвойствоОбъектаНаСервере(ОписаниеСвойства);
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Если		(ЕстьРеквизитВиден И НЕ НайденнаяЗапись.Виден)
				ИЛИ	(ЕстьРеквизитДоступен И НЕ НайденнаяЗапись.Доступен)
				ИЛИ (ЕстьРеквизитЭтоДополнительноеСведение И НЕ НайденнаяЗапись.ЭтоДополнительноеСведение)
				ИЛИ (ЕстьРеквизитВидСвойств И НЕ НайденнаяЗапись.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения) Тогда
			НайденнаяЗаписьОбъект = НайденнаяЗапись.ПолучитьОбъект();
			Если ЕстьРеквизитВиден Тогда
				НайденнаяЗаписьОбъект.Виден = Истина;	
			КонецЕсли;
			Если ЕстьРеквизитДоступен Тогда
				НайденнаяЗаписьОбъект.Доступен = Истина;
			КонецЕсли;
			Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
				НайденнаяЗаписьОбъект.ЭтоДополнительноеСведение = Истина;
			КонецЕсли;
			Если ЕстьРеквизитВидСвойств Тогда
				НайденнаяЗаписьОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
			КонецЕсли;
			НайденнаяЗаписьОбъект.Записать();
		КонецЕсли;
		
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = КлючСвойства;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Имя") = Неопределено Тогда
			СвойствоОбъект.Имя = КлючСвойства;
		КонецЕсли;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
		Попытка
			СвойствоОбъект.Заголовок = КлючСвойства;
		Исключение
		КонецПопытки;
		Если ЕстьРеквизитВиден Тогда
			СвойствоОбъект.Виден = Истина;	
		КонецЕсли;
		Если ЕстьРеквизитДоступен Тогда
			СвойствоОбъект.Доступен = Истина;
		КонецЕсли;
		Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		КонецЕсли;
		Если ЕстьРеквизитВидСвойств Тогда
			СвойствоОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
				СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
			Иначе
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			КонецЕсли;
		Исключение
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		ВызватьИсключение("Не удалось создать дополнительное свойство " + КлючСвойства + ". Детально: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

//Функция добавляет запись в план видов характеристик		
&НаСервере
Функция СбисДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИмяПланаВидовХарактеристикСвойствОбъектов, ТипЗначения, Отказ = Ложь)
	
	ЕстьРеквизитВиден						= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Виден")<>Неопределено;
	ЕстьРеквизитДоступен					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("Доступен")<>Неопределено;
	ЕстьРеквизитЭтоДополнительноеСведение	= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ЭтоДополнительноеСведение")<>Неопределено;
	ЕстьРеквизитВидСвойств					= Метаданные.ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].Реквизиты.Найти("ВидСвойств")<>Неопределено;
	
	НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Если		(ЕстьРеквизитВиден И НЕ НайденнаяЗапись.Виден)
				ИЛИ	(ЕстьРеквизитДоступен И НЕ НайденнаяЗапись.Доступен)
				ИЛИ (ЕстьРеквизитЭтоДополнительноеСведение И НЕ НайденнаяЗапись.ЭтоДополнительноеСведение)
				ИЛИ (ЕстьРеквизитВидСвойств И НЕ НайденнаяЗапись.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения) Тогда
			НайденнаяЗаписьОбъект = НайденнаяЗапись.ПолучитьОбъект();
			Если ЕстьРеквизитВиден Тогда
				НайденнаяЗаписьОбъект.Виден = Истина;	
			КонецЕсли;
			Если ЕстьРеквизитДоступен Тогда
				НайденнаяЗаписьОбъект.Доступен = Истина;
			КонецЕсли;
			Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
				НайденнаяЗаписьОбъект.ЭтоДополнительноеСведение = Истина;
			КонецЕсли;
			Если ЕстьРеквизитВидСвойств Тогда
				НайденнаяЗаписьОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
			КонецЕсли;
			НайденнаяЗаписьОбъект.Записать();
		КонецЕсли;
		
		Возврат НайденнаяЗапись;
	КонецЕсли;	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяЗаписи;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда 
			СправочникСвойствОбъектов = ПараметрыСоединения.СправочникСвойствОбъектов;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + СправочникСвойствОбъектов);
		Иначе
			Попытка
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
			Исключение
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			КонецПопытки;
		КонецЕсли;
		Попытка
			СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		Исключение
		КонецПопытки;
		Попытка
			СвойствоОбъект.Заголовок = ИмяЗаписи;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Если ЕстьРеквизитВиден Тогда
			СвойствоОбъект.Виден = Истина;	
		КонецЕсли;
		Если ЕстьРеквизитДоступен Тогда
			СвойствоОбъект.Доступен = Истина;
		КонецЕсли;
		Если ЕстьРеквизитЭтоДополнительноеСведение Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		КонецЕсли;
		Если ЕстьРеквизитВидСвойств Тогда
			СвойствоОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
		КонецЕсли;
		Попытка
			НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
			СвойствоОбъект.НаборСвойств = НаборДопСв;
		Исключение 
			Попытка
				НаборДопСв = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоРеквизиту("ИмяПредопределенногоНабора", "Справочник_Контрагенты");
				СвойствоОбъект.НаборСвойств = НаборДопСв;
			Исключение 
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Попытка
			НаборДопСвойствКонтр = НаборДопСв.ПолучитьОбъект();
			НовоеСведение = НаборДопСвойствКонтр.ДополнительныеСведения.Добавить();
			НовоеСведение.Свойство = СвойствоОбъект.Ссылка;
			НаборДопСвойствКонтр.Записать();
		Исключение
		КонецПопытки;
		Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "ЭДО";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага, хочет ЭДО";
			ЗначениеСпр.Записать();
		КонецЕсли;
		
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		Ошибка = ОписаниеОшибки(); 
		Сообщить("Не удалось создать дополнительное свойство "+ИмяЗаписи);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

