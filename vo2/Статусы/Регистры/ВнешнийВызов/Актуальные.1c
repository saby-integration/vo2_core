
//Новая функция записи изменений по документам. Дополнительные параметры как возможность на расширение
&НаКлиенте
Функция СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, ДопПараметры)	Экспорт
	Перем СбисСтатусРегламент, СбисИдАккаунта;
	// проставляет статусы по идентификаторам пакетов при получении списка изменений
	Если Не МассивДокументов.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	//Сделаем проверку ВФК на случай выноса старой функции.
	Если Не ДопПараметры.Свойство("ПроверкаСтаройФункции")
		Или	ДопПараметры.ПроверкаСтаройФункции Тогда
		фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ЗаписатьИзмененияПоДокументам1С","Статусы_Регистры", Новый Структура("ПроверятьВО, КэшироватьФункцию", Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, фрм);
		ИначеЕсли Не фрм = Ложь Тогда
			РезультатДозапроса = Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
			Если Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатДозапроса);
				Возврат РезультатДозапроса;
			КонецЕсли;
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, Кэш.Парам.КаталогНастроек);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ДопПараметры.Свойство("ИдАккаунта", СбисИдАккаунта);
	МассивСтатусРегламент = ПараметрыСоединения.МассивСтатусРегламент;
	
	ЗаполнятьСпособОбменаКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗаполнятьСпособОбменаКонтрагента", Кэш.Ини.Конфигурация);
	ЗаполнятьСпособОбменаКонтрагента = ЗаполнятьСпособОбменаКонтрагента = Истина;

	ПараметрыЗапроса	= Новый Структура("СписокИд", Новый Массив);
	ПараметрыЗапроса.Вставить("ИмяПланаВидовХарактеристикСвойствОбъектов",	ПараметрыСоединения.ИмяПланаВидовХарактеристикСвойствОбъектов);
	
	СобытияПакета 		= Неопределено;
	КлючПакета			= Неопределено;
	КартаСписка			= Новый Соответствие;
	ДанныеПоКонтрагентам= Новый Структура;
	Для СчПакета = 0 По МассивДокументов.Количество() - 1 Цикл
		СоставПакета = МассивДокументов[СчПакета];
		Если	СоставПакета.Свойство("Событие", СобытияПакета)
			И	СобытияПакета[0].Свойство("Название")
			И	СобытияПакета[0].Название = "Извещение о получении" Тогда
			//Определим контрагентов для обработки на сервере
			Если ЗаполнятьСпособОбменаКонтрагента Тогда
				КлючИННКПП = "к" + ?(	СоставПакета.Контрагент.Свойство("СвЮЛ"),
										СоставПакета.Контрагент.СвЮЛ.ИНН + "_" + СоставПакета.Контрагент.СвЮЛ.КПП, 
										СоставПакета.Контрагент.СвФЛ.ИНН);
				Если Не ДанныеПоКонтрагентам.Свойство(КлючИННКПП) Тогда
					ДанныеПоКонтрагентам.Вставить(КлючИННКПП, СоставПакета.Контрагент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СобытияПакета = Неопределено;
		КонецЕсли;	
		// Т.к. при отправке проставили на каждом документе 1С Ид пакета и вложения, ищем все документы, у которых идентификатор начинается на Ид пакета
		Если Не (	СоставПакета.Свойство("Идентификатор", КлючПакета) 
				И	СоставПакета.Свойство("Состояние"))
			Или		СоставПакета.Свойство("Редакция")// на документах 1С проставляем статусы только для актуальных редакций
				И	СоставПакета.Редакция[0].Актуален = "Нет" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	(		СоставПакета.Свойство("Регламент", СбисСтатусРегламент) 
				И		СбисСтатусРегламент.Свойство("Название", СбисСтатусРегламент)
				И НЕ	МассивСтатусРегламент.Найти(СбисСтатусРегламент) = Неопределено) Тогда
			СбисСтатусРегламент = "";
		КонецЕсли;
		
		СвойствоДокументСБИС_Ид = СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", СбисСтатусРегламент, "ДокументСБИС_Ид"), Кэш);
		ПараметрыЗапроса.СписокИд.Добавить(Новый Структура("Ид, Свойство", КлючПакета, СвойствоДокументСБИС_Ид));
		ЭлементКарты = КартаСписка.Получить(КлючПакета);
		Если ЭлементКарты = Неопределено Тогда
			ЭлементКарты = Новый Массив;
			КартаСписка.Вставить(КлючПакета, ЭлементКарты);
		КонецЕсли;
		ЭлементКарты.Добавить(Новый Структура("Индекс, Регламент, Событие", СчПакета, СбисСтатусРегламент, СобытияПакета));
		Если СбисИдАккаунта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//Расширить карту для поиска с учетом ИД аккаунта
		КлючПакетаАккаунт = ИдПакетаСбис(КлючПакета, СбисИдАккаунта);
		ПараметрыЗапроса.СписокИд.Добавить(Новый Структура("Ид, Свойство", КлючПакетаАккаунт, СвойствоДокументСБИС_Ид));
		ЭлементКарты = КартаСписка.Получить(КлючПакетаАккаунт);
		Если ЭлементКарты = Неопределено Тогда
			ЭлементКарты = Новый Массив;
			КартаСписка.Вставить(КлючПакетаАккаунт, ЭлементКарты);
		КонецЕсли;
		ЭлементКарты.Добавить(Новый Структура("Индекс, Регламент, Событие", СчПакета, СбисСтатусРегламент, СобытияПакета));
	КонецЦикла;
	ПараметрыЗапроса.Вставить("ИмяРегистраСвойствОбъектов", параметрыСоединения.ИмяРегистраСвойствОбъектов);

	РезультатЗапросаСпискаИд = Документы1СПоПараметрам(ПараметрыЗапроса,Новый Структура("ПолучитьИмяМетаданных", Истина),Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗапросаСпискаИд);
		Возврат РезультатЗапросаСпискаИд;
	КонецЕсли;
	//Определим ини, котокрые нужны для обработки.
	ДанныеИниДляОбработки = Новый Структура("Конфигурация", Кэш.Ини.Конфигурация);
	Для Каждого СтрокаПоПакетно Из РезультатЗапросаСпискаИд Цикл
		Для Каждого СтрокаДокумента1С Из СтрокаПоПакетно.Значение.Документы1С Цикл
			КлючИни = СтрокаДокумента1С.Метаданные_Имя;
			Если	Не	Кэш.Ини.Свойство(КлючИни)
				Или		ДанныеИниДляОбработки.Свойство(КлючИни) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИниДляОбработки.Вставить(КлючИни, Кэш.ФормаНастроек.Ини(Кэш, КлючИни));
		КонецЦикла;
	КонецЦикла;
	
	//Дозаполним параметры недостающими данными
	СписокДокументов1СПакета= Неопределено;
	СтрокаЗапросаСпискаИд	= Неопределено;
	Для Каждого КлючИЗначениеКарты Из КартаСписка Цикл
		СтрокаЗапросаСпискаИд = РезультатЗапросаСпискаИд.Получить(КлючИЗначениеКарты.Ключ);
		Если СтрокаЗапросаСпискаИд = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ИндексПакета Из КлючИЗначениеКарты.Значение Цикл
			СоставПакета = МассивДокументов[ИндексПакета.Индекс];
			СтрокаЗапросаСпискаИд.Вставить("НоваяРедакция",				Ложь);
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_Статус",		СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_Статус"),		Кэш));
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_СтатусГос",	СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_СтатусГос"),	Кэш));
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_ТекущийЭтап",	СбисПолучитьСвойствоОбъектаНаКлиенте(Новый Структура("Регламент, Имя", ИндексПакета.Регламент, "ДокументСБИС_ТекущийЭтап"),	Кэш));
			СтрокаЗапросаСпискаИд.Вставить("Состояние",					СоставПакета.Состояние);
			Если СоставПакета.Свойство("Событие") И ТипЗнч(СоставПакета.Событие) = тип("Массив") 
					И СоставПакета.Событие.Количество()>0 И СоставПакета.Событие[0].Свойство("Название") Тогда	
				Если ПараметрыСоединения.СтатусыГос.НайтиПоЗначению(СоставПакета.Событие[0].Название) <> Неопределено Тогда  // << alo СтатусГос Список
					СтрокаЗапросаСпискаИд.Вставить("СостояниеГос",		СоставПакета.Событие[0].Название);
				Конецесли;
			Конецесли;	// alo СтатусГос >>
			Если СоставПакета.Свойство("АктивныеФазы") И ТипЗнч(СоставПакета.АктивныеФазы) = тип("Массив") 
					И СоставПакета.АктивныеФазы.Количество()>0 И СоставПакета.АктивныеФазы[0].Свойство("Наименование") Тогда	
				СтрокаЗапросаСпискаИд.Вставить("ТекущийЭтап", СоставПакета.АктивныеФазы[0].Наименование);
			Конецесли;
			Если Не ИндексПакета.Событие = Неопределено Тогда
				СтрокаЗапросаСпискаИд.Вставить("Событие",			ИндексПакета.Событие);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ПараметрыОбработки = Новый Структура("Контрагенты, Список", ДанныеПоКонтрагентам, РезультатЗапросаСпискаИд);
	РезультатОбработки = СбисЗаписатьИзмененияПоСвойствам(ПараметрыОбработки, Новый Структура("Ини, ИмяРегистраСвойствОбъектов, НоваяРедакция", ДанныеИниДляОбработки, ПараметрыЗапроса.ИмяРегистраСвойствОбъектов, Ложь), Отказ);
	//Сделаем обработку свойств на сервере и заполним массив документов обработанным результатом
	Для Каждого СтрокаРезультатОбработки Из РезультатОбработки Цикл
		ЭлементКарты = КартаСписка.Получить(СтрокаРезультатОбработки.Ключ);
		Если ЭлементКарты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокДокументов = Новый СписокЗначений;
		Для Каждого ОбработаннаяСтрока Из СтрокаРезультатОбработки.Значение Цикл
			СписокДокументов.Добавить(ОбработаннаяСтрока.Ссылка);
		КонецЦикла;
		Для Каждого СтрокаИндексовПакета Из ЭлементКарты Цикл
			МассивДокументов[СтрокаИндексовПакета.Индекс].Вставить("Документы1С", СписокДокументов);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

//Возвращает значение 1 свойства по 1 ссылке
//ПараметрыСвойства - Структура:
//							ДокументСсылка - ссылка на документ 1С
//							Имя - Строка, имя свойства для поиска, без учета стенда
//							Регламент - Строка для поиска свойства с регламентом.
//Возвращает: значение указанного свойства
&НаКлиенте
Функция СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыСвойства, Кэш)				Экспорт
	Перем ЗначениеСвойства;
	МассивСвойствПрочитать = Новый Массив;
	СвойствоПрочитать = Новый Структура("Имя, Регламент");
	ЗаполнитьЗначенияСвойств(СвойствоПрочитать, ПараметрыСвойства);
	МассивСвойствПрочитать.Добавить(СвойствоПрочитать);
	ПараметрыПрочитать = Новый Структура("СписокДокументов, Свойства, ПолныйСписок", Новый Массив, МассивСвойствПрочитать, Истина);
	ПараметрыПрочитать.СписокДокументов.Добавить(ПараметрыСвойства.ДокументСсылка);
	
	Результат = СбисПрочитатьЗначенияСвойствДокументов(ПараметрыПрочитать, Кэш);
	ЗначениеСвойств = Результат.Получить(ПараметрыСвойства.ДокументСсылка);
	Если ЗначениеСвойств.Свойство(ПараметрыСвойства.Имя, ЗначениеСвойства) Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
КонецФункции

//Возвращает список свойств по списку документов
//ПараметрыСвойства Структура:
//							СписокДокументов- ссылка на документ 1С
//							Свойства		- массив структур:
//								Имя			- Строка, имя свойства для поиска, без учета стенда
//								Регламент	- Строка для поиска свойства с регламентом.
//							ПолныйСписок	- булево, если активно то в результате будет полная выборка по всем свойствам и ссылкам, независимо от того - есть свойства или нет.
//Возвращает Соответствие, где ключ это ссылка на документ 1С, значение - структура найденных свойств без кода сервиса и регламента.
//ВНИМАНИЕ если передаются свойства с регламентом и без, то ключ в таком случае будет совпадать и свойства в ответе перекроют друг-друга.
&НаКлиенте
Функция СбисПрочитатьЗначенияСвойствДокументов(ПараметрыЗапросаВходящие, Кэш)		Экспорт
	Перем ПолныйСписокВРезультат;
	СтрокаКлючей	= "";
	СписокСсылок	= ПараметрыЗапросаВходящие.СписокДокументов;
	Если ТипЗнч(СписокСсылок) = Тип("СписокЗначений") Тогда
		СписокСсылок = СписокСсылок.ВыгрузитьЗначения();
	КонецЕсли;
	СписокСвойствДляЗапроса = Новый Массив;
	СоответстиеСвойств		= Новый Соответствие;//Для перевода свойства с кодом сервиса и регламента в обратную сторону
	Для Каждого ОписаниеСвойства Из ПараметрыЗапросаВходящие.Свойства Цикл
		КлючСвойства = СбисПолучитьКлючСвойстваДокументаНаКлиенте(ОписаниеСвойства);
		СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей), "",",") + ОписаниеСвойства.Имя;
		
		СоответстиеСвойств.Вставить(КлючСвойства, ОписаниеСвойства.Имя);
		СписокСвойствДляЗапроса.Добавить(СбисПолучитьСвойствоОбъектаНаКлиенте(ОписаниеСвойства, ЛокальныйКэш));
	КонецЦикла;
	Если Не ПараметрыЗапросаВходящие.Свойство("ПолныйСписок", ПолныйСписокВРезультат) Тогда
		ПолныйСписокВРезультат = Ложь;
	КонецЕсли;
	
	ВыборкаСвойств = ПрочитатьСвойстваДокументовПоСсылкамНаСервере(Новый Структура("СписокДокументов, СписокСвойств", СписокСсылок, СписокСвойствДляЗапроса));
	Результат = Новый Соответствие;
	Для Каждого СсылкаЗапрос Из СписокСсылок Цикл
		ЗначениеСвойств = ВыборкаСвойств.Получить(СсылкаЗапрос);
		Если ЗначениеСвойств = Неопределено Тогда
			Если ПолныйСписокВРезультат Тогда
				Результат.Вставить(СсылкаЗапрос, Новый Структура(СтрокаКлючей));
			КонецЕсли;
			Продолжить;
		ИначеЕсли ПолныйСписокВРезультат Тогда
			СтруктураСвойств = Новый Структура(СтрокаКлючей);
		Иначе
			СтруктураСвойств = Новый Структура;
		КонецЕсли;
		Для Каждого ЗначениеСвойства Из ЗначениеСвойств Цикл
			СтруктураСвойств.Вставить(СоответстиеСвойств.Получить(ЗначениеСвойства.Наименование), ЗначениеСвойства.Значение);
		КонецЦикла;
		Результат.Вставить(СсылкаЗапрос, СтруктураСвойств);
	КонецЦикла;	
	Возврат Результат;
КонецФункции
	
//Возвращает набор ссылок по идентификатору пакета и вложения
//ПараметрыЗаполненияСвязи - Структура
//		ИдентификаторыПолучить - массив структур:
//			Ид				- строка(UUID), чистый ИД пакета для поиска, без ИД аккаунта.
//			ИдВложения(н)	- строка(UUID), ИД вложения для поиска. Если нет, то поиск проводится только по ИД пакета.
//		ИдАккаунта		- строка Идентификатор аккаунта, для дополнительного разреза поиска.
//		ЗаполнитьСумму	- булево, признак необходимости извлечения реквизита "СуммаДокумента".
//Возвращает Соответствие, где ключ это Ид+ИдВложения, а значение это массив найденных ссылок документов
&НаКлиенте
Функция СбисПрочитатьСвязьДокументов1С(ПараметрыЗаполненияСвязи)					Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		Возврат ПрочитатьСвязьДокументов1СПоИдентификаторамСБИС(ПараметрыЗаполненияСвязи);
	#Иначе
		Возврат ПрочитатьСвязьДокументов1СНаСервере(ПараметрыЗаполненияСвязи);
	#КонецЕсли
КонецФункции

//Функция возвращает параметры сопоставленного документа СБИС - ИД пакета и аккаунта
//ПараметрыЧтенияВходящие - Структура:
//		ДокументСсылка - Ссылка на документ, по которому требуется получить свойство
&НаКлиенте
Функция СбисПрочитатьСведенияОПакете(ПараметрыЧтенияВходящие, Кэш)					Экспорт
	ПараметрыЧтенияСвойства	= Новый Структура("Имя, ДокументСсылка", "ДокументСБИС_Ид", ПараметрыЧтенияВходящие.ДокументСсылка);
	Если ПараметрыЧтенияВходящие.Свойство("Регламент") Тогда
		ПараметрыЧтенияСвойства.Вставить("Регламент", ПараметрыЧтенияВходящие.Регламент);
	КонецЕсли;
	ИдДокументаЗначение = СбисПрочитатьЗначениеСвойстваДокумента(ПараметрыЧтенияСвойства, Кэш);
	Возврат СбисРазобратьИдентификатор(ИдДокументаЗначение);
КонецФункции

//Функция формирует из составного ИД структуру с описанием данных ИдДокумента, ИдАккаунта.
&НаКлиенте
Функция СбисРазобратьИдентификатор(ИдПакета, ДопПараметры=Неопределено)				Экспорт
	ИдПакета = СтрЗаменить(ИдПакета, "_", Символы.ПС);
	ИдДокумента = СтрПолучитьСтроку(ИдПакета, 1);
	Если СтрЧислоСтрок(ИдПакета) < 2 Тогда
		ИдАккаунта = "";	
	Иначе
	    ИдАккаунта = СтрПолучитьСтроку(ИдПакета, 2);
	КонецЕсли;	
	Возврат Новый Структура("ИдДокумента, ИдАккаунта", ИдДокумента, ИдАккаунта);
КонецФункции

//Функция получает запрос списка документов из ини под способ хранения сатусов в регистрах.
&НаКлиенте
Функция СбисПолучитьСписокДокументов1С(ПараметрыСпискаДокументов, Кэш)				Экспорт
	ТекстЗапроса = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", ПараметрыСпискаДокументов.Ини);
	Для Каждого Элемент Из ПараметрыСоединения.СвойстваВРазрезеКодаСервиса Цикл
		КлючСвойстваНовый = СбисПолучитьКлючСвойстваДокументаНаКлиенте(Новый Структура("Имя", Элемент.Представление));
		Если Элемент.Представление = КлючСвойстваНовый Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """" + Элемент.Представление + """", """" + КлючСвойстваНовый + """");
	КонецЦикла;
	ПараметрыФильтраНаСервер = ПараметрыСпискаДокументов.Фильтр;
	//Переписать запрос к 1С на передачу свойств и параметров в запрос в готовом и явном виде
	Результат = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтраНаСервер);
	Для Каждого КлючИЗначениеФильтр Из ПараметрыФильтраНаСервер Цикл
		ПараметрыСпискаДокументов.Фильтр.Вставить(КлючИЗначениеФильтр.Ключ, КлючИЗначениеФильтр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

