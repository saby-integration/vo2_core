&НаКлиенте
Функция ПереносСопоставленийНоменклатуры_СправочникиРегистры() Экспорт
	
	Кэш = ВладелецФормы.Кэш;
	
	ИниКонфигурация		= Кэш.ини.Конфигурация;
	
	ДанныеСопоставлений = ДанныеДляПереносаСправочниковРегистров(ИниКонфигурация);
	РазмерПакета		= 200;

	ПараметрыПереносаСопоставлений = ПараметрыПереносаСопоставлений_Получить();
	
	Если ЗначениеЗаполнено(ПараметрыПереносаСопоставлений.Контрагент) Тогда
		КлючиУдалить = Новый Массив;
		Для Каждого КлючЗначение Из ДанныеСопоставлений Цикл
			
			Если КлючЗначение.Ключ = ПараметрыПереносаСопоставлений.Контрагент Тогда
				Прервать;
			Иначе
				КлючиУдалить.Добавить(КлючЗначение.Ключ); //Удаляем всех контрагентов до того, на котором оборовался перенос
			КонецЕсли;
			
		КонецЦикла;		
		
		Если КлючиУдалить.Количество() Тогда
			Для Каждого КлючУдалить Из КлючиУдалить Цикл
				ДанныеСопоставлений.Удалить(КлючУдалить);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КонтрагентНоменклатура Из ДанныеСопоставлений Цикл //Контрагент ключ, значение массив структур

		стрКонтрагент			= Новый Структура("СвФЛ", Новый Структура("ИНН", КонтрагентНоменклатура.Ключ));
		ПакетСопоставлений		= Новый Массив;	
		СчетчикСтраниц			= 0;
		
		Если НЕ КонтрагентНоменклатура.Ключ = ПараметрыПереносаСопоставлений.Контрагент Тогда //Если по контрагенту продолжается перенос, счетчик обнулять не нужно
			
			ПараметрыПереносаСопоставлений.НомерСтраницы	= 0;
			ПараметрыПереносаСопоставлений.Контрагент		= КонтрагентНоменклатура.Ключ;
			ПараметрыПереносаСопоставлений.Начат			= Истина;			
			ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений);
			
		КонецЕсли;
			
		Для Каждого Сопоставление Из КонтрагентНоменклатура.Значение Цикл
			
			Если ПакетСопоставлений.Количество() = РазмерПакета Тогда

				Если СчетчикСтраниц = ПараметрыПереносаСопоставлений.НомерСтраницы Тогда
					
					НоменклатураПоставщика_МассовоеОбновление(Новый Структура("Номенклатура, Контрагент", ПакетСопоставлений, стрКонтрагент), 
															Новый Структура("Кэш",Кэш)); //Отправим пакет
															
				  	ПараметрыПереносаСопоставлений.НомерСтраницы	= ПараметрыПереносаСопоставлений.НомерСтраницы + 1;		
					ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений);
					
				КонецЕсли;

				СчетчикСтраниц = СчетчикСтраниц + 1;
               		
			КонецЕсли;
			
			ДанныеЗаполнения					= Новый Структура("НазваниеСБИС, КодСБИС,АртикулСБИС, ИдентификаторСБИС, БазоваяЕдиницаОКЕИ, GTIN_СБИС, ЕдИзмСБИС, Номенклатура");
			ДанныеЗаполнения.Номенклатура		= Новый Массив;
			ДанныеЗаполнения.НазваниеСБИС		= Сопоставление.НаименованиеСБИС;
			ДанныеЗаполнения.КодСБИС			= Сопоставление.ИдентификаторСБИС;
			ДанныеЗаполнения.GTIN_СБИС			= Сопоставление.GTIN;
			ДанныеЗаполнения.Номенклатура.Добавить(Новый Структура("Номенклатура, Идентификатор, Характеристика",
													Сопоставление.Номенклатура, Сопоставление.Идентификатор1С, Сопоставление.Характеристика));
	        	
			СтрокаСопоставленияСБИС = МодульОбъектаКлиент().НовыйСтрокаСопоставленияСБИСКлиент(ДанныеЗаполнения);
			ПакетСопоставлений.Добавить(СтрокаСопоставленияСБИС);
           					
		КонецЦикла;
		
		Если ПакетСопоставлений.Количество() И СчетчикСтраниц = ПараметрыПереносаСопоставлений.НомерСтраницы Тогда  //Отправим остаток
					
			НоменклатураПоставщика_МассовоеОбновление(Новый Структура("Номенклатура, Контрагент", ПакетСопоставлений, стрКонтрагент), Новый Структура("Кэш",Кэш));
			ПараметрыПереносаСопоставлений.НомерСтраницы	= ПараметрыПереносаСопоставлений.НомерСтраницы + 1;		
			ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений);
          			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Функция - Получает данные для переноса сопоставлений из справочников и регистров
//
// Параметры:
//  ИниКонфигурация	 - 	 Ини конфигурации из кэша 
// 
// Возвращаемое значение:
//   Соответствие. ИНН Контрагента ключ, значение массив структур 
//
Функция ДанныеДляПереносаСправочниковРегистров(ИниКонфигурация)

	ИмяРеквизитаХарактеристики	= "";
	ИмяРеквизитаGTIN			= "";
	
	Если ИниКонфигурация.Свойство("НоменклатураПоставщиков_Характеристика") и ИниКонфигурация.НоменклатураПоставщиков_Характеристика.Значение<>"''" Тогда
		ИмяРеквизитаХарактеристики = сред(ИниКонфигурация.НоменклатураПоставщиков_Характеристика.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_Характеристика.Значение,".")+1);
	КонецЕсли;
	
	Если ИниКонфигурация.Свойство("НоменклатураПоставщиков_GTIN") и ИниКонфигурация.НоменклатураПоставщиков_GTIN.Значение<>"''" Тогда
		ИмяРеквизитаGTIN = сред(ИниКонфигурация.НоменклатураПоставщиков_GTIN.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_GTIN.Значение,".")+1);
	КонецЕсли;
	
	ИмяРеквизитаНаименование	= сред(ИниКонфигурация.НоменклатураПоставщиков_Наименование.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_Наименование.Значение,".")+1);
	ИмяРеквизитаИдентификатор	= сред(ИниКонфигурация.НоменклатураПоставщиков_Идентификатор.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_Идентификатор.Значение,".")+1); 
	ИмяРеквизитаНоменклатура	= сред(ИниКонфигурация.НоменклатураПоставщиков_Номенклатура.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_Номенклатура.Значение,".")+1);
	ИмяРеквизитаКонтрагент		= сред(ИниКонфигурация.НоменклатураПоставщиков_Контрагент.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков_Контрагент.Значение,".")+1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сопоставления."+ИмяРеквизитаКонтрагент		+".ИНН КАК ИНН,
		|	Сопоставления."+ИмяРеквизитаИдентификатор	+" КАК ИдентификаторСБИС,
		|	Сопоставления."+ИмяРеквизитаНоменклатура	+" КАК Номенклатура,
		|	Сопоставления."+ИмяРеквизитаНаименование	+" КАК НаименованиеСБИС";
		
	Если ЗначениеЗаполнено(ИмяРеквизитаХарактеристики) Тогда
		Запрос.Текст = Запрос.Текст+",
		|	Сопоставления."+ИмяРеквизитаХарактеристики	+" КАК Характеристика";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаGTIN) Тогда
		Запрос.Текст = Запрос.Текст+",
		|	Сопоставления."+ИмяРеквизитаGTIN	+" КАК GTIN";	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст+"	
		|ИЗ
		|	"+ИниКонфигурация.НоменклатураПоставщиков.Значение+" КАК Сопоставления";
	
	Если Лев(ИниКонфигурация.НоменклатураПоставщиков.Значение,Найти(ИниКонфигурация.НоменклатураПоставщиков.Значение,".")) = "Справочник." Тогда
		Запрос.Текст = Запрос.Текст+ " ГДЕ НЕ Сопоставления.ПометкаУдаления";	
	КонецЕсли;
	
	РезультатЗапроса			= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи		= РезультатЗапроса.Выбрать();
	ДанныеДляПереноса			= Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИНН = СокрЛП(ВыборкаДетальныеЗаписи.ИНН);

		Если НЕ ЗначениеЗаполнено(ИНН)
				ИЛИ Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСопоставления		= Новый Структура("Идентификатор1С, Номенклатура, ИдентификаторСБИС, НаименованиеСБИС, Характеристика, GTIN");
		СопоставленияКонтрагента	= ДанныеДляПереноса.Получить(ИНН);
		
		ЗаполнитьЗначенияСвойств(СтруктураСопоставления, ВыборкаДетальныеЗаписи);
		СтруктураСопоставления.Идентификатор1С = Строка(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		
		Если СопоставленияКонтрагента  = Неопределено Тогда
			
			НаборСопоставлений = Новый Массив;
			НаборСопоставлений.Добавить(СтруктураСопоставления);
			ДанныеДляПереноса.Вставить(ИНН, Новый Массив);
			
		Иначе
			
			СопоставленияКонтрагента.Добавить(СтруктураСопоставления);			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляПереноса;
	
КонецФункции

// Процедура - Перенос сопоставлений номенклатуры ДБФ
//
// Параметры:
//  ПараметрыПереносаСопоставлений	 - Структура 
//
&НаКлиенте
Процедура ПереносСопоставленийНоменклатуры_ДБФ(ПараметрыПереносаСопоставлений)
	
	Кэш			= ВладелецФормы.Кэш;	
	ФормаДБФ	= МодульОбъектаКлиент().ПолучитьФормуОбработки("СопоставлениеНоменклатуры_ДБФ");
	
	Если ПараметрыПереносаСопоставлений.Начат Тогда
		
		КлючиКонтрагентов	= Новый Массив;

		Для Каждого КлючКонтрагента Из ФормаДБФ.СписокКаталоговСопоставлений() Цикл
			
			Если НЕ КлючКонтрагента = ПараметрыПереносаСопоставлений.Контрагент И КлючиКонтрагентов.Найти(КлючКонтрагента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КлючиКонтрагентов.Добавить(КлючКонтрагента);
			
		КонецЦикла;
		
	Иначе
		КлючиКонтрагентов = ФормаДБФ.СписокКаталоговСопоставлений();
	КонецЕсли;

	Для Каждого Ключ Из КлючиКонтрагентов Цикл
		
		стрКонтрагент		= Новый Структура("СвФЛ", Новый Структура("ИНН",Ключ));
		ПродолжитьПеренос	= Истина;
		
		Пока ПродолжитьПеренос Цикл
			
			ПараметрыСписка	= Новый Структура();
			ПараметрыСписка.Вставить("Контрагент", Новый Структура("СвФЛ", Новый Структура("ИНН", Ключ)));
			ПараметрыСписка.Вставить("Навигация", Новый Структура("РазмерСтраницы, НомерСтраницы", 200, ПараметрыПереносаСопоставлений.НомерСтраницы));
			ПорцияСопоставлений = НоменклатураПоставщика_Список(ПараметрыСписка, Новый Структура("Кэш", Кэш));
			
			Попытка
				
				ПорцияСопоставлений = ФормаДБФ.НоменклатураПоставщика_Список(ПараметрыСписка, Кэш);
				ПродолжитьПеренос	= Булево(ПорцияСопоставлений.Количество());
				
				Если ПродолжитьПеренос Тогда
					НоменклатураПоставщика_МассовоеОбновление(Новый Структура("Номенклатура, Контрагент", ПорцияСопоставлений, стрКонтрагент),
															  Новый Структура("Кэш", Кэш));
				КонецЕсли;
				
				ПараметрыПереносаСопоставлений.НомерСтраницы	= ПараметрыПереносаСопоставлений.НомерСтраницы + 1;
				ПараметрыПереносаСопоставлений.Контрагент		= Ключ;
				ПараметрыПереносаСопоставлений.Начат			= Истина;
				
			Исключение                                                                                                        
		
				МодульОбъектаКлиент().ВызватьСбисИсключение(ИнформацияОбОшибке());
				Возврат;
				
			КонецПопытки;
					
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Перенос сопоставлений c ДБФ/Справочников/Регистров.
//
// Параметры:
//  ПараметрыПереноса	 - 	Структура(ФормаСопоставленияНоменклатуры) - источник сопоставлений 
//
&НаКлиенте
Процедура ПереносСопоставлений(ПараметрыПереноса) Экспорт 
	
	ПараметрыПереносаСопоставлений	= ПараметрыПереносаСопоставлений_Получить(); 
	
	Если НЕ ПараметрыПереносаСопоставлений.Начат Тогда
		
		ПараметрыПереносаСопоставлений.Форма	= ПараметрыПереноса.ФормаСопоставленияНоменклатуры;
       	ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений)
		
	КонецЕсли;
	
	Если ПараметрыПереносаСопоставлений.Форма = "СопоставлениеНоменклатуры_ДБФ" Тогда
		ПереносСопоставленийНоменклатуры_ДБФ(ПараметрыПереносаСопоставлений);
	Иначе
		ПереносСопоставленийНоменклатуры_СправочникиРегистры() 
	КонецЕсли;
	
	ПараметрыПереносаСопоставлений.Завершен = Истина;
	ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений);
	МодульОбъектаКлиент().СбисСообщить("Перенос номенклатуры завершен");
	
КонецПроцедуры	

&НаКлиенте
Функция ПараметрыПереносаСопоставлений_Получить()
	
	ПараметрыПереносаСопоставлений	= Новый Структура;
	ПараметрыПереносаСопоставлений.Вставить("НомерСтраницы",	МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_НомерСтраницы"));
	ПараметрыПереносаСопоставлений.Вставить("Контрагент", 		МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Контрагент"));
   	ПараметрыПереносаСопоставлений.Вставить("Завершен", 		МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Завершен"));
   	ПараметрыПереносаСопоставлений.Вставить("Начат", 			МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Начат"));
	ПараметрыПереносаСопоставлений.Вставить("Форма",			МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ПараметрыПереносаСопоставлений_Форма"));
	
    Возврат ПараметрыПереносаСопоставлений;

КонецФункции

&НаКлиенте
Функция ПараметрыПереносаСопоставлений_Записать(ПараметрыПереносаСопоставлений)
	
	Для Каждого Параметр Из ПараметрыПереносаСопоставлений Цикл
		МодульОбъектаКлиент().ИзменитьПараметрСбис("ПараметрыПереносаСопоставлений_"+Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
КонецФункции

// ContractorNomenclatureCollation.MassUpdate/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура - Массив структур с классами сопоставления
//
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеОбновление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт

	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));
		НоменклатураПоставщика_МассовоеОбновлениеВызовМетода(ПараметрыЗаписиСервер, ДопПараметры);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоставщика_ЕдиничноеОбновление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт

	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	МассивНоменклатуры);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеОбновлениеВызовМетода(ПараметрыЗаписиСервер, ДопПараметры);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_ЕдиничноеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция НоменклатураПоставщика_МассовоеОбновлениеВызовМетода(ПараметрыОбновитьВходящие, ДопПараметры)	
	Перем ИсходноеСопоставление;
	
	ДопПараметры.Свойство("ИсходноеСопоставление", ИсходноеСопоставление);
	
	ЗаписиСопоставлений	= Новый Массив;
	ИдХарактеристик		= ИдХарактеристикСопоставлений(ПараметрыОбновитьВходящие.Номенклатура);
	
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		Если КлассСопоставления.Свойство("НеобходимоСопоставление")
				И Не КлассСопоставления.НеобходимоСопоставление Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Номенклатура Из КлассСопоставления.Номенклатура1С Цикл
			
			БазовыеЗаписи = Новый Массив;
			
			СтруктураЗаписи = Новый Структура("DocumentId, Main,Id,CatalogType, Name, BaseMeasureUnitCode, MeasureUnitId, MeasureUnitName, MeasureUnitCode, 
			|MeasureUnitQty, ContrName, ContrCode, CodeType, ContrGTIN, ContrCharacteristic, ContrMeasureUnitCode, ContrMeasureUnitName, ContrMeasureUnitQty");
			
			Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
				СтруктураЗаписи.DocumentId			= КлассСопоставления.ИдентификаторДокумента;
			КонецЕсли;
			
			СтруктураЗаписи.Main					= Номенклатура.Значение.Основное;
			СтруктураЗаписи.Id						= Номенклатура.Значение.Идентификатор;
			СтруктураЗаписи.CatalogType				= Строка(ТипЗнч(Номенклатура.Ключ));
			СтруктураЗаписи.Name					= Строка(Номенклатура.Ключ);
			СтруктураЗаписи.BaseMeasureUnitCode		= КлассСопоставления.БазоваяЕдиницаОКЕИ;					
			СтруктураЗаписи.ContrName				= КлассСопоставления.НоменклатураСБИС.Наименование;
			СтруктураЗаписи.ContrCode				= КлассСопоставления.НоменклатураСБИС.Код;
			СтруктураЗаписи.CodeType				= КлассСопоставления.НоменклатураСБИС.ТипКода;
			СтруктураЗаписи.ContrGTIN				= КлассСопоставления.НоменклатураСБИС.GTIN;
			//СтруктураЗаписи.ContrCharacteristic		= "";  Характеристик пока нет на онлайне
			
			Если Номенклатура.Значение.Характеристики.Количество() Тогда
				
				Для Каждого Характеристика Из Номенклатура.Значение.Характеристики Цикл
					
					ЗаписьСопоставления = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураЗаписи)); //Для каждой Номенклатура+Характеристика свои записи
					ЗаписьСопоставления.Id = ЗаписьСопоставления.Id + "#" + ИдХарактеристик.Получить(Характеристика);
					
					БазовыеЗаписи.Добавить(ЗаписьСопоставления);
					
				КонецЦикла;
				
			Иначе
				БазовыеЗаписи.Добавить(СтруктураЗаписи);
			КонецЕсли;
			
			Для Каждого ЗаписьСопоставления Из БазовыеЗаписи Цикл //Для каждой единицы пишем отдельную строку сопоставления
				
				Если КлассСопоставления.НоменклатураСБИС.Единицы.Количество() Тогда
					
					Для Каждого ЕдиницаПоставщика Из КлассСопоставления.НоменклатураСБИС.Единицы Цикл //Единица одна, но ключ неизвестен, поэтому цикл 
						
						Если Номенклатура.Значение.Единицы.Количество() Тогда
							
							Для Каждого Единица Из Номенклатура.Значение.Единицы Цикл 
								
								Если НЕ СопоставлениеИзменено(ИсходноеСопоставление, Единица) Тогда //ИсходноеСопоставление заполненяется только для единичного обновления, в массиве 1 элем
									Продолжить;
								КонецЕсли;
								
								НоваяЗаписьСопоставления = Новый Структура(Новый ФиксированнаяСтруктура(ЗаписьСопоставления)); 
						
								НоваяЗаписьСопоставления.MeasureUnitName		= Единица.Значение.Название;		
								НоваяЗаписьСопоставления.MeasureUnitCode		= Единица.Значение.ОКЕИ;
								НоваяЗаписьСопоставления.MeasureUnitQty			= Единица.Значение.Коэффициент;
								
								НоваяЗаписьСопоставления.ContrMeasureUnitCode	= ЕдиницаПоставщика.Значение.ОКЕИ;
								НоваяЗаписьСопоставления.ContrMeasureUnitName	= ЕдиницаПоставщика.Значение.Название;
								НоваяЗаписьСопоставления.ContrMeasureUnitQty	= ЕдиницаПоставщика.Значение.Коэффициент;
								
								ЗаписиСопоставлений.Добавить(НоваяЗаписьСопоставления);
								
							КонецЦикла; 
							
						Иначе
							НоваяЗаписьСопоставления = Новый Структура(Новый ФиксированнаяСтруктура(ЗаписьСопоставления));
							
							НоваяЗаписьСопоставления.ContrMeasureUnitCode	= ЕдиницаПоставщика.Значение.ОКЕИ;
							НоваяЗаписьСопоставления.ContrMeasureUnitName	= ЕдиницаПоставщика.Значение.Название;
							НоваяЗаписьСопоставления.ContrMeasureUnitQty	= ЕдиницаПоставщика.Значение.Коэффициент;
							
							ЗаписиСопоставлений.Добавить(НоваяЗаписьСопоставления);
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли Номенклатура.Значение.Единицы.Количество() Тогда
					
					Для Каждого Единица Из Номенклатура.Значение.Единицы Цикл 
						
						Если НЕ СопоставлениеИзменено(ИсходноеСопоставление, Единица) Тогда //ИсходноеСопоставление заполненяется только для единичного обновления, в массиве 1 элем
							Продолжить;
						КонецЕсли;
						
						НоваяЗаписьСопоставления = Новый Структура(Новый ФиксированнаяСтруктура(ЗаписьСопоставления)); 
						
						НоваяЗаписьСопоставления.MeasureUnitName			= Единица.Значение.Название;		
						НоваяЗаписьСопоставления.MeasureUnitCode			= Единица.Значение.ОКЕИ;
						НоваяЗаписьСопоставления.MeasureUnitQty				= Единица.Значение.Коэффициент;
						
						ЗаписиСопоставлений.Добавить(НоваяЗаписьСопоставления);
						
					КонецЦикла; 
					
				Иначе
					ЗаписиСопоставлений.Добавить(Новый Структура(Новый ФиксированнаяСтруктура(ЗаписьСопоставления)));				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтруктураЗаписи Из ЗаписиСопоставлений Цикл
		
		Для Каждого ЭлемСтруктуры Из СтруктураЗаписи Цикл
			
			Если ЭлемСтруктуры.Значение = Неопределено Тогда
				СтруктураЗаписи.Удалить(ЭлемСтруктуры.Ключ); //По требованиям онлайна значения должны быть заполнены
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыМетода = Новый Структура;	
	ПараметрыМетода.Вставить("Contractor", Новый Структура("Inn",ПараметрыОбновитьВходящие.Ключ));
	ПараметрыМетода.Вставить("Data", ЗаписиСопоставлений);
	
	Отказ				= Ложь;
	РезультатЗаписи = ДопПараметры.Кэш.Интеграция.ContractorNomenclatureCollation_MassUpdate(ДопПараметры.Кэш, ПараметрыМетода, Новый Структура("СообщатьПриОшибке",Истина),Отказ);
	                                                
	Если Отказ Тогда
		
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при записи сопоставлений: " + РезультатЗаписи,
													ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_МассовоеОбновлениеВызовМетода");
													
	ИначеЕсли РезультатЗаписи.Свойство("contragent_found") И НЕ РезультатЗаписи.contragent_found Тогда
													
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при записи сопоставлений: не найден контрагент с ИНН"+ПараметрыОбновитьВходящие.Ключ,
													ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_МассовоеОбновлениеВызовМетода");
		
	ИначеЕсли РезультатЗаписи.Свойство("errors") И РезультатЗаписи.errors.Количество() Тогда
		
		ТекстОшибки = "Ошибка при записи сопоставлений:";
		
		Для Каждого Ошибка Из РезультатЗаписи.errors Цикл			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Ошибка.Error;
		КонецЦикла;	
		
		МодульОбъектаКлиент().ВызватьСбисИсключение(ТекстОшибки, ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_МассовоеОбновлениеВызовМетода");

	КонецЕсли;											

КонецФункции

// ContractorNomenclatureCollation.MassDelete/2
//  - метод для удаления сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Удалить - Массив структур с полями для удаления по фильтру
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеУдаление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт 
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",		ПараметрыОбновитьВходящие.Номенклатура); 
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеУдалениеВызовМетода(ПараметрыЗаписиСервер, ДопПараметры.Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоставщика_ЕдиничноеУдаление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт 
	
	Попытка
		ПараметрыЗаписи = Новый Структура;
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписи.Вставить("Номенклатура",	МассивНоменклатуры);
		ПараметрыЗаписи.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеУдалениеВызовМетода(ПараметрыЗаписи, ДопПараметры);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_ЕдиничноеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция НоменклатураПоставщика_МассовоеУдалениеВызовМетода(ПараметрыОбновитьВходящие, ДопПараметры)
	
	МассивНоменклатуры	= Новый Массив; 
	ИдХарактеристик		= ИдХарактеристикСопоставлений(ПараметрыОбновитьВходящие.Номенклатура);
	
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл 
		
		Для Каждого Номенклатура Из КлассСопоставления.Номенклатура1С Цикл
			
			Если Номенклатура.Значение.Характеристики.Количество() Тогда
				
				Для Каждого Характеристика Из Номенклатура.Значение.Характеристики Цикл
					
					СтруктураЗаписи						= Новый Структура("Id, ContrCode, CodeType, ContrGTIN, ContrCharacteristic");		
					СтруктураЗаписи.ID					= Номенклатура.Значение.Идентификатор + "#" + ИдХарактеристик.Получить(Характеристика);
					СтруктураЗаписи.ContrCode			= КлассСопоставления.НоменклатураСБИС.Код;
					СтруктураЗаписи.CodeType			= КлассСопоставления.НоменклатураСБИС.ТипКода;
					СтруктураЗаписи.ContrGTIN 			= КлассСопоставления.НоменклатураСБИС.GTIN;			
					СтруктураЗаписи.ContrCharacteristic = КлассСопоставления.НоменклатураСБИС.Характеристика.Идентификатор;
					
					МассивНоменклатуры.Добавить(СтруктураЗаписи);

				КонецЦикла;
				
			Иначе
				
				СтруктураЗаписи						= Новый Структура("Id, ContrCode, CodeType, ContrGTIN, ContrCharacteristic");		
				СтруктураЗаписи.ID					= Номенклатура.Значение.Идентификатор;
				СтруктураЗаписи.ContrCode			= КлассСопоставления.НоменклатураСБИС.Код;
				СтруктураЗаписи.CodeType			= КлассСопоставления.НоменклатураСБИС.ТипКода;
				СтруктураЗаписи.ContrGTIN 			= КлассСопоставления.НоменклатураСБИС.GTIN;			
				СтруктураЗаписи.ContrCharacteristic = КлассСопоставления.НоменклатураСБИС.Характеристика.Идентификатор; //Сейчас характеристики на онлайне не работают, но когда-нибудь..
				
				МассивНоменклатуры.Добавить(СтруктураЗаписи);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;	
	
	ПараметрыМетода = Новый Структура;	
	ПараметрыМетода.Вставить("Contractor",Новый Структура("Inn",ПараметрыОбновитьВходящие.Ключ));
	ПараметрыМетода.Вставить("Data",МассивНоменклатуры);
	
	Отказ = Ложь;
	РезультатУдаления = ДопПараметры.Кэш.Интеграция.ContractorNomenclatureCollation_MassDelete(ДопПараметры.Кэш, ПараметрыМетода, Новый Структура("СообщатьПриОшибке",Истина),Отказ);
	
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при удалении сопоставлений со СБИС: " + РезультатУдаления,
													ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_МассовоеУдалениеВызовМетода");		
	КонецЕсли;
												
	
КонецФункции

// ContractorNomenclatureCollation.MassFind/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура - Массив классов
//  ДопПараметры							 - Структура
//
&НаКлиенте
Функция НоменклатураПоставщика_МассовыйПоиск(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт

	НоменклатураКлючи1С = Новый Массив;
	НоменклатураКлючиСБИС = Новый Массив;
	
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		Если ЗначениеЗаполнено(КлассСопоставления.НоменклатураСБИС.Код) ИЛИ ЗначениеЗаполнено(КлассСопоставления.НоменклатураСБИС.GTIN) Тогда
			НоменклатураКлючиСБИС.Добавить(КлассСопоставления);
		Иначе
			НоменклатураКлючи1С.Добавить(КлассСопоставления);
		КонецЕсли;
	КонецЦикла;
	
	Если НоменклатураКлючиСБИС.Количество() Тогда
		Попытка
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("Номенклатура",	НоменклатураКлючиСБИС);
			ПараметрыЗаписи.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));
			НоменклатураКлючиСБИС = НоменклатураПоставщика_ОбогатитьПоКлючамСБИС(ПараметрыЗаписи, ДопПараметры);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_МассовыйПоиск");
		КонецПопытки;
	КонецЕсли;
	
	Если НоменклатураКлючи1С.Количество() Тогда
		Попытка
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("Номенклатура",	НоменклатураКлючи1С);
			ПараметрыЗаписи.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));
			НоменклатураКлючи1С = НоменклатураПоставщика_ОбогатитьПоКлючам1С(ПараметрыЗаписи, ДопПараметры);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_МассовыйПоиск");
		КонецПопытки;
	КонецЕсли;
	
		
	//Склеить ответы
	Для Каждого Номенклатура Из НоменклатураКлючи1С Цикл
		НоменклатураКлючиСБИС.Добавить(Номенклатура);	
	КонецЦикла;
	
	Возврат НоменклатураКлючиСБИС;
	
КонецФункции

&НаКлиенте
Функция НоменклатураПоставщика_ЕдиничныйПоиск(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт 
	
	Попытка
		ПараметрыЗаписи = Новый Структура;
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписи.Вставить("Номенклатура",	МассивНоменклатуры);
		ПараметрыЗаписи.Вставить("Контрагент",			ПараметрыОбновитьВходящие.Контрагент);		
		Возврат	НоменклатураПоставщика_МассовыйПоиск(ПараметрыЗаписи, ДопПараметры);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_СБИС.НоменклатураПоставщика_ЕдиничныйПоиск");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция	НоменклатураПоставщика_ОбогатитьПоКлючамСБИС(ПараметрыОбновитьВходящие, ДопПараметры) 
	
	МассивНоменклатуры = Новый Массив; 
		
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		Для Каждого ЕдиницаПоставщика Из КлассСопоставления.НоменклатураСБИС.Единицы Цикл
			
			СтруктураЗаписи = Новый Структура("DocumentId, ContrCode, CodeType, ContrCharacteristic, ContrGTIN, ContrMeasureUnitCode, ContrMeasureUnitName");		
			СтруктураЗаписи.ContrCode				= КлассСопоставления.НоменклатураСБИС.Код;
			СтруктураЗаписи.CodeType				= КлассСопоставления.НоменклатураСБИС.ТипКода;
			СтруктураЗаписи.ContrCharacteristic		= КлассСопоставления.НоменклатураСБИС.Характеристика.Наименование; //онлайн не поддерживает
			СтруктураЗаписи.ContrGTIN				= КлассСопоставления.НоменклатураСБИС.GTIN; 
						
			Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
				СтруктураЗаписи.DocumentId					= КлассСопоставления.ИдентификаторДокумента;
			КонецЕсли;
	 
			СтруктураЗаписи.ContrMeasureUnitCode	= ЕдиницаПоставщика.Значение.ОКЕИ;
			СтруктураЗаписи.ContrMeasureUnitName	= ЕдиницаПоставщика.Значение.Название; 
		
			МассивНоменклатуры.Добавить(СтруктураЗаписи);
			
		КонецЦикла;
			
	КонецЦикла;	
	
	ПараметрыМетода = Новый Структура;	
	ПараметрыМетода.Вставить("Contractor",Новый Структура("Inn",ПараметрыОбновитьВходящие.Ключ));
	ПараметрыМетода.Вставить("Data",МассивНоменклатуры);	

	Отказ = Ложь;
	ДанныеСопоставлений = ДопПараметры.Кэш.Интеграция.ContractorNomenclatureCollation_SearchByContractorData(ДопПараметры.Кэш, ПараметрыМетода, Новый Структура("СообщатьПриОшибке",Истина),Отказ);
	
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при запросе сопоставлений со СБИС: " + ДанныеСопоставлений, ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_ОбогатитьПоКлючамСБИС");	
	КонецЕсли;
	
	ОбогатитьОтветСсылками(ДанныеСопоставлений, ДопПараметрыСервер());
	
	НоменклатураПоставщика_ОбогатитьДаннымиПоКлючамСБИС(ПараметрыОбновитьВходящие.Номенклатура, ДанныеСопоставлений, ДопПараметры);
	
	Возврат ПараметрыОбновитьВходящие.Номенклатура;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПоставщика_ОбогатитьДаннымиПоКлючамСБИС(КлассыСопоставлений, ДанныеСопоставлений, ДопПараметры)

	Для Каждого СопоставлениеОнлайн Из ДанныеСопоставлений Цикл
		
		Для Каждого КлассСопоставления Из КлассыСопоставлений Цикл
			
			Если КлассСопоставления.НоменклатураСБИС.Код = СопоставлениеОнлайн.ContrCode
					ИЛИ (СопоставлениеОнлайн.Свойство("ContrGTIN")
					И КлассСопоставления.НоменклатураСБИС.GTIN = СопоставлениеОнлайн.ContrGTIN) Тогда //Добавить условие по характеристике, когда она будет
				
				 //Заполним класс данными
				ДанныеЗаполнения = Новый Структура("Номенклатура, GTIN, Идентификатор, Характеристика1С, ЕдИзм1С");
				//ДанныеЗаполнения.GTIN		=  //Его нет в ответе
				ДанныеЗаполнения.Номенклатура			= СопоставлениеОнлайн.Ссылка;
                ДанныеЗаполнения.Идентификатор			= СопоставлениеОнлайн.Id;
				//ДанныеЗаполнения.Характеристика1С		= //Онлайн не поддерживает
				ДанныеЗаполнения.ЕдИзм1С				= ДанныеЗаполненияMeasureUnit(СопоставлениеОнлайн);
				
				МодульОбъектаКлиент().ОписаниеНоменклатуры1СКлиент_Заполнить(КлассСопоставления, ДанныеЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаполненияMeasureUnit(Сопоставление, ДопПараметры = Неопределено)
	
	ДанныеЗаполнения = Новый Массив;
	
	Если ЗначениеЗаполнено(Сопоставление.MeasureUnit) Тогда
		Для Каждого ЕдиницаИзмерения Из Сопоставление.MeasureUnit Цикл
			
			ДанныеЗаполненияЕдиницы = Новый Структура("ЕдИзм1С, ОКЕИ_1С, Коэффициент1С, ЕдИзмНаименование1С, Номенклатура");	
			ДанныеЗаполненияЕдиницы.ЕдИзм1С				= ЕдиницаИзмерения.Ссылка;
			ДанныеЗаполненияЕдиницы.ОКЕИ_1С				= ЕдиницаИзмерения.MeasureUnitCode; 
			ДанныеЗаполненияЕдиницы.Коэффициент1С		= ЕдиницаИзмерения.MeasureUnitQty;
			ДанныеЗаполненияЕдиницы.ЕдИзмНаименование1С	= ЕдиницаИзмерения.MeasureUnitName;
			ДанныеЗаполненияЕдиницы.Номенклатура		= Сопоставление.Ссылка;
			
			ДанныеЗаполнения.Добавить(ДанныеЗаполненияЕдиницы);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения
	
КонецФункции

&НаКлиенте
Функция СопоставлениеИзменено(Сопоставление, Элемент)

	Если Сопоставление = Неопределено Тогда
		Возврат Истина; //Новое сопоставление созданное вручную
	КонецЕсли;
	
	Если Элемент.Значение._класс = "СопоставлениеДляЕдиницы" Тогда
		
		ОписаниеНоменклатуры1С = Сопоставление.Номенклатура1С.Получить(Элемент.Значение.Владелец);
		
		Если ОписаниеНоменклатуры1С = Неопределено Тогда
			Возврат Истина; //Единица новой номенклатуры 
		КонецЕсли;
		
		ОписаниеЕдиницы = ОписаниеНоменклатуры1С.Единицы.Получить(Элемент.Значение);
		
		Если ОписаниеЕдиницы = Неопределено Тогда
			Возврат Истина; //Новая Единица 			
		КонецЕсли;
		
		//Изменена единица. Что с этим делать непонятно, на онлайне нельзя изменить/удалить единицу. 
		//Если НЕ ОписаниеЕдиницы.Коэффициент = Элемент.Значение.Коэффициент ИЛИ
		//	 НЕ ОписаниеЕдиницы.ОКЕИ = Элемент.Значение.ОКЕИ				 ИЛИ 
		//   НЕ ОписаниеЕдиницы.Название = Элемент.Значение.Название		 Тогда
		//	Возврат Истина;  
		//КонецЕсли;
		
	ИначеЕсли Элемент.Значение._класс = "ОписаниеНоменклатуры1С" Тогда 
		ОписаниеНоменклатуры1С = Сопоставление.Номенклатура1С.Получить(Элемент.Ключ);
		
		Если ОписаниеНоменклатуры1С = Неопределено Тогда
			Возврат Истина; //Новая номенклатура
		КонецЕсли;
		
		Если НЕ ОписаниеНоменклатуры1С.GTIN = Элемент.Значение.GTIN ИЛИ НЕ ОписаниеНоменклатуры1С.Идентификатор = Элемент.Значение.Идентификатор Тогда  
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		МодульОбъектаКлиент().ВызватьСбисИсключение("Недопустимое значение параметра функции Элемент", "СопоставлениеНоменклатуры_СБИС.СопоставлениеИзменено");
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция	НоменклатураПоставщика_ОбогатитьПоКлючам1С(ПараметрыОбновитьВходящие, ДопПараметры)
	
	ДопПараметрыСервер	= ДопПараметрыСервер();	
	МассивНоменклатуры	= Новый Массив; 
	ИдХарактеристик		= ИдХарактеристикСопоставлений(ПараметрыОбновитьВходящие.Номенклатура);
	
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		Для Каждого Номенклатура1С Из КлассСопоставления.Номенклатура1С Цикл
			
			Если Номенклатура1С.Значение.Единицы.Количество() Тогда
				
				Для Каждого Единица Из Номенклатура1С.Значение.Единицы Цикл 
					
					Если Номенклатура1С.Значение.Характеристики.Количество() Тогда 
						
						Для Каждого Характеристика Из Номенклатура1С.Значение.Характеристики Цикл
							
							СтруктураЗаписи = Новый Структура("DocumentId, Id, MeasureUnitName, MeasureUnitCode");
							
							Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
								СтруктураЗаписи.DocumentId	= КлассСопоставления.ИдентификаторДокумента;
							КонецЕсли;
							
							СтруктураЗаписи.ID				= Номенклатура1С.Значение.Идентификатор + "#" + ИдХарактеристик.Получить(Характеристика); 
							СтруктураЗаписи.MeasureUnitCode	= Единица.Значение.ОКЕИ; 
							СтруктураЗаписи.MeasureUnitName	= Единица.Значение.Название; 
							МассивНоменклатуры.Добавить(СтруктураЗаписи);
							
						КонецЦикла;
						
					Иначе
						
						СтруктураЗаписи = Новый Структура("DocumentId, Id, MeasureUnitName, MeasureUnitCode");
						
						Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
							СтруктураЗаписи.DocumentId					= КлассСопоставления.ИдентификаторДокумента;
						КонецЕсли;
						
						СтруктураЗаписи.ID				= Номенклатура1С.Значение.Идентификатор; 
						СтруктураЗаписи.MeasureUnitCode	= Единица.Значение.ОКЕИ; 
						СтруктураЗаписи.MeasureUnitName	= Единица.Значение.Название; 
						МассивНоменклатуры.Добавить(СтруктураЗаписи);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если Номенклатура1С.Значение.Характеристики.Количество() Тогда 
					
					Для Каждого Характеристика Из Номенклатура1С.Значение.Характеристики Цикл
						
						СтруктураЗаписи = Новый Структура("DocumentId, Id, MeasureUnitName, MeasureUnitCode");
						
						Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
							СтруктураЗаписи.DocumentId	= КлассСопоставления.ИдентификаторДокумента;
						КонецЕсли;
						
						СтруктураЗаписи.ID				= Номенклатура1С.Значение.Идентификатор + "#" + ИдХарактеристик.Получить(Характеристика); 
						МассивНоменклатуры.Добавить(СтруктураЗаписи);
						
					КонецЦикла;
					
				Иначе
					
					
					СтруктураЗаписи = Новый Структура("DocumentId, Id, MeasureUnitName, MeasureUnitCode");
					
					Если КлассСопоставления.Свойство("ИдентификаторДокумента") Тогда		
						СтруктураЗаписи.DocumentId					= КлассСопоставления.ИдентификаторДокумента;
					КонецЕсли;
					
					СтруктураЗаписи.ID				= Номенклатура1С.Значение.Идентификатор; 
					МассивНоменклатуры.Добавить(СтруктураЗаписи);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	ПараметрыМетода = Новый Структура;	
	ПараметрыМетода.Вставить("Contractor",Новый Структура("Inn",ПараметрыОбновитьВходящие.Ключ));
	ПараметрыМетода.Вставить("Data",МассивНоменклатуры);
	
	Отказ				= Ложь;
	ДанныеСопоставлений = ДопПараметры.Кэш.Интеграция.ContractorNomenclatureCollation_SearchByOwnerData(ДопПараметры.Кэш, ПараметрыМетода, Новый Структура("СообщатьПриОшибке",Истина),Отказ);
	
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при чтении сопоставлений со СБИС: " + ДанныеСопоставлений,
						ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_ОбогатитьПоКлючам1С");	
	КонецЕсли;
	
	ОбогатитьОтветСсылками(ДанныеСопоставлений, ДопПараметрыСервер());
	
	Для Каждого КлассСопоставления Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		Для Каждого СопоставлениеОнлайн Из ДанныеСопоставлений Цикл
			Если НЕ КлассСопоставления.Номенклатура1С.Получить(СопоставлениеОнлайн.Ссылка) = Неопределено Тогда
				
				КлассСопоставления.НоменклатураСБИС.Наименование	= СопоставлениеОнлайн.ContrName;
				КлассСопоставления.НоменклатураСБИС.Код				= СопоставлениеОнлайн.ContrCode;
				КлассСопоставления.НоменклатураСБИС.ТипКода			= СопоставлениеОнлайн.CodeType;
				КлассСопоставления.НоменклатураСБИС.GTIN			= СопоставлениеОнлайн.ContrGTIN;
				
				Если СопоставлениеОнлайн.Свойство("ContrMeasureUnitCode") Тогда
					ДанныеЗаполненияЕдиницы				= Новый Структура("ОКЕИ, Название, Коэффициент");
					ДанныеЗаполненияЕдиницы.ОКЕИ		= СопоставлениеОнлайн.ContrMeasureUnitCode;
					ДанныеЗаполненияЕдиницы.Название	= СопоставлениеОнлайн.ContrMeasureUnitName;
					ДанныеЗаполненияЕдиницы.Коэффициент = СопоставлениеОнлайн.ContrMeasureUnitQty;
					
					МодульОбъектаКлиент().СопоставлениеДляЕдиницыКлиент_ЗаполнитьСБИС(КлассСопоставления,ДанныеЗаполненияЕдиницы);	
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПараметрыОбновитьВходящие.Номенклатура;
	
КонецФункции

//ContractorNomenclatureCollation.List/3
//метод для массовой вычитки сопоставлений номенклатурных позиций контрагентов со своей номенклатурой и данных внешней системы.
//Метод возвращает список с данными о сопоставленных позициях, отсортированных в порядке возрастания по ContrName
//Параметры списка структура с полями Контрагент, Навигация, Фильтр
&НаКлиенте
Функция НоменклатураПоставщика_Список(ПараметрыСписка, ДопПараметры) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Contractor",Новый Структура("Inn",КлючКонтрагентаСопоставления(ПараметрыСписка.Контрагент)));
	ПараметрыМетода.Вставить("Navigation",Новый Структура("PageSize, PageNumber", ПараметрыСписка.Навигация.РазмерСтраницы, Число(ПараметрыСписка.Навигация.Страница)-1));
	
	ДопПараметрыСервер =  ДопПараметрыСервер();

	стрФильтр = Новый Структура;
	Если ПараметрыСписка.Свойство("Фильтр") Тогда
		
		Если ПараметрыСписка.Фильтр.Свойство("Номенклатура") И ЗначениеЗаполнено(ПараметрыСписка.Фильтр.Номенклатура) Тогда
			стрФильтр.Вставить("Id",КлючНоменклатурыСопоставления(ПараметрыСписка.Фильтр.Номенклатура, ДопПараметрыСервер));
		КонецЕсли;
		
		Если ПараметрыСписка.Фильтр.Свойство("НаименованиеСБИС") И ЗначениеЗаполнено(ПараметрыСписка.Фильтр.НаименованиеСБИС) Тогда
			стрФильтр.Вставить("ContrName",ПараметрыСписка.Фильтр.НаименованиеСБИС);
		КонецЕсли;
		
		Если ПараметрыСписка.Фильтр.Свойство("GTIN") И ЗначениеЗаполнено(ПараметрыСписка.Фильтр.GTIN) И НЕ ПараметрыСписка.Фильтр.GTIN = "Нет" Тогда
			стрФильтр.Вставить("ContrGTIN",ПараметрыСписка.Фильтр.GTIN);
		КонецЕсли;
		
		Если ПараметрыСписка.Фильтр.Свойство("ИдСБИС") И ЗначениеЗаполнено(ПараметрыСписка.Фильтр.ИдСБИС) Тогда
			стрФильтр.Вставить("ContrCode",ПараметрыСписка.Фильтр.ИдСБИС);
		КонецЕсли;
		
	КонецЕсли;

	ПараметрыМетода.Вставить("Filter",стрФильтр);
	Отказ				= Ложь;
	ДанныеСопоставлений = ДопПараметры.Кэш.Интеграция.ContractorNomenclatureCollation_List(	ДопПараметры.Кэш,
																							ПараметрыМетода, 
																							Новый Структура("СообщатьПриОшибке",Истина),
																							Отказ);
	
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение("Ошибка при чтении сопоставлений со СБИС: " + ДанныеСопоставлений,
													ДопПараметры.Кэш.ФормаРаботыСНоменклатурой + ".НоменклатураПоставщика_Список");												
	КонецЕсли;

	Результат = ПреобразоватьОтветОнлайна(ДанныеСопоставлений);	
	
	Возврат Результат;
	
КонецФункции

