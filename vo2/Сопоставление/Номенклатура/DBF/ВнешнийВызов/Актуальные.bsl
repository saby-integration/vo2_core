
// ContractorNomenclatureCollation.MassUpdate/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Обновить	- Массив структур с полями Номенклатура, Единица, Характеристика
//			Удалить		- Массив структура с полями для удаления по фильтру
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеОбновление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеОбновлениеСервер(ПараметрыЗаписиСервер);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НоменклатураПоставщика_МассовоеОбновлениеСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	НаборЗаписейДБФ	= НовыйНаборЗаписейДБФ(СоединениеСДБФ);
	
	// Номенклатура и характеристика
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		Если	СтрНоменклатураПоставщика.Свойство("НеобходимоСопоставление")
			И	НЕ СтрНоменклатураПоставщика.НеобходимоСопоставление Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НовыйНаборЗаписейДБФ_СформироватьНабор(НаборЗаписейДБФ, СтрНоменклатураПоставщика);
		
	КонецЦикла;
	
	НаборЗаписейДБФ_Записать(НаборЗаписейДБФ);
	
КонецФункции	

// ContractorNomenclatureCollation.MassFind/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Найти		- Массив структур с полями Номенклатура, Единица, Характеристика
//  ДопПараметры							 - Структура
//
&НаКлиенте
Функция НоменклатураПоставщика_МассовыйПоиск(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Ключ", КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));
		Если ПараметрыОбновитьВходящие.Свойство("ПоискПо1С") Тогда
			ПараметрыЗаписиСервер.Вставить("ПоискПо1С", ПараметрыОбновитьВходящие.ПоискПо1С);
		КонецЕсли;
		НоменклатураПоставщика_ОбогатитьЗаписиСервер(ПараметрыОбновитьВходящие.Номенклатура, ПараметрыЗаписиСервер);
		Возврат ПараметрыОбновитьВходящие.Номенклатура;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецФункции

// ContractorNomenclatureCollation.MassFind/2
//  - метод для записи / обновления сопоставлений. Во внешней обработке вызывается при загрузке документа после ручного или автоматического указания сопоставлений на форме входящего документа и форме редактирования сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Структура
//			Найти		- Массив структур с полями Номенклатура, Единица, Характеристика
//  ДопПараметры							 - Структура
//
&НаКлиенте
Функция НоменклатураПоставщика_Список(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыСпискаСервер = Новый Структура;
		ПараметрыСпискаСервер.Вставить("Ключ",		КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		ПараметрыСпискаСервер.Вставить("Навигация",	ПараметрыОбновитьВходящие.Навигация);
		ПараметрыСпискаСервер.Вставить("Фильтр",	ПараметрыОбновитьВходящие.Фильтр);

		ДопПараметрыСервер = Новый Структура("ТипыПолей1С", МодульОбъектаКлиент().ПолучитьЗначениеПараметраТекущегоСеанса("ТипыПолей1С"));
		
		Возврат НоменклатураПоставщика_СписокСервер(ПараметрыСпискаСервер, ДопПараметрыСервер);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецФункции

&НаСервере
//
// Параметры:
//  ПараметрыСписка				 - Структра
//		Навигация	- Структура	- 
//			Размер			- Число - Размрность списка
//			Страница(Н)		- Число - Позиция для постраничной навигации
//			Идентификатор(Н)- Строка- Значение поля ID, от которого идет навигация
//  ДопПараметры	 - 	Структура - Дополнительные параметры
//
Функция	НоменклатураПоставщика_СписокСервер(ПараметрыСписка, ДопПараметры)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыСписка.Ключ));
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);

	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	ФильтрНаименованиеСБИС 	= ПараметрыСписка.Фильтр.НаименованиеСБИС;
	
	НомерСтраницыНавигации	= Число(ПараметрыСписка.Навигация.Страница);
	РазмерСтраницыНавигации	= Число(ПараметрыСписка.Навигация.РазмерСтраницы);
	Попытка
		ШаблонЗапроса = "Select {top} NSB_ID, NSB_TYID, NSB_NM from {base_sbis} {where} ORDER BY NSB_NM";
		Если ЗначениеЗаполнено(ФильтрНаименованиеСБИС) Тогда
			ЧислоПропустить	= 0;
			РазмерВыборки	= РазмерСтраницыНавигации;
			ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса, "{where}", "where UCase({base_sbis}.NSB_NM) LIKE UCase('%" + ФильтрНаименованиеСБИС + "%')");
		Иначе
			Если НомерСтраницыНавигации Тогда
				ЧислоПропустить	= Число(ПараметрыСписка.Навигация.РазмерСтраницы) * (НомерСтраницыНавигации - 1);
			Иначе
				ЧислоПропустить = 0;
			КонецЕсли;
			РазмерВыборки	= ЧислоПропустить + ПараметрыСписка.Навигация.РазмерСтраницы;
			ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса, "{where}", "");
		КонецЕсли;	
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключение(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер", 760, "Неверные параметры фильтра");
	КонецПопытки;
	РазмерВыборки = РазмерВыборки + 1;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{top}",		"top " + Формат(РазмерВыборки, "ЧДЦ=0; ЧГ=0"));
		
	РезультатСписка = Новый Структура("Навигация, Список", Новый Структура("ЕстьЕще", Ложь), Новый Массив);
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
 	Recordset.CursorLocation = 3;
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключение(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	СоответствиеПозицийИдСБИС	= Новый Соответствие;
	СоответствиеПозицийСсылка1С	= Новый Соответствие;
	СписокКлючей				= "";
	СчетчикПозиций				= 0;
	МодульКлассаСервер			= МодульОбъектаСервер();
	Пока Не Recordset.EOF Цикл
		СчетчикПозиций = СчетчикПозиций + 1;
		// Для постраничной навигации часть позиций должна быть пропущена
		Если СчетчикПозиций < ЧислоПропустить Тогда
			Recordset.MoveNext();
			Продолжить;
		ИначеЕсли СчетчикПозиций = РазмерВыборки Тогда
			РезультатСписка.Навигация.ЕстьЕще = Истина;
			Прервать;
		КонецЕсли;
		СтрокаСопоставленияСБИС = МодульКлассаСервер.НовыйСтрокаСопоставленияСБИССервер();
		КодНоменклатурыСБИС		= ПолучитьЗначениеИзРекордСет(Recordset, "NSB_ID");
		ТипКодаНоменклатурыСБИС	= ПолучитьЗначениеИзРекордСет(Recordset, "NSB_TYID");
		ИмяНоменклатурыСБИС		= ПолучитьЗначениеИзРекордСет(Recordset, "NSB_NM");
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "Код",				КодНоменклатурыСБИС);
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "ТипКода",			ТипКодаНоменклатурыСБИС);
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "Наименование",		ИмяНоменклатурыСБИС);
		
		СоответствиеПозицийИдСБИС.Вставить(КодНоменклатурыСБИС, СтрокаСопоставленияСБИС);
		РезультатСписка.Список.Добавить(СтрокаСопоставленияСБИС);
		
		СписокКлючей = СписокКлючей + "'" + КодНоменклатурыСБИС + "',";
		
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	// Запрос номенклатуры и характеристики
	Если Не ЗначениеЗаполнено(СписокКлючей) Тогда
		
		Возврат РезультатСписка;
		
	КонецЕсли;
		
	СписокКлючей = "(" + Лев(СписокКлючей, СтрДлина(СписокКлючей)-1) + ")";
	
	ШаблонЗапроса = "Select * from {base_1C} where {base_1C}.KEY_ID IN {СписокКлючей} ORDER BY KEY_ID";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_1C}",			ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{СписокКлючей}",	СписокКлючей);
	
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключение(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	Пока Не Recordset.EOF Цикл
		
		СтрокаСопоставленияСБИС = СоответствиеПозицийИдСБИС.Получить(ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID"));
		ОписаниеНоменклатуры1С	= МодульКлассаСервер.НовыйОписаниеНоменклатуры1ССервер();
		СсылкаНоменклатура1С	= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "N1C_TY", "N1C_ID");
		
		// Заполнить класс строки 1С в соответствие по ссылке, туда мы заполним единицы.
		Если ЗначениеЗаполнено(СсылкаНоменклатура1С) Тогда
			УИДКлюч = СсылкаНоменклатура1С.УникальныйИдентификатор();
			СоответствиеПоПозиции1С	= СоответствиеПозицийСсылка1С.Получить(УИДКлюч);
			Если СоответствиеПоПозиции1С = Неопределено Тогда
				СоответствиеПоПозиции1С = Новый Массив;
				СоответствиеПозицийСсылка1С.Вставить(УИДКлюч, СоответствиеПоПозиции1С);
			КонецЕсли;
			СоответствиеПоПозиции1С.Добавить(ОписаниеНоменклатуры1С);
		КонецЕсли;
		
		МодульКлассаСервер.ОписаниеНоменклатуры1ССервер_Вставить(ОписаниеНоменклатуры1С, "GTIN",			ПолучитьЗначениеИзРекордСет(Recordset, "GTIN"));
		
		Характеристика1С = ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "CHR1C_TY", "CHR1C_ID");
		Если ЗначениеЗаполнено(Характеристика1С) Тогда
			МодульКлассаСервер.ОписаниеНоменклатуры1ССервер_Вставить(ОписаниеНоменклатуры1С, "Характеристика",	Характеристика1С);
		КонецЕсли;
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, СсылкаНоменклатура1С, ОписаниеНоменклатуры1С);
		
		Recordset.MoveNext();
		
	КонецЦикла;
	
	Recordset.Close();

	// Запрос единиц
	ШаблонЗапроса = "Select * from {base_unit} where {base_unit}.KEY_ID IN {СписокКлючей} ORDER BY KEY_ID";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{base_unit}",		ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{СписокКлючей}",	СписокКлючей);
	
	Попытка
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключение(ИнформацияОбОшибке(), "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_СписокСервер");
	КонецПопытки;
	
	Пока Не Recordset.EOF Цикл
		
		СтрокаСопоставленияСБИС	= СоответствиеПозицийИдСБИС.Получить(ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID"));
		Если СтрокаСопоставленияСБИС = Неопределено Тогда
			
			// Не известно, почему по ключу нет строк записей. Пока скип.
			Recordset.MoveNext();
			Продолжить;
			
		КонецЕсли;
		
		СопоставлениеДляЕдиницыСервер = МодульКлассаСервер.НовыйСопоставлениеДляЕдиницыСервер();
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Коэффициент",	ПолучитьЗначениеИзРекордСет(RecordSet, "RATIO"));
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "ОКЕИ",		ПолучитьЗначениеИзРекордСет(RecordSet, "OKEY"));
		МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Название",	ПолучитьЗначениеИзРекордСет(RecordSet, "UNTSB_NM"));
		
		ЗначениеЕдиницы = ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "UNT1C_TY", "UNT1C_ID");
		Если ЗначениеЗаполнено(ЗначениеЕдиницы) Тогда
			МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Ссылка",	ЗначениеЕдиницы);
		КонецЕсли;
		
		ЗначениеВладельцаЕдиницы = ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "UOW1C_TY", "UOW1C_ID");
		Если ЗначениеЗаполнено(ЗначениеВладельцаЕдиницы) Тогда
			МодульКлассаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницыСервер, "Владелец", ЗначениеВладельцаЕдиницы);
		КонецЕсли;
		
		МодульКлассаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаСопоставленияСБИС, "Единица", СопоставлениеДляЕдиницыСервер);

		Recordset.MoveNext();
		
	КонецЦикла;
	
	Возврат РезультатСписка;
	
КонецФункции

&НаСервере
Процедура	НоменклатураПоставщика_ОбогатитьЗаписиСервер(НоменклатураОбогатить, ПараметрыОбновитьВходящие)
	Перем ПредыдущийИД1, ПоискПо1С;
	
	МодульОбъектаСервер = МодульОбъектаСервер();

	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	СоединениеБД	= МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
	
	ПараметрыОбновитьВходящие.Свойство("ПоискПо1С", ПоискПо1С);

	// Номенклатура и характеристика
	СписокКлючейСБИС	= "";
	СписокGTINСБИС		= "";
	СписокКлючей1С		= "";
	СоответствиеСтрокиОбогатить = Новый Соответствие;
	Для Каждого СтрНоменклатураПоставщика Из НоменклатураОбогатить Цикл
		
		СписокGTINСБИС = СписокGTINСБИС + "'" + СтрНоменклатураПоставщика.НоменклатураСБИС.GTIN + "',"; 
		
		СопоставленнаяНоменклатура1С	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "Номенклатура1С");
		ЗаписьДБФ						= НовыйЗаписьДБФСБИС(СоединениеСДБФ, СтрНоменклатураПоставщика);//Поиск по данным СБИС
		КлючЗаписи						= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФ);//Получить ключ таблиц для поиска
		
		Если	ЗначениеЗаполнено(ПоискПо1С)
			И	ЗначениеЗаполнено(СопоставленнаяНоменклатура1С)	 Тогда
			
			Для Каждого КлючИЗначение Из СопоставленнаяНоменклатура1С Цикл
				
				КлючПоиска = Строка(КлючИЗначение.Ключ.УникальныйИдентификатор());
				СписокКлючей1С = СписокКлючей1С + "'" + КлючПоиска + "',";
				СоответствиеСтрокиОбогатить.Вставить(КлючПоиска, СтрНоменклатураПоставщика);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючЗаписи) Тогда
				
			СтрокиПоКлючу = СоответствиеСтрокиОбогатить.Получить(КлючЗаписи);
			Если СтрокиПоКлючу = Неопределено Тогда
				СписокКлючейСБИС	= СписокКлючейСБИС + "'" + КлючЗаписи + "',";
				СтрокиПоКлючу		= Новый Массив;
				СоответствиеСтрокиОбогатить.Вставить(КлючЗаписи, СтрокиПоКлючу);
			КонецЕсли;
			СтрокиПоКлючу.Добавить(СтрНоменклатураПоставщика);
			
		КонецЕсли;
		
		Если МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "ТипКода") = "Артикул" Тогда
			// Возможно что после переконвертации артикула как ИД нет, значит добавить в поиск Наименование как ключ для доп. поиска.
			КлючЗаписи		= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрНоменклатураПоставщика, "Наименование");
			КлючЗаписи		= СбисИдентификатор(Лев(СокрЛП(КлючЗаписи),240));
			СтрокиПоКлючу	= СоответствиеСтрокиОбогатить.Получить(КлючЗаписи);
			Если СтрокиПоКлючу = Неопределено Тогда
				СписокКлючейСБИС	= СписокКлючейСБИС + "'" + КлючЗаписи + "',";
				СтрокиПоКлючу		= Новый Массив;
				СоответствиеСтрокиОбогатить.Вставить(КлючЗаписи, СтрокиПоКлючу);
			КонецЕсли;
			СтрокиПоКлючу.Добавить(СтрНоменклатураПоставщика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обогатить по ключам СБИС
	Если ЗначениеЗаполнено(СписокКлючейСБИС) Тогда
		ОписаниеФайлБДЕдиницы		= СоединениеСДБФ.Файлы.Получить("Единицы");
		ОписаниеФайлБДНоменклатура	= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
		
		СписокКлючейСБИС	= Лев(СписокКлючейСБИС, СтрДлина(СписокКлючейСБИС)-1);
		СписокGTINСБИС		= Лев(СписокGTINСБИС, СтрДлина(СписокGTINСБИС)-1);
		
		ШаблонЗапроса = ОписаниеФайлБДНоменклатура.Шаблоны.МассовыйПоиск;	
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{KEY_ID_LIST}",	СписокКлючейСБИС);
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "{GTIN_LIST}",	СписокGTINСБИС);
		
		ШаблонЗапросаЕдиниц = ОписаниеФайлБДЕдиницы.Шаблоны.МассовыйПоиск;
		ШаблонЗапросаЕдиниц = СтрЗаменить(ШаблонЗапросаЕдиниц, "{KEY_ID_LIST}",	СписокКлючейСБИС);
		
		RecordSet = Новый ComОбъект("ADODB.Recordset");
		Recordset.CursorLocation = 3;
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
		
		RecordSet2 = Новый ComОбъект("ADODB.Recordset");
		RecordSet2.CursorLocation = 3;
		RecordSet2.Open(ШаблонЗапросаЕдиниц, СоединениеБД, 2, 3);
		RecordSetUnitEmpty = RecordSet2.EOF И RecordSet2.BOF;
		
		Пока Не Recordset.EOF Цикл
			ТекущийИд1 = ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID"); // ИД текущей номенклатуры СБИС
			Если Не ПредыдущийИД1 = ТекущийИд1 Тогда
				СтрокиЗаполнить	= СоответствиеСтрокиОбогатить.Получить(ТекущийИд1);
			КонецЕсли;
			
			ТекущийИд2 = ПолучитьЗначениеИзРекордСет(Recordset, "N1C_ID"); // ИД текущей номенклатуры 1С
			Если ЗначениеЗаполнено(ТекущийИд2) Тогда
				// Восстановить ссылки на номенклатуру 1С
				СсылкаНоменклатура		= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "N1C_TY", "N1C_ID");
				СсылкаХарактеристика	= ВосстановитьСсылкуИзСтрокиДБФ(RecordSet, "CHR1C_TY", "CHR1C_ID");
				Если ЗначениеЗаполнено(СсылкаНоменклатура) Тогда
					Для Каждого СтрокаЗаполнить Из СтрокиЗаполнить Цикл
						
						СтрокаНоменклатураЗаполнить = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаЗаполнить, СсылкаНоменклатура);
						
						Если СтрокаНоменклатураЗаполнить = Неопределено Тогда
							
							СтрокаНоменклатураЗаполнить = МодульОбъектаСервер.НовыйОписаниеНоменклатуры1ССервер();
							МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, СсылкаНоменклатура, СтрокаНоменклатураЗаполнить);
							
						КонецЕсли;
						
						МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Вставить(СтрокаНоменклатураЗаполнить, "GTIN",		ПолучитьЗначениеИзРекордСет(RecordSet, "GTIN"));
						МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Вставить(СтрокаНоменклатураЗаполнить, "Основное",	ПолучитьЗначениеИзРекордСет(RecordSet, "N1C_MAIN", Ложь));
						
						Если ЗначениеЗаполнено(СсылкаХарактеристика) Тогда
							
							// Строка номенклатуры 1С уже должна быть определена
							МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Вставить(СтрокаНоменклатураЗаполнить, "Характеристика", СсылкаХарактеристика);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не RecordSetUnitEmpty Тогда
				
				// Обработка единиц
				ПредыдущийИД1	= ТекущийИд1;
				
				RecordSet2.Find("KEY_ID = '" + ТекущийИд1 + "'");
				Пока	Не	RecordSet2.EOF
					И		ПолучитьЗначениеИзРекордСет(RecordSet2, "KEY_ID") = ТекущийИд1 Цикл
					
					СсылкаНаЕдиницу1С = ВосстановитьСсылкуИзСтрокиДБФ(RecordSet2, "UNT1C_TY", "UNT1C_ID");
					
					Если ЗначениеЗаполнено(СсылкаНаЕдиницу1С) Тогда
						// Если у единицы 1С есть ссылка, то должен быть владелец: номенклатура
						Если	Не ЗначениеЗаполнено(ТекущийИд2)
							ИЛИ	Не ПолучитьЗначениеИзРекордСет(RecordSet2, "UOW1C_ID") = ТекущийИд2 Тогда
							
							RecordSet2.MoveNext();
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого СтрокаЗаполнить Из СтрокиЗаполнить Цикл
						СопоставлениеДляЕдиницы	= МодульОбъектаСервер.НовыйСопоставлениеДляЕдиницыСервер();
						
						МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Коэффициент",	ПолучитьЗначениеИзРекордСет(RecordSet2, "RATIO"));
						МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "ОКЕИ", 		ПолучитьЗначениеИзРекордСет(RecordSet2, "UNTSB_ID"));
						МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Название",		ПолучитьЗначениеИзРекордСет(RecordSet2, "UNTSB_NM"));
						МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Ссылка",		СсылкаНаЕдиницу1С);
						Если ЗначениеЗаполнено(СсылкаНаЕдиницу1С) Тогда
							МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Вставить(СопоставлениеДляЕдиницы, "Владелец",	СсылкаНоменклатура);
						КонецЕсли;
						
						МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "Единица", СопоставлениеДляЕдиницы);
					КонецЦикла;
					
					RecordSet2.MoveNext();
					
				КонецЦикла;
				RecordSet2.MoveFirst();
			КонецЕсли;
			
			Recordset.MoveNext();
		КонецЦикла;
		
		RecordSet2.Close();
		Recordset.Close();
		
	КонецЕсли;
	
	// Обогатить по ключам 1С
	Если ЗначениеЗаполнено(СписокКлючей1С) Тогда
		ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
		ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
		
		СписокКлючей1С = "(" + Лев(СписокКлючей1С, СтрДлина(СписокКлючей1С)-1) + ")";

		ШаблонЗапроса = 
		"SELECT KEY_ID, N1C_ID
		|FROM {base_1C}
		|WHERE 
		|	{base_1C}.N1C_ID IN {key_list}
		|ORDER BY N1C_ID";
		ШаблонЗапроса2 = 
		"SELECT NSB_ID, NSB_TYID, NSB_NM 
		|FROM {base_sbis}
		|WHERE 
		|	{base_sbis}.KEY_ID = {key}";
		ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса,	"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
		ШаблонЗапроса	= СтрЗаменить(ШаблонЗапроса,	"{key_list}",	СписокКлючей1С);
		ШаблонЗапроса2	= СтрЗаменить(ШаблонЗапроса2,	"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
		
		RecordSet = Новый ComОбъект("ADODB.Recordset");
	 	Recordset.CursorLocation = 3;
		RecordSet2 = Новый ComОбъект("ADODB.Recordset");
	 	Recordset2.CursorLocation = 3;
		
		Recordset.Open(ШаблонЗапроса, СоединениеБД, 2, 3);
		
		Пока Не Recordset.EOF Цикл
			
			ТекущийИд = ПолучитьЗначениеИзРекордСет(Recordset, "N1C_ID");
			Если ПредыдущийИД1 = ТекущийИд Тогда
				// Для строк берутся первые найденные значения
				RecordSet.MoveNext();
				Продолжить;
			КонецЕсли;
			КлючЗаписейДБФ	= ПолучитьЗначениеИзРекордСет(Recordset, "KEY_ID");
			ПредыдущийИД1	= ТекущийИд;
			
			Recordset2.Open(СтрЗаменить(ШаблонЗапроса2,	"{key}", "'" + КлючЗаписейДБФ + "'"), СоединениеБД, 2, 3);
			
			СтрокаЗаполнить = СоответствиеСтрокиОбогатить.Получить(ТекущийИд);
			МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "ИдНоменклатуры",	ПолучитьЗначениеИзРекордСет(RecordSet2, "NSB_ID"));
			МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "ТипКода",			ПолучитьЗначениеИзРекордСет(RecordSet2, "NSB_TYID"));
			МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Вставить(СтрокаЗаполнить, "ИмяНоменклатуры",	ПолучитьЗначениеИзРекордСет(RecordSet2, "NSB_NM"));
			
			Recordset2.Close();
			Recordset.MoveNext();
			
		КонецЦикла;
		
		Recordset.Close();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура	НоменклатураПоставщика_МассовоОбновитьСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);

	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;

	// Номенклатура и характеристика
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Обновить Цикл
		ТипНоменклатуры		= ТипЗнч(СтрНоменклатураПоставщика.Номенклатура.Ссылка);
		ПредставлениеТипа	= ПараметрыСоединения.СоответствиеТипов.Получить("Номенклатура_" + ТипНоменклатуры);
		Если ПредставлениеТипа = Неопределено Тогда
			Если Метаданные.НайтиПоТипу(ТипНоменклатуры) = Неопределено Тогда
				ПредставлениеТипа = ПараметрыСоединения.Типы.Номенклатура;
			Иначе
				ПредставлениеТипа = СтрНоменклатураПоставщика.Номенклатура.Ссылка.Метаданные().Имя;
			КонецЕсли;
			ПараметрыСоединения.СоответствиеТипов.Вставить("Номенклатура_" + ТипНоменклатуры, ПредставлениеТипа);
		КонецЕсли;
		СтруктураЗаписи = Новый Структура("ID, NAME, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN", "", "", "", "", "", "", "");
		СтруктураЗаписи.ID		= СтрНоменклатураПоставщика.Номенклатура.ИдСБИС;
		СтруктураЗаписи.NAME	= СтрНоменклатураПоставщика.Номенклатура.ИмяСБИС;
		СтруктураЗаписи.IDNOM	= Строка(СтрНоменклатураПоставщика.Номенклатура.Ссылка.УникальныйИдентификатор());
		СтруктураЗаписи.GTIN	= СтрНоменклатураПоставщика.Номенклатура.GTIN;
		СтруктураЗаписи.SPRNOM	= ПредставлениеТипа;
		
		Если Не СтрНоменклатураПоставщика.Характеристика.Ссылка = Неопределено Тогда
			ТипХарактеристики = ТипЗнч(СтрНоменклатураПоставщика.Характеристика.Ссылка);
			ПредставлениеТипа = ПараметрыСоединения.СоответствиеТипов.Получить("Характеристики_" + ТипХарактеристики);
			Если ПредставлениеТипа = Неопределено Тогда
				Если Метаданные.НайтиПоТипу(ТипХарактеристики) = Неопределено Тогда
					ПредставлениеТипа = ПараметрыСоединения.Типы.ХарактеристикиНоменклатуры;
				Иначе
					ПредставлениеТипа = СтрНоменклатураПоставщика.Характеристика.Ссылка.Метаданные().Имя;
				КонецЕсли;
				ПараметрыСоединения.СоответствиеТипов.Вставить("Характеристики_" + ТипНоменклатуры, ПредставлениеТипа);
			КонецЕсли;
			СтруктураЗаписи.IDCHAR	= Строка(стрНоменклатураПоставщика.Характеристика.УникальныйИдентификатор());
			СтруктураЗаписи.SPRCHAR	= ПредставлениеТипа;
		КонецЕсли;
		
		RecordSet.Open("Select * from NomPost where NomPost.ID ='" + СтрНоменклатураПоставщика.Номенклатура.ИдСБИС + "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			СоединениеБД.Execute(
				"Insert into NomPost Values('" + СтруктураЗаписи.ID + "',
											|'" + СтруктураЗаписи.NAME + "',
											|'" + СтруктураЗаписи.IDNOM + "',
											|'" + СтруктураЗаписи.SPRNOM + "',
											|'" + СтруктураЗаписи.IDCHAR + "',
											|'" + СтруктураЗаписи.SPRCHAR + "',
											|'" + СтруктураЗаписи.GTIN + "')");
		Иначе
			Recordset.Fields("NAME").value		= СтруктураЗаписи.NAME;
			Recordset.Fields("IDNOM").value		= СтруктураЗаписи.IDNOM;
			Recordset.Fields("SPRNOM").value	= СтруктураЗаписи.SPRNOM;
			Recordset.Fields("IDCHAR").value	= СтруктураЗаписи.IDCHAR;
			Recordset.Fields("SPRCHAR").value	= СтруктураЗаписи.SPRCHAR;
			Recordset.Fields("GTIN").value		= СтруктураЗаписи.GTIN;
			RecordSet.Update();
		КонецЕсли;
		RecordSet.Close();
	КонецЦикла;
	// Единица
	Для Каждого СтрНоменклатураПоставщика Из ПараметрыОбновитьВходящие.Обновить Цикл
		Если	СтрНоменклатураПоставщика.Единица.Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТипЕдиницы = ТипЗнч(СтрНоменклатураПоставщика.Единица.Ссылка);
		ПредставлениеТипа = ПараметрыСоединения.СоответствиеТипов.Получить("Единицы_" + ТипЕдиницы);
		Если ПредставлениеТипа = Неопределено Тогда
			Если Метаданные.НайтиПоТипу(ТипЕдиницы) = Неопределено Тогда
				ПредставлениеТипа = ПараметрыСоединения.Типы.Единицы;
			Иначе
				ПредставлениеТипа = СтрНоменклатураПоставщика.Единица.Ссылка.Метаданные().Имя;
			КонецЕсли;
			ПараметрыСоединения.СоответствиеТипов.Вставить("Единицы_" + ТипЕдиницы, ПредставлениеТипа);
		КонецЕсли;
		Recordset.Open("Select * from NOMUNIT
						|Where NOMUNIT.ID_NMKEY ='"		+ СтрНоменклатураПоставщика.Номенклатура.ИдСБИС	+ "'
						|	And NOMUNIT.ID_POSTU = '"	+ СтрНоменклатураПоставщика.Единица.ИдСБИС		+ "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			RecordSet.AddNew();
		    RecordSet.Fields("ID_NMKEY").value	= СтрНоменклатураПоставщика.Номенклатура.ИдСБИС;
		    RecordSet.Fields("ID_POSTU").value	= СтрНоменклатураПоставщика.Единица.ИдСБИС;
		КонецЕсли;
	    RecordSet.Fields("NM_POSTU").value	= СтрНоменклатураПоставщика.Единица.ИмяСБИС;
	    RecordSet.Fields("ID_TORGU").value	= Строка(СтрНоменклатураПоставщика.Единица.Ссылка.УникальныйИдентификатор());
	    RecordSet.Fields("SP_TORGU").value	= ПредставлениеТипа;
	    RecordSet.Fields("RATIO").value		= СтрНоменклатураПоставщика.Единица.Коэффициент;
		RecordSet.Update();
		Recordset.Close();
	КонецЦикла;
	
	// Удалить номенклатуру и единицы
	Для Каждого ИдНоменклатураПОставщика Из ПараметрыОбновитьВходящие.Удалить Цикл
			
		Recordset.Open("Select * from NomPost where NOMUNIT.ID_NMKEY ='" + ИдНоменклатураПОставщика + "'", СоединениеБД, 2, 3);
		Recordset.MoveFirst();
		Пока Не Recordset.EOF() Цикл
			Recordset.Delete(); 
			Recordset.MoveNext();
		КонецЦикла;
		
		Recordset.Open("Select * from NomPost where NomPost.ID ='" + ИдНоменклатураПОставщика + "'", СоединениеБД, 2, 3);
		Если Recordset.EOF Тогда 
			Продолжить; 
		КонецЕсли;
		Recordset.Delete(); 
		Recordset.Close();
		
	КонецЦикла;
	
КонецПроцедуры	

// ContractorNomenclatureCollation.MassDelete/2
//  - метод для удаления сопоставлений.
//
// Параметры:
//  ПараметрыОбновитьВходящие	 - Структура
//		Контрагент	- Структура с полями СвФл, либо СвЮл
//		Номенклатура- Массив структур с полями для удаления по фильтру
//  ДопПараметры							 - Структура
//
&НаКлиенте
Процедура НоменклатураПоставщика_МассовоеУдаление(ПараметрыОбновитьВходящие, ДопПараметры) Экспорт
	Перем НоменклатураНазвание, НоменклатураСсылка;
	
	Попытка
		ПараметрыЗаписиСервер = Новый Структура;
		ПараметрыЗаписиСервер.Вставить("Номенклатура",	ПараметрыОбновитьВходящие.Номенклатура);
		ПараметрыЗаписиСервер.Вставить("Ключ",			КлючКонтрагентаСопоставления(ПараметрыОбновитьВходящие.Контрагент));		
		НоменклатураПоставщика_МассовоеУдалениеСервер(ПараметрыЗаписиСервер);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.НоменклатураПоставщика_МассовоеОбновление");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НоменклатураПоставщика_МассовоеУдалениеСервер(ПараметрыОбновитьВходящие)
	
	СоединениеСДБФ	= ПолучитьСоединениеDBF(Новый Структура("Ключ", ПараметрыОбновитьВходящие.Ключ));
	
	// Удалить номенклатуру и единицы
	Для Каждого СтрокаСопоставленияСБИСНоменклатуры Из ПараметрыОбновитьВходящие.Номенклатура Цикл
		
		ЗаписьДБФ = НовыйЗаписьДБФСБИС(СоединениеСДБФ, СтрокаСопоставленияСБИСНоменклатуры);
		ЗаписьДБФСБИС_Очистить(ЗаписьДБФ);
		
	КонецЦикла;
	
КонецФункции

