
// Функция - получает классы для работы с DBF.
//
// Параметры:
//  ПараметрыDBFВходящие - Структура
//		- Тип	- строка, описание что за DBF. Пока Статусы/Сопоставление
//		- СтрокаСтатусы - строка (необязательный), из ини строка для DBF
//	
&НаСервере
Процедура СформироватьПодключениеДБФ(ПараметрыDBFВходящие)
	
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("РаботаСДБФ",			МодульОбъектаСервер().НовыйРаботаСДБФ(ПараметрыDBFВходящие));
	ПараметрыСоединения.Вставить("СоответствиеТипов",	Новый Соответствие);
		
КонецПроцедуры

// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
&НаСервере
Функция ПолучитьСоединениеDBF(ПараметрыСоединенияВходящие=Неопределено, ДопПараметры=Неопределено)
	Перем КлючDBF;
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Попытка
		ПутьКФайлу = ПараметрыСоединения.ПараметрыСоединений.Каталог + ПараметрыСоединенияВходящие.Ключ + "\";
		
		СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПутьКФайлу);
		Если СоединениеСДБФ = Неопределено Тогда
			ПараметрыСоединения.ПараметрыСоединений.Путь = ПутьКФайлу;
			СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_СоздатьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ПараметрыСоединений);
			ПараметрыСоединения.ПараметрыСоединений.Путь = Неопределено;
		КонецЕсли;
		Если Не СоединениеСДБФ.Проверен Тогда
			БД = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
			УстановитьПоляДБФ(СоединениеСДБФ, БД);
			УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, БД);
			
			ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, БД);
			СоединениеСДБФ.Проверен = Истина;
		КонецЕсли;
		Возврат СоединениеСДБФ;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер.ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПолучитьСоединениеDBF")
	КонецПопытки;
	
	Возврат БД;
КонецФункции

// Процедура - вернуть старое сопоставление если выполненялась конвертация под новое сопоставление. Новое сопоставлеине работает с фичей
//
// Параметры:
//  КаталогПроверки	 - Строка	 - путь к папке, где лежат файлы
//
&НаСервере
Процедура old_ПроверитьФайлыСопоставленияДБФ(КаталогПроверки)
	
	ЗначениеПроверки = ПараметрыСоединения.ПереключениеДляСтарогоСопоставления.Получить(КаталогПроверки);

	Если ЗначениеПроверки = Истина Тогда
		Возврат;
	КонецЕсли;
	ПараметрыСоединения.ПереключениеДляСтарогоСопоставления.Вставить(КаталогПроверки, Истина);
	
	ОписаниеФайлаНоменклатураСБИС	= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаСтарое				= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаСтароеПереименов	= СтрЗаменить(ОписаниеФайлаСтарое, ".dbf", "_OLD.dbf");
	ОписаниеФайлаЕдиниц				= ПараметрыСоединения.ПараметрыСоединений.Файлы.Получить("Единицы");
	
	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаНоменклатураСБИС);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаНоменклатура1С);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаЕдиниц);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаСтарое);
	Если Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;

	Файл_ОписаниеФайлаПроверка = Новый Файл(КаталогПроверки + ОписаниеФайлаСтароеПереименов);
	Если Не Файл_ОписаниеФайлаПроверка.Существует() Тогда
		Возврат;
	КонецЕсли;
	//Восстановить файл с _old
	ПереместитьФайл(КаталогПроверки + ОписаниеФайлаСтароеПереименов, КаталогПроверки + ОписаниеФайлаСтарое); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Если ОписаниеФайлаНоменклатураСБИС.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
		ОписаниеФайлаНоменклатураСБИС.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаНоменклатура1С.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
		ОписаниеФайлаНоменклатура1С.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаЕдиниц.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
		ОписаниеФайлаЕдиниц.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатураСБИС.Проверен Тогда
		Возврат
	КонецЕсли;
	
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатура1С.Есть
		И	ОписаниеФайлаЕдиниц.Есть Тогда
		Если Не ОписаниеФайлаНоменклатураСБИС.Проверен Тогда 			
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСБИС.ИмяБД, СоединениеБД, 2, 3);
			//
			//Если НЕ Recordset.Fields.Count = 10 Тогда
			//	//По числу полей определим, соответствует ли формат БД требуемому.
			//	СбисОбновитьФайлБД(ФайлСтатусов, СоединениеСДБФ, Recordset.Fields.Count);
			//	//Переоткроем файл после обновления
			//	Recordset.Close();
			//КонецЕсли;           
			//
			Если		Recordset.Fields.Count = 4 Тогда
				Попытка
					Если Recordset.EOF Тогда
						//Пустой файл. Пересоздать на всякий случай.
						RecordSet.Close();
						Попытка
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
							ОписаниеФайлаНоменклатураСБИС.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
							ОписаниеФайлаНоменклатура1С.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
							ОписаниеФайлаЕдиниц.Есть			= Ложь;
							
							СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
						Исключение
							ИнфоОбОшибке = ИнформацияОбОшибке();
							МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПроверитьФайлыСопоставленияДБФ.СоздатьФайлСопоставления");
						КонецПопытки;
					Иначе
						СбисТестПоля = Recordset.Fields("KEY_ID");
						СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат файла сопоставления");
				КонецПопытки;
				//Всё ок, файл готов к использованию
			Иначе
				СписокПолей = "";
				Для Каждого Field Из Recordset.Fields Цикл
					СписокПолей = СписокПолей + Field.Name + ", ";
				КонецЦикла;
				СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей) - 2);
				МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат DBF. Обратитесь в техподдержку!",, Новый Структура("Поля", СписокПолей));
			КонецЕсли;
			ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
			ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
			ОписаниеФайлаЕдиниц.Проверен			= Истина;
		КонецЕсли;
	Иначе
		СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
		Если ОписаниеФайлаНоменклатураСтарое.Есть = Неопределено Тогда
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		Если ОписаниеФайлаНоменклатураСтарое.Есть Тогда
			ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД);
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
		ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
		ОписаниеФайлаЕдиниц.Проверен			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, СоединениеБД)
	
	ШаблонМассовыйПоискЗаписи1С =  
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID IN ({KEY_ID_LIST}) 
	|ORDER BY KEY_ID, NOM1C_ID";
	
	ШаблонПоискаЗаписи1С = 
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID = '{KEY_ID}'
	|	AND {base_1C}.NOM1C_ID = '{NOM1C_ID}'
	|	AND {base_1C}.CHR1C_ID = '{CHR1C_ID}'";
	
	ШаблонДобавленияЗаписи1С =  
	"INSERT INTO {base_1C} 
	|VALUES({values})";
	
	ШаблонМассовыйПоискЕдиниц = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID IN ({KEY_ID_LIST}) ORDER BY KEY_ID";
	
	ШаблонПоискаЕдиницы = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID ='{KEY_ID}' AND {base_unit}.UOW1C_ID = '{UOW1C_ID}'
	|	AND {base_unit}.UNT1C_ID = '{UNT1C_ID}'
	|	AND {base_unit}.UNTSB_ID = '{UNTSB_ID}'";
	
	ШаблонДобавленияЕдиницы = 
	"INSERT INTO {base_unit} 
	|VALUES({values})";
	
	
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	ШаблонПоискаЗаписи1С			= СтрЗаменить(ШаблонПоискаЗаписи1С,				"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонДобавленияЗаписи1С		= СтрЗаменить(ШаблонДобавленияЗаписи1С,			"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонДобавленияЗаписи1С		= СтрЗаменить(ШаблонДобавленияЗаписи1С,			"{values}",		ОписаниеФайлаНоменклатура1С.КлючиДобавить);
	ШаблонПоискаЕдиницы				= СтрЗаменить(ШаблонПоискаЕдиницы,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	//ШаблонПоискаЕдиниц				= СтрЗаменить(ШаблонПоискаЕдиниц,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонДобавленияЕдиницы			= СтрЗаменить(ШаблонДобавленияЕдиницы,			"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонДобавленияЕдиницы			= СтрЗаменить(ШаблонДобавленияЕдиницы,			"{values}",		ОписаниеФайлаЕдиниц.КлючиДобавить);
		
	ШаблонМассовыйПоискЕдиниц		= СтрЗаменить(ШаблонМассовыйПоискЕдиниц,		"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонМассовыйПоискЗаписи1С		= СтрЗаменить(ШаблонМассовыйПоискЗаписи1С,		"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	
	ОписаниеФайлаНоменклатура1С.Вставить("Шаблоны", Новый Структура);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("НоваяЗапись", 	ШаблонДобавленияЗаписи1С);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("Поискзаписи", 	ШаблонПоискаЗаписи1С);
	ОписаниеФайлаНоменклатура1С.Шаблоны.Вставить("МассовыйПоиск",	ШаблонМассовыйПоискЗаписи1С);
	
	ОписаниеФайлаЕдиниц.Вставить("Шаблоны", Новый Структура);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("НоваяЗапись",		ШаблонДобавленияЕдиницы);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("ПоискЗаписи",		ШаблонПоискаЕдиницы);
	ОписаниеФайлаЕдиниц.Шаблоны.Вставить("МассовыйПоиск",	ШаблонМассовыйПоискЕдиниц);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляДБФ(СоединениеСДБФ, СоединениеБД)
	
	СоответствиеРезультат	= Новый Соответствие;
	
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("Единицы");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"",	Истина, Истина));
	СоответствиеОграничений.Вставить("UNTSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	50,		"",	Истина, Ложь));
	СоответствиеОграничений.Вставить("UNTSB_NM",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("UNT1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	36,		"",	Истина, Ложь));
	СоответствиеОграничений.Вставить("UNT1C_TY",	Новый Структура("Длина, Значение",						100,	""));
	СоответствиеОграничений.Вставить("UOW1C_ID",	Новый Структура("Длина, Значение",						36,		""));
	СоответствиеОграничений.Вставить("OKEY",		Новый Структура("Длина, Значение",						10,		""));
	СоответствиеОграничений.Вставить("RATIO",		Новый Структура("Длина, Значение",						15,		"1"));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
	
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Истина));
	СоответствиеОграничений.Вставить("NOM1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("NOM1C_TY",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("CHR1C_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("CHR1C_TY",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("GTIN",		Новый Структура("Длина, Значение",						240,	""));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
		
	ФайлДБФ = СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	
	СоответствиеОграничений = Новый Структура;
	СоответствиеОграничений.Вставить("KEY_ID",		Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Истина));
	СоответствиеОграничений.Вставить("NOMSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	СоответствиеОграничений.Вставить("NOMSB_NM",	Новый Структура("Длина, Значение",						240,	""));
	СоответствиеОграничений.Вставить("CHRSB_ID",	Новый Структура("Длина, Значение, Индекс, Уникальный",	240,	"", Истина, Ложь));
	
	ПоляЗапросаНовый	= "";
	ПоляЗапросаДобавить	= "";
	ПоляЗапросаФайл		= "";
	Для Каждого КлючИЗначение Из СоответствиеОграничений Цикл
		
		ПоляЗапросаДобавить = ПоляЗапросаДобавить + " '{" + КлючИЗначение.Ключ + "}', 
		|";
		ПоляЗапросаНовый	= ПоляЗапросаНовый + КлючИЗначение.Ключ + ",";
		ПоляЗапросаФайл		= ПоляЗапросаФайл + КлючИЗначение.Ключ + " char(" + КлючИЗначение.Значение.Длина + "),";
		
	КонецЦикла;
	ПоляЗапросаДобавить	= Лев(ПоляЗапросаДобавить,	СтрДлина(ПоляЗапросаДобавить) - 3);
	ПоляЗапросаНовый	= Лев(ПоляЗапросаНовый,		СтрДлина(ПоляЗапросаНовый) - 1);
	ПоляЗапросаФайл		= Лев(ПоляЗапросаФайл,		СтрДлина(ПоляЗапросаФайл) - 1);

	ФайлДБФ.Вставить("Поля",			СоответствиеОграничений);
	ФайлДБФ.Вставить("КлючиДобавить",	ПоляЗапросаДобавить);
	ФайлДБФ.Вставить("КлючиНовый",		ПоляЗапросаНовый);
	ФайлДБФ.Вставить("КлючиНовыйФайл",	ПоляЗапросаФайл);
		
КонецПроцедуры

&НаСервере
Процедура ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД)
  
	Если ПараметрыСоединения.ИспользоватьXBaseДляКонвертацииDBF Тогда
		ЗаполнитьБазыXBaseДанными(СоединениеСДБФ);
	Иначе 
        ЗаполнитьБазыRecordsetДанными(СоединениеСДБФ,СоединениеБД);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазыXBaseДанными(СоединениеСДБФ)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы"); 
	
	БазаXBase1С = новый XBase;
	БазаXBase1С.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
	БазаXBase1С.Кодировка = КодировкаXBase.OEM;
	БазаXBaseСБИС = новый XBase;
	БазаXBaseСБИС.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
	БазаXBaseСБИС.Кодировка = КодировкаXBase.OEM;
	БазаXBaseUnit = новый XBase;                                                         
	БазаXBaseUnit.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
	БазаXBaseUnit.Кодировка = КодировкаXBase.OEM;
	
	БазаXBaseСтарая = новый XBase;
	БазаXBaseСтарая.ОткрытьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
	БазаXBaseСтарая.Кодировка = КодировкаXBase.OEM;
	КоличествоПолей = БазаXBaseСтарая.поля.Количество();
    
	Если БазаXBaseСтарая.КоличествоЗаписей() = 0 Тогда
		//Пустой файл.
		Попытка
			УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;	
	Попытка
		Пока Не БазаXBaseСтарая.ВКонце() Цикл
			БазаXBaseСБИС.Добавить();
			//Записи в базу сбис
			БазаXBaseСБИС.KEY_ID	= БазаXBaseСтарая.ID;
			БазаXBaseСБИС.NOMSB_ID	= БазаXBaseСтарая.ID; 
			БазаXBaseСБИС.NOMSB_NM	= БазаXBaseСтарая.NAME;
			БазаXBaseСБИС.Записать();
			//Записи в базу 1С
			БазаXBase1С.Добавить();
			БазаXBase1С.KEY_ID	= БазаXBaseСтарая.ID;
			БазаXBase1С.NOM1C_ID = БазаXBaseСтарая.IDNOM;
			БазаXBase1С.NOM1C_TY = БазаXBaseСтарая.SPRNOM;
			БазаXBase1С.CHR1C_ID = БазаXBaseСтарая.IDCHAR;
			БазаXBase1С.CHR1C_TY = БазаXBaseСтарая.SPRCHAR;
			Если КоличествоПолей = 7 или КоличествоПолей = 10 Тогда
				БазаXBase1С.GTIN = БазаXBaseСтарая.GTIN;
			КонецЕсли; 
			БазаXBase1С.Записать();
			
			Если КоличествоПолей = 10 Тогда
				Если БазаXBaseСтарая.IDUNPOST <> "''" Тогда
					БазаXBaseUnit.Добавить();     
					БазаXBaseUnit.KEY_ID = БазаXBaseСтарая.ID;
					БазаXBaseUnit.UNT1C_ID = БазаXBaseСтарая.IDUNTORG;
					БазаXBaseUnit.UNT1C_TY = Строка(ПараметрыСоединения.Типы.Единицы);
					БазаXBaseUnit.RATIO = БазаXBaseСтарая.RATIO;
					БазаXBaseUnit.Записать();
				КонецЕсли;
			КонецЕсли;

			//Переход к следующей записи
			БазаXBaseСтарая.Следующая();
		КонецЦикла;
		БазаXBase1С.ЗакрытьФайл();
		БазаXBaseUnit.ЗакрытьФайл();
		БазаXBaseСБИС.ЗакрытьФайл();
		БазаXBaseСтарая.ЗакрытьФайл();
	Исключение
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "БазаXBaseСтарая.ОткрытьФайл", 773, "Не удалось обновить файл сопоставления");
	КонецПопытки;
	//Оставить старый файл как есть на случай возврата к старому механизму.
	//ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
			
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазыRecordsetДанными(СоединениеСДБФ,СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы"); 
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСтарое.ИмяБД, СоединениеБД, 2, 3);

	Если Recordset.EOF Тогда
		//Пустой файл.
		Попытка
			УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат;
	Иначе
		ЗапросыКовертации = Новый Массив;
		ЗапросыКовертации.Добавить("INSERT INTO " + ОписаниеФайлаНоменклатураСБИС.ИмяБД + "(
		|KEY_ID,	NOMSB_ID,	NOMSB_NM) SELECT
		|ID,		ID,			NAME FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
		
		ЗапросНоменклатура1С = "INSERT INTO " + ОписаниеФайлаНоменклатура1С.ИмяБД + "(
		|KEY_ID,	NOM1C_ID,	NOM1C_TY,	CHR1C_ID,	CHR1C_TY,	GTIN) SELECT 
		|ID,		IDNOM,		SPRNOM,		IDCHAR,		SPRCHAR,	%GTIN% FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД;
		
		Если		Recordset.Fields.Count = 7 Тогда
			//Есть GTIN, нет единиц
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "GTIN");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
		ИначеЕсли	Recordset.Fields.Count = 10 Тогда
			//Есть GTIN, есть единицы
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "GTIN");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
			
			ЗапросыКовертации.Добавить("INSERT INTO " + ОписаниеФайлаЕдиниц.ИмяБД + "(
			|KEY_ID,	UNT1C_ID,	UNT1C_TY,									RATIO) 
			|SELECT ID,	IDUNTORG,	'" + ПараметрыСоединения.Типы.Единицы + "',	RATIO 
			|FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + " WHERE (NOT " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + ".IDUNPOST = '')");
		Иначе	
		//ИначеЕсли	Recordset.Fields.Count = 6 Тогда

			//Нет GTIN. Не известный формат?
			ЗапросНоменклатура1С = СтрЗаменить(ЗапросНоменклатура1С, "%GTIN%", "''");
			ЗапросыКовертации.Добавить(ЗапросНоменклатура1С);
			
		КонецЕсли;
		
		Попытка
			
			Для Каждого ЗапросВыполнить Из ЗапросыКовертации Цикл
				СоединениеБД.Execute(ЗапросВыполнить);
			КонецЦикла;
			
			//Оставить старый файл как есть на случай возврата к старому механизму.
			//ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
			
		Исключение
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

// Процедура - создаёт файл DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Создаёт файлы со следующей структурой:
//	НоменклатураСБИС(nom_sbis):
//		KEY_ID		- (Индекс, Ключ) идентификатор для связи с таблицами.
//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
//  	NOMSB_NM	- название номенклатуры поставщика.
//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
//	Номенклатура1С (nom_1С):
//		KEY_ID		- (Индекс, Ключ) идентификатор номенклатуры поставщика из nom_sbis.
//		NOM1C_ID	- идентификатор номенклатуры в 1С (УИД)
//		NOM1C_TY	- название справочника номенклатуры 1С (Номенклатура)
//		CHR1C_ID	- идентификатор характеристики номенклатуры в 1С (УИД)
//		CHR1C_TY	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//		GTIN		- глобальный номер товарной продукции, при наличии.
//	Единицы измерения(nom_unit)
//		KEY_ID	- (Ключ) идентификатор номенклатуры поставщика
//		UNTSB_ID	- (Ключ) идентификатор единицы поставщика
//		UNTSB_NM	- Наименование единицы поставщиа
//		UNT1C_ID	- идентификатор единицы измерения в 1С (УИД)
//		UNT1C_TY	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//		UOW1C_ID	- владелец. Значение NOM1C_ID, либо - при отсутствии владельца в ИС.
//		RATIO	- коэффициет пересчета
// Формат полей: {1}{2}_{3}
//	KEY_ID - ключ связи таблиц
//	{1}:
//		NOM - номенклатура
//		CHR - характеристика
//		UNT - единица
//		UOW - владелец
//	{2}:
//		SB - описание элемента СБИС
//  	1C - текущая система
//	{3}:
//		ID - идентификатор
//		NM - название
//		TY - тип
&НаСервере
Процедура СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Попытка
		Если Не ОписаниеФайлаНоменклатураСБИС.Есть Тогда
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаНоменклатураСБИС.ИмяФайла + " (" + ОписаниеФайлаНоменклатураСБИС.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			//СоединениеБД.Execute("Create Table " + ОписаниеФайлаНоменклатураСБИС.ИмяФайла + " (KEY_ID char(240), NOMSB_ID char(240), NOMSB_NM char(240), CHRSB_ID char(240))");
			ОписаниеФайлаНоменклатураСБИС.Есть = Истина;
			
		КонецЕсли;
		
		Если Не ОписаниеФайлаНоменклатура1С.Есть Тогда 
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаНоменклатура1С.ИмяФайла + " (" + ОписаниеФайлаНоменклатура1С.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			ОписаниеФайлаНоменклатура1С.Есть = Истина;
			
		КонецЕсли;
		Если Не ОписаниеФайлаЕдиниц.Есть Тогда 
			
			ШаблонЗапроса = "Create Table " + ОписаниеФайлаЕдиниц.ИмяФайла + " (" + ОписаниеФайлаЕдиниц.КлючиНовыйФайл + ")";
			СоединениеБД.Execute(ШаблонЗапроса);
			
			ОписаниеФайлаЕдиниц.Есть = Истина;
		КонецЕсли;
		
		СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - создаёт индекс к DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
&НаСервере
Процедура СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаНоменклатураСБИС)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаНоменклатура1С)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаЕдиниц)
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИндексСопоставления_СоздатьФайлИндекса(СоединениеСДБФ, ОписаниеФайлаБД)
	
	ОбъектXBase = Новый XBase(СоединениеСДБФ.Путь + ОписаниеФайлаБД.ИмяФайла);
	Для Каждого КлючИЗначение Из ОписаниеФайлаБД.Поля Цикл
		Если	Не	КлючИЗначение.Значение.Свойство("Индекс")
			Или	Не	КлючИЗначение.Значение.Индекс Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXBase.Индексы.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Ключ, КлючИЗначение.Значение.Уникальный);
		
	КонецЦикла;
	ОбъектXBase.СоздатьИндексныйФайл(СоединениеСДБФ.Путь + ОписаниеФайлаБД.ИмяБД + ".cdx");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗавершитьСоединениеСDBFНаСервере(ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры

