
&НаСервере
Функция НовыйНаборЗаписейДБФ(СоединениеСДБФ)
	
	Возврат Новый Структура("_класс, СоединениеСДБФ, Номенклатура1С, НоменклатураСБИС, Единицы", "НаборЗаписейDBF", СоединениеСДБФ, Новый Массив, Новый Массив, Новый Массив);
	
КонецФункции

&НаСервере
Процедура НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, Ключ, Значение);
	
	НаборЗаписейДБФ[Ключ].Добавить(Значение);
	
КонецПроцедуры

&НаСервере
Процедура НаборЗаписейДБФ_Записать(НаборЗаписейДБФ);
	
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.НоменклатураСБИС Цикл
		ЗаписьДБФСБИС_Записать(СтруктураЗаписи);
	КонецЦикла;
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.Номенклатура1С Цикл
		ЗаписьДБФНоменклатура1С_Записать(СтруктураЗаписи);
	КонецЦикла;
	Для Каждого СтруктураЗаписи Из НаборЗаписейДБФ.Единицы Цикл
		ЗаписьДБФЕдиница_Записать(СтруктураЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НовыйНаборЗаписейДБФ_СформироватьНабор(НаборЗаписейДБФ, СтрокаСопоставленияСБИССервер);
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	СтруктураЗаписиСБИС	= НовыйЗаписьДБФСБИС(НаборЗаписейДБФ.СоединениеСДБФ, СтрокаСопоставленияСБИССервер);
	НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "НоменклатураСБИС", СтруктураЗаписиСБИС);
	
	СопоставлениеНоменклатуры	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИССервер, "Номенклатура1С");
	ЕдиницыИзмеренияСБИС		= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИССервер, "Единицы");
	
	Для Каждого КлючИЗнчениеИС Из СопоставлениеНоменклатуры Цикл
		
		//Расклонировать по каждому элементу соответствия отдельную запись на ИД позиции СБИС
		ЗаписьДБФНоменклатура1С	= НовыйЗаписьДБФНоменклатура1С(НаборЗаписейДБФ.СоединениеСДБФ, СтрокаСопоставленияСБИССервер, СтруктураЗаписиСБИС, КлючИЗнчениеИС.Ключ);
		НаборХарактеристик		= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗнчениеИС.Значение, "Характеристики");
		Если ЗначениеЗаполнено(НаборХарактеристик) Тогда
			Для Каждого ЗначениеХарактеристики Из НаборХарактеристик Цикл
				
				СтруктураЗаписи1С_Хар = ЗаписьДБФНоменклатура1С_Скопировать(ЗаписьДБФНоменклатура1С);
				
				ЗаписьДБФНоменклатура1С_Установить(СтруктураЗаписи1С_Хар, "Характеристика", ЗначениеХарактеристики);
				НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Номенклатура1С", СтруктураЗаписи1С_Хар);
				
			КонецЦикла;
		Иначе
			НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Номенклатура1С", ЗаписьДБФНоменклатура1С)
		КонецЕсли;
		
		ЕдиницыИзмерения1С	= МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(КлючИЗнчениеИС.Значение, "Единицы");
		Для Каждого КлючИЗначениеЕдиница Из ЕдиницыИзмерения1С Цикл
			
			СтруктураЗаписи1С = НовыйЗаписьДБФЕдиница(СтруктураЗаписиСБИС.СоединениеСДБФ, СтруктураЗаписиСБИС, КлючИЗначениеЕдиница.Значение);
			НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Единицы", СтруктураЗаписи1С)
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначениеЕдиница Из ЕдиницыИзмеренияСБИС Цикл
		
		СтруктураЗаписи1С = НовыйЗаписьДБФЕдиница(СтруктураЗаписиСБИС.СоединениеСДБФ, СтруктураЗаписиСБИС, КлючИЗначениеЕдиница.Значение);
		НаборЗаписейДБФ_Добавить(НаборЗаписейДБФ, "Единицы", СтруктураЗаписи1С);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - описывает запись в ДБФ номенклатуры СБИС
//
// Параметры:
//  ЗаписьНоменклатурыПоставщика - 	 - 
// 
// Возвращаемое значение:
// НовыйЗаписьДБФ  - Структура
//
&НаСервере
Функция НовыйЗаписьДБФСБИС(СоединениеСДБФ, ЗаписьНоменклатурыПоставщика=Неопределено)
	
	//		KEY_ID	- (Индекс, Ключ) идентификатор для связи с таблицами.
	//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
	//  	NOMSB_NM	- название номенклатуры поставщика.
	//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	Результат	= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФСБИС", НаборПолей, СоединениеСДБФ);
	
	Если Не ЗаписьНоменклатурыПоставщика = Неопределено Тогда
		
		ЗаписьДБФСБИС_Заполнить(Результат, ЗаписьНоменклатурыПоставщика);
		
	КонецЕсли;
	
	НаборПолей.KEY_ID = ЗаписьДБФСБИС_КлючЗаписи(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФСБИС_Заполнить(ЗаписьДБФСБИС, ДанныеВходящие)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	Если ДанныеВходящие.Свойство("_класс") Тогда
		Если ДанныеВходящие._класс = "СтрокаСопоставленияСБИС" Тогда
			ЗаписьДБФСБИС.Поля.NOMSB_ID = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "Код");
			ЗаписьДБФСБИС.Поля.NOMSB_NM = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "ИмяНоменклатурыСБИС");
			ЗаписьДБФСБИС.Поля.CHRSB_ID = МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(ДанныеВходящие, "ИдХарактеристикиСБИС");
		КонецЕсли;
	Иначе
		//Это старая запись СтрНоменклатураПоставщика
		ЗаписьДБФСБИС.Поля.NOMSB_ID = ДанныеВходящие.НоменклатураСБИС;
		Если ЗначениеЗаполнено(ДанныеВходящие.ИмяНоменклатурыСБИС) Тогда
			ЗаписьДБФСБИС.Поля.NOMSB_NM = ДанныеВходящие.ИмяНоменклатурыСБИС;
		КонецЕсли;
		Если 	ДанныеВходящие.Свойство("Характеристика")
			 И	ЗначениеЗаполнено(ДанныеВходящие.Характеристика) Тогда
			ЗаписьДБФСБИС.Поля.CHRSB_ID = ДанныеВходящие.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - очищает записи, связанные с ДБФ СБИС и текущую.
//
// Параметры:
//  ЗаписьДБФСБИС	 - Структура, ЗаписьДБФСБИС	 - запись корневой таблицы СБИС, из которой удаляются записи и все связанные
//
&НаСервере
Процедура ЗаписьДБФСБИС_Очистить(ЗаписьДБФСБИС)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, ЗаписьДБФСБИС.СоединениеСДБФ);

	ОписаниеФайлаНоменклатура1С		= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСБИС	= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаЕдиниц				= ЗаписьДБФСБИС.СоединениеСДБФ.Файлы.Получить("Единицы");
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	
	ШаблонЗапросаНомСбис	= "Select * from {base_sbis} where {base_sbis}.KEY_ID = {key}";
	ШаблонЗапросаНомСбис	= СтрЗаменить(ШаблонЗапросаНомСбис,"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);

	ШаблонЗапросаНом1С		= "Select * from {base_1С} where {base_1С}.KEY_ID = {key}";
	ШаблонЗапросаНом1С		= СтрЗаменить(ШаблонЗапросаНом1С,"{base_1С}",		ОписаниеФайлаНоменклатура1С.ИмяБД);
	
	ШаблонЗапросаЕдиниц		= "Select * from {base_unit} where {base_unit}.KEY_ID = {key}";
	ШаблонЗапросаЕдиниц		= СтрЗаменить(ШаблонЗапросаЕдиниц,	"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);

	КлючЗаписи	= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФСБИС);

	ФильтрКлюч		= "'" + КлючЗаписи + "'";
	ЗапросЕдиниц	= СтрЗаменить(ШаблонЗапросаЕдиниц,	"{key}", ФильтрКлюч);
	ЗапросНомСбис	= СтрЗаменить(ШаблонЗапросаНомСбис,	"{key}", ФильтрКлюч);
	ЗапросНом1С		= СтрЗаменить(ШаблонЗапросаНом1С,	"{key}", ФильтрКлюч);
	
	Recordset.Open(ЗапросЕдиниц, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF() Цикл
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	Recordset.Open(ЗапросНом1С, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF() Цикл
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();
	
	Recordset.Open(ЗапросНомСбис, СоединениеБД, 2, 3);
	Пока Не Recordset.EOF Цикл  
		Recordset.Delete(); 
		Recordset.MoveNext();
	КонецЦикла;
	Recordset.Close();

КонецПроцедуры

// Возвращает ключ для связи таблиц
// Параметры:
//  ЗаписьДБФ	 - НовыйЗаписьДБФ Структура	 - описание записи
// 
// Возвращаемое значение:
//  Строка - Ключ для связи
//
&НаСервере
Функция ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФ)
	
	Если ЗначениеЗаполнено(ЗаписьДБФ.Поля.KEY_ID) Тогда
		Возврат ЗаписьДБФ.Поля.KEY_ID;
	КонецЕсли;
	Результат = ЗаписьДБФ.Поля.NOMSB_ID;
	Если ЗначениеЗаполнено(ЗаписьДБФ.Поля.CHRSB_ID) Тогда
		Результат = Результат + "_" + ЗаписьДБФ.Поля.CHRSB_ID;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФСБИС_Записать(СтруктураЗаписи)
	
	ЗаписьДБФОбновить	= ЗаписьДБФСБИС_НайтиСуществующую(СтруктураЗаписи, СтруктураЗаписи.СоединениеСДБФ);
	
	Если ЗаписьДБФОбновить = Неопределено Тогда
		СоединениеБД					= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
		ОписаниеФайлаНоменклатураСБИС	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
		
		ШаблонДобавить = 
		"INSERT INTO {base_sbis} 
		|VALUES('{KEY_ID}',
		|		'{NOMSB_ID}',
		|		'{NOMSB_NM}',
		|		'{CHRSB_ID}')";
		ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);

		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
			
		КонецЦикла;
		
		СоединениеБД.Execute(ШаблонДобавить);
		
	Иначе
		ЗаписьДБФОбновить.Fields("KEY_ID").Value = Лев(СтруктураЗаписи.Поля.KEY_ID, 240);
		ЗаписьДБФОбновить.Fields("NOMSB_ID").Value = Лев(СтруктураЗаписи.Поля.NOMSB_ID, 240);
		ЗаписьДБФОбновить.Fields("NOMSB_NM").Value = Лев(СтруктураЗаписи.Поля.NOMSB_NM, 240);
		ЗаписьДБФОбновить.Fields("CHRSB_ID").Value = Лев(СтруктураЗаписи.Поля.CHRSB_ID, 240);
		ЗаписьДБФОбновить.Update();
		ЗаписьДБФОбновить.Close();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписьДБФСБИС_НайтиСуществующую(СтруктураЗаписи, СоединениеСДБФ, ДопПараметры=Неопределено)
	Перем ЛРезультат;
	
	СоединениеБД					= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	
	//		KEY_ID	- (Индекс, Ключ) идентификатор для связи с таблицами.
	//		NOMSB_ID	- (Индекс) идентификатор номенклатуры поставщика.
	//  	NOMSB_NM	- название номенклатуры поставщика.
	//  	CHRSB_ID	- (Индекс) идентификатор характеристики номенклатуры поставщика.
	ШаблонПоискаЗаписиСБИС =  
	"SELECT * FROM {base_sbis}
	|WHERE {base_sbis}.KEY_ID = '{ID}'";
	ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{ID}",		СтруктураЗаписи.Поля.KEY_ID);
	
	//Проверить наличие корневой записи
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоискаЗаписиСБИС, СоединениеБД, 2, 3);
	
	Если Recordset.EOF Тогда
		RecordSet.Close();
		Если	Не	ДопПараметры = Неопределено	
			И		ДопПараметры.Свойство("НайтиПоИд")
			И		ДопПараметры.НайтиПоИд Тогда
			//Поиск без характеристики, по ИД номенклатуры
			ШаблонПоискаЗаписиСБИС =  
			"SELECT * FROM {base_sbis}
			|WHERE {base_sbis}.NOMSB_ID = '{ID}'";
			ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
			ШаблонПоискаЗаписиСБИС = СтрЗаменить(ШаблонПоискаЗаписиСБИС, "{ID}",		СтруктураЗаписи.Поля.KEY_ID);
			
			RecordSet.Open(ШаблонПоискаЗаписиСБИС, СоединениеБД, 2, 3);
			
			Если Recordset.EOF Тогда
				RecordSet.Close();
			Иначе
				ЛРезультат = RecordSet;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ЛРезультат = RecordSet;
	КонецЕсли;
	
	Возврат ЛРезультат;
	
КонецФункции

&НаСервере
Функция НовыйЗаписьДБФНоменклатура1С(СоединениеСДБФ, СтрокаСопоставленияСБИС=Неопределено, ЗаписьДБФСБИС=Неопределено, СсылкаНоменклатура=Неопределено)
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	
	Результат	= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФНоменклатура1С", НаборПолей);
	
	Если Не СтрокаСопоставленияСБИС = Неопределено Тогда
		
		МодульОбъектаСервер = МодульОбъектаСервер();
		
		ОписаниеНоменклатуры1С	= МодульОбъектаСервер.СтрокаСопоставленияСБИССервер_Получить(СтрокаСопоставленияСБИС, СсылкаНоменклатура);
		
		ЗаписьДБФНоменклатура1С_Установить(Результат, "Номенклатура",	СсылкаНоменклатура);
		ЗаписьДБФНоменклатура1С_Установить(Результат, "GTIN",			МодульОбъектаСервер.ОписаниеНоменклатуры1ССервер_Получить(ОписаниеНоменклатуры1С, "GTIN"));
		
	КонецЕсли;
	
	Если Не ЗаписьДБФСБИС = Неопределено Тогда
		
		НаборПолей.KEY_ID			= ЗаписьДБФСБИС_КлючЗаписи(ЗаписьДБФСБИС);
		Результат.СоединениеСДБФ	= ЗаписьДБФСБИС.СоединениеСДБФ;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписьДБФНоменклатура1С_Скопировать(ЗаписьДБФНоменклатура1С)
	
	ЗаписьНовая = НовыйЗаписьДБФНоменклатура1С(ЗаписьДБФНоменклатура1С.СоединениеСДБФ);
	ЗаполнитьЗначенияСвойств(ЗаписьНовая.Поля, ЗаписьДБФНоменклатура1С.Поля);
	ЗаписьНовая.СоединениеСДБФ = ЗаписьДБФНоменклатура1С.СоединениеСДБФ;
	Возврат ЗаписьНовая;
	
КонецФункции

&НаСервере
Процедура ЗаписьДБФНоменклатура1С_Установить(ЗаписьДБФНоменклатура1С, КлючЗаписать, ЗначениеВходящее)
	Перем ЗначениеВЗапись;
	
	ЗначениеВЗапись = ЗначениеВходящее;
	Если Не ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
		ЗначениеВЗапись = "";
	КонецЕсли;
	
	Если		КлючЗаписать = "Номенклатура" Тогда
		Попытка
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "Номенклатура");
		Исключение
			//Не ссылка
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_ID	= "";
			ЗаписьДБФНоменклатура1С.Поля.NOM1C_TY	= "";
		КонецПопытки;
	ИначеЕсли	КлючЗаписать = "Характеристика" Тогда
		Попытка
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "ХарактеристикиНоменклатуры");
		Исключение
			//Не ссылка
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_ID	= "";
			ЗаписьДБФНоменклатура1С.Поля.CHR1C_TY	= "";
		КонецПопытки;
	ИначеЕсли	ЗаписьДБФНоменклатура1С.Поля.Свойство(КлючЗаписать) Тогда
		ЗаписьДБФНоменклатура1С.Поля[КлючЗаписать] = ЗначениеВЗапись;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьДБФНоменклатура1С_Записать(СтруктураЗаписи)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
	ОписаниеФайлБД	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("Номенклатура1С");

	ШаблонПоиска = ОписаниеФайлБД.Шаблоны.Поискзаписи;
	Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
	КонецЦикла;
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоиска, СоединениеБД, 2, 3);
	Если Recordset.EOF Тогда
		ШаблонДобавить = ОписаниеФайлБД.Шаблоны.НоваяЗапись;
		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
		КонецЦикла;
		СоединениеБД.Execute(ШаблонДобавить);
	Иначе
		Recordset.Fields("CHR1C_TY").value	= СтруктураЗаписи.Поля.CHR1C_TY;
		Recordset.Fields("NOM1C_TY").value	= СтруктураЗаписи.Поля.NOM1C_TY;
		Recordset.Fields("GTIN").value		= СтруктураЗаписи.Поля.GTIN;
		RecordSet.Update();
	КонецЕсли;
	RecordSet.Close();

КонецПроцедуры

&НаСервере
Функция НовыйЗаписьДБФЕдиница(СоединениеСДБФ, ЗаписьДБФСБИС, ИсточникДанныхЕдиницы=Неопределено)
	
	ОписаниеФайлБД	= СоединениеСДБФ.Файлы.Получить("Единицы");
	НаборПолей		= Новый Структура;
	Для Каждого КлючИЗначение Из ОписаниеФайлБД.Поля Цикл
		НаборПолей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Значение);
	КонецЦикла;
	НаборПолей.KEY_ID	= ЗаписьДБФСБИС.Поля.KEY_ID;
	Результат			= Новый Структура("_класс, Поля, СоединениеСДБФ", "ЗаписьДБФНоменклатура1С", НаборПолей, СоединениеСДБФ);
	
	Если Не ИсточникДанныхЕдиницы = Неопределено Тогда
		ЗаписьДБФЕдиница_Установить(Результат, ИсточникДанныхЕдиницы._класс, ИсточникДанныхЕдиницы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаСервере
Процедура ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, КлючЗаписать, ЗначениеВходящее)
	Перем ЗначениеВЗапись;
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	
	ЗначениеВЗапись = ЗначениеВходящее;
	Если Не ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
		ЗначениеВЗапись = "";
	КонецЕсли;
	
	//" (KEY_ID char(240), UNTSB_ID char(50), UNTSB_NM char(240), UNT1C_ID char(36), UNT1C_TY char(100), UOW1C_ID char(36), OKEY char(10),RATIO char(15))");
	Если		КлючЗаписать = "СопоставлениеДляЕдиницы" Тогда
		
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Единица",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Ссылка"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "ИдСБИС",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "ОКЕИ"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "ИмяСБИС",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Название"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Коэффициент",	МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Коэффициент"));
		ЗаписьДБФЕдиница_Установить(СтруктураЗаписиЕдиница, "Владелец",		МодульОбъектаСервер.СопоставлениеДляЕдиницыСервер_Получить(ЗначениеВходящее, "Владелец"));
		
		Если Не ЗначениеЗаполнено(СтруктураЗаписиЕдиница.Поля.UNTSB_ID) Тогда
			СтруктураЗаписиЕдиница.Поля.UNTSB_ID = СтруктураЗаписиЕдиница.Поля.UNTSB_NM;
		КонецЕсли;
		
	ИначеЕсли 	КлючЗаписать = "ИдСБИС" Тогда
		
		СтруктураЗаписиЕдиница.Поля.UNTSB_ID	= ЗначениеВЗапись;
		СтруктураЗаписиЕдиница.Поля.OKEY		= ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "ИмяСБИС" Тогда
		
		СтруктураЗаписиЕдиница.Поля.UNTSB_NM	= ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "Единица" Тогда
		
		Попытка
			СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			СтруктураЗаписиЕдиница.Поля.UNT1C_TY	= ПредставлениеТипаПоСсылке(ЗначениеВЗапись, "Единицы");
		Исключение
			//Не ссылка
			СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= "";
			СтруктураЗаписиЕдиница.Поля.UNT1C_TY	= "";
		КонецПопытки;
		
	ИначеЕсли	КлючЗаписать = "Коэффициент" Тогда
		
		Если ЗначениеВЗапись = "" Тогда
			ЗначениеВЗапись = "1";
		КонецЕсли;
		СтруктураЗаписиЕдиница.Поля.RATIO = ЗначениеВЗапись;
		
	ИначеЕсли	КлючЗаписать = "Владелец" Тогда
		
		Если ТипЗнч(ЗначениеВходящее) = Тип("Строка") Тогда
			СтруктураЗаписиЕдиница.Поля.UOW1C_ID	= ЗначениеВходящее;
		ИначеЕсли ЗначениеЗаполнено(ЗначениеВЗапись) Тогда
			Попытка
				СтруктураЗаписиЕдиница.Поля.UOW1C_ID	= Строка(ЗначениеВЗапись.УникальныйИдентификатор());
			Исключение
				//Не ссылка
				СтруктураЗаписиЕдиница.Поля.UNT1C_ID	= "";
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли	СтруктураЗаписиЕдиница.Поля.Свойство(КлючЗаписать) Тогда
		
		СтруктураЗаписиЕдиница.Поля[КлючЗаписать] = ЗначениеВЗапись;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьДБФЕдиница_Записать(СтруктураЗаписи)
	
	СоединениеБД	= МодульОбъектаСервер().РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СтруктураЗаписи.СоединениеСДБФ);
	ОписаниеФайлБД	= СтруктураЗаписи.СоединениеСДБФ.Файлы.Получить("Единицы");
	ШаблонПоиска	= ОписаниеФайлБД.Шаблоны.ПоискЗаписи;
	
	Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
	КонецЦикла;
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
	RecordSet.Open(ШаблонПоиска, СоединениеБД, 2, 3);
	Если Recordset.EOF Тогда
		ШаблонДобавить = ОписаниеФайлБД.Шаблоны.НоваяЗапись;
		Для Каждого КлючИЗначениеЗаписи Из СтруктураЗаписи.Поля Цикл
			ШаблонДобавить = СтрЗаменить(ШаблонДобавить, "{" + КлючИЗначениеЗаписи.Ключ + "}", КлючИЗначениеЗаписи.Значение);
		КонецЦикла;
		СоединениеБД.Execute(ШаблонДобавить);
	Иначе
		Для Каждого КлючИЗначениеПоля Из СтруктураЗаписи.Поля Цикл
			Recordset.Fields(КлючИЗначениеПоля.Ключ).value = КлючИЗначениеПоля.Значение
		КонецЦикла;
		RecordSet.Update();
	КонецЕсли;
	RecordSet.Close();

КонецПроцедуры

