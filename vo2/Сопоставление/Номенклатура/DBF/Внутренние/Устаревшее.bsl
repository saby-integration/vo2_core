
// ищет запись с определенной номенклатурой поставщика по реквизитам, указанным в файле настроек
// возвращает структуру с полями Номенклатура и Характеристика	
&НаСервере
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(стрКонтрагент,стрНоменклатураПоставщикаВсе, КаталогНастроек, ИниКонфигурация, Отказ)
	
	Для Каждого стрНоменклатураПоставщика Из стрНоменклатураПоставщикаВсе Цикл
		Результат = НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика.Значение, КаталогНастроек, ИниКонфигурация, Отказ);	
		Если Отказ Тогда
			Возврат Результат;	
		КонецЕсли;
		стрНоменклатураПоставщика.Значение.Вставить("НоменклатураПоставщика",Результат);	
	КонецЦикла;
	Возврат стрНоменклатураПоставщикаВсе; 
КонецФункции

// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
&НаСервере
Функция НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация, Отказ)
	Если ИниКонфигурация.Свойство("ТипКлассификатораЕдиниц") Тогда
		ИмяКлассификтораЕдИзм = СтрЗаменить(ИниКонфигурация.ТипКлассификатораЕдиниц.Значение, "'","");
	ИначеЕсли ИниКонфигурация.Свойство("ЕдиницаИзмерения") Тогда
		ИмяКлассификтораЕдИзм = СтрЗаменить(ИниКонфигурация.ЕдиницаИзмерения.Значение, "'","");
		ИмяКлассификтораЕдИзм = СокрЛП(Сред(ИмяКлассификтораЕдИзм, Найти(ИмяКлассификтораЕдИзм, ".") + 1));	
	Иначе
		ИмяКлассификтораЕдИзм = "КлассификаторЕдиницИзмерения";
	КонецЕсли;
	
	Если стрКонтрагент.Свойство("ИдентификаторЛица") Тогда 
		ИНН = стрКонтрагент.ИдентификаторЛица;
	Иначе
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН); 
	КонецЕсли;
	
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);

	КаталогНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика);	
	Если КаталогНоменклатурыПоставщика.Существует() = Ложь Тогда
		СоздатьКаталог(ИмяКаталогаНоменклатурыПоставщика);
		Сообщить("Создан каталог """+ИмяКаталогаНоменклатурыПоставщика+""""); 
	КонецЕсли;
	
	Попытка
		БД = Новый COMОбъект("ADODB.Connection");
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");	
				   
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Попытка
		Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
			СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
			БД.Open(СтрокаПодключения);
		Иначе
			СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			Попытка
				БД.Open(СтрокаПодключения);
			Исключение
				СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
				БД.Open(СтрокаПодключения);
			КонецПопытки;
			//СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			//СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		СбисЗаполнитьНовыйФайлСопоставления(БД);
	КонецЕсли;
	
	NAME = "";
	СбисИмяКакИд = Истина;
	Если стрНоменклатураПоставщика.Свойство("Название") Тогда
		NAME = стрНоменклатураПоставщика.Название; 
	КонецЕсли;
	Если стрНоменклатураПоставщика.Свойство("КодПокупателя") 
			И ЗначениеЗаполнено(стрНоменклатураПоставщика.КодПокупателя)
			И стрНоменклатураПоставщика.КодПокупателя <> "-" Тогда // alo Меркурий  если заполнен КодПокупателя, то ищем по нему
		ID = стрНоменклатураПоставщика.КодПокупателя; 
		СбисИмяКакИд = Ложь;
	ИначеЕсли стрНоменклатураПоставщика.Свойство("Идентификатор")
				И ЗначениеЗаполнено(стрНоменклатураПоставщика.Идентификатор)
				И стрНоменклатураПоставщика.Идентификатор <> "-" Тогда // alo Меркурий  если заполнен идентификатор, то ищем по нему
		ID = стрНоменклатураПоставщика.Идентификатор; 
		СбисИмяКакИд = Ложь;
	Иначе
		ID = NAME;
	КонецЕсли;	
	ID = СбисИдентификатор(ID);
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);
	
	Если НЕ Recordset.Fields.Count = 10 Тогда
		//По числу полей определим, соответствует ли формат БД требуемому.
		СбисОбновитьФайлБД(ФайлНоменклатурыПоставщика, БД, Recordset.Fields.Count);
		//Переоткроем файл после обновления
		Recordset.Close();
    	Recordset.CursorLocation = 3;
   		Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);
	КонецЕсли;           
	
	Результат = Новый Структура("Номенклатура, Характеристика, ЕдИзмОрг, Коэффициент");
	
	Если Recordset.EOF=Ложь Тогда 
		Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
			Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
			Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
				Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("IDUNPOST").value) Тогда
				Результат.ЕдИзм = RecordSet.Fields("IDUNPOST").value;	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("IDUNTORG").value) Тогда
				Результат.ЕдИзмОрг = Справочники[ИмяКлассификтораЕдИзм].НайтиПоНаименованию(RecordSet.Fields("IDUNTORG").value);	
			КонецЕсли;
			Если ЗначениеЗаполнено(RecordSet.Fields("RATIO").value) Тогда
				Результат.Коэффициент = RecordSet.Fields("RATIO").value;	
			КонецЕсли;
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
	// << alo Меркурий
	// Искали по идентификатору и не нашли. Возможно, существуют старые сопоставления по наименованию - перепишем их
	// блок добавлен в версии 37. Удалить спустя время.
	//TODO40 удалить блок
	ИначеЕсли Не СбисИмяКакИд Тогда
		NAME = СбисИдентификатор(NAME);
		Если ЗначениеЗаполнено(NAME) Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select * from NomPost where NomPost.ID like'"+NAME+"%'",БД,2,3);	
			Если Recordset.EOF=Ложь Тогда 
				Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
					Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
					Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
						Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("IDUNPOST").value) Тогда
						Результат.ЕдИзм = RecordSet.Fields("IDUNPOST").value;	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("IDUNTORG").value) Тогда
						Результат.ЕдИзмОрг = Справочники[ИмяКлассификтораЕдИзм].НайтиПоНаименованию(RecordSet.Fields("IDUNTORG").value);	
					КонецЕсли;
					Если ЗначениеЗаполнено(RecordSet.Fields("RATIO").value) Тогда
						Результат.Коэффициент = RecordSet.Fields("RATIO").value;	
					КонецЕсли;
				КонецЕсли;		
				RecordSet.Fields("ID").value=ID; 
				RecordSet.Update();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли; // alo Меркурий >>
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьСоответствиеНоменклатурыНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация)
	
	// Процедура устанавливает/удаляет соответствие номенклатуры	
	Если стрКонтрагент.Свойство("ИдентификаторЛица") Тогда 
		ИНН = стрКонтрагент.ИдентификаторЛица;
	Иначе
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН); 
	КонецЕсли;
	
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);
	
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	NAME = стрНоменклатураПоставщика.Название;
	
	Если ЗначениеЗаполнено(стрНоменклатураПоставщика.КодПокупателя)
			И стрНоменклатураПоставщика.КодПокупателя <> "-" Тогда
		ID =стрНоменклатураПоставщика.КодПокупателя;	
	ИначеЕсли ЗначениеЗаполнено(стрНоменклатураПоставщика.Идентификатор)
			И стрНоменклатураПоставщика.Идентификатор <> "-" Тогда
		ID = стрНоменклатураПоставщика.Идентификатор;
	Иначе
		ID = NAME;
	КонецЕсли;
	
	ID = СбисИдентификатор(ID);
	
	Если стрНоменклатураПоставщика.Свойство("ЕдИзмОрг") Тогда
		IDUNTORG	= СбисПривестиЗначение(Строка(стрНоменклатураПоставщика.ЕдИзмОрг));
	КонецЕсли;
	Если стрНоменклатураПоставщика.Свойство("Коэффициент") Тогда
		RATIO		= СбисПривестиЗначение(стрНоменклатураПоставщика.Коэффициент);
	КонецЕсли;
	IDUNPOST = "";
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);

	Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Номенклатура) Тогда   // если выбрали номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			
		Иначе
			RecordSet.AddNew();
		    RecordSet.Fields("ID").value	= ID; 
			RecordSet.Fields("NAME").value	= СбисПривестиЗначение(NAME);
		КонецЕсли;
		RecordSet.Fields("IDNOM").value = Строка(стрНоменклатураПоставщика.Номенклатура.УникальныйИдентификатор()); 
		
		Если Метаданные.НайтиПоТипу(ТипЗнч(стрНоменклатураПоставщика.Номенклатура))<> Неопределено Тогда
			RecordSet.Fields("SPRNOM").value = Метаданные.НайтиПоТипу(ТипЗнч(стрНоменклатураПоставщика.Номенклатура)).Имя;
		Иначе
			Если ИниКонфигурация.Свойство("Номенклатура") Тогда
				RecordSet.Fields("SPRNOM").value = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
			Иначе
				RecordSet.Fields("SPRNOM").value = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Характеристика) Тогда
			RecordSet.Fields("IDCHAR").value = Строка(стрНоменклатураПоставщика.Характеристика.УникальныйИдентификатор());
			Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
				RecordSet.Fields("SPRCHAR").value = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
			Иначе
				RecordSet.Fields("SPRCHAR").value="ХарактеристикиНоменклатуры";
			КонецЕсли;
		Иначе
			RecordSet.Fields("IDCHAR").value = "";
			RecordSet.Fields("SPRCHAR").value = "";
		КонецЕсли; 
		Если стрНоменклатураПоставщика.Свойство("GTIN") Тогда  
			Попытка
				RecordSet.Fields("GTIN").value = СокрЛП(стрНоменклатураПоставщика.GTIN);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("ЕдИзм") Тогда  
			Попытка
				RecordSet.Fields("IDUNPOST").value = СокрЛП(IDUNPOST);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("ЕдИзмОрг") Тогда  
			Попытка
				RecordSet.Fields("IDUNTORG").value = СокрЛП(IDUNTORG);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если стрНоменклатураПоставщика.Свойство("Коэффициент") Тогда  
			Попытка
				RecordSet.Fields("RATIO").value = СокрЛП(RATIO);
			Исключение
			КонецПопытки;
		КонецЕсли;
		RecordSet.Update();
	Иначе  // если удалили номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			Recordset.Delete(); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция сбисПолучитьРеквизитНоменклатурыПоставщикаНаСервере(стрКонтрагент, стрНоменклатура, ИмяРеквизита, КаталогНастроек, ИниКонфигурация) Экспорт
	// Процедура ищет реквизит номенклатуры контрагента	 (используется для получения идентификатора, штрихкода номенклатуры контрагента)
	Если стрКонтрагент.Свойство("ИдентификаторЛица") Тогда 
		ИНН = стрКонтрагент.ИдентификаторЛица;
	Иначе
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН); 
	КонецЕсли;   
	
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	old_ПроверитьФайлыСопоставленияДБФ(ИмяКаталогаНоменклатурыПоставщика);
	
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		Возврат "";
	КонецЕсли;
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	IDNOM = Строка(стрНоменклатура.Номенклатура.УникальныйИдентификатор());
	Если ИниКонфигурация.Свойство("Номенклатура") Тогда
		SPRNOM = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
	Иначе
		SPRNOM = "Номенклатура";
	КонецЕсли;
	ТекстЗапроса = "Select * from NomPost where NomPost.IDNOM='"+IDNOM+"'"; 
	ТекстЗапросаБезХарактеристики = ТекстЗапроса;
	Если ЗначениеЗаполнено(стрНоменклатура.Характеристика) Тогда
		IDCHAR = Строка(стрНоменклатура.Характеристика.УникальныйИдентификатор());
		Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
			SPRCHAR = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
		Иначе
			SPRCHAR="ХарактеристикиНоменклатуры";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " and NomPost.IDCHAR='"+IDCHAR+"'";
	КонецЕсли;		
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open(ТекстЗапроса,БД,2,3);

	Если Recordset.EOF=Ложь Тогда   
		Попытка
			Возврат СокрЛП(RecordSet.Fields(ИмяРеквизита).value);
		Исключение
			Возврат "";
		КонецПопытки;
	Иначе 
		// Сделаем запрос по Номенклатуре без характеристики, задача №1185740228
		Recordset.CursorLocation = 3;
		Recordset.Open(ТекстЗапросаБезХарактеристики, БД, 2, 3);
		
		Если Recordset.EOF=Ложь Тогда   
			
			Попытка
				Возврат СокрЛП(RecordSet.Fields(ИмяРеквизита).value);
			Исключение
				Возврат "";
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
		Возврат "";
	КонецФункции
	
//NAME		- название номенклатуры поставщика
//ID		- идентификатор номенклатуры поставщика
//IDNOM		- идентификатор номенклатуры в 1С (УИД)
//SPRNOM	- название справочника номенклатуры 1С (Номенклатура)
//IDCHAR	- идентификатор характеристики номенклатуры в 1С (УИД)
//SPRCHAR	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//IDUNPOST	- идентификатор единицы измерения в 1С (УИД)
//IDUNTORG	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//RATIO		- коэффициет пересчета в эту запись
//GTIN		- глобальный номер товарной продукции, при наличии.
&НаСервереБезКонтекста
Процедура СбисЗаполнитьНовыйФайлСопоставления(БД)
	БД.Execute("Create Table NomPost.dbf (NAME char(240), ID char(240), IDNOM char(240), SPRNOM char(240), IDCHAR char(240), SPRCHAR char(240), IDUNPOST char(240),IDUNTORG char(240), RATIO char(240), GTIN char(240))");	
КонецПроцедуры

//Процедура приводит старый файл DBF к "новому формату", с переносом старых данных
&НаСервереБезКонтекста
Процедура СбисОбновитьФайлБД(СтарыйФайлНомПост, БД, ЧислоСуществующихЗаписей)
	ПереместитьФайл(СтарыйФайлНомПост.ПолноеИмя, СтрЗаменить(СтарыйФайлНомПост.ПолноеИмя,"NomPost","NPOld")); 
	Попытка
		СбисЗаполнитьНовыйФайлСопоставления(БД);
		Если ЧислоСуществующихЗаписей = 7 Тогда
			//Переносим вместе с GTIN
			БД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM NPOld");
		Иначе
			//Совсем старый, либо неизвестный формат. Переносим то, что есть
			БД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR FROM NPOld");
		КонецЕсли;	
	Исключение
		Ошибка = ОписаниеОшибки();      
		Сообщить("Не удалось обновить файл сопоставления ("+ Ошибка +")");
		ПереместитьФайл(СтрЗаменить(СтарыйФайлНомПост.ПолноеИмя,"NomPost","NPOld"), СтарыйФайлНомПост.ПолноеИмя);
	КонецПопытки;		
КонецПроцедуры

