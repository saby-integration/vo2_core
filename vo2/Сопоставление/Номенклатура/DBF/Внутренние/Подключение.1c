
// Функция - получает классы для работы с DBF.
//
// Параметры:
//  ПараметрыDBFВходящие - Структура
//		- Тип	- строка, описание что за DBF. Пока Статусы/Сопоставление
//		- СтрокаСтатусы - строка (необязательный), из ини строка для DBF
//	
&НаСервере
Процедура СформироватьПодключениеДБФ(ПараметрыDBFВходящие)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("РаботаСДБФ",			МодульОбъектаСервер.НовыйРаботаСДБФ(ПараметрыDBFВходящие));
	ПараметрыСоединения.Вставить("СоответствиеТипов",	Новый Соответствие);
		
КонецПроцедуры

// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
Функция ПолучитьСоединениеDBF(ПараметрыСоединенияВходящие=Неопределено, ДопПараметры=Неопределено)
	Перем КлючDBF;
	Попытка
		МодульОбъектаСервер = МодульОбъектаСервер();
		ПутьКФайлу = ПараметрыСоединения.ПараметрыСоединений.Каталог + ПараметрыСоединенияВходящие.Ключ + "\";
		
		СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПутьКФайлу);
		Если СоединениеСДБФ = Неопределено Тогда
			ПараметрыСоединения.ПараметрыСоединений.Путь = ПутьКФайлу;
			СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_СоздатьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ПараметрыСоединений);
			ПараметрыСоединения.ПараметрыСоединений.Путь = Неопределено;
		КонецЕсли;
		БД = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
		ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, БД);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПолучитьСоединениеDBF")
	КонецПопытки;
	Возврат БД;
КонецФункции

&НаСервере
Процедура ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаСтатусов	= СоединениеСДБФ.Файлы.Получить("NomPost.dbf");
	ОписаниеФайлаЕдиниц		= СоединениеСДБФ.Файлы.Получить("NomUnit.dbf");
	Если ОписаниеФайлаСтатусов.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + "NomPost.dbf");
		ОписаниеФайлаСтатусов.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаЕдиниц.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + "NomUnit.dbf");
		ОписаниеФайлаЕдиниц.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если	ОписаниеФайлаЕдиниц.Есть
		И	ОписаниеФайлаЕдиниц.Проверен
		И	ОписаниеФайлаСтатусов.Есть
		И	ОписаниеФайлаСтатусов.Проверен Тогда
		Возврат
	КонецЕсли;
	
	Если ОписаниеФайлаСтатусов.Есть Тогда
		Если Не ОписаниеФайлаСтатусов.Проверен Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select top 1 * from NomPost", СоединениеБД, 2, 3);
			//
			//Если НЕ Recordset.Fields.Count = 10 Тогда
			//	//По числу полей определим, соответствует ли формат БД требуемому.
			//	СбисОбновитьФайлБД(ФайлСтатусов, СоединениеСДБФ, Recordset.Fields.Count);
			//	//Переоткроем файл после обновления
			//	Recordset.Close();
			//КонецЕсли;           
			//
			Если		Recordset.Fields.Count = 7 Тогда
				Попытка
					Если Recordset.EOF Тогда
						//Пустой файл. Пересоздать на всякий случай.
						RecordSet.Close();
						Попытка
							УдалитьФайлы(СоединениеСДБФ.Путь + "NomPost.dbf"); 
							СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
						Исключение
							ИнфоОбОшибке = ИнформацияОбОшибке();
							МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПроверитьФайлыСопоставленияДБФ.СоздатьФайлСопоставления");
						КонецПопытки;
					Иначе
						Recordset.Fields("GTIN");
					КонецЕсли;
					Если Не ОписаниеФайлаЕдиниц.Есть Тогда
						СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
					КонецЕсли;
					ОписаниеФайлаСтатусов.Проверен = Истина;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат файла сопоставления");
				КонецПопытки;
				//Всё ок, файл готов к использованию
			ИначеЕсли	Recordset.Fields.Count = 10 Тогда
				ПереместитьФайл(СоединениеСДБФ.Путь + "NomPost.dbf", СоединениеСДБФ.Путь + "NPOld.dbf"); 
				Попытка
					СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
					СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
					//Разбивка на файлы единиц и номенклатуры
					СоединениеБД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM NPOld");
					СоединениеБД.Execute("INSERT INTO NomUnit ( ID_NMKEY, ID_POSTU, NM_POSTU,                                 	ID_TORGU, RATIO) 
										|SELECT					ID,       IDUNTORG, '" + ПараметрыСоединения.Типы.Единицы + "',	IDUNPOST, RATIO FROM NPOld WHERE (NOT NPOld.IDUNPOST = '')");	
				Исключение
					ПереместитьФайл(СоединениеСДБФ.Путь + "NPOld.dbf", СоединениеСДБФ.Путь + "NomPost.dbf");
					Попытка
						УдалитьФайлы(СоединениеСДБФ.Путь + "NomUnit.dbf");
					Исключение
					КонецПопытки;
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
				КонецПопытки;		
			ИначеЕсли	Recordset.Fields.Count = 6 Тогда
				ПереместитьФайл(СоединениеСДБФ.Путь + "NomPost.dbf", СоединениеСДБФ.Путь + "NPOld.dbf"); 
				Попытка
					СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
					СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
					//Добавление поля GTIN, единиц ещё нет.
					СоединениеБД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR FROM NPOld");
				Исключение
					ПереместитьФайл(СоединениеСДБФ.Путь + "NPOld.dbf", СоединениеСДБФ.Путь + "NomPost.dbf");
					Попытка
						УдалитьФайлы(СоединениеСДБФ.Путь + "NomUnit.dbf");
					Исключение
					КонецПопытки;
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
				КонецПопытки;
			Иначе
				СписокПолей = "";
				Для Каждого Field Из Recordset.Fields Цикл
					СписокПолей = СписокПолей + Field.Name + ", ";
				КонецЦикла;
				СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей - 2));
				МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат DBF. Обратитесь в техподдержку!",, Новый Структура("Поля", СписокПолей));
			КонецЕсли;
			ОписаниеФайлаСтатусов.Проверен	= Истина;
			ОписаниеФайлаЕдиниц.Есть		= Истина;
			ОписаниеФайлаЕдиниц.Проверен	= Истина;
		КонецЕсли;
	Иначе
		//Создать новые файлы сопоставления
		СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
		
		ФайлDBFСопоставление = Новый Файл(СоединениеСДБФ.Путь + "NomPost.dbf");
		ОписаниеФайлаСтатусов.Есть		= ФайлDBFСопоставление.Существует();
		ОписаниеФайлаСтатусов.Проверен	= Истина;
	КонецЕсли;
	Если Не ОписаниеФайлаЕдиниц.Есть Тогда
		СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
				
		ФайлDBFСопоставление = Новый Файл(СоединениеСДБФ.Путь + "NomUnit.dbf");
		ОписаниеФайлаЕдиниц.Есть	= ФайлDBFСопоставление.Существует();
		ОписаниеФайлаЕдиниц.Проверен= Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - создаёт файл DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Созадёт файл со следующей структурой
//	ID		- (Ключ) идентификатор номенклатуры поставщика.
//  NAME		- название номенклатуры поставщика.
//  IDNOM		- идентификатор номенклатуры в 1С (УИД)
//  SPRNOM	- название справочника номенклатуры 1С (Номенклатура)
//  IDCHAR	- идентификатор характеристики номенклатуры в 1С (УИД)
//  SPRCHAR	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//  GTIN		- глобальный номер товарной продукции, при наличии.
&НаСервере
Процедура СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД)
	
	Попытка
		СоединениеБД.Execute("Create Table NomPost.dbf (ID char(240), NAME char(240), IDNOM char(240), SPRNOM char(240), IDCHAR char(240), SPRCHAR char(240), GTIN char(240))");
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - создаёт файл DBF для сопоставления единиц измерения
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Созадёт файл со следующей структурой:
//	ID_NMKEY	- (Ключ) идентификатор номенклатуры поставщика
//	ID_POSTU	- (Ключ) идентификатор единицы поставщика
//	NM_POSTU	- Наименование единицы поставщиа
//	ID_TORGU	- идентификатор единицы измерения в 1С (УИД)
//	SP_TORGU	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//	RATIO		- коэффициет пересчета
&НаСервере
Процедура СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД)
	
	Попытка
		СоединениеБД.Execute("Create Table NomUnit.dbf (ID_NMKEY char(240), ID_POSTU char(50), NM_POSTU char(240), ID_TORGU char(36), SP_TORGU char(100), RATIO char(15))");
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗавершитьСоединениеСDBFНаСервере(ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры
	

