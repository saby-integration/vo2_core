
// Функция - получает классы для работы с DBF.
//
// Параметры:
//  ПараметрыDBFВходящие - Структура
//		- Тип	- строка, описание что за DBF. Пока Статусы/Сопоставление
//		- СтрокаСтатусы - строка (необязательный), из ини строка для DBF
//	
&НаСервере
Процедура СформироватьПодключениеДБФ(ПараметрыDBFВходящие)
	
	МодульОбъектаСервер = МодульОбъектаСервер();
	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("РаботаСДБФ",			МодульОбъектаСервер.НовыйРаботаСДБФ(ПараметрыDBFВходящие));
	ПараметрыСоединения.Вставить("СоответствиеТипов",	Новый Соответствие);
		
КонецПроцедуры

// Функция - Получает com-соединение с ДБФ статусов, чтобы при последующих операциях со статусами сразу обращаться к соединению, а не получать заново
//
// Параметры:
//  ПараметрыСоединенияВходящие	 - Структура
//		Файл - Строка (обязательный).
//		Ключ - Строка (необязательный)	 - если не указан, то Файл
//		Тип - Строка (обязательный) - для получения специфичной строки соединения DBF - Статусы/Сопоставление
//  ДопПараметры	 - Структура	 - для расширения
// 
// Возвращаемое значение:
//   - COM объект, соединение с DBF
//
Функция ПолучитьСоединениеDBF(ПараметрыСоединенияВходящие=Неопределено, ДопПараметры=Неопределено)
	Перем КлючDBF;
	Попытка
		МодульОбъектаСервер = МодульОбъектаСервер();
		ПутьКФайлу = ПараметрыСоединения.ПараметрыСоединений.Каталог + ПараметрыСоединенияВходящие.Ключ + "\";
		
		СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПутьКФайлу);
		Если СоединениеСДБФ = Неопределено Тогда
			ПараметрыСоединения.ПараметрыСоединений.Путь = ПутьКФайлу;
			СоединениеСДБФ = МодульОбъектаСервер.РаботаСДБФ_СоздатьСоединениеСДБФ(ПараметрыСоединения.РаботаСДБФ, ПараметрыСоединения.ПараметрыСоединений);
			ПараметрыСоединения.ПараметрыСоединений.Путь = Неопределено;
		КонецЕсли;
		Если Не СоединениеСДБФ.Проверен Тогда
			БД = МодульОбъектаСервер.РаботаСДБФ_ПолучитьСоединениеБД(ПараметрыСоединения.РаботаСДБФ, СоединениеСДБФ);
			УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, БД);
			ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, БД);
			СоединениеСДБФ.Проверен = Истина;
		КонецЕсли;
		Возврат СоединениеСДБФ;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Статусы_ДБФ.ПолучитьСоединениеDBF")
	КонецПопытки;
	Возврат БД;
КонецФункции

&НаСервере
Процедура ПроверитьФайлыСопоставленияДБФ(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Если ОписаниеФайлаНоменклатураСБИС.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
		ОписаниеФайлаНоменклатураСБИС.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаНоменклатура1С.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
		ОписаниеФайлаНоменклатура1С.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если ОписаниеФайлаЕдиниц.Есть = Неопределено Тогда
		ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
		ОписаниеФайлаЕдиниц.Есть = ФайлСтатусов.Существует();
	КонецЕсли;
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатураСБИС.Проверен Тогда
		Возврат
	КонецЕсли;
	
	Если	ОписаниеФайлаНоменклатураСБИС.Есть
		И	ОписаниеФайлаНоменклатура1С.Есть
		И	ОписаниеФайлаЕдиниц.Есть Тогда
		Если Не ОписаниеФайлаНоменклатураСБИС.Проверен Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСБИС.ИмяБД, СоединениеБД, 2, 3);
			//
			//Если НЕ Recordset.Fields.Count = 10 Тогда
			//	//По числу полей определим, соответствует ли формат БД требуемому.
			//	СбисОбновитьФайлБД(ФайлСтатусов, СоединениеСДБФ, Recordset.Fields.Count);
			//	//Переоткроем файл после обновления
			//	Recordset.Close();
			//КонецЕсли;           
			//
			Если		Recordset.Fields.Count = 2 Тогда
				Попытка
					Если Recordset.EOF Тогда
						//Пустой файл. Пересоздать на всякий случай.
						RecordSet.Close();
						Попытка
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
							ОписаниеФайлаНоменклатураСБИС.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
							ОписаниеФайлаНоменклатура1С.Есть	= Ложь;
							УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
							ОписаниеФайлаЕдиниц.Есть			= Ложь;
							
							СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
						Исключение
							ИнфоОбОшибке = ИнформацияОбОшибке();
							МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПроверитьФайлыСопоставленияДБФ.СоздатьФайлСопоставления");
						КонецПопытки;
					Иначе
						СбисТестПоля = Recordset.Fields("NAME");
						СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
					КонецЕсли;
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат файла сопоставления");
				КонецПопытки;
				//Всё ок, файл готов к использованию
			Иначе
				СписокПолей = "";
				Для Каждого Field Из Recordset.Fields Цикл
					СписокПолей = СписокПолей + Field.Name + ", ";
				КонецЦикла;
				СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей - 2));
				МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат DBF. Обратитесь в техподдержку!",, Новый Структура("Поля", СписокПолей));
			КонецЕсли;
			ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
			ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
			ОписаниеФайлаЕдиниц.Проверен			= Истина;
		КонецЕсли;
	Иначе
		СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД);
		Если ОписаниеФайлаНоменклатураСтарое.Есть = Неопределено Тогда
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		Если ОписаниеФайлаНоменклатураСтарое.Есть Тогда
			ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД);
			ФайлСтатусов = Новый Файл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
			ОписаниеФайлаНоменклатураСтарое.Есть = ФайлСтатусов.Существует();
		КонецЕсли;
		ОписаниеФайлаНоменклатураСБИС.Проверен	= Истина;
		ОписаниеФайлаНоменклатура1С.Проверен	= Истина;
		ОписаниеФайлаЕдиниц.Проверен			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблоныРаботыССопоставлениемДБФ(СоединениеСДБФ, СоединениеБД)
	
	ШаблонПоискаЗаписиСБИС =  
	"SELECT * FROM {base_sbis}
	|WHERE {base_sbis}.ID = '{ID}'";
	
	ШаблонДобавленияКорневойЗаписи = 
	"INSERT INTO {base_sbis} 
	|VALUES('{ID}',
	|		'{NAME}')";
	
	ШаблонМассовыйПоискЗаписи1С =  
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID IN ({KEY_ID_LIST}) 
	|ORDER BY KEY_ID, N1C_ID";
	
	ШаблонПоискаЗаписи1С = 
	"SELECT * FROM {base_1C}
	|WHERE {base_1C}.KEY_ID = '{KEY_ID}'
	|	AND {base_1C}.N1C_ID = '{N1C_ID}'
	|	AND {base_1C}.C1C_ID = '{C1C_ID}'";
	
	ШаблонДобавленияЗаписи1С =  
	"INSERT INTO {base_1C} 
	|VALUES('{KEY_ID}',
	|		'{N1C_ID}',
	|		'{N1C_TY}',
	|		'{C1C_ID}',
	|		'{C1C_TY}',
	|		'{GTIN}')";
	
	ШаблонМассовыйПоискЕдиниц = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID IN ({KEY_ID_LIST}) ORDER BY KEY_ID";
	
	ШаблонПоискаЕдиницы = 
	"SELECT * from {base_unit}
	|WHERE {base_unit}.KEY_ID ='{KEY_ID}'
	|	AND {base_unit}.U1C_ID = '{U1C_ID}'
	|	AND {base_unit}.USBIS_ID = '{USBIS_ID}'";
	
	ШаблонДобавленияЕдиницы = 
	"INSERT INTO {base_unit} 
	|VALUES('{KEY_ID}',
	|		'{USBIS_ID}',
	|		'{USBIS_NM}',
	|		'{U1C_ID}',
	|		'{U1C_TY}',
	|		'{RATIO}')";
	
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	ШаблонПоискаЗаписиСБИС			= СтрЗаменить(ШаблонПоискаЗаписиСБИС,			"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонДобавленияКорневойЗаписи	= СтрЗаменить(ШаблонДобавленияКорневойЗаписи,	"{base_sbis}",	ОписаниеФайлаНоменклатураСБИС.ИмяБД);
	ШаблонПоискаЗаписи1С			= СтрЗаменить(ШаблонПоискаЗаписи1С,				"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонДобавленияЗаписи1С		= СтрЗаменить(ШаблонДобавленияЗаписи1С,			"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	ШаблонПоискаЕдиницы				= СтрЗаменить(ШаблонПоискаЕдиницы,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	//ШаблонПоискаЕдиниц				= СтрЗаменить(ШаблонПоискаЕдиниц,				"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонДобавленияЕдиницы			= СтрЗаменить(ШаблонДобавленияЕдиницы,			"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
		
	ШаблонМассовыйПоискЕдиниц		= СтрЗаменить(ШаблонМассовыйПоискЕдиниц,		"{base_unit}",	ОписаниеФайлаЕдиниц.ИмяБД);
	ШаблонМассовыйПоискЗаписи1С		= СтрЗаменить(ШаблонМассовыйПоискЗаписи1С,		"{base_1C}",	ОписаниеФайлаНоменклатура1С.ИмяБД);
	
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонПоискаЗаписиСБИС",			ШаблонПоискаЗаписиСБИС);
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонДобавленияКорневойЗаписи",	ШаблонДобавленияКорневойЗаписи);
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонПоискаЗаписи1С",				ШаблонПоискаЗаписи1С);
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонДобавленияЗаписи1С",			ШаблонДобавленияЗаписи1С);	
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонПоискаЕдиницы",				ШаблонПоискаЕдиницы);
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонДобавленияЕдиницы",			ШаблонДобавленияЕдиницы);	
	
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонМассовыйПоискЕдиниц",		ШаблонМассовыйПоискЕдиниц);
	СоединениеСДБФ.ШаблоныЗапросов.Вставить("ШаблонМассовыйПоискЗаписи1С",		ШаблонМассовыйПоискЗаписи1С);	
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьСтарыеДанныеСопоставления(СоединениеСДБФ, СоединениеБД)
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаНоменклатураСтарое	= СоединениеСДБФ.Файлы.Получить("СтароеСопоставление");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	
	RecordSet = Новый ComОбъект("ADODB.Recordset");
	Recordset.CursorLocation = 3;
	Recordset.Open("Select top 1 * from " + ОписаниеФайлаНоменклатураСтарое.ИмяБД, СоединениеБД, 2, 3);

	Если Recordset.EOF Тогда
		//Пустой файл.
		Попытка
			УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат;
	ИначеЕсли	Recordset.Fields.Count = 6 Тогда
		Попытка
			//KEY_ID char(240), N1C_ID char(240), N1C_TY char(240), C1C_ID char(240), C1C_TY char(240), GTIN char(240)
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатураСБИС.ИмяБД + "(NAME, ID) SELECT NAME, ID FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатура1С.ИмяБД + "(KEY_ID, N1C_ID, N1C_TY, C1C_ID, C1C_TY, GTIN) SELECT ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			
			ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
		Исключение
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
		КонецПопытки;
	ИначеЕсли	Recordset.Fields.Count = 7 Тогда
		Попытка
			//KEY_ID char(240), N1C_ID char(240), N1C_TY char(240), C1C_ID char(240), C1C_TY char(240), GTIN char(240)
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатураСБИС.ИмяБД + "(NAME, ID) SELECT NAME, ID FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатура1С.ИмяБД + "(KEY_ID, N1C_ID, N1C_TY, C1C_ID, C1C_TY, GTIN) SELECT ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			
			ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
		Исключение
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
		КонецПопытки;
	ИначеЕсли	Recordset.Fields.Count = 10 Тогда
		Попытка
			//Разбивка на файлы единиц и номенклатуры
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатураСБИС.ИмяБД + "(NAME, ID) SELECT NAME, ID FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаНоменклатура1С.ИмяБД + "(KEY_ID, N1C_ID, N1C_TY, C1C_ID, C1C_TY, GTIN) SELECT ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД);
			СоединениеБД.Execute("INSERT INTO " + ОписаниеФайлаЕдиниц.ИмяБД + " (	KEY_ID, U1C_ID,		U1C_TY,                                 	RATIO) 
								|SELECT												ID,     IDUNTORG,	'" + ПараметрыСоединения.Типы.Единицы + "',	RATIO FROM " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + " WHERE (NOT " + ОписаниеФайлаНоменклатураСтарое.ИмяБД + ".IDUNPOST = '')");	
			ПереместитьФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяФайла, СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСтарое.ИмяБД +"_OLD.dbf"); 
		Исключение
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнформацияОбОшибке(), "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
		КонецПопытки;		
	КонецЕсли;
	//	
	//	Recordset.Fields.Count = 7 Тогда
	//	Попытка
	//		Если Recordset.EOF Тогда
	//			//Пустой файл. Пересоздать на всякий случай.
	//			RecordSet.Close();
	//			Попытка
	//				УдалитьФайлы(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла); 
	//				СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
	//			Исключение
	//				ИнфоОбОшибке = ИнформацияОбОшибке();
	//				МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СопоставлениеНоменклатуры_ДБФ.ПроверитьФайлыСопоставленияДБФ.СоздатьФайлСопоставления");
	//			КонецПопытки;
	//		Иначе
	//			СбисТестПоля = Recordset.Fields("GTIN");
	//			СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
	//		КонецЕсли;
	//		Если Не ОписаниеФайлаЕдиниц.Есть Тогда
	//			СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
	//		КонецЕсли;
	//		ОписаниеФайлаНоменклатураСБИС.Проверен = Истина;
	//	Исключение
	//		ИнфоОбОшибке = ИнформацияОбОшибке();
	//		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 717,, "Неизвестный формат файла сопоставления");
	//	КонецПопытки;
	//	//Всё ок, файл готов к использованию
	//ИначеЕсли	Recordset.Fields.Count = 10 Тогда
	//	ПереместитьФайл(СоединениеСДБФ.Путь + "NomPost.dbf", СоединениеСДБФ.Путь + "NPOld.dbf"); 
	//	Попытка
	//		СоздатьФайлСопоставления(СоединениеСДБФ, СоединениеБД);
	//		СоздатьФайлЕдиниц(СоединениеСДБФ, СоединениеБД);
	//		//Разбивка на файлы единиц и номенклатуры
	//		СоединениеБД.Execute("INSERT INTO NomPost(NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN) SELECT NAME, ID, IDNOM, SPRNOM, IDCHAR, SPRCHAR, GTIN FROM NPOld");
	//		СоединениеБД.Execute("INSERT INTO NomUnit ( ID_NMKEY, ID_POSTU, NM_POSTU,                                 	ID_TORGU, RATIO) 
	//							|SELECT					ID,       IDUNTORG, '" + ПараметрыСоединения.Типы.Единицы + "',	IDUNPOST, RATIO FROM NPOld WHERE (NOT NPOld.IDUNPOST = '')");	
	//	Исключение
	//		ПереместитьФайл(СоединениеСДБФ.Путь + "NPOld.dbf", СоединениеСДБФ.Путь + "NomPost.dbf");
	//		Попытка
	//			УдалитьФайлы(СоединениеСДБФ.Путь + "NomUnit.dbf");
	//		Исключение
	//		КонецПопытки;
	//		ИнфоОбОшибке = ИнформацияОбОшибке();
	//		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Recordset.Open", 773, "Не удалось обновить файл сопоставления");
	//	КонецПопытки;		
	
КонецПроцедуры

// Процедура - создаёт файл DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Создаёт файлы со следующей структурой:
//	НоменклатураСБИС(nom_sbis):
//		ID		- (Индекс, Ключ) идентификатор номенклатуры поставщика.
//  	NAME	- (Индекс, Ключ) название номенклатуры поставщика.
//	Номенклатура1С (nom_1С):
//		KEY_ID	- (Индекс, Ключ) идентификатор номенклатуры поставщика из nom_sbis.
//		N1C_ID	- идентификатор номенклатуры в 1С (УИД)
//		N1C_TY	- название справочника номенклатуры 1С (Номенклатура)
//		C1C_ID	- идентификатор характеристики номенклатуры в 1С (УИД)
//		C1C_TY	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//		GTIN	- глобальный номер товарной продукции, при наличии.
//	Единицы измерения(nom_unit)
//		KEY_ID	- (Ключ) идентификатор номенклатуры поставщика
//		USBIS_ID- (Ключ) идентификатор единицы поставщика
//		USBIS_NM- Наименование единицы поставщиа
//		U1C_ID	- идентификатор единицы измерения в 1С (УИД)
//		U1C_TY	- название справочника единиц измерения 1С (УпаковкиЕдиницыИзмерения)
//		RATIO	- коэффициет пересчета
&НаСервере
Процедура СоздатьФайлыСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	Попытка
		Если Не ОписаниеФайлаНоменклатураСБИС.Есть Тогда 
			СоединениеБД.Execute("Create Table " + ОписаниеФайлаНоменклатураСБИС.ИмяФайла + " (ID char(240), NAME char(240))");
			ОписаниеФайлаНоменклатураСБИС.Есть = Истина;
		КонецЕсли;
		Если Не ОписаниеФайлаНоменклатура1С.Есть Тогда 
			СоединениеБД.Execute("Create Table " + ОписаниеФайлаНоменклатура1С.ИмяФайла + " (KEY_ID char(240), N1C_ID char(240), N1C_TY char(240), C1C_ID char(240), C1C_TY char(240), GTIN char(240))");
			ОписаниеФайлаНоменклатура1С.Есть = Истина;
		КонецЕсли;
		Если Не ОписаниеФайлаЕдиниц.Есть Тогда 
			СоединениеБД.Execute("Create Table " + ОписаниеФайлаЕдиниц.ИмяФайла + " (KEY_ID char(240), USBIS_ID char(50), USBIS_NM char(240), U1C_ID char(36), U1C_TY char(100), RATIO char(15))");
			ОписаниеФайлаЕдиниц.Есть = Истина;
		КонецЕсли;
		//СоединениеБД.Execute("Create Table " + ОписаниеФайлаНоменклатура.ИмяФайла + " (ID char(240), NAME char(240), IDNOM char(240), SPRNOM char(240), IDCHAR char(240), SPRCHAR char(240), GTIN char(240))");
		СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "СоединениеБД.Execute");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - создаёт индекс к DBF для сопоставления номенклатуры
//
// Параметры:
//  СоединениеСДБФ	 - Структура	 - Объект соединения
//  СоединениеБД	 - COM Объект	 - Соединение с каталогом
// Созадёт файл со следующей структурой
//	ID		- (Ключ) идентификатор номенклатуры поставщика.
//  NAME		- название номенклатуры поставщика.
//  IDNOM		- идентификатор номенклатуры в 1С (УИД)
//  SPRNOM	- название справочника номенклатуры 1С (Номенклатура)
//  IDCHAR	- идентификатор характеристики номенклатуры в 1С (УИД)
//  SPRCHAR	- название справочника характеристик 1С (ХарактеристикиНоменклатуры)
//  GTIN		- глобальный номер товарной продукции, при наличии.
&НаСервере
Процедура СоздатьИндексСопоставления(СоединениеСДБФ, СоединениеБД)
	
	ОписаниеФайлаНоменклатураСБИС	= СоединениеСДБФ.Файлы.Получить("НоменклатураСБИС");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			ОбъектXBase = Новый XBase(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяФайла);
			ОбъектXBase.Индексы.Добавить("XID",		"ID",	Истина);
			ОбъектXBase.Индексы.Добавить("XNAME",	"NAME",	Истина);
			ОбъектXBase.СоздатьИндексныйФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатураСБИС.ИмяБД + ".cdx");
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаНоменклатура1С		= СоединениеСДБФ.Файлы.Получить("Номенклатура1С");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			ОбъектXBase = Новый XBase(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяФайла);
			ОбъектXBase.Индексы.Добавить("XID",		"KEY_ID",	Истина);
			ОбъектXBase.Индексы.Добавить("XN1C_ID",	"N1C_ID",	Ложь);
			ОбъектXBase.Индексы.Добавить("XC1C_ID",	"C1C_ID",	Ложь);
			ОбъектXBase.СоздатьИндексныйФайл(СоединениеСДБФ.Путь + ОписаниеФайлаНоменклатура1С.ИмяБД + ".cdx");
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	ОписаниеФайлаЕдиниц				= СоединениеСДБФ.Файлы.Получить("Единицы");
	ИмяФайлаСтатусов				= СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяБД + ".cdx"; 
	ФайлСтатусов					= Новый Файл(ИмяФайлаСтатусов);
	Если Не ФайлСтатусов.Существует() Тогда
		Попытка
			ОбъектXBase = Новый XBase(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяФайла);
			ОбъектXBase.Индексы.Добавить("XID",			"KEY_ID",	Ложь);
			ОбъектXBase.Индексы.Добавить("XUSBIS_ID",	"USBIS_ID",	Ложь);
			ОбъектXBase.Индексы.Добавить("XU1C_ID",		"U1C_ID",	Ложь);
			ОбъектXBase.СоздатьИндексныйФайл(СоединениеСДБФ.Путь + ОписаниеФайлаЕдиниц.ИмяБД + ".cdx");
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			МодульОбъектаСервер().ВызватьСбисИсключениеСервер(ИнфоОбОшибке, "Сопоставление_ДБФ.СоздатьИндексСопоставления");
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗавершитьСоединениеСDBFНаСервере(ПараметрыСоединения) Экспорт
	ПараметрыСоединения.Подключено = Ложь;
	ПараметрыСоединения.Удалить("Хранилище");
	ПараметрыСоединения.ВызывалосьСоздание = Ложь;
КонецПроцедуры

