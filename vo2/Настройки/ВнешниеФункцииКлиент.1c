
&НаКлиенте
Процедура	сбисПодключитьЗаплатки(Кэш, ДопПараметры=Неопределено) Экспорт
	
	// Подключает внешнюю обработку с пользовательскими функциями
	ПараметрыФункций = Новый Структура("ИмяВнешнихФункций, СведенияПоследнемЗапускеВФК", "ВнешниеФункции_Клиент");
	Кэш.КэшНастроек.ПараметрыНастроек.Свойство("СведенияПоследнемЗапускеВФК", ПараметрыФункций.СведенияПоследнемЗапускеВФК);	
	
	ДанныеЗаписи = ПолучитьАдресВнешнихФункций(ПараметрыФункций, ДопПараметры.МестаПоиска, Кэш.ПараметрыСистемы);
	
	Если Не	ДанныеЗаписи.Заплатки = "без изменений" Тогда
		Кэш.ТекущийСеанс.Функции.Очистить();
		Кэш.Заплатки = ДанныеЗаписи.Заплатки;
		Если ДанныеЗаписи.Свойство("СписокКлиентскихФорм") Тогда
			Кэш.ТекущийСеанс.Формы.Клиентские = ДанныеЗаписи.СписокКлиентскихФорм;
		КонецЕсли;
	КонецЕсли;
	Кэш.КэшНастроек.ПараметрыНастроек.Вставить("СведенияПоследнемЗапускеВФК", ДанныеЗаписи.СведенияОЗапуске);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция		ПолучитьАдресВнешнихФункций(Знач ПараметрыФункций, МестаПоискаОбработки, ПараметрыСистемы)	Экспорт
	
	ИмяВременногоФайла		= ПолучитьИмяВременногоФайла(); 
	УправляемоеПриложение	= ПараметрыСистемы.Клиент.УправляемоеПриложение; 
	КодЯзыка				= ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	ИмяВнешнихФункций		= ПараметрыФункций.ИмяВнешнихФункций;
	ПараметрыПоследнихВФК	= ПараметрыФункций.СведенияПоследнемЗапускеВФК;
	
	ЗаписьМестаПоиска	= Новый Структура();
	ЗаписьМестаПоиска.Вставить("СведенияОЗапуске", Новый Структура);
	ЗаписьМестаПоиска.Вставить("Заплатки",				Ложь);
	ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм",	Новый СписокЗначений);
	
	ВнешняяОбработка	= Неопределено;
	
	Для Каждого МестоПоиска Из МестаПоискаОбработки Цикл
		ПутьПоиска		= МестоПоиска.Путь;
		АлгоритмПоиска	= МестоПоиска.Алгоритм;
		СтрокаОшибки	= "Не удалось подключить внешние функции из """ + ПутьПоиска + """ по причине: ";
		Если Не ЗначениеЗаполнено(АлгоритмПоиска) Тогда
			Если Булево(СтрЧислоВхождений(МестоПоиска, "\")) Тогда
				АлгоритмПоиска = "Каталог";
			Иначе
				АлгоритмПоиска = "Запрос";
			КонецЕсли;
		КонецЕсли;
				
		Если АлгоритмПоиска = "Каталог" Тогда//Это каталог, проверить наличие обработки
			ОбластьПоиска = ПутьПоиска + ИмяВнешнихФункций + ".epf";
			Попытка
				ФайлВнешнихФункций = Новый Файл(ОбластьПоиска);
				
				Если Не ФайлВнешнихФункций.Существует() Тогда//Такого файла нет
					Продолжить;
				КонецЕсли;
				ДатаИзмененияФайла = ФайлВнешнихФункций.ПолучитьВремяИзменения();
				Если	Не	ПараметрыПоследнихВФК = Неопределено
					И		ПараметрыПоследнихВФК.Свойство("ДатаИзменения")
					И		ПараметрыПоследнихВФК.Свойство("ИмяФайла")
					И		ПараметрыПоследнихВФК.ДатаИзменения	= ДатаИзмененияФайла
					И		ПараметрыПоследнихВФК.ИмяФайла		= ОбластьПоиска Тогда
					ЗаписьМестаПоиска.СведенияОЗапуске	= ПараметрыПоследнихВФК;
					ЗаписьМестаПоиска.Заплатки			= "без изменений";
					Возврат ЗаписьМестаПоиска;
				КонецЕсли;
				ЗаписьМестаПоиска.СведенияОЗапуске = Новый Структура("ДатаИзменения, ИмяФайла", ДатаИзмененияФайла, ОбластьПоиска);
				
				ВнешняяОбработка = ВнешниеОбработки.Создать(ОбластьПоиска, Ложь);
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		Иначе//Найти область по метаданным и проверить наличие обработки.
			МногоСтрочнаяЗапись = СтрЗаменить(ПутьПоиска, ".", Символы.ПС);
			Если СтрЧислоСтрок(МногоСтрочнаяЗапись) = 0 Тогда
				Сообщить(СтрокаОшибки	+ "Неверно передано место поиска!");
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1);
			СтрокаПоиска	= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 2);
			Попытка
				ОбластьПоиска = Метаданные[СтрокаМетаданных];
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбъектМетаданных = ОбластьПоиска.Найти(СтрокаПоиска);
			Если		ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			ИначеЕсли	ОбластьПоиска = Метаданные.Обработки
					И	АлгоритмПоиска = "Метаданные" Тогда//Конфигурация
				ОбработкаФункций = ОбластьПоиска.Найти(ИмяВнешнихФункций);
				Если ОбработкаФункций = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если УправляемоеПриложение Тогда
					ЗаписьМестаПоиска.Вставить("Заплатки", НСтр("ru = 'Обработка.'; en = 'DataProcessor.'",КодЯзыка) + ИмяВнешнихФункций + НСтр("ru = '.Форма.'; en = '.Form.'",КодЯзыка));
				Иначе
					ЗаписьМестаПоиска.Вставить("Заплатки", Обработки[ИмяВнешнихФункций]);
				КонецЕсли;
				//Сразу, пока на сервере, определим клиентские формы
				СписокКлиентскихФорм = Новый СписокЗначений;
				Для Каждого Фрм Из ОбработкаФункций.Формы Цикл
					СписокКлиентскихФорм.Добавить(Фрм.Имя);
				КонецЦикла;
				ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);
				Прервать;
			ИначеЕсли	АлгоритмПоиска = "Запрос"  
					И	ОбластьПоиска = Метаданные.Справочники Тогда
				//Справочник обработок
				ОбластьПоиска = Справочники;
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				| ОбластьПоиска.Ссылка КАК ОбработкаФункций
				|ИЗ
				| " + Лев(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1), СтрДлина(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1))-1) + "." + СтрокаПоиска + " КАК ОбластьПоиска
				|ГДЕ
				| НЕ ОбластьПоиска.ПометкаУдаления
				| И ОбластьПоиска.Наименование ПОДОБНО &ИмяФайла");
				Если СтрокаПоиска = "ДополнительныеОтчетыИОбработки" Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Наименование","ИмяФайла");
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций + ".%");
					Если Не Метаданные.Перечисления.Найти("ВариантыПубликацииДополнительныхОтчетовИОбработок") = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						| И ОбластьПоиска.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
					КонецЕсли;
				Иначе
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций);
				КонецЕсли;
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				//Запросом тащим обработки из справочника, вытягиваем из хранилища и пробуем создать
				Пока РезультатЗапроса.Следующий() Цикл
					ОбработкаФункций = РезультатЗапроса.ОбработкаФункций;
					Если ОбработкаФункций = ОбластьПоиска[СтрокаПоиска].ПустаяСсылка() Тогда 
						Продолжить;                                   
					КонецЕсли;
					
					Если ОбработкаФункций.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
						РеквизитХранилище = "ХранилищеОбработки";
					Иначе
						РеквизитХранилище = "ХранилищеВнешнейОбработки";
					КонецЕсли;
					
					Попытка
						Если УправляемоеПриложение Тогда
							ИмяОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(ОбработкаФункций, РеквизитХранилище), ИмяВнешнихФункций,Ложь);
						Иначе
							ДвоичныеДанные = ОбработкаФункций[РеквизитХранилище].Получить();
							ДвоичныеДанные.Записать(ИмяВременногоФайла);
							ИмяОбработки = ИмяВременногоФайла
						КонецЕсли;
						ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
						Прервать;
					Исключение
						Сообщить(СтрокаОшибки + ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
				КонецЦикла;
			Иначе//Неизвестное место
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВнешняяОбработка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если УправляемоеПриложение Тогда
			ПолноеИмяФормы = СтрЗаменить(НСтр("ru = 'ВнешняяОбработка.%func%.Форма.'; en = 'ExternalDataProcessor.%func%.Form.'",КодЯзыка), "%func%", ИмяВнешнихФункций);
			ЗаписьМестаПоиска.Вставить("Заплатки", ПолноеИмяФормы);
		Иначе
			ЗаписьМестаПоиска.Вставить("Заплатки", ВнешняяОбработка);
		КонецЕсли;
		//Сразу, пока на сервере, определим клиентские формы
		СписокКлиентскихФорм = Новый СписокЗначений;
		Для Каждого Фрм Из ВнешняяОбработка.Метаданные().Формы Цикл
			СписокКлиентскихФорм.Добавить(Фрм.Имя);
		КонецЦикла;
		ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);
		Прервать;
	КонецЦикла;
	
	Возврат ЗаписьМестаПоиска;
	
КонецФункции

