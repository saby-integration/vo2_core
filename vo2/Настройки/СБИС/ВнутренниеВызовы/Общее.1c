////////////////////////////////////////////////////

&НаКлиенте
Функция		ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш, КаталогСНастройками,Отказ)
	Перем ЗначениеИни;
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	ВременныйКэш = Новый Структура("Парам, Ини", Новый	Структура("КаталогНастроек", КаталогСНастройками), Новый	Структура);
	ВременныйКэш.Вставить("ГлавноеОкно",			ГлавноеОкно);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",		Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",				Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыФильтра",		Кэш.ПараметрыФильтра);
	ВременныйКэш.Вставить("ОбщиеФункции",			Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("Заплатки",				Кэш.Заплатки); 
	ВременныйКэш.Вставить("ПараметрыСистемы",		Кэш.ПараметрыСистемы);
	ВременныйКэш.Вставить("ТекущийСеанс",			Новый Структура("Функции", Новый Структура));
	ВременныйКэш.Вставить("КэшНастроек",			Новый Структура);
	ВременныйКэш.Вставить("КэшЗначенийИни",			Новый Структура("ИниЗагрузки", Новый Структура));
	ВременныйКэш.Вставить("ТихийРежим",				Истина);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена",				1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек",	0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек",	"");
	ВременныйКэш.Парам.Вставить("НастройкиАвтообновление",	Ложь);
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ЗагрузкаИзКаталога");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	ГлавноеОкно.СбисПоказатьСостояние("Чтение настроек...", ГлавноеОкно);   
	ПараметрыИнициализации = Новый Структура("ИнициализацияВременногоКэша", Истина);
	ГлавноеОкно.ОпределитьФормуРаботыСНастройками(ВременныйКэш, ВременныйКэш.Парам.СпособОбмена, ВременныйКэш.Парам.СпособХраненияНастроек, ПараметрыИнициализации);
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		Отказ = Истина;
		Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",776,"Запуск программы/функции/метода не удался","Не удалось установить форму работы с настройками!");
	КонецЕсли;
	
	УстановленныеИниФайлы = ВременныйКэш.ФормаНастроек.СбисПолучитьНастройки(ВременныйКэш, Отказ);
	ДатаИзмененияНастроек = ТекущаяДата();
	
	Если УстановленныеИниФайлы = Неопределено	Тогда
		Отказ	= Истина;
		Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",610,"Отсутствует файл настроек для данного типа данных","В каталоге " + КаталогСНастройками + " отсутствуют файлы настроек!");
	КонецЕсли; 
	
	//1189820427 
	ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;   
	Для	Каждого	КлючИЗначениеИни ИЗ ВременныйКэш.Ини Цикл
		Если Не ТипЗнч(КлючИЗначениеИни.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		ИниТип = Неопределено;
		Если КлючИЗначениеИни.Значение.Свойство("ТипИни", ИниТип) 
			И ТипЗнч(ИниТип) = Тип("Структура")
			И ТипыИни.Найти(ИниТип.Значение) = Неопределено
			И НЕ КлючИЗначениеИни.Ключ = "Конфигурация" Тогда 
				ВременныйКэш.Ини.Удалить(КлючИЗначениеИни.Ключ);
		КонецЕсли;  
	КонецЦикла;  
	
	//Определение стандартной конфигурации по инишкам xml
	ПрефиксКонфигурации	= "";
	Для	Каждого	УстановленнаяИни Из УстановленныеИниФайлы Цикл
		ИмяФайлаИни	= Сред(УстановленнаяИни.ИмяФайла, СтрДлина(ВременныйКэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис)+1);
		ПрефиксИни	= Сред(ИмяФайлаИни, 1, Найти(ИмяФайлаИни, "_")-1);
		ПолноеИмяИни= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		Если			ПустаяСтрока(ПрефиксКонфигурации) Тогда
			ПрефиксКонфигурации	= ПрефиксИни;
		ИначеЕсли Не	ПрефиксКонфигурации	= ПрефиксИни Тогда
			//Сообщить("Нельзя загрузить настройки от различных конфигураций!",	СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат	МодульОбъектаКлиент().НовыйСбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",608, "Некорректное описание параметра в файле настроек", "Нельзя загрузить настройки от различных конфигураций!");
		КонецЕсли;
	КонецЦикла;
	
	ГлавноеОкно.СбисПоказатьСостояние("Патч настроек...", ГлавноеОкно);
	
	//Исправление определения базового конфига для загружаемых из каталога инишек
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version","");
	ЗаполнитьЗначенияСвойств(ПараметрыТекущейСистемы, Кэш.КэшНастроек.ПараметрыКонфигурации, "subsystem,version");
	ПрефиксТекущейСистемы	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыТекущейСистемы);
	Если	Лев(ПрефиксТекущейСистемы, СтрДлина(ПрефиксИни)) = ПрефиксИни	Тогда//Это наша система, взять параметры текущей системы.
		ВерсияСистемы	= Кэш.КэшНастроек.ПараметрыКонфигурации.version;
		ПрефиксИни		= Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem;
	ИначеЕсли	ПрефиксИни = "КА"
			Или	ПрефиксИни = "БГУ"
			Или	ПрефиксИни = "УПП" Тогда//Без начала версии в префиксе. Подразумевается 1.
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию("1", "Дозаполнить");//Взять последнюю подходящую
	Иначе//Рассчитать версию с учетом наличия символов версии в префиксе.
		СимволыВерсии	= "0123456789";
		Для	шаг	= 1	По СтрДлина(ПрефиксИни)	Цикл
			Если Булево(Найти(СимволыВерсии, сред(ПрефиксИни, шаг, 1))) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию(Сред(ПрефиксИни, шаг), "Дозаполнить");
		ПрефиксИни		= Сред(ПрефиксИни, 1, шаг -1);
		Если ПрефиксИни = "УТ" Тогда
			ПрефиксИни = ПрефиксИни + СтрПолучитьСтроку(СтрЗаменить(ВерсияСистемы, ".", Символы.ПС), 1);
		КонецЕсли;
	КонецЕсли;
	
	//Определение подходящих конфигов для загруженных файлов
	КонфигурацияЗагруженныхИни	= Новый	Структура;
	КонфигурацияЗагруженныхИни.Вставить("service",	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	КонфигурацияЗагруженныхИни.Вставить("subsystem",ПрефиксИни);
	КонфигурацияЗагруженныхИни.Вставить("version",	ВерсияСистемы);
	ПараметрыКонфигурации = НайтиТиповойКонфигСервиса(Кэш, КонфигурацияЗагруженныхИни);
	//Проверяем при временном кэше, чтобы корректно заполнилась шапка отчета об ошибках
	ВременныйКэш.ТихийРежим = Ложь;
	
	//Получаем параметры СБИС из каталога
	СтруктураСбисПараметров = ВременныйКэш.ФормаНастроек.ПолучитьПараметрыСБИС(ВременныйКэш, ВременныйКэш.Парам.КаталогНастроек, Ложь);
	СтруктураНовыхПараметровСбис = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураСбисПараметров Цикл
		Если НРег(Лев(КлючИЗначение.Ключ, 2)) = "во" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНовыхПараметровСбис.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	//Выполним минимально необходимые операции с настройками
	
	//Пропатчим ини к виду СБИС
	Для	Каждого УстановленнаяИни Из УстановленныеИниФайлы Цикл
		ПолноеИмяИни= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		ИниИмяИни	= УстановленнаяИни.Ини_ИмяИни;
		Если ВременныйКэш.ини.Свойство(ИниИмяИни, ЗначениеИни) Тогда
			ЗначениеИни.Вставить("СбисЕстьИзменения",	УстановленнаяИни.ЕстьИзменения);
			Если(	Не	(	ИниИмяИни = "Конфигурация"
						Или	Лев(ИниИмяИни, 8) = "Загрузка")
				И	ЗначениеИни.Свойство("мДокумент")) Тогда
				ВременныйКэш.ини.Удалить(ИниИмяИни);
				ИниИмяИни = "Загрузка_Входящий_" + ИниИмяИни;
				ВременныйКэш.Ини.Вставить(ИниИмяИни, ЗначениеИни);
				УстановленнаяИни.Ини_ИмяИни = ИниИмяИни;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КлассIntegrationConnectionБыло = Кэш.КэшНастроек.ВыбранныеНастройки;
	КлассIntegrationConnection_Очистить(Кэш, КлассIntegrationConnectionБыло, Новый Структура("Ини", Истина), Отказ);
	
	КлассIntegrationConnectionБыло.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассIntegrationConnectionБыло, Новый Структура("ПараметрыДописать", СтруктураНовыхПараметровСбис), Отказ);
	
	КлассIntegrationConnectionНовый = НовыйIntegrationConnection(Кэш, Новый Структура("БазовыйКласс, Ини", КлассIntegrationConnectionБыло, ВременныйКэш.Ини), Отказ);
	//КлассIntegrationConnectionНовый = НовыйIntegrationConnection(Кэш, Новый Структура("БазовыйКласс, ПараметрыКонфигурации, Ини", КлассIntegrationConnectionБыло, ПараметрыКонфигурации, ВременныйКэш.Ини), Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(КлассIntegrationConnectionНовый, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");
	КонецЕсли;
	
	ГлавноеОкно.СбисПоказатьСостояние("Установка настроек...", ГлавноеОкно);
	
	РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnectionНовый, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассIntegrationConnectionНовый);
	Попытка
		ПараметрыУстановить = Новый Структура("ПринудительнаяПроверка, СписокИни, ИдентификаторНастроек, СтруктураНастроек", Истина, РезультатУстановки.СписокФайлов, КлассIntegrationConnectionНовый.Идентификатор, КлассIntegrationConnectionНовый.Данные.Параметры);
		Кэш.ФормаНастроекОбщее.ВыполнитьУстановкуНастроек(ПараметрыУстановить, Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");		
	КонецПопытки;
	КлассIntegrationConnectionНовый.ПараметрыРаботы.Изменен = Истина;
	КлассIntegrationConnectionНовый.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
	Возврат КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnectionНовый, Новый Структура, Отказ);
КонецФункции

&НаКлиенте
//Параметры
//	ПараметрыЗаполнения:		Структура. Возможные ключи:
//			Тип	account	- шаблон;
//				user	- пользовательские;
Функция		ЗаполнитьТаблицуДоступныхНастроек(Кэш, ПараметрыЗаполнения, Отказ)
	КлючТаблицы = "ТаблицаПользовательскихНастроек";
	Если ПараметрыЗаполнения.ТипКоннекшена = "account" Тогда
		КлючТаблицы = "ТаблицаШаблоновНастроек";
	КонецЕсли;
	ДанныеЗаполнить = СформироватьТаблицуДоступныхНастроек(Кэш, ПараметрыЗаполнения, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ДанныеЗаполнить, "ФайлыНастроекСервер.ЗаполнитьТаблицуДоступныхНастроек");
	КонецЕсли;
	Попытка
		ЗаполнитьТаблицуДоступныхНастроек_Сервер(КлючТаблицы, ДанныеЗаполнить);
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), "ФайлыНастроекСервер.ЗаполнитьТаблицуДоступныхНастроек");
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура	ЗаполнитьТаблицуДоступныхНастроек_Сервер(КлючТаблицы, ДанныеКЗаполнению)
	ЭтаФорма[КлючТаблицы].Очистить();
	
	Для Каждого СтрокаНастроек Из ДанныеКЗаполнению Цикл
		НоваяСтрока = ЭтаФорма[КлючТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастроек);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция		ИнициироватьРежимДиалога(Кэш, ДопПараметры, Отказ)
	Перем СтрокаЗаголовокФормы;
	ЛокальныйКэш		= Кэш;
	НажатиеВыполнено	= Ложь;
	ДопПараметрыТаблицы = Новый Структура("ТипКоннекшена, ЗапретНовых", ДопПараметры.ТипКоннекшена, Ложь);
	Если ДопПараметры.Свойство("ЗапретНовых") Тогда
		ДопПараметрыТаблицы.ЗапретНовых = ДопПараметры.ЗапретНовых;
	КонецЕсли;
	
	Результат = ЗаполнитьТаблицуДоступныхНастроек(Кэш, ДопПараметрыТаблицы, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.ИнициироватьРежимДиалога");
	КонецЕсли;
	ПанельВыбораДиалога = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, "ПанельВыбора");
	ПанельВыбораДиалога.ТекущаяСтраница = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ПанельВыбораДиалога, ДопПараметры.ТипКоннекшена);
	
	Если Не ДопПараметры.Свойство("Заголовок", СтрокаЗаголовокФормы) Тогда
		СтрокаЗаголовокФормы = "Доступные настройки:";
	КонецЕсли;
	ЭтаФорма.Заголовок = СтрокаЗаголовокФормы;
	
	Если ДопПараметры.Свойство("Скрыть") Тогда
		Для Каждого ЭлементСкрыть Из ДопПараметры.Скрыть Цикл
			ЭлементСкрыть = Кэш.ГлавноеОкно.СбисПолучитьЭлементФормы(ЭтаФорма, ЭлементСкрыть);
			Если ЭлементСкрыть = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСкрыть.Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//В процедуре из переданной структуры убираются отключенные узлы, которые были оставлены для их записи и отправки на сервер (для отключения при получении), но которые будут мешать нормальной работе с настройками
&НаКлиенте
Процедура	ОчиститьОтключенныеУзлы(ДанныеИни, КонтекстУзла=Неопределено)
	
	КлючиУдалить = Новый Массив;
	Если ТипЗнч(ДанныеИни) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ДанныеИни Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПараметрыУзла = Новый Структура("ИмяУзла", КлючИЗначение.Ключ);
				ОчиститьОтключенныеУзлы(КлючИЗначение.Значение,ПараметрыУзла);
			ИначеЕсли	КлючИЗначение.Значение = "" Тогда
				Если	КонтекстУзла.Свойство("ИмяУзла")
					И	КонтекстУзла.ИмяУзла = "Отбор" Тогда
					КлючиУдалить.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого КлючУдалить Из КлючиУдалить Цикл
		ДанныеИни.Удалить(КлючУдалить);
	КонецЦикла;
	
КонецПроцедуры

//Функция переводит имена ини из шаблона онлайна в шаблон обработки и обратно
&НаКлиенте
Функция		ПолучитьИмяИни(СоответствиеНазваний, КлючИни, Направление="json_во")
	
	НаправлениеСтр	= СтрЗаменить(Направление, "_", Символы.ПС);
	КлючНаправления1= СтрПолучитьСтроку(НаправлениеСтр, 1);
	КлючНаправления2= СтрПолучитьСтроку(НаправлениеСтр, 2);
	
	ИмяИни	= КлючИни;
	Для Каждого Соответствие Из СоответствиеНазваний	Цикл
		Если Лев(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])) = Соответствие[КлючНаправления1] Тогда
			Если Соответствие[КлючНаправления1] = Соответствие[КлючНаправления2] Тогда
				ИмяИниНазвание	= Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
				ИмяИни			= Соответствие[КлючНаправления1];//Имена инишек идентичны и в онлайн и в обработке
				Если Не ИмяИниНазвание = "" Тогда
					//Это не имя ини, а направление
					ИмяИни = ИмяИни + "_" + ИмяИниНазвание;
				КонецЕсли;
			Иначе
				ИмяИни =	Соответствие[КлючНаправления2] + ?(ПустаяСтрока(Соответствие[КлючНаправления2]), "", "_") + //переводим имена по соответствию имен, убирая старый префикс.
							Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяИни;	
	
КонецФункции

&НаКлиенте
Функция		СформироватьТаблицуДоступныхНастроек(Кэш, ДопПараметры, Отказ)
	Перем СписокИни;

	ПараметрыКонфигурацииСписка = Новый Структура("service", Кэш.КэшНастроек.ПараметрыКонфигурации.service);
	РезультатЗапроса = ПолучитьСписокConnection(Кэш, Новый Структура("ПараметрыКонфигурации, ДополнительныеПараметры, СписокИни", ПараметрыКонфигурацииСписка, ДопПараметры), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.СформироватьТаблицуДоступныхНастроек");
	КонецЕсли;
	
	ДанныеКЗаполнению = Новый Массив();
	КлючиКолонок = "Название,Пользователь,НазваниеБазовыхНастроек,ВерсияБазовыхНастроек,Идентификатор,ТипКоннекшена,service,subsystem,version,Коннекшен";
	ДЛя Каждого СтрокаПолучено Из РезультатЗапроса Цикл
		ПараметрыКонфигурации = СтрокаПолучено.ПараметрыКонфигурации;
		
		НоваяСтрока	= Новый Структура(КлючиКолонок);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыКонфигурации);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучено);
		
		НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации));
		НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
		НоваяСтрока.ТипКоннекшена			= ДопПараметры.ТипКоннекшена;
		НоваяСтрока.Коннекшен				= Новый СписокЗначений;
		НоваяСтрока.Коннекшен.Добавить(СтрокаПолучено);
		Если	ПустаяСтрока(СтрокаПолучено.ПараметрыРаботы.Пользователь)	Тогда
			НоваяСтрока.Пользователь = "Общие для аккаунта";
		Иначе
			НоваяСтрока.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
		ДанныеКЗаполнению.Добавить(НоваяСтрока);
	КонецЦикла;	
	ПараметрыСортировки = Новый Структура("ПоляСортировки", Новый Массив);
	ПараметрыСортировки.ПоляСортировки.Добавить(Новый Структура("Поле,Направление", "Название",	"Возр"));
	ДанныеКЗаполнению = Кэш.ОбщиеФункции.СбисОтсортироватьОбъект(ДанныеКЗаполнению,ПараметрыСортировки, Отказ);
	
	ПараметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
	
	Если	ДопПараметры.Свойство("ЗапретНовых")
		И	ДопПараметры.ЗапретНовых Тогда
		Возврат ДанныеКЗаполнению;
	КонецЕсли;
	//СоздатьСтандартныйКласс			= Ложь;
	СоздатьСтандартныйКласс				= Истина;
	УжеЕстьШаблонКонфигурации			= Ложь;
	Если ДопПараметры.ТипКоннекшена = "account" Тогда
		ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции), Отказ);
		Если Отказ Тогда
			Если ПустойКлассПодключения.code = 756 Тогда
				Отказ = Ложь;
				//СоздатьСтандартныйКласс		= Истина;
			Иначе
				Возврат Кэш.ОбщиеФункции.СбисИсключение(ПустойКлассПодключения, "ФайлыНастроекСервер.СформироватьТаблицуДоступныхНастроек");
			КонецЕсли;
		ИначеЕсли ПустойКлассПодключения.ПараметрыРаботы.Статус = "Активен" Тогда
			УжеЕстьШаблонКонфигурации	= Истина;	
			//Возможность создать шаблон без привязки к ИД системы
			//ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", Кэш.КэшНастроек.ПараметрыКонфигурации), Отказ);
		КонецЕсли;
	Иначе
		СоздатьСтандартныйКласс = Истина;
	КонецЕсли;
	
	НоваяСтрока = Новый Структура(КлючиКолонок);
	ЭтоШаблон = ДопПараметры.ТипКоннекшена = "account";
	//Если СоздатьСтандартныйКласс Тогда
	ПараметрыКласса = Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные, Тип", ПараметрыКонфигурации, ЭтоШаблон, "Пользовательские");
	Если ЭтоШаблон Тогда
		ПараметрыКласса.Вставить("Тип", "Шаблон");
		//ПараметрыКласса.Вставить("Идентификатор",	Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции);
	КонецЕсли;
	ПустойКлассПодключения = НовыйIntegrationConnection(Кэш, ПараметрыКласса, Отказ);

	Если Не ЭтоШаблон Тогда
		НоваяСтрока.Название = "новое подключение " + ПустойКлассПодключения.Название;
	ИначеЕсли УжеЕстьШаблонКонфигурации Тогда
		НоваяСтрока.Название = "новый " + ПустойКлассПодключения.Название;
	Иначе
		ПустойКлассПодключения.Идентификатор = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
		НоваяСтрока.Название = "новая интеграция " + ПустойКлассПодключения.Название;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,  Кэш.КэшНастроек.ПараметрыКонфигурации);
	Если ПустойКлассПодключения.ПараметрыРаботы.Статус = "Удален" Тогда
		НоваяСтрока.Название = "Восстановить: " + НоваяСтрока.Название;
	Иначе
		НоваяСтрока.Название = "Создать: " + НоваяСтрока.Название;
	КонецЕсли;
	Если	ПустаяСтрока(ПустойКлассПодключения.ПараметрыРаботы.Пользователь)	Тогда
		НоваяСтрока.Пользователь = "Общие для аккаунта";
	Иначе
		НоваяСтрока.Пользователь = Кэш.ГлавноеОкно.Пользователь;
	КонецЕсли;
	НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации));
	НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
	НоваяСтрока.Идентификатор			= ПустойКлассПодключения.Идентификатор;
	НоваяСтрока.Коннекшен				= Новый СписокЗначений;
	
	НоваяСтрока.Коннекшен.Добавить(ПустойКлассПодключения);
	ДанныеКЗаполнению.Добавить(НоваяСтрока);
	
	Возврат ДанныеКЗаполнению;
				
КонецФункции

&НаКлиенте
Функция		ОтключитьФайлыНастроекНаСервере(СписокИниКОтключению, Кэш, Идентификатор, Отказ)
	
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураВыбранныхНастроек	= Кэш.КэшНастроек.ВыбранныеНастройки;
	
	Для	Каждого	УстановленныйФайл Из СписокИниКОтключению Цикл
		ИмяИниИсточник	= СтрЗаменить(УстановленныйФайл.Значение,".sbis3","");
		СтруктураВыбранныхНастроек.Данные.Ини.Удалить(ИмяИниИсточник);
		ИндексВОтправить = СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Найти(ИмяИниИсточник);
		Если Не ИндексВОтправить = Неопределено Тогда
			СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Удалить(ИндексВОтправить);
		КонецЕсли;
	КонецЦикла;
	СтруктураВыбранныхНастроек.ПараметрыРаботы.Изменен = Истина;
	Кэш.Вставить("ини", СтруктураВыбранныхНастроек.Данные.Ини);
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(СтруктураВыбранныхНастроек.Данные.Ини,СтруктураВыбранныхНастроек,Отказ);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьМассивУстановленныхИниФайлов(КэшИни, ВыбранныеНастройки=Неопределено, Отказ=Ложь, ПрефиксИни="")
	
	МассивУстановленныхИниФайлов = Новый Массив;
	
	ДатаНастроек		= ?(ВыбранныеНастройки=Неопределено, ТекущаяДата(), ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек);
	АвтообновлениеДефолт= ?(ВыбранныеНастройки=Неопределено, Истина, ВыбранныеНастройки.ПараметрыРаботы.Автообновление);
	
	КлючиСтрок	= "Имяфайла,ИмяфайлаБезРасширения,ПутьДоИниФайла,ЕстьИзменения,Автообновление,Стандартная,Пользовательская,ДатаФайла,ДатаФайлаКлиент,Ини_ИмяИни,Ини_ИмяБезРасширения";
	СписокСтрок	= Новый	СписокЗначений();
	Для Каждого КлючИЗначениеИни Из КэшИни	Цикл
		ИмяИни		= КлючИЗначениеИни.Ключ;
		ЗначениеИни	= КлючИЗначениеИни.Значение;
		Если		ИмяИни	= "Конфигурация"	Тогда//Конфигурация вверху.
			ПолеСортировки = "а";
		ИначеЕсли Лев(ИмяИни, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		СбисЕстьТиповая		= Ложь;
		СбисЕстьИзменения	= Ложь;
		СбисАвтообновление	= АвтообновлениеДефолт;
		Если ЗначениеЗаполнено(ЗначениеИни) Тогда				
			ЗначениеИни.Вставить("СбисОшибки",			Новый Массив());
			ЗначениеИни.Вставить("СбисПолноеИмяФайла",	СтрЗаменить(ИмяИни,"""",""));
			ЗначениеИни.Вставить("СбисИмяФайла",		СтрЗаменить(ИмяИни,"""",""));
			
			Если ЗначениеИни.Свойство("СбисЕстьТиповая")	Тогда
				СбисЕстьТиповая = ЗначениеИни.СбисЕстьТиповая;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисЕстьИзменения")	Тогда
				СбисЕстьИзменения = ЗначениеИни.СбисЕстьИзменения;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисАвтообновление")	Тогда
				СбисАвтообновление = ЗначениеИни.СбисАвтообновление; 
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Новый	Структура(КлючиСтрок);
		НоваяСтрока.ПутьДоИниФайла			= "";
		НоваяСтрока.ЕстьИзменения			= СбисЕстьИзменения;
		НоваяСтрока.Автообновление			= СбисАвтообновление;
		НоваяСтрока.Стандартная				= СбисЕстьТиповая;
		НоваяСтрока.Пользовательская		= НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения;
		НоваяСтрока.Имяфайла				= ПрефиксИни + СтрЗаменить(ИмяИни + ?(СбисЕстьТиповая, ".sbis3", ""),"""","");
		НоваяСтрока.ИмяфайлаБезРасширения	= ПрефиксИни + СтрЗаменить(ИмяИни, """", "");
		НоваяСтрока.ДатаФайла				= ?(СбисЕстьТиповая,	ДатаНастроек, Неопределено);
		НоваяСтрока.ДатаФайлаКлиент			= ?(СбисЕстьИзменения,	ДатаНастроек, Неопределено);
		НоваяСтрока.Ини_ИмяИни				= СтрЗаменить(ИмяИни,"""","");
		НоваяСтрока.Ини_ИмяБезРасширения	= Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1);
		
		СписокСтрок.Добавить(НоваяСтрока,  ПолеСортировки + НоваяСтрока.ИмяФайла);
	КонецЦикла;
	СписокСтрок.СортироватьПоПредставлению();
	Возврат	СписокСтрок.ВыгрузитьЗначения();
	
КонецФункции

&НаКлиенте
Функция		ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации)
	
	ПараметрыСтандартнойКонфигурации = Новый Структура("service, subsystem, version");
	ЗаполнитьЗначенияСвойств(ПараметрыСтандартнойКонфигурации, ПараметрыКонфигурации);
	ПараметрыСтандартнойКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
	Возврат ПараметрыСтандартнойКонфигурации;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьТекущиеНастройки(ПараметрыПеречитать, Кэш) Экспорт
	Перем УстановленныеИни;
	
	ПараметрыВосстановить = Новый Структура;
	ПараметрыВосстановить.Вставить("Идентификатор",			СбисПолучитьИдентификаторНастроек(Кэш));
	ПараметрыВосстановить.Вставить("Перечитать",			Истина);
	ПараметрыВосстановить.Вставить("ПараметрыКонфигурации",	Кэш.КэшНастроек.ПараметрыКонфигурации);
	Отказ = Ложь;
	
	ВыбранныеНастройки = НовыйIntegrationConnection(Кэш, ПараметрыВосстановить, Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(ВыбранныеНастройки, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", ВыбранныеНастройки);
	//КлассIntegrationConnection_Очистить(Кэш, ВыбранныеНастройки, Новый Структура("Ини", Истина), Отказ);
	РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, ВыбранныеНастройки, Новый Структура, Отказ);
	Если Отказ Тогда
		Если РезультатУстановки.code = 756 Тогда
			ПродолжитьВыполнение = Истина;
			Отказ = Ложь;
			УстановленныеИни = СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение);
			Если Отказ Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(УстановленныеИни, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
			ИначеЕсли Не ПродолжитьВыполнение Тогда
				Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
				Возврат;
			КонецЕсли;
		Иначе
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
		КонецЕсли;
	Иначе
		УстановленныеИни = РезультатУстановки.СписокФайлов;
	КонецЕсли;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПеречитатьНастройки");
	КонецПопытки;	
КонецПроцедуры

//Временный костыль. Переписать на нормальное определение типовой конфы.
&НаКлиенте
Функция		НайтиТиповойКонфигСервиса(Кэш, ПараметрыКонфигурации)
	СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш);
	ДопПараметрыПолучения = Новый Структура("ЗначениеПредставление, ВерсияТекущейКонфигурации, ПрефиксТекущейКонфигурации","Значение", СтрЗаменить(ПараметрыКонфигурации.version, ".", "-"), ПараметрыКонфигурации.subsystem);
	ПараметрыСтандартнойКонфигурации = Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, ДопПараметрыПолучения);
	Возврат ПараметрыСтандартнойКонфигурации.ПараметрыКонфигурации;
КонецФункции

&НаКлиенте
Функция		СбисОписаниеИни(Кэш, data_ini=Неопределено)
	Возврат Новый Структура("active,data,type,name", Истина, data_ini)
КонецФункции

//Функция выполняет проверку изменения параметров работы формы настроек. Возвращает результат изменения параметров, либо неопределено.
&НаКлиенте                                  
Функция		СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш, Отказ, ПродолжитьВыполнение)
	
	//Проверка изменения параметров работы формы с настройками.	Обрабатываем переданные параметры и сразу очищаем.
	ПараметрРаботы = Неопределено;
	Если ПараметрыРаботы.Свойство("ИзменениеПользователя",	ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			СбисОчиститьВыбранныеНастройки(Кэш, Отказ);//Была смена пользователя. Перезапускаем получение даже если уже были выбраны какие-то настройки
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзменениеПользователя");
	КонецЕсли;	
	Если ПараметрыРаботы.Свойство("ИзменениеАккаунта",		ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			СбисОчиститьВыбранныеНастройки(Кэш, Отказ);//Была смена пользователя. Перезапускаем получение даже если уже были выбраны какие-то настройки
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзменениеАккаунта");
	КонецЕсли;	
	Если	ПараметрыРаботы.Свойство("ВыполнитьПроверку", ПараметрРаботы)
		И	ПараметрРаботы Тогда
		ВыбранныеНастройки = Неопределено;
		Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда//Настройки должны быть выбраны
			ПродолжитьВыполнение = Ложь;
			Возврат Неопределено;
		КонецЕсли;
		ПродолжитьВыполнение = Истина;
		Возврат ПолучитьМассивУстановленныхИниФайлов(Кэш.ини,ВыбранныеНастройки,Отказ);
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("КэшироватьТекущие") Тогда
		ПараметрыРаботы.Удалить("КэшироватьТекущие");
	КонецЕсли;
	//Чистим способ данные по конфигурациям в кэше и выбранную конфу, так как другой способ хранения настроек
	Если ПараметрыРаботы.Свойство("ИзмененаФормаНастроек", ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзмененаФормаНастроек");
	КонецЕсли;

	Возврат Неопределено;
		
КонецФункции

//Функция осуществляет поиск и получение настроек по сохраненному идентификатору, либо по наличию ранее настроенного соединения.
&НаКлиенте                                  
Функция		СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение)
	Перем Результат, РезультатЧтенияКоннекшена;
	
	ПолучатьНастройки	= Истина;
	ДопПараметры		= Новый Структура;
	ИдКоннекшенаНастроек= СбисПолучитьИдентификаторНастроек(Кэш);
	Попытка
		РезультатЧтенияКоннекшена = ПолучитьКлассКоннекшена(Новый Структура("Идентификатор", ИдКоннекшенаНастроек), Кэш);
	Исключение
		Отказ = Истина;
		ИнфоОбОшибке = ИнформацияОбОшибке();
		//РезультатЧтенияКоннекшена = Кэш.СБИС.МодульОбъектаКлиент.НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПрочитатьНастройки");
	КонецПопытки;
	
	//Если Не удалось, то пробуем по старинке восстановить коннекшен по ИД.
	Если Отказ Тогда
		Если ЗначениеЗаполнено(ИдКоннекшенаНастроек) Тогда
			Отказ = Ложь;//Проблемы InitConnection пока игнорируем.
			РезультатЧтенияКоннекшена = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", ИдКоннекшенаНастроек), Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Если    Не РезультатЧтенияКоннекшена = Неопределено
			И	Не РезультатЧтенияКоннекшена.code = 756 Тогда
			Результат = РезультатЧтенияКоннекшена;
		КонецЕсли;
	Иначе
		Результат = КлассIntegrationConnection_Установить(Кэш, РезультатЧтенияКоннекшена, Новый Структура("ПолучитьДанныеИни", Кэш.Текущий.ТипДок  = "ФайлыНастроек"), Отказ);
	КонецЕсли;
	Если Отказ Тогда 
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		Отказ = Ложь;
		//При ошибках ставим пользовательскую конфигурацию
		Результат = СбисУстановитьСтандартныеНастройки(Кэш, Отказ, ПродолжитьВыполнение);
	Иначе
   		СбисЗаписатьИдентификаторНастроек(Кэш, РезультатЧтенияКоннекшена.Идентификатор);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

//Получает структуру XSLT при её отсутствии в кэше
&НаКлиенте
Функция		СбисСформироватьСтруктуруXSLT(Кэш, Идентификатор, Отказ)
	
	//Пока XSLT не привязаны к ID. Делаем всегда получение. После переделать на получение xslt по ID.
	Если	Отказ
		Или	(	Кэш.Свойство("XSLT")
			И	ЗначениеЗаполнено(Кэш.XSLT))	Тогда
			Возврат Ложь;
	ИначеЕсли Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение структуры XSLT", Кэш.ГлавноеОкно);
	КонецЕсли;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат", Истина, Истина);
	
	РезультатЗапроса = Кэш.Интеграция.ПолучитьXslt(Кэш, Неопределено, ДопПараметрыЗапроса, Отказ);
	
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Кэш.Вставить("XSLT", РезультатЗапроса);
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция		СформироватьСписокИни(Кэш=Неопределено, ПараметрыПоиска, Отказ)
    Перем СбисМеню, Искать, Идентификатор, ТипыИни, СбисКоннекшен;
	Если 	ПараметрыПоиска.Свойство("Коннекшен", СбисКоннекшен) Тогда
		СбисМеню = СбисКоннекшен.Данные.Меню;
		Если СбисМеню = Неопределено Тогда
			Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
			КонецЕсли;
			СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, СбисКоннекшен, Новый Структура("БратьВКэше", Ложь), Отказ);
		КонецЕсли;
	ИначеЕсли	Не	ПараметрыПоиска.Свойство("СбисМеню", СбисМеню)
		Или		СбисМеню = Неопределено Тогда
		Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
		КонецЕсли;
		Если Не ПараметрыПоиска.Свойство("Идентификатор", Идентификатор) Тогда
			Идентификатор = "";
		КонецЕсли;
		//Для Пользовательской ТИПОВОЙ конфигурации базовое меню будет пустым. Для коннекшена меню должно быть
		Если	ПустаяСтрока(Идентификатор)
			И	ПустаяСтрока(ПараметрыПоиска.ПараметрыКонфигурации.subsystem) Тогда
			СбисМеню = Новый Структура();
		Иначе
			КлассКонфиг	= НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыПоиска.ПараметрыКонфигурации), Отказ); 
			СбисМеню	= КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассКонфиг, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.СформироватьСписокИни");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		Если Кэш = Неопределено Тогда//Если не передаются ТипыИни, то кэш должен быть
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные. 01 - ищутся все, 0 - отключенные
	КонецЕсли;
	
	Результат = СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать);
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует по меню структуру с полями "Карта" и "Данные" для дальнейшего составления запроса. 
//Карта		- список имен для быстрого поиска. 
//Данные	- массив структур "type, name" из меню для передачи в методы получения уже самих ини.
&НаКлиенте                                  
Функция		СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать, СписокИни = Неопределено)	
	
	Если Не	ТипЗнч(СбисМеню) = Тип("Структура") Тогда
		ВызватьИсключение("Неизвестный формат меню");
	КонецЕсли;
	
	Если СписокИни = Неопределено Тогда
		СписокИни = Новый Структура("Карта, Данные",Новый СписокЗначений,Новый Массив);
	КонецЕсли;
	//Обойти меню и сформировать реестр ини.
	Для	Каждого	КлючИЗначение Из СбисМеню Цикл
		Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		enable = Неопределено;
		Если КлючИЗначение.Значение.Свойство("enable", enable) Тогда	
			ИмяИни	= КлючИЗначение.Ключ;
			ТипИни	= Неопределено;
			Если 	Не	КлючИЗначение.Значение.Свойство("type", ТипИни)
				Или		ТипыИни.Найти(ТипИни) = Неопределено Тогда//Фильтр по типу ини. Описание в инициализации кэша
				Продолжить;
			КонецЕсли;
			Карта		= СписокИни.Карта;//Карта для поиска значений без перебора
			Раздел		= СписокИни.Данные;//Данные - собственно список для передачи в запросы
			КлючКарты	= НРег(ИмяИни);
			enable		= Строка(enable);
			Фильтр		= Неопределено;
			Если		Искать.Свойство("Включено",Фильтр)
				И Не	Найти(Фильтр, enable) Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Имя",Фильтр)
				И 		Фильтр.Найти(ИмяИни) = Неопределено Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Тип")
				И 		Фильтр.Найти(ТипИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Не	Карта.НайтиПоЗначению(КлючКарты) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Раздел.Добавить(Новый Структура("type,name", ТипИни,ИмяИни));
			Карта.Добавить(КлючКарты, ИмяИни);
		Иначе//Это подраздел
			СформироватьСпискиИзМеню(ТипыИни, КлючИЗначение.Значение,Искать,СписокИни);	
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИни;
	
КонецФункции
	
//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Процедура	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации = Неопределено)
	Ини = Новый Структура();
	Если ПараметрыКонвертации = Неопределено Тогда
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
	КонецЕсли;
	Если Не Результат.Данные.Ини = Неопределено Тогда
		Для Каждого КлючИЗначение Из Результат.Данные.Ини Цикл
			Если		КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			ИначеЕсли	КлючИЗначение.Ключ = "СбисМеню" Тогда
				Ини.Вставить("СбисМеню", КлючИЗначение.Значение);
			Иначе
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ);
	 			ЗначениеИни = ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
				Ини.Вставить(ИмяИни, ЗначениеИни);
			КонецЕсли;
		КонецЦикла;
		Результат.Данные.Ини = Ини;
	КонецЕсли;
	Результат.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(Результат.ПараметрыКонфигурации.version);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыХранящиесяНаШаблоне(Кэш, Параметр)
	Если Параметр = "status_marks" Тогда
		Если Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
			Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Добавить("status_marks");
		Иначе
			Элемент = Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти("status_marks");
			Если Не Элемент = Неопределено Тогда
				Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Удалить(Элемент);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

#Область include_core_vo2_Настройки_СБИС_ВнутренниеВызовы_Меню
#КонецОбласти

#Область include_core_vo2_Настройки_СБИС_ВнутренниеВызовы_УстановкаИни
#КонецОбласти

#Область include_core_vo2_Настройки_СБИС_ВнутренниеВызовы_Кэширование
#КонецОбласти

#Область include_core_vo2_Настройки_СБИС_ВнутренниеВызовы_ПредустановкаКоннекшена
#КонецОбласти

