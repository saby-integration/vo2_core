
&НаКлиенте
Функция		КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ТипНастроекДляНазвания;
	Если Не ДопПараметры.Свойство("Тип", ТипНастроекДляНазвания) Тогда
		ТипНастроекДляНазвания = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	КонецЕсли;
	//Если есть шаблон, то название генерируем по шаблону.
	Если	Не  ТипНастроекДляНазвания = "Стандартные"
		И		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
		КлассIntegrationШаблон = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
		КлассIntegrationConnectionНазвание = КлассIntegrationШаблон.Название;
	Иначе	
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации);
		КлассIntegrationConnectionНазвание = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(КлассIntegrationConnection.ПараметрыКонфигурации.service,ПрефиксНастроек);
	КонецЕсли;
	Если		ТипНастроекДляНазвания = "Шаблон" Тогда
		КлассIntegrationConnectionНазвание = "Шаблон для " + КлассIntegrationConnectionНазвание;
	ИначеЕсли   ТипНастроекДляНазвания = "Создание по шаблону" Тогда
		КлассIntegrationConnectionНазвание = "Создание по шаблону " + КлассIntegrationConnectionНазвание;
	КонецЕсли;
	Возврат КлассIntegrationConnectionНазвание;
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
	Если ДопПараметры.Тип = "Создание по шаблону" Тогда
		Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
		ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
					Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.ИзменитьТип", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
		КонецЕсли;
		НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
		НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
		НовыйКлассIntegrationConnection.Идентификатор = "";
		КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	КонецЕсли;
	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ДопПараметры.Тип;
	Если ТекущийТипКласс = "Стандартные" Тогда
		//Меняется со стандартного конфига на что-то иное
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если ДопПараметры.Тип = "Пользовательские" Тогда
			КлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

&НаКлиенте
Процедура	КлассIntegrationConnection_Изменить(КлассIntegrationConnection, ПараметрыИзменить)
	Кэш		= ПараметрыИзменить.Кэш;
	Отказ	= Ложь;
	НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("Тип") Тогда
		ТекущийТипКласс = КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек;
		Если ПараметрыИзменить.Тип = "Создание по шаблону" Тогда
			Если		Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не шаблон!", "{0}", КлассIntegrationConnection.Название));
			ИначеЕсли		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
						Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
				МодульОбъектаКлиент().ВызватьСбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить", 773, "Ошибка при изменении типа настроек", СтрЗаменить("Класс настроек  {0} не записан!", "{0}", КлассIntegrationConnection.Название));
			КонецЕсли;
			Если КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ) Тогда
				НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ПараметрыИзменить, Отказ);
			КонецЕсли;
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый";
			НовыйКлассIntegrationConnection.ПараметрыРаботы.Шаблон = КлассIntegrationConnection.Идентификатор;
			НовыйКлассIntegrationConnection.Идентификатор = "";
		КонецЕсли;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = ПараметрыИзменить.Тип;
		Если ТекущийТипКласс = "Стандартные" Тогда
			//Меняется со стандартного конфига на что-то иное
			НовыйКлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, НовыйКлассIntegrationConnection, ПараметрыИзменить, Отказ);
			Если ПараметрыИзменить.Тип = "Пользовательские" Тогда
				НовыйКлассIntegrationConnection.ПараметрыРаботы.Пользователь = Кэш.ГлавноеОкно.Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИзменить.Свойство("ПараметрыКонфигурации") Тогда
		ПараметрыИнит = Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные", ПараметрыИзменить.ПараметрыКонфигурации, КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные);
		НовыйКлассIntegrationConnection = НовыйIntegrationConnection(Кэш, ПараметрыИнит, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(НовыйКлассIntegrationConnection, "ФайлыНастроекСервер.КлассIntegrationConnection.Изменить");
		КонецЕсли;

		НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
		Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
			И	НовыйКлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			КлассIntegrationConnection_Изменить(НовыйКлассIntegrationConnection, Новый Структура("Тип, Кэш", "Шаблон", Кэш));
			НовыйКлассIntegrationConnection.Идентификатор = КлассIntegrationConnection.Идентификатор;
		КонецЕсли;
	КонецЕсли;

	КлассIntegrationConnection = НовыйКлассIntegrationConnection;
	
КонецПроцедуры

//Функция дозаполняет класс ини недостающими данными
&НаКлиенте
Функция		КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем СписокИниПоиска, ДанныеСпискаДляЧтения;
	ПараметрыЗапросаИни	= Новый Структура;
	Если Не ДопПараметры.Свойство("ДанныеСписка", ДанныеСпискаДляЧтения) Тогда
		//Если требуется получить список, идентичный установленным ини
		Если ДопПараметры.Свойство("СписокИни_ВО", СписокИниПоиска) Тогда
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Если ТипЗнч(СписокИниПоиска) = Тип("Структура") Тогда
				Для Каждого УстановленныйФайл Из СписокИниПоиска Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл.Ключ, "во_json"));
				КонецЦикла;
			Иначе	
				Для Каждого УстановленныйФайл Из ДопПараметры.СписокИни_ВО Цикл
					СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, УстановленныйФайл, "во_json"));
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
            //Ини не определены, берём все включенные
            СтруктураИскать = Новый Структура("Включено", "1");
		Иначе
			//Ищем ини те, что установлены в структуре но не определены
			СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
			Для Каждого КлючИЗначениеИни Из КлассIntegrationConnection.Данные.Ини Цикл
				Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ, "во_json"));
			КонецЦикла;
			Если Не СтруктураИскать.Имя.Количество() Тогда
				Возврат КлассIntegrationConnection.Данные.Ини;
			КонецЕсли;	
		КонецЕсли;
		ПараметрыСборкаСписка = Новый Структура("Искать", СтруктураИскать);
		Если ДопПараметры.Свойство("ДоступныеТипыИни") Тогда
			ПараметрыСборкаСписка.Вставить("ДоступныеТипыИни", ДопПараметры.ДоступныеТипыИни);
		КонецЕсли;
		//Пропустим требуемый список через сбисМеню подключения на предмет того, а есть ли там вообще такая ини
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ПараметрыСборкаСписка, Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеСписка, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
		КонецЕсли;
		ДанныеСпискаДляЧтения = ДанныеСписка["Данные"];
	КонецЕсли;
	ПараметрыЗапросаИни.Вставить("СписокИни", ДанныеСпискаДляЧтения);
	Если	ДопПараметры.Свойство("ТолькоПользовательские") Тогда
		ПараметрыЗапросаИни.Вставить("ТолькоПользовательские", ДопПараметры.ТолькоПользовательские);
	КонецЕсли;

	//Лутаем ини по списку
	РезультатДозапроса = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапросаИни, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ДозапроситьИни");
	КонецЕсли;
	ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
	
	Результат = Новый Структура;
	Для Каждого ЭлементСписка Из ДанныеСпискаДляЧтения Цикл
		КлючИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
		Если Не		РезультатДозапроса.Свойство(КлючИни)
				И	ПолучитьТолькоПользовательскиеИзменения Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(КлючИни, РезультатДозапроса[КлючИни]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Функция определяет наличие изменений в выбранных настройках. осущствлённых пользователем
&НаКлиенте                                  
Функция		КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ)
	//Оценка по шапке
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Количество()
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		Или	КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить
		Или	КлассIntegrationConnection.ПараметрыРаботы.Изменен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДопПараметрыЧтения = Новый Структура("ТихийРежим",Истина);
	КлассIntegrationConnectionДоИзменений = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ДополнительныеПараметры", КлассIntegrationConnection.Идентификатор, КлассIntegrationConnection.ПараметрыКонфигурации, ДопПараметрыЧтения), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;

	Если	Не	КлассIntegrationConnection.ПараметрыРаботы.Автообновление	= КлассIntegrationConnectionДоИзменений.ПараметрыРаботы.Автообновление
		Или	Не	КлассIntegrationConnection.Название							= КлассIntegrationConnectionДоИзменений.Название Тогда
		Возврат Истина;
	КонецЕсли;
	ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnectionДоИзменений, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	//Сравним состав ини
	МассивПроверено = Новый Массив;
	Для Каждого ЭлементКарты Из ДанныеСписка.Карта Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементКарты.Представление);
		
		Если КлассIntegrationConnectionДоИзменений.Данные.Ини.Свойство(ИмяИни) Тогда
			МассивПроверено.Добавить(ИмяИни);
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	Если Не КлассIntegrationConnectionДоИзменений.Данные.Ини.Количество() = МассивПроверено.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;//Пока инишки не сравниваем, слишком тяжёлый механизм.
		
	//Сравним значения ини.
	РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnectionДоИзменений, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ЕстьИзменения");
	КонецЕсли;
	Если ИниРазличаются(Кэш, КлассIntegrationConnection.Данные.Ини, КлассIntegrationConnectionДоИзменений.Данные.Ини, Отказ) Тогда
		Для Каждого КлючИЗначениеИни Из Кэш.Ини Цикл
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениеИни.Ключ)
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

//Возвращает идентификатор класса 
&НаКлиенте
Функция		КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection, Режим="Общий") 
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Идентификатор;
	ИначеЕсли Режим = "Общий" Тогда
		Возврат Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(КлассIntegrationConnection.ПараметрыКонфигурации)
	ИначеЕсли Режим = "Чтение" Тогда
		Если		ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			Возврат КлассIntegrationConnection.ПараметрыРаботы.Шаблон;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Инициализирует класс IC по идентификатору, либо по данным конфигурации
&НаКлиенте
Функция		КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ)
	Перем КлассIntegrationConnection, ПарметрыКонфигурации, СписокИниПолучить, ДанныеБЛ;
	//Если есть класс, то проинитим его. Если класса нет, то поднимем экземпляр и отправим его в инит.
	Если Не ДопПараметры.Свойство("КлассIntegrationConnection", КлассIntegrationConnection) Тогда
		КлассIntegrationConnection = _КлассIntegrationConnection_ОсновныеПоля(Кэш);
		Если Не ДопПараметры.Свойство("ПараметрыКонфигурации", ПарметрыКонфигурации) Тогда
			ПарметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПарметрыКонфигурации;
		Если	ДопПараметры.Свойство("Идентификатор", КлассIntegrationConnection.Идентификатор)
			И	ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
			КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Неизвестно";
			КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен";
		Иначе
			КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
		КонецЕсли;
	КонецЕсли;
	ИнициироватьДанные =	Не 	ДопПараметры.Свойство("ИнициироватьДанные")
						Или		ДопПараметры.ИнициироватьДанные;
	
	//Либо передаём данные БЛ извне (списочные методы), либо формируем по классу
	Если Не ДопПараметры.Свойство("ДанныеБЛ", ДанныеБЛ) Тогда
		Если ИнициироватьДанные Тогда
			СписокИниПолучить = Новый Массив;
			Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
				СписокИниПолучить.Добавить(СбисОписаниеИниМеню(Кэш));
			КонецЕсли;
			Если		КлассIntegrationConnection.Данные.Ини = Неопределено
				Или	Не	КлассIntegrationConnection.Данные.Ини.Свойство("Конфигурация")
				Или		КлассIntegrationConnection.Данные.Ини.Конфигурация = Неопределено Тогда
				СписокИниПолучить.Добавить(Новый Структура("name, type, active, data", "Конфигурация", "Система", Истина));
			КонецЕсли;
			Если Не СписокИниПолучить.Количество() Тогда
				СписокИниПолучить = Неопределено;//Иначе придут все ини
			КонецЕсли;
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		Иначе
			ПараметрыЧтенияИни = Новый Структура("СписокИни", СписокИниПолучить);
		КонецЕсли;
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, ПараметрыЧтенияИни, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	КонецЕсли;
	ПараметрыОбработки = Новый Структура("ДанныеБЛ", ДанныеБЛ);
	Если ДопПараметры.Свойство("Перечитать") Тогда
		ПараметрыОбработки.Вставить("Перечитать", ДопПараметры.Перечитать);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокИниПолучить) Тогда
		СписокНаКонтроль = Новый Соответствие;
		Для Каждого ЭлементСпискаПолучить Из СписокИниПолучить Цикл
			СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
		КонецЦикла;
		ПараметрыОбработки.Вставить("КонтрольИни", СписокНаКонтроль);
	КонецЕсли;
	//При инициализации не требуется проверять шаблон. Либо есть данные по ИД, либо это конфиг, либо ошибка - нет подключения
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, ПараметрыОбработки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
	ИначеЕсли ИнициироватьДанные Тогда
		//Инициируем структуру ини пустыми значениями
		ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		КонецЕсли;
		Для Каждого ЭлементСписка Из ДанныеСписка.Данные Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			Если КлассIntegrationConnection.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, Неопределено);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
	КонецЕсли;
	//Если КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = Неопределено Тогда
	//	ПараметрыСтандартнойКонфигурации = НайтиТиповойКонфигСервиса(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	//	КлассIntegrationConnection.ПараметрыРаботы.ВерсияКонфиг = ПараметрыСтандартнойКонфигурации.version;
	//КонецЕсли;

	Если	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные"
		И	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Для конфигов установим своё название
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КлассIntegrationConnection.Данные.Параметры = КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлассIntegrationConnection;
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_Очистить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	Если	ДопПараметры.Свойство("Ини")
		И	ДопПараметры.Ини Тогда
		КлассIntegrationConnection.Данные.Ини = Неопределено;
		КлассIntegrationConnection.Данные.Меню = Неопределено;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	КонецЕсли;
КонецФункции
	
//Функция возвращает ини "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем МассивИниКЗапросу, ЗначениеИни, ДопПараметрыЧтения, СтруктураИниРезультат;
	
	РекурсивныйВызов = Ложь;
	ИдКласса = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
	//Чтобы изменениями класса не сломать полученное, создаём отдельный экземпляр для чтения ини
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		//Если новый класс, то либо конфиг, либо шаблон
		КлассДляЧтения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, КлассIntegrationConnection.ПараметрыКонфигурации, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассДляЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
		КонецЕсли;
		РекурсивныйВызов = Истина;
	ИначеЕсли 	ДопПараметры.Свойство("ТолькоПользовательские")
			И	ДопПараметры.ТолькоПользовательские Тогда
		//Создадим абсолютно новый экземпляр, который потом нигде не сохранится
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура("Ини", Ложь), Отказ);
	Иначе
		КлассДляЧтения = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ИдКласса);
	КонецЕсли;
	
	Если КлассДляЧтения = Неопределено Тогда
		//Если не новый класс, то закэшируем сам класс.
		КлассДляЧтения = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ИдКласса, КлассДляЧтения);
	КонецЕсли;

	Если Не ДопПараметры.Свойство("Результат", СтруктураИниРезультат) Тогда
		СтруктураИниРезультат = Новый Структура;
		ДопПараметры.Вставить("Результат", СтруктураИниРезультат)
	КонецЕсли;
	
	Если Не	ДопПараметры.Свойство("СписокИни", МассивИниКЗапросу) Тогда
		Если	КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ""
			И	(	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские"
				Или	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон")	Тогда
			МассивИниКЗапросу = Неопределено;
		Иначе
			ДопПараметрыЧтения = Новый Структура();
			//Если не указан список ини для запроса, то берём по-умолчанию (включенные-"1" в меню)
			РезультатЗапроса = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметрыЧтения, Отказ);
			Если Отказ Тогда
				Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьИни");
			КонецЕсли;
			МассивИниКЗапросу = РезультатЗапроса["Данные"];	
		КонецЕсли;
	КонецЕсли;
	Если Не МассивИниКЗапросу.Количество() Тогда
		Возврат СтруктураИниРезультат;
	КонецЕсли;
	Если Не	ДопПараметры.Свойство("ДополнительныеПараметры", ДопПараметрыЧтения) Тогда
		ДопПараметрыЧтения = Новый Структура;
	КонецЕсли;
	
	ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
	ЕстьЗапросДанные = Ложь;
	Если РекурсивныйВызов Тогда
		МассивПолучитьИтого = МассивИниКЗапросу;
	Иначе		
		МассивПолучитьИтого = Новый Массив;
		//Проверим, что ини уже есть в полученных данных
		Для Каждого ЭлементСписка Из МассивИниКЗапросу Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				Если Не КлассДляЧтения.Данные.Меню = Неопределено Тогда
					//Меню в процессе может сильно меняться. Копируем целиком.
					КлассIntegrationConnection.Данные.Меню = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассДляЧтения.Данные.Меню);
					Продолжить;
				КонецЕсли;
			Иначе
				ЕстьЗапросДанные = Истина;
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Не	КлассДляЧтения.Данные.Ини = Неопределено
					И		КлассДляЧтения.Данные.Ини.Свойство(ИмяИни, ЗначениеИни)
					И	Не	ЗначениеИни = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				ИначеЕсли 	Не	КлассДляЧтения.Данные.Прочие = Неопределено
						И		КлассДляЧтения.Данные.Прочие.Свойство(ИмяИни, ЗначениеИни)
						И	Не	ЗначениеИни = Неопределено Тогда
					//Не ЭДО инишки хранятся отдельно
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные.Прочие только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеИни);
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеИни);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивПолучитьИтого.Добавить(ЭлементСписка);
		КонецЦикла;
	КонецЕсли;
	Если РекурсивныйВызов Тогда
		ПараметрыПолучения = Новый Структура("СписокИни, Результат, ДополнительныеПараметры", МассивПолучитьИтого, СтруктураИниРезультат, ДопПараметрыЧтения);
		РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассДляЧтения, ПараметрыПолучения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
			Если ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
				//Меню живёт в отдельном поле
				КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
				Продолжить;
			ИначеЕсли КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
				//Инитим Данные.Ини только если есть ини, которые должны быть добавлены в класс
				КлассIntegrationConnection.Данные.Ини = Новый Структура;
			КонецЕсли;
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
			//Заполняем из класса чтения в класс основной настройки
			КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, КлассДляЧтения.Данные.Ини[ИмяИни]);
		КонецЦикла;
		Возврат РезультатОбработки;
	ИначеЕсли МассивПолучитьИтого.Количество() Тогда
		ПолучитьТолькоПользовательскиеИзменения = ДопПараметры.Свойство("ТолькоПользовательские") И ДопПараметры.ТолькоПользовательские;
		
		//Что-то дозаправишваем
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассДляЧтения, Новый Структура("СписокИни, ТолькоПользовательские", МассивПолучитьИтого, ПолучитьТолькоПользовательскиеИзменения), Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("ДанныеБЛ", ДанныеБЛ);
		Если Не ПолучитьТолькоПользовательскиеИзменения Тогда			
			//Если получаем пользовательские изменения для выгрузки, то контроль чтения не происходит, т.к. не известно, что есть в изменениях инишек.
			СписокНаКонтроль = Новый Соответствие;
			Для Каждого ЭлементСпискаПолучить Из МассивПолучитьИтого Цикл
				СписокНаКонтроль.Вставить(НРег(ЭлементСпискаПолучить.name), ЭлементСпискаПолучить);
			КонецЦикла;
			ПараметрыЗаполнения.Вставить("КонтрольИни", СписокНаКонтроль);
		КонецЕсли;
		РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассДляЧтения, ПараметрыЗаполнения, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.Инициализировать");
		КонецЕсли;
		Если ПолучитьТолькоПользовательскиеИзменения Тогда
			Если ЗначениеЗаполнено(КлассДляЧтения.Данные.Ини) Тогда 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Ини;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Ини;
			Иначе 
				СтруктураИниРезультат					= КлассДляЧтения.Данные.Прочие;
				КлассIntegrationConnection.Данные.Ини	= КлассДляЧтения.Данные.Прочие; 
			КонецЕсли;
		Иначе
			ОписаниеСбисМеню = СбисОписаниеИниМеню(Кэш);
			Для Каждого ЭлементСписка Из МассивПолучитьИтого Цикл
				Если		ЭлементСписка.name = ОписаниеСбисМеню.name Тогда
					//Меню живёт в отдельном поле
					КлассIntegrationConnection.Данные.Меню = КлассДляЧтения.Данные.Меню;
					Продолжить;
				КонецЕсли;
				
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементСписка.name);
				Если	Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ЭлементСписка.type) = Неопределено Тогда
					Если КлассIntegrationConnection.Данные.Прочие = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Прочие = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Прочие[ИмяИни];
					КлассIntegrationConnection.Данные.Прочие.Вставить(ИмяИни, ЗначениеВставить);
				Иначе
					Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
						//Инитим Данные только если есть ини, которые должны быть добавлены в класс
						КлассIntegrationConnection.Данные.Ини = Новый Структура;
					КонецЕсли;
					ЗначениеВставить = КлассДляЧтения.Данные.Ини[ИмяИни];
					КлассIntegrationConnection.Данные.Ини.Вставить(ИмяИни, ЗначениеВставить);
				КонецЕсли;
				СтруктураИниРезультат.Вставить(ИмяИни, ЗначениеВставить);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураИниРезультат;	
КонецФункции

//Возвращает СБИС параметры "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьПараметрыСБИС(Кэш, КлассIntegrationConnection, ДопПараметры,Отказ) Экспорт
	
	Если		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
		И	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры) Тогда
		КлассIntegrationConnection.Данные.Параметры = _КлассIntegrationConnection_СтрукутраСБИСПараметровПоУмолчанию();
	КонецЕсли;
	//По умочанию возвращаем параметры "от self"
	Если	Не	(	ДопПараметры.Свойство("ПрочитатьСБЛ")
				И	ДопПараметры.ПрочитатьСБЛ)
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
			Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
			Или	Не ЗначениеЗаполнено(КлассIntegrationConnection.Идентификатор) Тогда
		Возврат КлассIntegrationConnection.Данные.Параметры;
	КонецЕсли;
	
	//Чтение СБИС параметров ТОЛЬКО по ИД от класса, без переадресаций на шаблон и конфиг.
	ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	РезультатОбработки = _КлассIntegrationConnection_ЗаполнитьПоДанным(Кэш, КлассIntegrationConnection, Новый Структура("ДанныеБЛ", ДанныеБЛ), Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(ДанныеБЛ, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьПараметрыСБИС");
	КонецЕсли;
	
	Возврат	КлассIntegrationConnection.Данные.Параметры;
КонецФункции

//Функция возвращает сбисМеню "от класса"
&НаКлиенте
Функция		КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	//Помимо получения данных, тут идёт проверка доступности соединения. Получаем меню, чтобы были актуальные данные и в случае недоступности соединения, ругаемся	
	Если ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Меню) Тогда
		Возврат КлассIntegrationConnection.Данные.Меню;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;	
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры",Новый Структура("ТихийРежим, ЕстьРезультат", Истина, Истина));
	ПараметрыЗапроса.Вставить("СписокИни",				Новый Массив);
	ПараметрыЗапроса.СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	РезультатОбработки = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбработки, "ФайлыНастроекСервер.КлассIntegrationConnection.ПолучитьСбисМеню");
	КонецЕсли;
	Возврат КлассIntegrationConnection.Данные.Меню;
КонецФункции

//Функция возвращает копию класса шаблона подключения
&НаКлиенте
Функция		КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ=Ложь)
	//Поверхностная копия узлов
	НовыйКлассIntegrationConnection = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассIntegrationConnection,,Ложь);
	НовыйКлассIntegrationConnection.ПараметрыРаботы = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.ПараметрыРаботы);
	НовыйКлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
	
	//Меню и параметры копируем целиком. Ини - поверхностная копия 
	НовыйКлассIntegrationConnection.Данные			=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные,,Ложь);
	НовыйКлассIntegrationConnection.Данные.Параметры=  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Параметры);
	Если Не ДопПараметры.Свойство("Ини")
		Или	ДопПараметры.Ини Тогда
		НовыйКлассIntegrationConnection.Данные.Ини = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Ини,,Ложь);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Ини = Неопределено;
		НовыйКлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Ложь;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("Меню")
		Или	ДопПараметры.Меню Тогда
		НовыйКлассIntegrationConnection.Данные.Меню =  Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(НовыйКлассIntegrationConnection.Данные.Меню);
	Иначе
		НовыйКлассIntegrationConnection.Данные.Меню = Неопределено;
	КонецЕсли;
	
	Возврат НовыйКлассIntegrationConnection;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьПодключение(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	
	//Если настройки не пользовательские, то запись обязана быть проведена для создания нового пользовательского соединения
	Результат = Новый Структура("ЗаписьВыполнялась, Идентификатор", Ложь, КлассIntegrationConnection.Идентификатор);
	ПропуститьЗапись = Ложь;
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения с стандартными настройками обязательно нужно передать СбисПараметры с service4config
		КлассIntegrationConnection.ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(КлассIntegrationConnection.ПараметрыКонфигурации);	
		//Для пользовательской конфигурации(с пустым subsystem) ставим отправку всех ини, так как иначе данных на сервере не появится!
		Если КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = "" Тогда
			Для Каждого КлючИЗначениИни Из КлассIntegrationConnection.Данные.Ини Цикл
				КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениИни.Ключ);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		СтруктураПараметров = КлассIntegrationConnection.Данные.Параметры;
		Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
			//Запишем шаблон
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять = Истина;
			КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
			РезультатЗаписиШаблона = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
			Если Отказ Тогда 
				Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписиШаблона, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
			КонецЕсли;
		КонецЕсли;
		РезультатИзменения = КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
	ИначеЕсли КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
		//Если взяты готовые настройки без изменений, просто запишем их ID в обработке, во всех прочих случаях, нужно записать JSON на сервер
		ЕстьИзменения = КлассIntegrationConnection_ЕстьИзменения(Кэш, КлассIntegrationConnection, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ЕстьИзменения, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		ПропуститьЗапись = Не ЕстьИзменения;
	КонецЕсли;
	
	Если Не ПропуститьЗапись Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Отправлять		= Истина;
		
		РезультатЗаписи = _КлассIntegrationConnection_Записать(Кэш, КлассIntegrationConnection, Новый Структура("ТихийРежим", Кэш.ТихийРежим), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаписи, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьПодключение");
		КонецЕсли;
		
		Результат.ЗаписьВыполнялась = Истина;
		Результат.Идентификатор = РезультатЗаписи;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция Сохраняет класс IC, возвращает измененный вариант.
&НаКлиенте
Функция		КлассIntegrationConnection_СохранитьСбисПараметры(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ТихийРежим, ЗначениеСвойства, ШаблонПодключения;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	Если	Не	ЗначениеЗаполнено(КлассIntegrationConnection.Данные.Параметры)
		Или	Не	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален"
		Или		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"	Тогда
		//Новый коннекшен мы не записываем через сбис параметры
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ПараметрыДописать") Тогда
		Для Каждого Элемент Из ДопПараметры.ПараметрыДописать Цикл
			// Параметры для шаблона добавляем только на шаблон
			Если НЕ КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон"
					И НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//Сразу проверим необходимость записи параметров - если такого узла ещё нет, либо он менялся
			Если	Не КлассIntegrationConnection.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеСвойства)
				Или	Не ЗначениеСвойства = Элемент.Значение Тогда
				КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
				КлассIntegrationConnection.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыКлассСкопировать	= Новый Структура("Меню, Ини", Ложь, Ложь);
	КлассПараметрыДляЗаписи		= КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКлассСкопировать, Ложь);
	
	//Удалить лишние ключи - для шаблона остаётся только то, что пишется на шаблон, для остальных - всё, что не пишется на шаблон.
	СписокКлючейУдалить = Новый Массив;
	Для Каждого Элемент Из КлассПараметрыДляЗаписи.Данные.Параметры Цикл
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
				СписокКлючейУдалить.Добавить(Элемент.Ключ);
			КонецЕсли;
		ИначеЕсли НЕ Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено	Тогда
			КлассПараметрыДляЗаписи.Данные.Параметры.Вставить(Элемент.Ключ, Неопределено);
		Иначе
			// Нормальный ключ пишется как обычный
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из СписокКлючейУдалить Цикл
		КлассПараметрыДляЗаписи.Данные.Параметры.Удалить(КлючУдалить);
	КонецЦикла;
	
	СбисПараметры = КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассПараметрыДляЗаписи, КлассПараметрыДляЗаписи.Данные.Параметры);
		
	ПараметрыОтправки = Новый Структура("id, update_date", КлассIntegrationConnection.Идентификатор, Формат(КлассIntegrationConnection.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
	//Добавим СбисПараметры в отправку		
	Если	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить
		И	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
	Иначе
		Возврат КлассIntegrationConnection.Идентификатор
	КонецЕсли;
	ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, Новый Массив);
	Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.props.Вставить("for_all", Истина);
	КонецЕсли;
	Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, Новый Структура("ВернутьОшибку, ЕстьОтвет, СообщатьПриОшибке, ТихийРежим", Истина, Истина, Ложь, Истина), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.КлассIntegrationConnection.СохранитьСбисПараметры");
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

&НаКлиенте
Функция	КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, ВходяшийПараметр)
	
	Если ТипЗнч(ВходяшийПараметр) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого Элемент Из ВходяшийПараметр Цикл
			Результат.Вставить(Элемент.Ключ, КлассIntegrationConnection_ПодготовитьСБИСПараметрКЗаписи(Кэш, КлассIntegrationConnection, Элемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Дата") Тогда
		Результат = Формат(ВходяшийПараметр,"ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	ИначеЕсли ТипЗнч(ВходяшийПараметр) = Тип("Строка") Тогда
		Результат = ВходяшийПараметр;
	Иначе
		Результат = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ВходяшийПараметр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция дозапрашивает меню при необходимости и возвращает список ини по меню с параметрами
&НаКлиенте
Функция		КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
    Перем Искать, ТипыИни;
	Если КлассIntegrationConnection.Данные.Меню = Неопределено Тогда
		РезультатЧтения = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекСервер.КлассIntegrationConnection.СписокИни");
		КонецЕсли;
	КонецЕсли;
	//Позволяет определить типы к получению. Если не указано, берутся стандартные из настроек.
	Если Не	ДопПараметры.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	//Позволяет определить какие ини требуется полчить. 01 - ищутся все, 0 - отключенные 1 - включенные
	Если Не	ДопПараметры.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные.
	КонецЕсли;
	
	Возврат	СформироватьСпискиИзМеню(ТипыИни, КлассIntegrationConnection.Данные.Меню, Искать);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Если ПустаяСтрока(КлассIntegrationConnection.ПараметрыКонфигурации.subsystem) Тогда
		СбисМеню = Новый Структура;
	Иначе
		СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
		КонецЕсли;
	КонецЕсли;
	ПараметрыМеню = СбисОписаниеИниМеню(Кэш);
	ПараметрыМеню.Вставить("active", Истина);
	
	//Для обновления меню нужны все настройки. Дополучим отсутствующие, если надо.
	РезультатДополучения = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДополучения, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	
	Попытка
		СбисМеню = СформироватьМеню_Структура(Кэш, КлассIntegrationConnection.Данные.Ини, СбисМеню, Отказ);//Меням данные меню по записываемым ини.
		КлассIntegrationConnection.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню",,,ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.КлассIntegrationConnection.СформироватьСбисМеню");
	КонецЕсли;
	КлассIntegrationConnection.Данные.Меню = СбисМеню;
	Возврат	СбисМеню;
КонецФункции

//Устанавливает выбранный класс настроек на ГО
&НаКлиенте
Функция		КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ) Экспорт
	Перем	ТихийРежим,				//Флаг управления выводом статуса установки
			СписокИниУстановить,	//Определяет список ини к получению и установке.
			ПолучитьДанныеИни,		//Определяет необходимость получения и установки ини.
	        ПрименитьXSLT,			//Необходимость получения и применения xslt. Необходимо для возможности установить пользовательскую конфу, если при получении что-то пошло не так и с сервера ничего не возвращается
			СтруктураКонфигураций, СписокТиповНастроек;
			
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыДозапросаИни = Новый Структура;
	
	Если Не ДопПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если	ДопПараметры.Свойство("СписокИни", СписокИниУстановить)
		И	СписокИниУстановить.Количество() Тогда
		//Если требуется установить конкретный набор ини, иначе ставятся включенные из меню
		ПараметрыДозапросаИни.Вставить("СписокИни", СписокИниУстановить);
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПрименитьXSLT", ПрименитьXSLT) Тогда
		ПрименитьXSLT = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПолучитьДанныеИни", ПолучитьДанныеИни) Тогда
		ПолучитьДанныеИни = Истина;
	КонецЕсли;
	
	Если ПрименитьXSLT Тогда
		Кэш.ФормаНастроек.СбисСформироватьСтруктуруXSLT(Кэш, КлассIntegrationConnection, Отказ);
	КонецЕсли;
	
	Если Не	ТихийРежим Тогда
		ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", ГлавноеОкно);
	КонецЕсли;
	
	Если ПолучитьДанныеИни Тогда
		РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, ПараметрыДозапросаИни, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	ИначеЕсли Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные Тогда
		РезультатИнициализации = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
		//Обновим меню для нового коннекшена, чтобы заполнились разделы обработки.
		РезультатИнициализации = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатИнициализации, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
	КонецЕсли;
	
	УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
	Кэш.Вставить("Ини", КлассIntegrationConnection.Данные.Ини);
	
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации);
	Если Не ТихийРежим Тогда
		ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	ПараметрыКонфигурации.Удалить("service");
	//Обновим сервис для статистики
	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемыКлиент(ПараметрыКонфигурации);
	Кэш.СБИС.ПараметрыИнтеграции.Демо = Неопределено;
	Если Не КлассIntegrationConnection.ПараметрыРаботы.Демо = Неопределено Тогда
		Кэш.СБИС.ПараметрыИнтеграции.Демо = КлассIntegrationConnection.ПараметрыРаботы.Демо;
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", КлассIntegrationConnection);
	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор;
	
	Если Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Попытка
			КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, КлассIntegrationConnection, Новый Структура);
		Исключение
			Отказ = Истина;
			Возврат МодульОбъектаКлиент().НовыйСбисИсключение(ИнформацияОбОшибке(), "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецПопытки;
	КонецЕсли;
	Возврат	Новый Структура("СписокФайлов", УстановленныеИни);
	
КонецФункции

&НаКлиенте
Функция		КлассIntegrationConnection_НастроитьШаблон(Кэш, КлассIntegrationConnection, КлассIntegrationШаблон, ДопПараметры, Отказ)
	Если Не ЗначениеЗаполнено(КлассIntegrationШаблон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Стандартные"), Ложь)
		Или	КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура("Тип", "Создание по шаблону"), Ложь) Тогда
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ)
	Иначе
		КлассIntegrationConnection.ПараметрыРаботы.Шаблон	= КлассIntegrationШаблон.Идентификатор;
		КлассIntegrationConnection.ПараметрыКонфигурации	= КлассIntegrationШаблон.ПараметрыКонфигурации;
	КонецЕсли;
КонецФункции

#Область include_core_vo2_Настройки_СБИС_КлассIntegrationConnection_public_ВзаимодействиеСИнтерфейсом
#КонецОбласти

