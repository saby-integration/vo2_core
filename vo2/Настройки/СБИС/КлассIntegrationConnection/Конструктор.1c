//Функция формирует новый "класс" IC на основе результата, полученного от БЛ.
&НаКлиенте
Функция		НовыйIntegrationConnection(Кэш, ДопПараметры, Отказ)
	Перем СбисДанныеБЛ, СбисПараметрыКонфигурации, КлассIntegrationConnection, ID, Перечитать;
	////Статус - возможные значнения "Активен", "Удален"
	//ПараметрыРаботы = Новый Структура("Статус, ТипНастроек, Автообновление, Изменен, Шаблон, Пользователь", "Новый", "Стандартные", Истина, Ложь);
	////Определяет работу со Сбис параметрами:
	////Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	////Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	//ПараметрыРаботы.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	//ПараметрыРаботы.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	//Результат = Новый Структура(
	//"ПараметрыРаботы,	Данные,									Ошибки,				Название,	ДатаИзмененияНастроек,	ПараметрыКонфигурации,	Идентификатор, Шаблон"
	//,ПараметрыРаботы,	Новый Структура("Ини, Меню, Параметры"),Новый Соответствие, "",			ТекущаяДата(),			ПараметрыСтандартнойКонфигурации(Кэш, Кэш.КэшНастроек.ПараметрыКонфигурации));
	Если ДопПараметры.Свойство("БазовыйКласс") Тогда
		Возврат _НовыйIntegrationConnection_НаОсновеКласса(Кэш, ДопПараметры, Отказ);
	ИначеЕсли	ДопПараметры.Свойство("Идентификатор")
			И	ЗначениеЗаполнено(ДопПараметры.Идентификатор) Тогда	
		ID = ДопПараметры.Идентификатор;
	ИначеЕсли	ДопПараметры.Свойство("ПараметрыКонфигурации", СбисПараметрыКонфигурации) Тогда
		ID = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыСтандартнойКонфигурации(Кэш, СбисПараметрыКонфигурации));
	КонецЕсли;
	Если Не ДопПараметры.Свойство("Перечитать", Перечитать) Тогда
		Перечитать = Ложь;
	КонецЕсли;
	Если		ЗначениеЗаполнено(ID)
		И	Не	Перечитать Тогда
		КлассIntegrationConnection = Кэш.КэшНастроек.КэшIntegrationConnection.Получить(ID);
	КонецЕсли;
	Если КлассIntegrationConnection = Неопределено Тогда
		КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
		КонецЕсли;
	ИначеЕсли	Не КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И	(Не 	ДопПараметры.Свойство("ИнициироватьДанные")
			Или		ДопПараметры.ИнициироватьДанные) Тогда
		//Если у класса не проиничены ини, то инитим, если только не отключено специально.
		КлассIntegrationConnection = КлассIntegrationConnection_Инициализировать(Кэш, Новый Структура("КлассIntegrationConnection", КлассIntegrationConnection), Отказ);
		Если Отказ Тогда 
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.НовыйIntegrationConnection");
		КонецЕсли;
	ИначеЕсли	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен"
		И	(	Не	ДопПараметры.Свойство("ПроверятьАктуальность")
			Или		ДопПараметры.ПроверятьАктуальность) Тогда
		//Проверим актуальность класса. Могли удалить
		ДанныеБЛ = _КлассIntegrationConnection_ВыполнитьЧтениеСБЛ(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни"), Отказ);
		Если Отказ Тогда
			Если ДанныеБЛ.code = 756 Тогда
				Отказ = Ложь;
				КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Определим, название создано по шаблону, или это ручное изменение.
	Если Не ЗначениеЗаполнено(КлассIntegrationConnection.Название) Тогда
		КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, ДопПараметры, Отказ);
		НазваниеСгенерировано = Истина;
	Иначе
		НазваниеСгенерировано = (КлассIntegrationConnection.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnection, Новый Структура, Отказ));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ID) Тогда
		ID = КлассIntegrationConnection_Идентификатор(Кэш, КлассIntegrationConnection);
	КонецЕсли;
	Если	Не	ДопПараметры.Свойство("Кэшировать")
		Или		ДопПараметры.Кэшировать Тогда
		Кэш.КэшНастроек.КэшIntegrationConnection.Вставить(ID, КлассIntegrationConnection);
	КонецЕсли;

	ПараметрыКопирования = Новый Структура;
	Если	КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные
		И		ДопПараметры.Свойство("ИнициироватьДанные")
		И Не	ДопПараметры.ИнициироватьДанные Тогда
		ПараметрыКопирования.Вставить("Ини", Ложь);
		ПараметрыКопирования.Вставить("Меню", Ложь);
	КонецЕсли;
	
	КлассIntegrationConnectionРезультат = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, ПараметрыКопирования, Отказ);
	Если	ДопПараметры.Свойство("Тип") Тогда
		КлассIntegrationConnection_ИзменитьТип(Кэш, КлассIntegrationConnectionРезультат, ДопПараметры, Отказ);
		Если НазваниеСгенерировано Тогда
			КлассIntegrationConnectionРезультат.Название = КлассIntegrationConnection_СгенерироватьНазвание(Кэш, КлассIntegrationConnectionРезультат, Новый Структура, Отказ);
		КонецЕсли;
	КонецЕсли;

	Возврат КлассIntegrationConnectionРезультат;
	
КонецФункции

//Возвращает экземпляр класса на основе другого класса
&НаКлиенте
Функция		_НовыйIntegrationConnection_НаОсновеКласса(Кэш, ПараметрыКонструктора, Отказ)
	Перем ИниСравнения, ДанныеИни, ПараметрыКонфигурации;
	КлассIntegrationConnection	= КлассIntegrationConnection_Скопировать(Кэш, ПараметрыКонструктора.БазовыйКласс, Новый Структура, Отказ);
	
	//Меняется конфигурация у нового класса. Сабсистем должны совпадать с версией шаблона.
	Если ПараметрыКонструктора.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурации) Тогда
		Если КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый" Тогда
				//С новым шаблоном можно делать что угодно
			ИначеЕсли	Не КлассIntegrationConnection.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem Тогда
					//Или	Не КлассIntegrationConnection.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается изменение параметров системы для существующего шаблона!");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон) Тогда
			КлассШаблонаДляПроверки = НовыйIntegrationConnection(Кэш,  Новый Структура("Идентификатор, ИнициироватьДанные", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, Ложь), Отказ);
			Если	КлассШаблонаДляПроверки.ПараметрыРаботы.Статус = "Активен"
				И	(	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.subsystem = ПараметрыКонфигурации.subsystem) Тогда
					//Или	Не	КлассШаблонаДляПроверки.ПараметрыКонфигурации.version = ПараметрыКонфигурации.version) Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается расхождение параметров системы у подключения, созданного по шаблону!");
			КонецЕсли;
		КонецЕсли;
		КлассIntegrationConnection.ПараметрыКонфигурации = ПараметрыКонфигурации;
	КонецЕсли;
	Если ПараметрыКонструктора.Свойство("Ини", ДанныеИни) Тогда
		Если КлассIntegrationConnection.Данные.Ини = Неопределено Тогда
			КлассIntegrationConnection.Данные.Ини = Новый Структура;
		Иначе
			//Дозапросим ини, если не все получены.
			КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		КонецЕсли;
		Для Каждого КлючИЗначениеИни Из ДанныеИни Цикл
			Если КлючИЗначениеИни.Значение = Неопределено Тогда
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса",773,,"Не допускается создание подключения при пустой ини!");
			КонецЕсли;
			КлассIntegrationConnection.Данные.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
		КонецЦикла;
		КлассIntegrationConnection.ПараметрыРаботы.ИнициированыДанные = Истина;
		
		//Переформируем меню у класса
		РезультатУстановки = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;	
		
		//Чистим структуру ини от возможного "мусора"
		ЧистыеИни	= Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(КлассIntegrationConnection.Данные.Ини);
		СписокИни	= КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
		
		//Для сравнения дозапрашиваем только те ини, что установлены.
		КлассДляСравнения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации", КлассIntegrationConnection.ПараметрыРаботы.Шаблон, ПараметрыСтандартнойКонфигурации(Кэш, КлассIntegrationConnection.ПараметрыКонфигурации)), Отказ);
		РезультатУстановки = КлассIntegrationConnection_ДозапроситьИни(Кэш, КлассДляСравнения, Новый Структура("СписокИни_ВО", КлассIntegrationConnection.Данные.Ини), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.НовыйIntegrationConnection.НаОсновеКласса");
		КонецЕсли;	
		РасхожденияИни = ПолучитьРасхождениеИни(ЧистыеИни, КлассДляСравнения.Данные.Ини, Отказ);
		//Помимо заполнения параметров для кэширования настроек, надо дополнить уже готовые данные в кэше
		Для Каждого УстановленныйИни Из ЧистыеИни Цикл
			ИмяИни = УстановленныйИни.Ключ;
			
			Если КлассДляСравнения.Данные.Ини.Свойство(ИмяИни, ИниСравнения) Тогда
				ЕстьТиповая = ИниСравнения.СбисЕстьТиповая;
			Иначе
				ЕстьТиповая = Ложь;
			КонецЕсли;
			ЕстьИзменение	= Не ЕстьТиповая Или РасхожденияИни.Свойство(ИмяИни); 
			Автообновление	= КлассIntegrationConnection.ПараметрыРаботы.Автообновление И ЕстьТиповая;
			
			//Дополнить данные в ини кэша при контроле изменений
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьИзменения",		ЕстьИзменение);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисЕстьТиповая",		ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисАвтообновление",	Автообновление);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисСтандартная",			ЕстьТиповая);
			КлассIntegrationConnection.Данные.Ини[ИмяИни].Вставить("СбисПользовательская",		НЕ ЕстьТиповая ИЛИ ЕстьИзменение);
			КлассIntegrationConnection.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(ИмяИни);
		КонецЦикла;
	КонецЕсли;
	Возврат КлассIntegrationConnection;
КонецФункции

