////////////////////////////////////////////////////

&НаКлиенте                                  
Процедура	АвтообновлениеПриИзменении(Кэш, НовоеЗначение) Экспорт	
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;		
	// Если попадаем сюда до авторизации, то выбранных настроек у нас нет. Изменяем в кэше, потом при авторизации заполнится автоматом (с) Сычев
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки") Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Автообновление = НовоеЗначение;
	КонецЕсли;
	Кэш.Парам.НастройкиАвтообновление = НовоеЗначение;
КонецПроцедуры

&НаКлиенте                                  
Процедура	ИспользоватьГенераторПриИзменении(Кэш, НовоеЗначение) Экспорт	
	СохранитьПараметрыСБИС(Кэш, Новый Структура("ИспользоватьГенератор", НовоеЗначение), Кэш.Парам.ИдентификаторНастроек);
КонецПроцедуры

&НаКлиенте
Процедура	ИнициализироватьКэшНастроек(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) Экспорт
	Если Отказ Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("Обновить")  //флаг "Обновить" используется для установки кэша серверных настроек при изменении параметров 
		И ПараметрыИнициализации.Обновить Тогда
		УстановитьПараметрыХранящиесяНаШаблоне(Кэш, ПараметрыИнициализации.Параметр);
		Возврат;
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.МестныйКэш = Кэш;
	
	КэшIntegrationConnection= Новый Соответствие;
	КэшПолученныхНастроек	= Новый Структура;
	ПараметрыНастроек		= Новый Структура;
	КэшНастроек				= Новый Структура("ПараметрыНастроек, КэшIntegrationConnection, ИзмененияВНастройках, ИниВПорядке", ПараметрыНастроек, КэшIntegrationConnection, Ложь, Ложь);
	ПрефиксСервисСистемы	= "Com1C";
	
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы + "82");	//Префикс системы по-умолчанию, для стандартных настроек
	ПараметрыНастроек.Вставить("ЭлементФормы",					"НастройкиНазвание");			//Элемент формы по-умолчанию
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");							//Передаваемый в статистику префикс от выбранных настроек.
	ПараметрыНастроек.Вставить("ПолучатьИниЗаРаз",				30);							//Определяет максимальное количество ини, получаемое запросом на сервер за раз. Разбивка для ускорения обработки больших строк.
	ПараметрыНастроек.Вставить("СимволыКаталог",				"@/-_=\# &:|;?.");				//Последовательность символов, которых не может быть в идентификаторе соединения, но могут быть в пути к папке
	ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые",		Ложь);							//Определяет необходимость хранить полученные ини в памяти.
	ПараметрыНастроек.Вставить("ИспользоватьУИДИнтеграции",		Истина);						//Определяет залоченность системы на УИД интеграции. В Мастере нельзя создать коннекшен и/или шаблон, отличный от установленного.
	ПараметрыНастроек.Вставить("СформироватьСтруктуруРазделов",	Ложь);							//Определяет необходимость формировать структуру разделов с Сбис Меню по всем инишкам.
	ПараметрыНастроек.Вставить("Режим",							"Облако");
	ПараметрыНастроек.Вставить("ПоследнийРаздел",				"");							//Определяет наличие перехода в раздел настроек.
	
	
	ПараметрыСистемы = Кэш.ПараметрыСистемы;
	Если ПараметрыСистемы = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
	
	//Определяем service в зависимости от текущей версии системы
	ВерсияСистемыМС = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
	service = ПрефиксСервисСистемы + СтрПолучитьСтроку(ВерсияСистемыМС,1);
	ПодВерсияСистемы2 = СтрПолучитьСтроку(ВерсияСистемыМС,2);
	Если (ПодВерсияСистемы2 = "1") Тогда
		ПодВерсияСистемы2 = "2";
	КонецЕсли;
	service = service + ПодВерсияСистемы2;
	
	ПараметрыКонфигурации.Вставить("service", service);
	КэшНастроек.Вставить("ПараметрыКонфигурации", ПараметрыКонфигурации);
	
	СоответствиеНазваний= Новый Массив;
	ДоступныеТипыИни	= Новый Массив;
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Конфигурация",		"Конфигурация"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "сбисМеню",			"сбисМеню"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхВыгрузка", 		"СинхВыгрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхЗагрузка", 		"СинхЗагрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ЗагрузкаИсходящих",	"Загрузка_Исходящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Загрузка", 			"Загрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ВыгрузкаВходящих", 	"Выгрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Выгрузка", 			""));
	//Так, как в меню могут быть различные типы, не относящиеся к обработке, делаем фильтр.
	ДоступныеТипыИни.Добавить("Система");
	Для Шаг = 4 По СоответствиеНазваний.Количество()-1 Цикл
		ДоступныеТипыИни.Добавить(СоответствиеНазваний[Шаг].json);
	КонецЦикла;
	ПараметрыНастроек.Вставить("СоответствиеНазваний",СоответствиеНазваний);//Шаблон перевода имен названий сервис-обработка
	ПараметрыНастроек.Вставить("ДоступныеТипыИни",	ДоступныеТипыИни);		//Список доступных типов ини для работы обработки

	СписокПараметровХранящихсяНаШаблоне = Новый Массив;
    СписокПараметровХранящихсяНаШаблоне.Добавить("использоватьгенератор");
	СписокПараметровХранящихсяНаШаблоне.Добавить("РеквизитСопоставленияНоменклатуры");
	Если МодульОбъектаКлиент().ИспользоватьСбисПараметрыДляХраненияОбщихНастроек() Тогда 
    	СписокПараметровХранящихсяНаШаблоне.Добавить("saby_params");
	КонецЕсли;
   	Если Кэш.Парам.СпособХраненияМетокСтатусов = 1 Тогда
        СписокПараметровХранящихсяНаШаблоне.Добавить("status_marks");
    КонецЕсли;
	КэшНастроек.Вставить("СписокПараметровХранящихсяНаШаблоне", СписокПараметровХранящихсяНаШаблоне);
	
	//Очищаем закэшированные значения ини загрузки.
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыИнициализации) = Тип("Структура") 
		И ПараметрыИнициализации.Свойство("ИнициализацияВременногоКэша") 
		И ПараметрыИнициализации.ИнициализацияВременногоКэша Тогда 
		Кэш.Вставить("КэшНастроек", КэшНастроек);
	Иначе 
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("ФормаНастроек",	ЭтаФорма);
		МодульОбъектаКлиент().ОбновитьПараметрГлобальногоМодуля("КэшНастроек",		КэшНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура	КонфигурацияПриИзменении(ПараметрыКонфигурацииВходящие, Кэш) Экспорт
	
    НоваяКонфигурация	= ПараметрыКонфигурацииВходящие.Конфигурация;
	ВыбранныеНастройки	= Кэш.КэшНастроек.ВыбранныеНастройки;

	Если 	ВыбранныеНастройки.ПараметрыКонфигурации.subsystem = НоваяКонфигурация.ПараметрыКонфигурации.subsystem
		И	ВыбранныеНастройки.ПараметрыКонфигурации.version = НоваяКонфигурация.ПараметрыКонфигурации.version Тогда
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	ИначеЕсли	Не ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый" Тогда
		ПараметрыКонфигурацииВходящие.ОбработчикЗавершения.ДополнительныеПараметры.Отказ = Истина;
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(, "ФайлыНастроекСервер.КонфигурацияПриИзменении",,,"Запрещено менять систему для уже созданных подключений");
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СбисИсключение, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	ОбработчикПослеДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("КонфигурацияПриИзменении_ПослеДиалога", ЭтаФорма, ПараметрыКонфигурацииВходящие);
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикПослеДиалога, "Изменить конфигурацию настроек?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура	КонфигурацияПриИзменении_ПослеДиалога(РезультатДиалога, ПараметрыКонфигурацииВходящие) Экспорт
	
	Перем ЗначениеИни;
	ОбработчикЗавершенияИзменения	= ПараметрыКонфигурацииВходящие.ОбработчикЗавершения;
    НоваяКонфигурация				= ПараметрыКонфигурацииВходящие.Конфигурация;
	Кэш								= ОбработчикЗавершенияИзменения.ДополнительныеПараметры.Кэш;
	Если РезультатДиалога = КодВозвратаДиалога.Нет Тогда
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	Результат	= Неопределено;
	Отказ		= Ложь;
	Попытка
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Изменение подключения...");
		НовыйКлассIntegrationConnection = КлассIntegrationConnection_Скопировать(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура);
		КлассIntegrationConnection_Изменить(НовыйКлассIntegrationConnection, Новый Структура("Кэш, ПараметрыКонфигурации", Кэш, НоваяКонфигурация.ПараметрыКонфигурации));
		
		РезультатДозапроса = КлассIntegrationConnection_ДозапроситьИни(Кэш, НовыйКлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
		
		РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, НовыйКлассIntegrationConnection, Новый Структура, Отказ);
		Если Отказ Тогда
			МодульОбъектаКлиент().ВызватьСбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.КлассIntegrationConnection.Установить");
		КонецЕсли;
		Результат = РезультатУстановки.СписокФайлов;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Результат = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.КонфигурацияПриИзменении");
		ПараметрыКонфигурацииВходящие.ОбработчикЗавершения.ДополнительныеПараметры.Отказ = Истина;
	КонецПопытки;
	МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(Результат, ПараметрыКонфигурацииВходящие.ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьМассивФайловДляКонфигурации(Кэш,СписокТиповНастроек, ПрефиксСервис,ДополнительныеПараметры) Экспорт
	
	Возврат	Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ПрефиксСервис, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ) Экспорт
	
	Возврат Новый Структура("XSLT,XML,EPF", Новый Массив, Новый Массив, Новый Структура("ЕстьИзменения", Ложь));
	
КонецФункции	

&НаКлиенте                                  
Процедура	ПриЗапускеРедактораНастроек(ПараметрыЗапускаРедактораВходящие, Кэш) Экспорт
	Перем КэшироватьТекущие, ВыбранныеНастройки;
	
	Отказ		= Ложь;
	КэшНастроек = Кэш.КэшНастроек;
	
	КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	Если Не ПараметрыЗапускаРедактораВходящие.Свойство("КэшироватьТекущие", КэшироватьТекущие) Тогда
		КэшироватьТекущие = Истина;
	КонецЕсли;
	
	//Кэширование включается при работе в разделе настроек. При выходе из раздела отключается и кэш чистится
	КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые = ПараметрыЗапускаРедактораВходящие.КэшироватьВсеПолучаемые;
	//Кэшируем текущие ини.
	Если		КэшироватьТекущие Тогда
		СтруктураТекущихНастроек = СформироватьСтруктуруТекущихНастроек(Кэш, ПараметрыЗапускаРедактораВходящие, Отказ);
		Если Отказ Тогда
			//По какой-то причине не удалось закэшировать текущие настройки. Запускам алгоритм по-умолчанию.
			Если СтруктураТекущихНастроек.code = 765 Тогда//Не нашли типовые настройки. Вообще всё пропало!
				МодульОбъектаКлиент().ВызватьСбисИсключение(СтруктураТекущихНастроек, "ФайлыНастроекСервер.ПриЗапускеРедактораНастроек");
			КонецЕсли;
			Отказ = Ложь;
 			СбисПеречитатьНастройки(Новый Структура, Кэш);
		ИначеЕсли Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
			//Установим параметры на отправку в ложь. Таким образом, закэшируем изменения и параметры, а после отправим всё на сервис при записи изменений
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
		Иначе
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураТекущихНастроек);
		КонецЕсли;
	КонецЕсли;
	КлассIntegrationConnection_ЗаполнитьРедакторИниПоКлассу(Кэш, СтруктураТекущихНастроек, Новый Структура)

КонецПроцедуры

&НаКлиенте                                  
Процедура	ПриИзмененииНаВкладкеФайловНастроек(ПараметрыИзменения, Кэш) Экспорт
	//Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	Если ПараметрыИзменения.Поле = "Название" Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Изменен = Не Кэш.КэшНастроек.ВыбранныеНастройки.Название = ПараметрыИзменения.НовоеЗначение;
		Кэш.КэшНастроек.ВыбранныеНастройки.Название	= ПараметрыИзменения.НовоеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте                                  
Функция		СбисДобавитьПечатныеФормы(Кэш) Экспорт
	
	Возврат Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш);
	
КонецФункции	

&НаКлиенте
Функция		СбисКлючНастроек(Кэш) Экспорт
	Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
КонецФункции

//Возвращает список ключей в порядке их приоритета для поиска сохранённого коннекшена. Первый ключ в списке - основной
&НаКлиенте
Функция		КлючиНастроекСБИС(Кэш) Экспорт
	
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}_{ИдАккаунта}";
	ПараметрыПрименить = Новый Структура("Заменить", Кэш.СБИС.ПараметрыИнтеграции);

	Результат = Новый Массив;
	КлючДобавить = МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить);
	Если ЗначениеЗаполнено(КлючДобавить) Тогда
		Результат.Добавить(КлючДобавить);
	КонецЕсли;
	Если		ЗначениеЗаполнено(Кэш.СБИС.ПараметрыИнтеграции.Пользователь) Тогда
		КлючНастроек = Кэш.СБИС.ПараметрыИнтеграции.Пользователь;
	ИначеЕсли	ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	ШаблонКлюча = "{КодСервиса}{ИдПользователя}";
	ПараметрыФормат = Новый Структура("КодСервиса, ИдПользователя", "", "", "");
	ПараметрыПрименить.Заменить = ПараметрыФормат;
	Если ЗначениеЗаполнено(КлючНастроек) Тогда
		ПараметрыФормат.КодСервиса		= Кэш.СБИС.ПараметрыИнтеграции.КодСервиса;
		ПараметрыФормат.ИдПользователя	= НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
		ПараметрыФормат.КодСервиса = "";
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	Если Не Кэш.Парам.ВходПоСертификату Тогда
		ПараметрыФормат.ИдПользователя	= НРег(Кэш.Парам.Логин);
		Результат.Добавить(МодульОбъектаКлиент().СбисФормат(ШаблонКлюча, ПараметрыПрименить));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура	СбисПодключитьЗаплатки(Кэш, ДопПараметрыПодключения=Неопределено) Экспорт
	
	// Подключает внешнюю обработку с пользовательскими функциями
	МестаПоискаОбработки = Новый Массив();//Массив адресов, где искать файл в порядке приоритета
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	
	ДопПараметры = Новый Структура("МестаПоиска", МестаПоискаОбработки);
	Кэш.ФормаНастроекОбщее.СбисПодключитьЗаплатки(Кэш, ДопПараметры);
		
КонецПроцедуры

//Функция возвращает последний сохраненный идентификатор настроек в СБИС для выбранного логина пользователя
&НаКлиенте
Функция		СбисПолучитьИдентификаторНастроек(Кэш) Экспорт
	
	КлючиНастроек = КлючиНастроекСБИС(Кэш);

	Для Каждого КлючНастроек Из	КлючиНастроек Цикл
		ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
		Если Не ЗначениеИдентификатора = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеИдентификатора = Неопределено Тогда
		Результат = "";
	Иначе
		Результат = ЗначениеИдентификатора.Представление;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция устанавливает соответсвие последнего идентификатора настроек для пользователя
&НаКлиенте
Процедура	СбисЗаписатьИдентификаторНастроек(Кэш, ИдентификаторНастроек) Экспорт
	
	КлючиНастроек = КлючиНастроекСБИС(Кэш);
	КлючДляЗаписи = КлючиНастроек[0];
	КлючиНастроек.Удалить(0);
 	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючДляЗаписи);
	Если ЗначениеИдентификатора = Неопределено Тогда
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Добавить(КлючДляЗаписи, ИдентификаторНастроек);
	Иначе
		ЗначениеИдентификатора.Представление = ИдентификаторНастроек;
	КонецЕсли;
	СбисОчиститьИдПоСтаромуКлючу(Кэш, КлючиНастроек);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИдентификаторыНастроекВСБИС", Кэш.Парам.ИдентификаторыНастроекВСБИС);
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьИдПоСтаромуКлючу(Кэш, КлючиНастроек)
	
	Для Каждого КлючНастроек Из КлючиНастроек Цикл
 	 	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
		Если ЗначениеИдентификатора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Удалить(ЗначениеИдентификатора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисВыбратьСоединение(Кэш, ДопПараметры=Неопределено) Экспорт
	Перем ОписаниеОповещенияЗавершение;
	Отказ = Ложь;
	Если ДопПараметры = Неопределено Тогда 
		ПараметрыДиалога = Новый Структура("ТипКоннекшена", "user");
	Иначе
		ПараметрыДиалога = ДопПараметры;
	КонецЕсли; 
	РезультатИнициализации = ИнициироватьРежимДиалога(Кэш, ПараметрыДиалога, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатИнициализации);
		Возврат;
	КонецЕсли;
	Если Не ПараметрыДиалога.Свойство("ОбработчикРезультата", ОписаниеОповещенияЗавершение) Тогда
		ПараметрыВызова = Новый Структура("Кэш, Отказ, ДополнительныеПараметры",Кэш,Отказ, Новый Структура("СообщатьПриОшибке", Истина));
		ОписаниеОповещенияЗавершение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисЗапускПримененияНастроекСФормы", ЭтаФорма, ПараметрыВызова);
	КонецЕсли;

	ТекстПредупреждения = "Не удалось получить список настроек СБИС!";
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Отказ Тогда
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		РезультатВыбора = ЭтаФорма.ОткрытьМодально();
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, РезультатВыбора, ОписаниеОповещенияЗавершение);
	#Иначе
		Если Отказ Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияЗавершение;
		Открыть();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисВыгрузитьНастройкиВКаталог(Кэш, ПараметрыВыгрузки) Экспорт
	Отказ = Ложь;
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.Кэш.Парам.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогСНастройками	= Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	Иначе
		ПродолжитьВыполнение	= Ложь;
		Возврат;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("КаталогНаКлиенте",	КаталогСНастройками);
	ПараметрыВыгрузки.Вставить("ВариантОбработки",	0);
	
	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки);//Массив установленных ини
		
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисЗагрузитьНастройкиИзКаталога(Кэш, ДопПараметры) Экспорт
	
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	Отказ = Ложь;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.Кэш.Парам.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если Не ДиалогОткрытия.Выбрать() Тогда 
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "", ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;	
	КаталогНастроекКлиент	= Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогНастроекКлиент, ДопПараметры);	
	
КонецПроцедуры

&НаКлиенте                                  
Процедура	ЗагрузитьНастройкиНаСервер_ПослеВвода(КаталогНастроекКлиент, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Отказ = Ложь;
	Кэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек	= КаталогНастроекКлиент;
	УстановленныеИни = ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш, КаталогНастроекКлиент, Отказ);//Массив установленных ини
	
	Если Отказ Тогда
		ДопПараметры.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, УстановленныеИни, ДопПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни);
	МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(КаталогНастроекКлиент, ДопПараметры.ОписаниеОповещенияОЗавершении);
КонецПроцедуры	
	
//При смене версии, типовые инишки обновляются при чтении соединения.
&НаКлиенте
Процедура	СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат;
КонецПроцедуры

//Серверные настройки - не перечитывать ини
&НаКлиенте
Функция		СбисОбновитьМассивУстановленныхИниФайлов(Кэш, МассивУстановленныхИни) Экспорт
	
	Возврат	МассивУстановленныхИни;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОтключитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ=Ложь) Экспорт
	
	Если Ини.Количество() Тогда
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	КонецЕсли;
	
	Возврат	ОтключитьФайлыНастроекНаСервере(Ини, Кэш, Идентификатор, Отказ);
	
КонецФункции

//Очищает выбранные настройки для их повторного заполнения
&НаКлиенте
Процедура	СбисОчиститьВыбранныеНастройки(Кэш, Отказ=Ложь) Экспорт
	Кэш.Ини			= Новый Структура;
	Кэш.КэшНастроек.ИниВПорядке	= Ложь;
	Если Не Кэш.Свойство("КэшНастроек") Тогда
		Возврат;
	КонецЕсли;
	Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")	Тогда
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
	КонецЕсли;
	Кэш.Парам.ИдентификаторНастроек = "";
	Кэш.КэшНастроек.ИзмененияВНастройках = Кэш.ФормаНастроекОбщее.Открыта();	
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьКэшНастроек(Кэш) Экспорт

	КэшНастроек = Неопределено;
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.Свойство("КэшНастроек", КэшНастроек) Тогда
		Возврат;
	КонецЕсли;
	КэшНастроек.КэшIntegrationConnection.Очистить();
	КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = "";
	
	Кэш.ФормаНастроекОбщее.СбисОчиститьКэшНастроек(Кэш, Новый Структура);
	Если	Не КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки)
		Или	Не ЗначениеЗаполнено(ВыбранныеНастройки) Тогда
		Возврат;
	КонецЕсли;
	//Установим выбранным настройкам параметры для работы
	//ВыбранныеНастройки.Данные.Ини = Новый Структура;
	ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять	= Истина;
	ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять		= Ложь;
КонецПроцедуры

//Функция отслеживает изменение версии конфигурации и наличия изменений в файлах настроек.
&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, СтруктураПараметров) Экспорт
	Перем СбисПоследнееИзменение, ВыбранныеНастройки;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		Отказ = Ложь;
		ВыбранныеНастройки = СбисПолучитьДанныеСервисаИнтеграции(Кэш, Новый Структура("Идентификатор,СписокИни", Кэш.Парам.ИдентификаторНастроек, Неопределено), Отказ);
		//TODO38 исправить это место. Не должно быть ситуаций когда нет настроек.
		Если Отказ Тогда//Не понятно, что произошло и почему настроек нет. Вернём проверку истина, на всякий.
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ВыбранныеНастройки);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НужноПроверять = Кэш.ФормаНастроекОбщее.СбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров);
	СтруктураПараметров.Свойство("ПоследнееИзменение",	СбисПоследнееИзменение);
	
	//Определим необходимость проверки по последним изменениям в настройках
	Если	Не НужноПроверять
		И	Не СбисПоследнееИзменение = ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек Тогда
		НужноПроверять = Истина;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПоследнееИзменение",	ВыбранныеНастройки.ПараметрыРаботы.ДатаИзмененияНастроек);
	
	Возврат НужноПроверять;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьНастройки(ПараметрыПеречитать, Кэш) Экспорт
	
	//Ничего не менялось
	Если	Не	Кэш.КэшНастроек.ИзмененияВНастройках
		И		Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
		И	Не	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Изменен Тогда
		МодульОбъектаКлиент().СбисСообщить(Новый Структура("Текст, ЭлементНазначения", "Изменения отсутствуют.", ПараметрыПеречитать.Элемент));
		Возврат
	КонецЕсли;
	СбисПараметрыДиалога = Новый Структура("Кэш, ПараметрыПеречитать", Кэш, ПараметрыПеречитать);
	ОбработчикДиалога = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения("СбисПеречитатьНастройки_ПослеДиалога", ЭтаФорма, СбисПараметрыДиалога);
	ТекстВопроса = "Все несохраненные изменения будут очищены. Продолжить?";
	МодульОбъектаКлиент().СбисПоказатьВопрос(ОбработчикДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,"Очистить изменения?");
	
КонецПроцедуры

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьНастройки_ПослеДиалога(РезультатОтвета, ДопПараметры) Экспорт

	Если Не РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Кэш = ДопПараметры.Кэш;
	Попытка
		СбисПеречитатьТекущиеНастройки(ДопПараметры.ПараметрыПеречитать, Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		МодульОбъектаКлиент().СообщитьСбисИсключение(МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПеречитатьНастройки_ПослеДиалога"));		
	КонецПопытки;
	Если Кэш.ФормаНастроекОбщее.Открыта() Тогда
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш);
	КонецЕсли;

КонецПроцедуры

//Получает данные настроек, как стандартных, так и пользовательских. Проверяет наличие в кэше, дополняет данные в кэше. Возвращает "псевдокласс" конфиг/коннекшен/их список
&НаКлиенте
Функция		СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ) Экспорт
	Перем	КлассIntegrationConnection,	//Временный параметр для перевода на класс
			ТипЗапроса,					//Возможные значения: "Config", "Connection, ListConfig, ListConnection". Если не указано, определяем по наличию идентификатора.
			Идентификатор,				//ИД соединения. Если не передан, значит это "Config", иначе "Connection".
			ПараметрыКонфигурации,		//Параметры конфигурации: Структура "service,subsystem,verison"
			СписокИни,					//Возможные значения:
										// 1) Массив структур с ключами "type", "name".
										// 2) Пустой массив - получаем всё.
										// 3) Неопрелено - не получаем ини, только основные поля. 
										// 4) Не передан - строится автоматически из СбисМеню по полю enable.
			ДополнительныеПараметры,	//Дополнительно, для передачи в метод чтения.
			Кэшировать,					//Возможность отключить кэширование конкретного чтения, без изменения общей настройки
			БратьВКэше,					//Возможность отключить получение из кэша конкретных значений, без изменения общей настройки
			Результат;					//Возвращаемый результат	

	ПараметрыПолучения = Новый Структура;
	//Определяем переданные параметры и устанавливаем фильтры.
	Если Не ПараметрыЗапроса.Свойство("КлассIntegrationConnection", КлассIntegrationConnection) Тогда
		Если Не ПараметрыЗапроса.Свойство("Идентификатор", Идентификатор) Тогда 
			//Или	Идентификатор = "Новое подключение" Тогда
			Идентификатор = "";
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("ТипЗапроса", ТипЗапроса)	Тогда
			ТипЗапроса = ?(ПустаяСтрока(Идентификатор), "Config", "Connection");	
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("ПараметрыКонфигурации",	ПараметрыКонфигурации)	Тогда
			ПараметрыКонфигурации = Новый Структура("service,subsystem,version");
			ЗаполнитьЗначенияСвойств(ПараметрыКонфигурации,Кэш.КэшНастроек.ПараметрыКонфигурации);	
			Если ТипЗапроса = "Config" Или ТипЗапроса = "ListConfig" Тогда//Для запросов на конфиг без указания конфигурации берем префикс 82.
				ПараметрыКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
			КонецЕсли;
		КонецЕсли;
		Если Не ПараметрыЗапроса.Свойство("СписокИни", СписокИни)			Тогда
			//Для config пользовательской конфигурации ини нет.
			Если		ПараметрыКонфигурации.subsystem = ""
				И Не	ТипЗапроса = "Connection"	Тогда
				СписокИни = Неопределено;
			Иначе
				ПараметрыЗапросаМеню = Новый Структура("Идентификатор,ПараметрыКонфигурации",Идентификатор,ПараметрыКонфигурации);
				РезультатЗапроса = СформироватьСписокИни(Кэш, ПараметрыЗапросаМеню, Отказ);
				Если Отказ Тогда
					Возврат РезультатЗапроса;
				КонецЕсли;
				Если	Не ТипЗнч(РезультатЗапроса) = Тип("Структура")
					Или	Не РезультатЗапроса.Свойство("Данные",СписокИни) Тогда
					СписокИни = РезультатЗапроса;	
				КонецЕсли;
			КонецЕсли;
			ПараметрыПолучения.Вставить("СписокИни", СписокИни);	
		Иначе
			ПараметрыПолучения.Вставить("СписокИни", СписокИни);
		КонецЕсли;
		
		Если Не	ПараметрыЗапроса.Свойство("Кэшировать", Кэшировать) Тогда
			Кэшировать = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
		КонецЕсли;
		Если Не	ПараметрыЗапроса.Свойство("БратьВКэше", БратьВКэше) Тогда
			БратьВКэше = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
		КонецЕсли;	
		Если Не	ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Если Лев(ТипЗапроса,4) = "List" Тогда
			БратьВКэше = Ложь;
		КонецЕсли;
	КонецЕсли;
	//В кэше данных нет, либо есть, но не все. Получаем с сервера
	ПараметрыПолучения.Вставить("ДополнительныеПараметры",	ДополнительныеПараметры);
	Если	Не	КлассIntegrationConnection = Неопределено Тогда
		КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, ПараметрыПолучения, Отказ);
		РезультатЗапроса = ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "Config" Тогда//Получить типовые
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "Connection" Тогда
		ПараметрыПолучения.Вставить("Идентификатор",			Идентификатор);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	Кэш.КэшНастроек.ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConnection" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConfig" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ);
	Иначе
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.СбисПолучитьДанныеСервисаИнтеграции", 760, "Неверные параметры фильтра", "Не известный тип запроса!");
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли Не Лев(ТипЗапроса,4) = "List" Тогда
		Для Каждого ПараметрЗапросаИни Из СписокИни Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ПараметрЗапросаИни.name);
			Если ИмяИни = "сбисМеню" Тогда
				Результат.Данные.Меню = РезультатЗапроса.Данные.Меню;
				Продолжить;
			ИначеЕсли	Результат.Данные.Ини.Свойство(ИмяИни)
				Или	Не	РезультатЗапроса.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Данные.Ини.Вставить(ИмяИни, РезультатЗапроса.Данные.Ини[ИмяИни]);
		КонецЦикла;
	КонецЕсли;
		
	Возврат	Результат;
	
КонецФункции

//Функция взаимодействия с online. Получает и кэширует необходимые данные
&НаКлиенте
Функция		СбисПолучитьНастройки(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	
	Если Кэш = Неопределено	Тогда//Для теста функции при поиске        
		Возврат	Истина;
	КонецЕсли;
	
	РезультатИзмененияПараметров = СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш,Отказ,ПродолжитьВыполнение);
	Если Не РезультатИзмененияПараметров = Неопределено Тогда
		Возврат РезультатИзмененияПараметров;
	ИначеЕсли Кэш.КэшНастроек.ИниВПорядке Тогда
		ПродолжитьВыполнение = Ложь;
		Возврат Неопределено;
    КонецЕсли;
	
	СбисПодключитьЗаплатки(Кэш);
	
	Настройки = СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение);
	
	Если Отказ Тогда
		ПродолжитьВыполнение = Ложь;
		Возврат	Неопределено;
	КонецЕсли;
	
	Возврат	Настройки;
			
КонецФункции

&НаКлиенте
Функция		СбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки) Экспорт				
	
	ПараметрыПротокола	= Новый	Структура();
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		ВыбранныеНастройки = Кэш.КэшНастроек.ВыбранныеНастройки;
	КонецЕсли;
	 
	ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ВыбранныеНастройки.ПараметрыКонфигурации);
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ВыбранныеНастройки.ПараметрыКонфигурации.service,ПрефиксНастроек);
	ПараметрыПротокола.Вставить("КонфигурацияФайловНастроек", ИмяКонфигурации);
	Если ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый"	Тогда  
		Если ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда  
			ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Создание нового шаблона: " + ВыбранныеНастройки.Название); 
		Иначе	
			ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Создание нового подключения: " + ВыбранныеНастройки.Название); 
		КонецЕсли;	
	Иначе
		ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Применяемые настройки: " + ВыбранныеНастройки.Название);
	КонецЕсли;
	ПараметрыПротокола.Вставить("Версия",			ВыбранныеНастройки.ПараметрыКонфигурации.version);
	ПараметрыПротокола.Вставить("КаталогНастроек",	"");

	Возврат ПараметрыПротокола;
	
КонецФункции

//Формируется массив для обновления главного окна
&НаКлиенте
Функция		СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ=Ложь) Экспорт
	Перем КэшIntegrtationConfig;
	Если Не Кэш.КэшНастроек.Свойство("ПараметрыКонфигурации")	Тогда
		Возврат	Неопределено;
	ИначеЕсли Не Кэш.КэшНастроек.Свойство("КэшIntegrtationConfig", КэшIntegrtationConfig) Тогда
		Кэш.КэшНастроек.Вставить("КэшIntegrtationConfig");
	Иначе
		Возврат КэшIntegrtationConfig;
	КонецЕсли;
	
	//СписокИни = Новый Массив;
	//СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыЗапроса = Новый Структура("СписокИни, ДополнительныеПараметры", Неопределено, Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина));
	ПолученныеНастройки = ПолучитьСписокConfig(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПолученныеНастройки);
		Возврат	Неопределено;
	КонецЕсли;
	
	СписокТиповНастроек = Новый СписокЗначений;
	Для Каждого СтрокаНастроек Из ПолученныеНастройки Цикл
		Если ПустаяСтрока(СтрокаНастроек.ПараметрыКонфигурации.subsystem) Тогда
			Продолжить;
		КонецЕсли;
		Префикс	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(СтрокаНастроек.ПараметрыКонфигурации);
		СписокТиповНастроек.Добавить(Новый Структура("МассивИни,ПараметрыКонфигурации", Новый Массив, СтрокаНастроек.ПараметрыКонфигурации),Префикс);		
	КонецЦикла;
	//Пользовательская конфигурация
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version");
	ПараметрыТекущейСистемы.Вставить("service",		Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ПараметрыТекущейСистемы.Вставить("subsystem",	"");
	ПараметрыТекущейСистемы.Вставить("version", 	"0.0.0.1");
	
	СписокТиповНастроек.Добавить(Новый	Структура("МассивИни,ПараметрыКонфигурации",	Новый	Массив, ПараметрыТекущейСистемы),ПараметрыТекущейСистемы.service);
	
	Кэш.КэшНастроек.КэшIntegrtationConfig = СписокТиповНастроек;
	Возврат	СписокТиповНастроек;

КонецФункции

&НаКлиенте
Функция		СбисПолучитьСтруктуруКонфигурации(Кэш, СтруктураКонфигураций, ЗначениеКонфигурации) Экспорт
	
	Отказ = Ложь;
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(СтруктураКонфигураций, ЗначениеКонфигурации);
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Возврат	Неопределено;
	КонецЕсли;
	КлассIntegrationConfig = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации, ИнициироватьДанные", НашаКонфигурация.ПараметрыКонфигурации, Ложь), Отказ);
	
	ВыбранныеНастройки = Неопределено;
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки)
		И	ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		Параметры_Предыдущее = ВыбранныеНастройки.ПараметрыКонфигурации;
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ВыбранныеНастройки.ПараметрыКонфигурации);
		ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ВыбранныеНастройки.ПараметрыКонфигурации.service,ПрефиксНастроек);
		ВыбранныеНастройки.ПараметрыКонфигурации = НашаКонфигурация.ПараметрыКонфигурации;//При создании нового подключения меняем параметры системы на выбранную конфигурацию. Потом уже нельзя.
		//Если меняется система
		Если	Не Параметры_Предыдущее.subsystem = ВыбранныеНастройки.ПараметрыКонфигурации.subsystem
			Или Не Параметры_Предыдущее.version = ВыбранныеНастройки.ПараметрыКонфигурации.version	Тогда 
			//Установлены какие-то ини, переустановить с учетом новой системы (те, что есть будут переполучены, тех что нет просто не будет)
			ВыбраноНазвание = ВыбранныеНастройки.Название;
			Если	ЗначениеЗаполнено(ВыбранныеНастройки.ПараметрыКонфигурации.subsystem)
				И	ВыбранныеНастройки.Данные.Ини.Количество() Тогда
				Отказ		= Ложь;
				СписокИскать= Новый Массив;
				Для Каждого КлючИЗначение Из ВыбранныеНастройки.Данные.Ини Цикл
					СписокИскать.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json"));
				КонецЦикла;
				ПараметрыПоиска = Новый Структура("Идентификатор,ПараметрыКонфигурации,Искать", "",НашаКонфигурация.ПараметрыКонфигурации, Новый Структура("Имя", СписокИскать));
				ДанныеСписка	= СформироватьСписокИни(Кэш,ПараметрыПоиска,Отказ);
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				ПараметрыУстановки = Новый Структура("СписокИни,ПараметрыКонфигурации", ДанныеСписка.Данные, НашаКонфигурация.ПараметрыКонфигурации);
				РезультатУстановки = УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ПараметрыУстановки);
				Если	Отказ 
					И	ЗначениеЗаполнено(РезультатУстановки) Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки);
				КонецЕсли;
				УстановленныеИни = РезультатУстановки;
				//Чтобы не думалось: при стандартных настройках меняем название создаваемого подключения на название выбранной конфиуграции
				Кэш.КэшНастроек.ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
				
				Попытка
					Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПолучитьСтруктуруКонфигурации"));		
				КонецПопытки;
				Сообщить("Выбранные файлы настроек были переустановлены.");
			ИначеЕсли ВыбранныеНастройки.Название = ИмяКонфигурации Тогда//Название настроек по-прежнему стандартное, сменим название для ясности того, что сменилась базовая конфигурация
				ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если	НашаКонфигурация.СтруктураКонфигурации.Количество()
		Или	ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem)	Тогда
		Возврат	НашаКонфигурация.СтруктураКонфигурации;
	КонецЕсли;
	
	//Получаем полный список ини из меню
	ДанныеСписка = КлассIntegrationConnection_СписокИни(Кэш, КлассIntegrationConfig, Новый Структура("Искать", Новый Структура("Включено", "01")), Отказ);
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураКонфигурации = Новый СписокЗначений();
	
	Для	Каждого	Ини	Из	ДанныеСписка.Карта	Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, Ини.Представление);
		Если Ини.Значение = "конфигурация"	Тогда
			ПолеСортировки	= "а";
		ИначеЕсли Лев(Ини.Представление, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		//Переводим инишки к старому формату названий.
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имя",					ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("ИмяБезРасширения",	ИмяИни);
		НоваяСтрока.Вставить("ПолноеИмя",			ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("Путь",				"");
		НоваяСтрока.Вставить("Расширение",			"");
		СтруктураКонфигурации.Добавить(НоваяСтрока,   ПолеСортировки + ИмяИни);
	КонецЦикла;
	СтруктураКонфигурации.СортироватьПоПредставлению();
	НашаКонфигурация.СтруктураКонфигурации = СтруктураКонфигурации.ВыгрузитьЗначения();
	
	Возврат	НашаКонфигурация.СтруктураКонфигурации;
	
КонецФункции	

&НаКлиенте
Процедура	СбисПолучитьНастройкиДляТП(ПараметрыВыгрузки) Экспорт
	Перем ВыбранныеНастройки;
	Кэш	= ПараметрыВыгрузки.Кэш;  
	Отказ = Ложь;  
	//Если Не ЗначениеЗаполнено(Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Ини) Тогда
		СтруктураТекущихНастроек = СформироватьСтруктуруТекущихНастроек(Кэш, Новый Структура, Отказ);
		Если Отказ Тогда
			//По какой-то причине не удалось закэшировать текущие настройки. Запускам алгоритм по-умолчанию.
			Если СтруктураТекущихНастроек.code = 765 Тогда//Не нашли типовые настройки. Вообще всё пропало!
				Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = Кэш.Текущий.ТипДок;
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш.ГлавноеОкно, СтруктураТекущихНастроек);
				Возврат;
			КонецЕсли;
			Отказ = Ложь;
			СбисПеречитатьНастройки(Новый Структура, Кэш);
		ИначеЕсли Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
			//Установим параметры на отправку в ложь. Таким образом, закэшируем изменения и параметры, а после отправим всё на сервис при записи изменений
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
		Иначе
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураТекущихНастроек);
		КонецЕсли;
	//КонецЕсли;
	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура	СбисПолучитьНастройкиССервера_Клиент(ПараметрыВыгрузки)  Экспорт
	
	Кэш					= ПараметрыВыгрузки.Кэш;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	КаталогСНастройками	= ПараметрыВыгрузки.КаталогНаКлиенте;
	ВыбранныеНастройки	= Кэш.КэшНастроек.ВыбранныеНастройки;
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранныеНастройки.Данные.Ини) Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Отсутствуют файлы настроек для выгрузки.", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	ГлавноеОкно.Кэш.Парам.КаталогНастроек	= КаталогСНастройками;
	
	ИниКВыгрузке = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(ВыбранныеНастройки.Данные.Ини);
	Для Каждого Ини Из ВыбранныеНастройки.Данные.Ини Цикл//Возвращаем системные ключи ини, необходимые для работы
		СбисЕстьТиповая		= Неопределено;
		СбисЕстьИзменения	= Неопределено;
		Если		Ини.Значение.Свойство("СбисЕстьТиповая",СбисЕстьТиповая) Тогда
		ИначеЕсли	Ини.Значение.Свойство("СбисИмяФайла")
				И	Найти(Ини.Значение.СбисИмяФайла, ".sbis3") Тогда
			СбисЕстьТиповая = Истина;
		Иначе
			СбисЕстьТиповая = Ложь;
		КонецЕсли;	
		СбисАвтообновление	= ?(Ини.Значение.Свойство("СбисАвтообновление"), Ини.Значение.СбисАвтообновление И СбисЕстьТиповая, СбисЕстьТиповая);
		Если Не	Ини.Значение.Свойство("СбисЕстьИзменения", СбисЕстьИзменения) Тогда
			СбисЕстьИзменения = Ложь;
		КонецЕсли;
		Если Не	СбисЕстьИзменения Тогда
			СбисЕстьИзменения = Не СбисЕстьТиповая;
		КонецЕсли;
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьИзменения",	СбисЕстьИзменения);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьТиповая",		СбисЕстьТиповая);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисАвтообновление",	СбисАвтообновление);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисСтандартная",			СбисЕстьТиповая);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисПользовательская",		НЕ СбисЕстьТиповая ИЛИ СбисЕстьИзменения);	
	КонецЦикла;
	
	ВременныйКэш = Новый Структура("Парам, ини, СБИС", Новый Структура("КаталогНастроек", КаталогСНастройками), Новый Структура, Кэш.СБИС);
	ВременныйКэш.Вставить("РежимРаботы",		"");
	ВременныйКэш.Вставить("ГлавноеОкно",		ГлавноеОкно);
	ВременныйКэш.Вставить("ОбщиеФункции",		Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",	Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",			Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыСистемы",	Кэш.ПараметрыСистемы);
	ВременныйКэш.Вставить("ТихийРежим",			Кэш.ТихийРежим);
	ВременныйКэш.Вставить("РаботаСJSON",		Кэш.РаботаСJSON);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена", 1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек", 0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек", "");
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ВыгрузкаВКаталог");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);

	ПараметрыИнициализации = Новый Структура("ИнициализацияВременногоКэша", Истина);
	ГлавноеОкно.ОпределитьФормуРаботыСНастройками(ВременныйКэш, ВременныйКэш.Парам.СпособОбмена, ВременныйКэш.Парам.СпособХраненияНастроек, ПараметрыИнициализации);
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Не удалось установить форму работы с настройками!", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	//ВременныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ВременныйКэш, Отказ);
	ПараметрыКонфигурации			= ПараметрыСтандартнойКонфигурации(Кэш, ВыбранныеНастройки.ПараметрыКонфигурации);
	ПараметрыКонфигурацииВыгрузка	= ПараметрыСтандартнойКонфигурации(ВременныйКэш, ПараметрыКонфигурации);
	Если Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0") > 0 Тогда
		Если  Не ПараметрыКонфигурацииВыгрузка.subsystem = "БУХ1" Тогда
			ПараметрыКонфигурацииВыгрузка.version = "";
		Иначе
			ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0","");
		КонецЕсли;
	ИначеЕсли Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0") > 0 Тогда
		ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0","");
	КонецЕсли;
	ПрефиксДобавить	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурацииВыгрузка);
	ПрефиксДобавить = ПрефиксДобавить + "_";
	СписокТиповыеИниВыгрузить	= Новый Массив;
	СписокПользовИниВыгрузить	= Новый Массив;
	СбисМеню = СформироватьМеню_Структура(Кэш, ИниКВыгрузке,,Отказ);
	ПараметрыЗапроса = Новый Структура
	(	"СбисМеню,	ДополнительныеПараметры",
		СбисМеню,	Новый Структура("ТихийРежим",Истина));
	ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ДанныеСписка, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	ИниСИзмененями				= Новый Структура();
	ВыгружатьТиповые			= Ложь;
	ВыгружатьПользовательские	= Ложь;
	Для Каждого КлючИЗначение Из ИниКВыгрузке Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json");
		ЭлементКарты = ДанныеСписка.Карта.НайтиПоЗначению(НРег(ИмяИни));
		Если КлючИЗначение.Значение.СбисЕстьИзменения Тогда
			ИниСИзмененями.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			СписокПользовИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьПользовательские = Истина;
		КонецЕсли;
		Если КлючИЗначение.Значение.СбисЕстьТиповая Тогда
			СписокТиповыеИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьТиповые = Истина;
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("Типовые",				СписокТиповыеИниВыгрузить);
	ПараметрыВыгрузки.Вставить("Пользовательские",		СписокПользовИниВыгрузить);
	ПараметрыВыгрузки.Вставить("ИниСизменениями",		ИниСИзмененями);
	ПараметрыВыгрузки.Вставить("ВременныйКэш",			ВременныйКэш);
	ПараметрыВыгрузки.Вставить("Префикс",				ПрефиксДобавить);
	ПараметрыВыгрузки.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурации);
	ПараметрыВыгрузки.Вставить("КлассНастроек",			ВыбранныеНастройки);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(1,"Слитно, один файл это пользовательские изменения и стандартная настройка");
	СписокВыбора.Добавить(2,"Раздельно, пользовательские изменения в файле рядом со стандартной настройкой");
	
	ЭлементВыбораДефолт = СписокВыбора[0];
	ОбработчикВыбора = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисПолучитьНастройкиССервера_Клиент_ПослеДиалога", ЭтаФорма, ПараметрыВыгрузки);
		
	Если ВыгружатьПользовательские Тогда
		ПараметрыВыбораСписка = Новый Структура("Заголовок, Элемент, Обработчик", "Укажите, как выгрузить пользоватеские изменения", ЭлементВыбораДефолт, ОбработчикВыбора);
		МодульОбъектаКлиент().СбисВыбратьИзСписка(СписокВыбора, ПараметрыВыбораСписка);
	Иначе
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ЭлементВыбораДефолт, ОбработчикВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура	СбисПолучитьНастройкиССервера_Клиент_ПослеДиалога(РезультатВвода, ПараметрыВыгрузки) Экспорт
	Отказ			= Ложь;
	Кэш				= ПараметрыВыгрузки.Кэш;
	ВременныйКэш	= ПараметрыВыгрузки.ВременныйКэш;
	Если РезультатВвода = Неопределено Тогда
		Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, "Операция отменена", ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
		Возврат;	
	КонецЕсли;
	РежимВыгрузки = РезультатВвода.Значение;
	
	Если РежимВыгрузки = 1 Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка настроек",Кэш.ГлавноеОкно);
		ВременныйКэш.Ини = ПараметрыВыгрузки.КлассНастроек.Данные.Ини;
		
		УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ВременныйКэш.ини,,Отказ,ПараметрыВыгрузки.Префикс);
		Для Каждого УстановленнаяИни Из УстановленныеИни Цикл
			СбисРеестрПоУмолчанию = Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию", ВременныйКэш.Ини[УстановленнаяИни.Ини_ИмяИни]);
			Если СбисРеестрПоУмолчанию = "0" Тогда
				УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".0";
			КонецЕсли;
			УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".sbis3";
		КонецЦикла;
		ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ВременныйКэш.Ини);
	Иначе
		Если ПараметрыВыгрузки.Типовые.Количество() Тогда
			//Получаем стандартные ини и формируем .sbis3 файлы. 
			//ДополнительныеПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
			КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыВыгрузки.ПараметрыКонфигурации), Отказ);			
			ИниКВыгрузке = КлассIntegrationConnection_ПолучитьИни(Кэш, КлассIntegrationConnection, Новый Структура("СписокИни", ПараметрыВыгрузки.Типовые), Отказ);
			Если Отказ Тогда
				ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении.ДополнительныеПараметры.Отказ = Истина;
				Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ИниКВыгрузке, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
				Возврат;
			КонецЕсли;
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка стандартных настроек",Кэш.ГлавноеОкно);
			//Если Не ДанныеСтандартнойКонфигурации = Неопределено Тогда
			ВременныйКэш.Ини = ИниКВыгрузке;
			//КонецЕсли;
			
			УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ВременныйКэш.ини,,Отказ,ПараметрыВыгрузки.Префикс);
			Для Каждого УстановленнаяИни Из УстановленныеИни Цикл
				СбисРеестрПоУмолчанию = Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию", ВременныйКэш.Ини[УстановленнаяИни.Ини_ИмяИни]);
				Если СбисРеестрПоУмолчанию = "0" Тогда
					УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".0";
				КонецЕсли;
				УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".sbis3";
			КонецЦикла;
			ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ВременныйКэш.Ини);
		КонецЕсли;
		Если ПараметрыВыгрузки.Пользовательские.Количество() Тогда	
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка пользовательских изменений",Кэш.ГлавноеОкно);
			//Если есть не записанные изменения данных в настройках, то формируем данные к выгрузке через разбор типовых и выгружаемых
			Если Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисИни.СписокОтправить.Количество() Тогда
				ПользовательскиеИзменения = ПолучитьРасхождениеИни(ПараметрыВыгрузки.ИниСИзменениями, ПараметрыВыгрузки.КлассНастроек.Данные.Ини, Отказ);
			Иначе//Получаем с сервера только пользовательские изменения
				ПользовательскиеИзменения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ИнициироватьДанные, Перечитать, Кэшировать", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор, Ложь, Истина, Ложь), Отказ);
				КлассIntegrationConnection_ДозапроситьИни(Кэш, ПользовательскиеИзменения, Новый Структура("ТолькоПользовательские", Истина), Отказ);

				//ПользовательскиеИзменения = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации, Перечитать, ТолькоПользовательские", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор,ПараметрыВыгрузки.ПараметрыКонфигурации, Истина, Истина), Отказ);
				//ПараметрыЗапроса = Новый Структура("Идентификатор,ПараметрыКонфигурации", Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор,ПараметрыВыгрузки.ПараметрыКонфигурации);	
				//ПараметрыЗапроса.Вставить("СписокИни",	ПараметрыВыгрузки.Пользовательские);
				//ПараметрыЗапроса.Вставить("Кэшировать",	Ложь);
				//ПараметрыЗапроса.Вставить("БратьВКэше",	Ложь);
				//ПараметрыЗапроса.Вставить("ДополнительныеПараметры", Новый Структура("ТолькоПользовательские,ТихийРежим,ВернутьОшибку", Истина,Ложь,Истина));
				//ПользовательскиеИзменения = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
				Если Отказ Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПользовательскиеИзменения);
					ПользовательскиеИзменения = Новый Структура;
				Иначе
					ПользовательскиеИзменения = ПользовательскиеИзменения.Данные.Ини;
				КонецЕсли;
			КонецЕсли;
			Если ПользовательскиеИзменения.Количество() Тогда
				//Отдельльно сохраняем пользовательские изменения.
				УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ПользовательскиеИзменения,,Отказ,ПараметрыВыгрузки.Префикс);
				ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ПользовательскиеИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Кэш.ОбщиеФункции.СбисВыполнитьОписаниеОповещения(Кэш, ВременныйКэш.Парам.КаталогНастроек, ПараметрыВыгрузки.ОписаниеОповещенияОЗавершении);
КонецПроцедуры

//Получает подходящие готовые, либо общие настройки с данными ини если есть. Применяет в обработку, сохраняет connection в автоматическом режиме.
&НаКлиенте
Функция		СбисПрименитьПредустановленныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, ДопПараметры=Неопределено) Экспорт
	Перем МассивИдентификаторовИсключить, УидСистемыФильтр, НастройкиУстановить;
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДопПараметры = Неопределено Тогда
		ПараметрыУстановки = Новый Структура;
	Иначе
		ПараметрыУстановки = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	КонецЕсли;
	
	Если Не	ПараметрыУстановки.Свойство("ИдентификаторыИсключить", МассивИдентификаторовИсключить) Тогда
		МассивИдентификаторовИсключить = Новый Массив;
	КонецЕсли;
	УидСистемыФильтр = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	
	ДополнительныеПараметрыЗапрос = Новый Структура;
	ДополнительныеПараметрыЗапрос.Вставить("subsystem",		Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem);
	ДополнительныеПараметрыЗапрос.Вставить("ТипКоннекшена",	"user");
	//Сперва проверим готовый коннекшен у пользователя.
	ПараметрыПолучения = Новый Структура("ДополнительныеПараметры, ПараметрыКонфигурации, СписокИни", ДополнительныеПараметрыЗапрос, Новый Структура("service", Кэш.КэшНастроек.ПараметрыКонфигурации.service));
	РезультатЗапросаСписка = ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапросаСписка;
	КонецЕсли;
	
	Для Каждого СоединениеПодобрано Из РезультатЗапросаСписка Цикл
		Если	Не	МассивИдентификаторовИсключить.Найти(СоединениеПодобрано.Идентификатор) = Неопределено
			Или		(		ЗначениеЗаполнено(УидСистемыФильтр)
					И	Не	СоединениеПодобрано.ПараметрыРаботы.Шаблон = УидСистемыФильтр)Тогда
			Продолжить;
		КонецЕсли;
		//Список не отдаёт полного набора данных. Перечитаем уже в полноценный класс
		НастройкиУстановить = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать", СоединениеПодобрано.Идентификатор, Истина), Отказ);
		Прервать;
	КонецЦикла;

	//Если не нашли коннекшен, то применим шаблон
	Если НастройкиУстановить = Неопределено Тогда
		Если ЗначениеЗаполнено(УидСистемыФильтр) Тогда
			НастройкиУстановить = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор", УидСистемыФильтр), Отказ);
			Если Отказ Тогда
				Если НастройкиУстановить.code = 756 Тогда
					Отказ = Ложь;
					Возврат Неопределено;
				Иначе
					Возврат Кэш.ОбщиеФункции.СбисИсключение(НастройкиУстановить, "ФайлыНастроекСервер.СбисПрименитьПредустановленныеНастройки");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДополнительныеПараметрыЗапрос.Вставить("ТипКоннекшена",	"account");
			РезультатЗапросаСписка = СбисПолучитьДанныеСервисаИнтеграции(Кэш, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат РезультатЗапросаСписка;
			КонецЕсли;
			Для Каждого СоединениеПодобрано Из РезультатЗапросаСписка Цикл
				Если Не МассивИдентификаторовИсключить.Найти(СоединениеПодобрано.Идентификатор) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НастройкиУстановить = СоединениеПодобрано;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиУстановить = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДопПараметры.Свойство("СбисПараметры") Тогда
		Если НастройкиУстановить.Данные.Параметры = Неопределено Тогда
			НастройкиУстановить.Данные.Параметры = ДопПараметры.СбисПараметры;
		Иначе
			Для Каждого КлючИЗначение Из ДопПараметры.СбисПараметры Цикл
				НастройкиУстановить.Данные.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	
	ПараметрыЗапроса = Новый Структура("Кэш, Отказ, ПолучитьДанныеИни, ДополнительныеПараметры", Кэш, Отказ, Истина, Новый Структура);
	Результат = СбисПрименитьУстановленныеНастройки(НастройкиУстановить, ПараметрыЗапроса);
	Отказ = ПараметрыЗапроса.Отказ;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.СбисПрименитьПредустановленныеНастройки");
	КонецЕсли;
	
	Если Кэш.КэшНастроек.ИниВПорядке Тогда
		//Если применили предустановленные ини, то надо проверить наличие структуры аккордеона в меню. Если нет, то запишем с формированием меню.
		СтруктураАккордеона = ПолучитьСтруктуруРазделов(Кэш,,Отказ);
		Если Не ЗначениеЗаполнено(СтруктураАккордеона) Тогда
			Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("ПропуститьЗапись, Отказ, ПродолжитьВыполнение", Ложь, Отказ, ПродолжитьВыполнение);
		Если	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
			//Это пользовательские настройки, которые идут "как есть"
			ПараметрыЗаписи.Вставить("ПропуститьЗапись", Истина);
		КонецЕсли;
		СбисСохранитьВыбранныеНастройки(Кэш, ПараметрыЗаписи);//Тут запоминаем только идентификатор настроек
		НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		Если НастройкиУстановить.ПараметрыРаботы.СбисПараметры.Обновить Тогда
			//Тут сохраним только параметры, чтобы дата последнего изменения не обновилась и проверка не работала повторно
			СохранитьПараметрыСБИС(Кэш, Новый Структура, НастройкиУстановить.Идентификатор); 
		КонецЕсли;
		Отказ					= ПараметрыЗаписи.Отказ;
		ПродолжитьВыполнение	= ПараметрыЗаписи.ПродолжитьВыполнение;
	КонецЕсли;
	Если		Отказ
		Или Не	Кэш.КэшНастроек.ИниВПорядке Тогда//Ошибка при записи найденного соединения, или проблема с проверкой инишек. Переходим в раздел настроек для ручной правки.
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Если Не Кэш.ТихийРежим Тогда
			Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонФайлыНастроек55");
		КонецЕсли;
		Отказ = Ложь;
	КонецЕсли;
	
	ПродолжитьВыполнение = Ложь;//Передаём флаг главному окну, что больше ничего делать не нужно.
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	СбисЗапускПримененияНастроекСФормы(КлассНастроек, ПараметрыВызова) Экспорт
	Если Не НажатиеВыполнено Тогда
		Возврат;
	КонецЕсли;
	Если СбисДанныеДиалога = Неопределено Тогда
		СбисДанныеДиалога = Новый Структура("Параметры", ПараметрыВызова);
	КонецЕсли;
	Если	Не ПараметрыВызова.Свойство("РежимВыбора") Тогда
		ПараметрыВызова.Вставить("РежимВыбора", "ВыборПодключения");
	КонецЕсли;
	Если ПараметрыВызова.РежимВыбора = "ЗапросШаблона" Тогда
		СбисДанныеДиалога.Вставить("Шаблон", КлассНастроек);
	Иначе
		СбисДанныеДиалога.Вставить("Коннекшен", КлассНастроек);
	КонецЕсли;
	ЭтаФорма.ПодключитьОбработчикОжидания("СбисЗапускПримененияНастроекСФормыПослеЗакрытия", "0.1", Истина);
КонецПроцедуры

&НаКлиенте
Процедура	СбисЗапускПримененияНастроекСФормыПослеЗакрытия() Экспорт
	Перем ШаблонДиалог;
	Кэш = СбисДанныеДиалога.Параметры.Кэш;
	КлассIntegrationConnection = СбисДанныеДиалога.Коннекшен;
	ПараметрыПрименения = СбисДанныеДиалога.Параметры;
	Если	СбисДанныеДиалога.Параметры.РежимВыбора = "ВыборПодключения" Тогда
		Если		КлассIntegrationConnection.ПараметрыРаботы.Шаблон = Неопределено
			И		КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Пользовательские"
			И		КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
			И 	Не	ЗначениеЗаполнено(КлассIntegrationConnection.ПараметрыРаботы.Шаблон)
			И	Не 	СбисДанныеДиалога.Свойство("Шаблон", ШаблонДиалог) Тогда
			//Запустим выбор шаблона для создания подключения, если не указан
			ПараметрыПрименения.Вставить("РежимВыбора", "ЗапросШаблона");
			ОписаниеОповещенияЗавершение = Кэш.ОбщиеФункции.СбисОписаниеОповещения(Кэш, "СбисЗапускПримененияНастроекСФормы", ЭтаФорма, ПараметрыПрименения);
			ДопПараметрыДиалога = Новый Структура("ТипКоннекшена, Скрыть, ЗапретНовых, Заголовок, ОбработчикРезультата", "account", Новый Массив, Истина, "Укажите шаблон для нового подключения:", ОписаниеОповещенияЗавершение);
			ДопПараметрыДиалога.Скрыть.Добавить("ПанельВыбора.user");

			//Откроем форму для выбора шаблона создаваемого подключения
			Отказ = Ложь;
			СбисДанныеДиалога.Вставить("ФормаВыбораСоединения", Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, "ФайлыНастроекСервер", Новый Структура("ПолучитьНовую", Истина), Отказ));
			СбисДанныеДиалога.ФормаВыбораСоединения.СбисВыбратьСоединение(Кэш, ДопПараметрыДиалога);
			Возврат;
		ИначеЕсли	Не (	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Активен"
						Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый") Тогда
			//Отмена выбора
			СбисДанныеДиалога = Неопределено;
			Возврат;
		КонецЕсли;
	ИначеЕсли	СбисДанныеДиалога.Параметры.РежимВыбора = "ЗапросШаблона" Тогда
		Если СбисДанныеДиалога.Шаблон = Неопределено Тогда
			//Отмена выбора
			СбисДанныеДиалога = Неопределено;
			Возврат;
		ИначеЕсли	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
				И	СбисДанныеДиалога.Шаблон.ПараметрыРаботы.Статус = "Новый" Тогда
			//Новый коннекшен с новым шаблоном. Применяем шаблон.
			КлассIntegrationConnection = СбисДанныеДиалога.Шаблон;
		Иначе
			Отказ = Ложь;
			КлассIntegrationConnection_НастроитьШаблон(Кэш, КлассIntegrationConnection, СбисДанныеДиалога.Шаблон, Новый Структура("Тип", "Создание по шаблону"), Отказ);
		КонецЕсли;
	Иначе
		//Неизвестный режим выбора
		СбисДанныеДиалога = Неопределено;
		Возврат;
	КонецЕсли;
	СбисДанныеДиалога = Неопределено;//Очищаем переменную диалога после завершения выбора.
	
	КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
	УстановленныеИни = СбисПрименитьУстановленныеНастройки(КлассIntegrationConnection, ПараметрыПрименения);
	Если Не ПараметрыПрименения.Отказ Тогда 
		Кэш.ФормаНастроекОбщее.СбисОбновитьИнформациюНастроек(Кэш, УстановленныеИни.СписокФайлов, ПараметрыПрименения.Отказ);
	КонецЕсли;
КонецПроцедуры

//Применяет выбранные настройки в обработку. Инициирует проверку. 2 Параметра исключетельно для возможности вызова описания оповещения!
&НаКлиенте
Функция		СбисПрименитьУстановленныеНастройки(КлассIntegrationConnection, ПараметрыВызова)
	Перем Результат, ДопПараметры, ШаблонИнтеграции;
	
	Если КлассIntegrationConnection = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Кэш	= ПараметрыВызова.Кэш;
	
	СбисОчиститьВыбранныеНастройки(Кэш, ПараметрыВызова.Отказ);
	Результат = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, ПараметрыВызова.ДополнительныеПараметры, ПараметрыВызова.Отказ);

	Если ПараметрыВызова.Отказ Тогда
		Если	ЗначениеЗаполнено(Результат)//Если вызов происходит из формы диалога выбора подключения, то надо сообщить результат тут
			И	ПараметрыВызова.Свойство("ДополнительныеПараметры", ДопПараметры)
			И	ДопПараметры.Свойство("СообщатьПриОшибке")
			И	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Кэш.КэшНастроек.ИзмененияВНастройках= Не	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор
											Или	КлассIntegrationConnection.ПараметрыРаботы.Статус = "Новый"
											Или	КлассIntegrationConnection.ПараметрыРаботы.ТипНастроек = "Шаблон";
	Кэш.Парам.ИдентификаторНастроек = КлассIntegrationConnection.Идентификатор;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("СписокИни, ИдентификаторНастроек, СтруктураНастроек", Результат.СписокФайлов, КлассIntegrationConnection.Идентификатор, КлассIntegrationConnection.Данные.Параметры), Кэш);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СбисИсключение = МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисПрименитьУстановленныеНастройки");
		Если	ПараметрыВызова.Свойство("ДополнительныеПараметры", ДопПараметры)
			И	ДопПараметры.Свойство("СообщатьПриОшибке")
			И	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
		КонецЕсли;		
		ПараметрыВызова.Отказ = Истина;
		Возврат СбисИсключение;
	КонецПопытки;
	Возврат Результат;	
КонецФункции

//Пока ничего не происходит. Пользовательские инишки не формируем
&НаКлиенте
Процедура	СбисСформироватьИниФайлыКлиента(Кэш, СписокФайловПроверки, ОшибкиИни) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Сохраняет выбранные настройки на сервис
&НаКлиенте
Процедура	СбисСохранитьВыбранныеНастройки(Кэш, ДопПараметры) Экспорт
	Перем КлассIntegrationConnection, ЗаписьВыполнялась, ВыбранныеНастройки, СбисПараметры, УстановленныеИни;
	Если		ДопПараметры.Отказ
		Или	Не	ДопПараметры.ПродолжитьВыполнение Тогда
			Возврат;
	КонецЕсли;
	
	Если Не	Кэш.КэшНастроек.ИниВПорядке Тогда
		ТекстПредупреждения	= "Для сохранения настроек они должны пройти проверку!";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстПредупреждения);
		#Иначе
			ПоказатьПредупреждение(,ТекстПредупреждения);
		#КонецЕсли
		ДопПараметры.ПродолжитьВыполнение = Ложь;
		Возврат;
	КонецЕсли;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", КлассIntegrationConnection)	Тогда
		Возврат;
	КонецЕсли;
	
	Если КлассIntegrationConnection.ПараметрыРаботы.Статус = "Удален" Тогда
		КлассIntegrationConnection.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения обязательно нужно передать СбисПараметры с service4config
	КонецЕсли;
	КлассIntegrationConnection_Было = КлассIntegrationConnection_Скопировать(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);			
	Если ДопПараметры.Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, КлассIntegrationConnection_Было);
		Возврат;
	КонецЕсли;
	
	Если	ДопПараметры.Свойство("ПропуститьЗапись")
		И	ДопПараметры.ПропуститьЗапись Тогда
		ЗаписьВыполнялась = Ложь;
	Иначе
		РезультатЗаписи = КлассIntegrationConnection_СохранитьПодключение(Кэш, КлассIntegrationConnection, ДопПараметры, ДопПараметры.Отказ);
		Если ДопПараметры.Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			Возврат
		КонецЕсли;
		ЗаписьВыполнялась = РезультатЗаписи.ЗаписьВыполнялась;
	КонецЕсли;
	
	ТребуетсяОбовитьСписок = ЗаписьВыполнялась И Кэш.ФормаНастроекОбщее.Открыта();
	//После записи проверить, менялась ли галка автообновления. Если менялась, то надо перечитать настройки и проверить базовый конфиг, который использован для инишек. Если взят не тот, что был, то надо перечитать настройки сразу.
	Если Не КлассIntegrationConnection_Было.ПараметрыРаботы.Автообновление = КлассIntegrationConnection.ПараметрыРаботы.Автообновление Тогда
		КлассIntegrationConnection_Стало = НовыйIntegrationConnection(Кэш, Новый Структура("Идентификатор, Перечитать", РезультатЗаписи.Идентификатор, Истина), ДопПараметры.Отказ);
		Если	Не КлассIntegrationConnection_Стало.ПараметрыКонфигурации.version	= КлассIntegrationConnection.ПараметрыКонфигурации.version
			Или	Не КлассIntegrationConnection_Стало.ПараметрыКонфигурации.subsystem	= КлассIntegrationConnection.ПараметрыКонфигурации.subsystem Тогда
			РезультатУстановки = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
			Если ДопПараметры.Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
				Возврат;
			КонецЕсли;
			УстановленныеИни = РезультатУстановки.СписокФайлов;
		Иначе//Проставим нужные галки и на этом все 
			Для Каждого КлючИЗначениеИни Из КлассIntegrationConnection.Данные.Ини Цикл
				ЗначениеИни = КлючИЗначениеИни.Значение;
				Если Не ЗначениеИни.Свойство("СбисАвтообновление") Тогда
					ЗначениеИни.Вставить("СбисАвтообновление", Ложь);
				КонецЕсли;
				Если Не ЗначениеИни.Свойство("СбисЕстьТиповая") Тогда
					ЗначениеИни.Вставить("СбисЕстьТиповая",Ложь);
				КонецЕсли;
				ЗначениеИни.СбисАвтообновление = ЗначениеИни.СбисЕстьТиповая И КлассIntegrationConnection_Стало.ПараметрыРаботы.Автообновление;
			КонецЦикла;
			УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
		КонецЕсли;
	ИначеЕсли ТребуетсяОбовитьСписок Тогда
		УстановленныеИни = КлассIntegrationConnection_СписокИниДляИнтерфейса(Кэш, КлассIntegrationConnection, Новый Структура, ДопПараметры.Отказ);
	КонецЕсли;
	Если ДопПараметры.Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
		Возврат;
	КонецЕсли;
	Кэш.КэшНастроек.ВыбранныеНастройки	= КлассIntegrationConnection;
	Кэш.Парам.ИдентификаторНастроек		= КлассIntegrationConnection.Идентификатор;
	
	//В ини отдаём данные от класса, но с разрывом состава ини класса
	Кэш.Ини = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(КлассIntegrationConnection.Данные.Ини,,Ложь);
		
	Если ЗначениеЗаполнено(УстановленныеИни) Тогда
		ДопПараметры.ПродолжитьВыполнение = Ложь;
		Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
		Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
	КонецЕсли;
	
	Если ДопПараметры.Отказ Тогда
		СбисОчиститьВыбранныеНастройки(Кэш, Ложь);
		СбисПеречитатьНастройки(Новый Структура, Кэш);
		Возврат;
	КонецЕсли;
	
	СбисЗаписатьИдентификаторНастроек(Кэш, Кэш.Парам.ИдентификаторНастроек);
	Если Кэш.КэшНастроек.ИзмененияВНастройках Тогда
		Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
	КонецЕсли;
	//Переустановим параметры
	Кэш.ФормаНастроекОбщее.УстановитьСбисПараметры(Кэш, КлассIntegrationConnection.Данные.Параметры);		

КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисУстановитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ) Экспорт
	
	ТекстСообщения	= "";
	
	СтруктураВыбранныхНастроек = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", СтруктураВыбранныхНастроек)	Тогда
		Отказ = Истина;
		Сообщить("Отсутствует структура настроек. Операция невозможна!");
		Возврат;
	КонецЕсли;
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, Кэш.ФормаНастроекОбщее.Конфигурация);	
	
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem) Тогда//У пользовательской конфигурации нет стандартных ини файлов.
		Возврат;
	КонецЕсли;
	
	Если		Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.subsystem	= НашаКонфигурация.ПараметрыКонфигурации.subsystem	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от другой конфигурации!";
	ИначеЕсли	Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.version	= НашаКонфигурация.ПараметрыКонфигурации.version	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от конфигурации другой версии!";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Если	СтруктураВыбранныхНастроек.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
			СтруктураВыбранныхНастроек.Название = НашаКонфигурация.НазываниеКонфигурации;
			Кэш.ФормаНастроекОбщее.НастройкиНазвание = СтруктураВыбранныхНастроек.Название;
		Иначе
			ТекстПредупреждения	= ТекстСообщения + Символы.ПС +  "Выполнение данной операции не доступно!";
			ТаймАут	= 60;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Предупреждение(ТекстПредупреждения, ТаймАут);
			#Иначе
				ПоказатьПредупреждение(,ТекстПредупреждения, ТаймАут);
			#КонецЕсли
			Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(Ини, Кэш, СтруктураВыбранныхНастроек, НашаКонфигурация, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
	Иначе
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
		Попытка
			Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни", Истина, УстановленныеИни), Кэш);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисУстановитьВыбранныеФайлыНастроек"));		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		СбисУстановитьСтандартныеНастройки(Кэш,Отказ,ПродолжитьВыполнение) Экспорт
	
	Если Не	ПродолжитьВыполнение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
	
	ПараметрыКонфигурацииУстановить = Кэш.КэшНастроек.ПараметрыКонфигурации;
	Если ПустаяСтрока(ПараметрыКонфигурацииУстановить.subsystem) Тогда
		ПараметрыКонфигурацииУстановить = Кэш.ФормаНастроекОбщее.СистемаПо_Умолчанию();
	КонецЕсли;
	//Устанавливаем стандартные настройки как новый шаблон
	КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации, Тип", ПараметрыКонфигурацииУстановить, "Шаблон"), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.СбисУстановитьСтандартныеНастройки");
	КонецЕсли;
	КлассIntegrationConnection.Идентификатор = Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	РезультатУстановкиНастроек = КлассIntegrationConnection_Установить(Кэш, КлассIntegrationConnection, Новый Структура, Отказ);
	УстановленныеИни = РезультатУстановкиНастроек.СписокФайлов;
	
	Попытка
		Кэш.ФормаНастроекОбщее.СбисУстановитьНастройки(Новый Структура("ПринудительнаяПроверка, СписокИни, СтруктураНастроек", Истина, УстановленныеИни, КлассIntegrationConnection.Данные.Параметры), Кэш);
	Исключение
		Отказ = Истина;
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, МодульОбъектаКлиент().НовыйСбисИсключение(ИнфоОбОшибке, "ФайлыНастроекСервер.СбисУстановитьСтандартныеНастройки"));		
	КонецПопытки;
	//Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонПолученные11");
	
	Если Не Отказ Тогда
		ПродолжитьВыполнение = Ложь;
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	КонецЕсли;
	
	Возврат УстановленныеИни;
	
КонецФункции

//Временное решение для обновления статусов. Не использовать в других местах! 1179408775
&НаКлиенте
Функция		СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ) Экспорт
	
	Возврат КлассIntegrationConnection_ДозапроситьИни(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки,Новый Структура,Отказ);
	
КонецФункции

