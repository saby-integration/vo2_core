////////////////////////////////////////////////////

//Записывает выбранный вариант настроек в виде JSON на сервер.
&НаКлиенте
Функция		ЗаписатьConnection(Кэш, ПараметрыЗаписи, СбисДополнительныеПараметры, Отказ)
	Перем ОбновитьИниНаСервере, ЭтоНовоеСоединение, ТипНастроек, Статус, ТихийРежим;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
	
	СбисПараметры = ПараметрыЗаписи.Данные.Параметры;
	
	Если Не ЗначениеЗаполнено(СбисПараметры) Тогда
		СбисПараметры = ПолучитьПараметрыСБИС(Кэш, "");
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	Если	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
		И	СбисДополнительныеПараметры.ТолькоСбисПараметры
		Или	Не	(	(	ПараметрыЗаписи.ПараметрыРаботы.Свойство("Статус", Статус)
					И	Статус = "Удален")
				Или	(		ПараметрыЗаписи.ПараметрыРаботы.Свойство("ТипНастроек", ТипНастроек)
					И Не	ТипНастроек = "Пользовательские")) Тогда
		ПараметрыОтправки.Вставить("id",		ПараметрыЗаписи.Идентификатор);
		ЭтоНовоеСоединение = Ложь;
	Иначе
		ЭтоНовоеСоединение = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.ПараметрыСистемы.Конфигурация.URL);
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	ПараметрыЗаписи.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыЗаписи.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		СбисПараметры.Вставить("Service4Config", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		СбисПараметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,ПараметрыЗаписи.ПараметрыКонфигурации.subsystem));
	КонецЕсли;
	Если ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
		ПараметрыОтправки.Вставить("for_all", Истина);
		Если ЗначениеЗаполнено(ПараметрыЗаписи.Идентификатор) Тогда
			ПараметрыОтправки.Вставить("id", ПараметрыЗаписи.Идентификатор);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.Шаблон) Тогда
		ПараметрыОтправки.Вставить("parent", ПараметрыЗаписи.ПараметрыРаботы.Шаблон);
	КонецЕсли;
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить
					И	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять;
	
	ВыполнитьЗапись	= ЕстьИниКЗаписи Или ЭтоНовоеСоединение;
	//Если запись параметров, то не обрабатываем коннекшен, а только запишем параметры
	Если Не	(	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
			И	СбисДополнительныеПараметры.ТолькоСбисПараметры) Тогда
		//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
		ini_array = Новый Массив;
		//Необязательные параметры. Если есть, то передаём
		Если ПараметрыЗаписи.Свойство("Название") Тогда
			ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Название));
		КонецЕсли;
		Если	ПараметрыЗаписи.ПараметрыРаботы.Свойство("ДатаИзмененияНастроек")
			И	ЗначениеЗаполнено(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек) Тогда
			ПараметрыОтправки.Вставить("update_date",		Формат(ПараметрыЗаписи.ПараметрыРаботы.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.Свойство("Автообновление") Тогда
			ПараметрыОтправки.Вставить("auto_update ",		ПараметрыЗаписи.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
		Если ФормированиеМеню Тогда
			ПараметрыЗаписи.Данные.Меню = КлассIntegrationConnection_СформироватьСбисМеню(Кэш, ПараметрыЗаписи, Новый Структура, Отказ);
		КонецЕсли;
		//Конвертнём и добавим в параметры ини к обновлению на сервисе
		Если ЕстьИниКЗаписи Тогда
			ПараметрыЗапроса = Новый Структура
				("Идентификатор,				ПараметрыКонфигурации,					СбисМеню,						Искать",
				ПараметрыЗаписи.Идентификатор,	ПараметрыЗаписи.ПараметрыКонфигурации,	ПараметрыЗаписи.Данные.Меню,	Новый Структура("Включено", "01"));
			ДанныеСпискаИни		= СформироватьСписокИни(Кэш,ПараметрыЗапроса,Отказ);
			КонвертированныеИни	= Новый Структура;
			Для Каждого ИмяИниВО Из  ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				Если Не ПараметрыЗаписи.Данные.Ини.Свойство(ИмяИниВО) Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
				КонецЕсли;
				КонвертированныеИни.Вставить(ИмяИниВО, ПараметрыЗаписи.Данные.Ини[ИмяИниВО]);
			КонецЦикла;
			КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
			
			Для Каждого ИмяИниВО Из ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				ЗаписьИни			= СбисОписаниеИни(Кэш);
				ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
				СписокКлючейОчистить= Новый Массив;
				Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
					Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
						СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
					ЗначениеИни.Удалить(КлючОчистить);
				КонецЦикла;
				
				ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
				ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(НРег(ИмяИниJson));
				ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
				ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
			
				ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
				ini_array.Добавить(ЗаписьИни);
			КонецЦикла;
		КонецЕсли;
		//Добавим меню в список отправляемых ини
		Если ФормированиеМеню Тогда
			ЗаписьИни = СбисОписаниеИниМеню(Кэш);
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Данные.Меню);
			ini_array.Добавить(ЗаписьИни);
			ВыполнитьЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	(	(	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить
				И	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять) 
			Или	ЭтоНовоеСоединение)
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
			ТихийРежим = Ложь;
		КонецЕсли;
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		//Обновить подключение после записи
		ПараметрыЗаписи.Идентификатор =	Результат;
		Если Не ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Шаблон" Тогда
			ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		КонецЕсли;
		ПараметрыЗаписи.ПараметрыРаботы.Статус = "Активен";
		ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(ПараметрыЗаписи.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

//Получает стуктуру СбисПараметров. 
&НаКлиенте
Функция		ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ)
	
	Перем ШаблонПодключения;
	Если Отказ Тогда
		Возврат Неопределено;
	ИначеЕсли	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
			И	Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = Идентификатор
			И	(		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Статус = "Новый"
				Или	Не	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять) Тогда
		//Если надо получить параметры от текущих настроек в момент мастера, либо предустановки (когда автозапись параметров отключена)
		Возврат Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Параметры;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id", Строка(Идентификатор));
	
	Результат = ВыполнитьПолучениеИни(Кэш, "ReadConnection", Новый Структура("props, ini", ПараметрыЗапроса, Неопределено), Новый Структура("СообщатьПриОшибке,ВернутьОшибку", Ложь,Истина), Отказ);
	Если Не Отказ Тогда
		Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, Перечитать, Кэшировать", Результат, Ложь, Истина, Ложь), Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Идентификатор = "";//При любой ошибке в процессе получения параметров очищается идентификатор, чтобы не спамить сообщениями об ошибках при дальнейших попытках получения.
		Если	Строка(Результат.code) = "756" Тогда//Код ошибки 756 - подключение не доступно для пользователя, либо было удалено в процессе работы. В любом случае, настройки получить не выйдет.
			Отказ = Ложь;
			Если	Кэш.Текущий.ТипДок = ""
				Или	(	ПараметрыРаботы.Свойство("ИзменениеПользователя")
					И	ПараметрыРаботы.ИзменениеПользователя)
				Или	(	ПараметрыРаботы.Свойство("ИзмененаФормаНастроек")
					И	ПараметрыРаботы.ИзмененаФормаНастроек)Тогда//Было изменение пользователя, или это первый запуск окна(до этого работали под другим пользователем).
				Возврат Неопределено;
			Иначе//Надо предложить сохранить настройки при следующем переходе. Для этого включаем кэш настроек с сохранением того, что было получено и ставим флаг на изменение.
				Кэш.КэшНастроек.ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые", Истина);
				ПриЗапускеРедактораНастроек(Новый Структура("КэшироватьВсеПолучаемые", Истина), Кэш);
				ВыбранныеНастройки = Неопределено;
				Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда 
					ВыбранныеНастройки.ПараметрыРаботы.Статус			= "Удален";
					ВыбранныеНастройки.Идентификатор					= ПараметрыЗапроса.id;
					ВыбранныеНастройки.Название							= Кэш.ФормаНастроекОбщее.НастройкиНазвание;
					ВыбранныеНастройки.ПараметрыРаботы.Автообновление	= Кэш.ФормаНастроекОбщее.НастройкиАвтообновление;
					ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек		= "Пользовательские";
				КонецЕсли;
				ПараметрыДиалога = Новый Структура("ТекстВопроса, КнопкиДиалога", "Сохранить текущие настройки и создать подключение повторно?", РежимДиалогаВопрос.ДаНет);
				Кэш.КэшНастроек.Вставить("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога);
				Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
			КонецЕсли;
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		Возврат	Неопределено;
	КонецЕсли;
	
	СбисПараметры = Неопределено;
	Если Не	ЗначениеЗаполнено(Результат.Данные.Параметры) Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	//Читаем параметры с шаблона и дополняем текущие 
	Если	Не	Результат.ПараметрыРаботы.ТипНастроек = "Шаблон"
		И		ЗначениеЗаполнено(Результат.ПараметрыРаботы.Шаблон) Тогда
		ОшибкаЧтенияШаблона	= Ложь;
		ПараметрыШаблона	= ПолучитьСБИСПараметрыСоединения(Кэш,  Результат.ПараметрыРаботы.Шаблон, Отказ);
		
		НоваяСтруктураПараметров= Новый Структура;
		Если Не ОшибкаЧтенияШаблона Тогда
			ЗначениеПараметраВПодключении = Неопределено;
			Для Каждого Элемент Из ПараметрыШаблона Цикл
				Если Кэш.КэшНастроек.СписокПараметровХранящихсяНаШаблоне.Найти(НРег(Элемент.Ключ)) = Неопределено Тогда
					Продолжить;
				ИначеЕсли Не Результат.Данные.Параметры.Свойство(Элемент.Ключ, ЗначениеПараметраВПодключении) Тогда
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				ИначеЕсли	ТипЗнч(ЗначениеПараметраВПодключении)	= Тип("Структура")
						И	ТипЗнч(Элемент.Значение)				= Тип("Структура") Тогда
					//Обе структуры - накатить параметры подключения поверх шаблона.
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Элемент.Значение, ЗначениеПараметраВПодключении);
					Результат.Данные.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				Иначе
					//Приоритет = пользовательские изменения
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СбисПараметры = Результат.Данные.Параметры;
	Если ТипЗнч(СбисПараметры) = Тип("Строка") Тогда//При работе через крипто плагин здесь строка, вместо структуры. Временный костыль, потом надо разобраться, почему.
		СбисПараметры = Кэш.РаботаСJSON.СбисПрочитатьJSON(СбисПараметры);
	КонецЕсли;
	
	Возврат	Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисПараметры);
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ)
	Перем СписокИни, ТипКоннекшена, ТихийРежим;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("service", ПараметрыПолучения.ПараметрыКонфигурации.service);
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТипКоннекшена", ТипКоннекшена) Тогда
		//account/user
		ПараметрыЗапроса.Вставить("connection_type", ТипКоннекшена);
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("URL") Тогда
		//ПараметрыЗапроса.Вставить("url", ЗначениеВJSON(ПараметрыПолучения.ДополнительныеПараметры.URL));
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("subsystem") Тогда
		ПараметрыЗапроса.Вставить("subsystem", ПараметрыПолучения.ДополнительныеПараметры.subsystem);
	КонецЕсли;
	ПараметрыСообщения		= Новый Структура("filter, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	
	РезультатМетода = Кэш.Интеграция.ПолучитьСписокConnection(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);	
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый Массив;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		СтрокаРезультатДобавить = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные, ПроверятьАктуальность", СтрокаРезультат, Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(СтрокаРезультатДобавить, "ФайлыНастроекСервер.ПолучитьСписокConnection");
		КонецЕсли;
		Результат.Добавить(СтрокаРезультатДобавить);
	КонецЦикла;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Возврат	Результат;
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ)
	Если	Отказ	Тогда
		Возврат	Неопределено
	КонецЕсли;
	
	ПараметрыСообщения		= Новый Структура("service", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	РезультатМетода			= Кэш.Интеграция.ПолучитьСписокConfig(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ);	
	Если Отказ Тогда
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		КлассIntegrationConnection = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ, ИнициироватьДанные", СтрокаРезультат, Ложь), Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(КлассIntegrationConnection, "ФайлыНастроекСервер.ПолучитьСписокConfig");
		КонецЕсли;
		Результат.Добавить(КлассIntegrationConnection, КлассIntegrationConnection.Название);
	КонецЦикла;
	Результат.СортироватьПоПредставлению();
	Возврат	Результат.ВыгрузитьЗначения();

КонецФункции

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ)
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	ПараметрыКонвертации = Неопределено;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id",		Строка(ПараметрыПолучения.Идентификатор));
	ПараметрыЗапроса.Вставить("version",Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыПолучения.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
	Если	ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТолькоПользовательские")
		И	ПараметрыПолучения.ДополнительныеПараметры.ТолькоПользовательские Тогда
		//Если получаем только пользовательские изменения, то при конвертации не требуется удалять отключенные узлы
		ПараметрыЗапроса.Вставить("read_config", Ложь);
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Ложь);
	КонецЕсли;	
	
	ПараметрыСообщения = Новый Структура("props, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);		
	Результат = ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;

	//ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации);

	Возврат	Результат;
	
КонецФункции	

//Получает типовые настройки по параметрам системы.
&НаКлиенте
Функция		ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ)
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Результат				= Неопределено;
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	ТихийРежим				= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	ПараметрыКонфигурации	= ПараметрыПолучения.ПараметрыКонфигурации;
	Запрос_Фильтр			= Новый Структура("version,subsystem,service");
	Если Не ЗначениеЗаполнено(ПараметрыКонфигурации) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.ПолучитьConfig", 600, "Неизвестная ошибка настроек", "Отсутствует описание конфигурации для получения стандартных настроек! Обратитесь в тех. поддержку.");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Запрос_Фильтр, ПараметрыКонфигурации);
	Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
	
	ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, ПараметрыПолучения.СписокИни);
	
	Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
		РезультатМетода = Новый Структура(
		"name_config,					auto_update,service,							subsystem,							version", 
		"Пользовательская конфигурация",Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
	Иначе
		РезультатМетода	= ВыполнитьПолучениеИни(Кэш, "ReadConfig", ПараметрыСообщения, ДополнительныеПараметры, Отказ);//Получаем типовые конфиги.
		Если РезультатМетода = Неопределено Тогда
			Отказ = Истина;
			ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыСообщения.props.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыСообщения.props));
			РезультатМетода = Новый Структура("code,message,details", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки %CF% не найдены!", "%CF%", ИмяЗапрашиваемойКонфигурации));
		КонецЕсли;
	КонецЕсли;
	Если	Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;
	
	ЧтениеИни_ОбработатьРезультат(Кэш, Результат);
	
	Возврат	Результат;
	
КонецФункции

//Функция выполняет разбивку получения ини по пакетно, для ускорения разбора данных.
&НаКлиенте
Функция		ВыполнитьПолучениеИни(Кэш,Метод,ПараметрыМетода,ДопПараметры,Отказ)
	Перем СписокКЗапросу, Результат, ПолучатьИни;
	
	Если ПараметрыМетода.Свойство("ini", СписокКЗапросу) Тогда
		ПолучатьИни = Не СписокКЗапросу = Неопределено;
	Иначе
		ПолучатьИни = Ложь;
	КонецЕсли;
	
	Если ПолучатьИни Тогда
		ЧислоИниЗаРаз = Кэш.КэшНастроек.ПараметрыНастроек.ПолучатьИниЗаРаз;
		СписокРазовоеЧтение = Новый Массив;
		Если СписокКЗапросу.Количество() > ЧислоИниЗаРаз Тогда
			Для Каждого ИниПолучить Из СписокКЗапросу Цикл
				Если СписокРазовоеЧтение.Количество() = ЧислоИниЗаРаз Тогда
					ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
					РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
					Если Отказ Тогда
						Возврат РезультатПолучения;
					КонецЕсли;
					ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
					СписокРазовоеЧтение = Новый Массив
				КонецЕсли;
				СписокРазовоеЧтение.Добавить(ИниПолучить);
			КонецЦикла;
			Если СписокРазовоеЧтение.Количество() Тогда
				ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
				РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
				Если Отказ Тогда
					Возврат РезультатПолучения;
				КонецЕсли;
				ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
			КонецЕсли;
		Иначе//Список пустой, или нужно инишек меньше, чем разбивка.
			ПараметрыМетода.Вставить("ini", СписокКЗапросу);
			Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
		КонецЕсли;
	Иначе
		Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатЗапроса,Отказ)
	ДанныеРезультат = Неопределено;
	ДанныеЗапроса	= Неопределено;
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли	Результат.Свойство("data",			ДанныеРезультат)
			И	РезультатЗапроса.Свойство("data",	ДанныеЗапроса) Тогда
		Если ТипЗнч(ДанныеРезультат) = Тип("Строка") Тогда
			data = Новый Массив;
			data.Добавить(ДанныеРезультат);
			Результат.data = data;	
		КонецЕсли;
		Результат.data.Добавить(ДанныеЗапроса);
	КонецЕсли;
КонецПроцедуры

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ) Экспорт
	
	ТихийРежим	= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	ИмяМетода	= "ReadConnection";
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	РезультатМетода = ВыполнитьПолучениеИни(Кэш, ИмяМетода, ПараметрыСообщения, ДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	Результат = НовыйIntegrationConnection(Кэш, Новый Структура("ДанныеБЛ", РезультатМетода), Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции	

&НаКлиенте
Функция		ДоступныеТипыКоннекшена()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("Шаблон");
	МассивТипов.Добавить("Пользовательские");
	МассивТипов.Добавить("Стандартные");
	Возврат МассивТипов;
КонецФункции

