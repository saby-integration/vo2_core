
&НаКлиенте
Функция		ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации)
	
	ПараметрыСтандартнойКонфигурации = Новый Структура("service, subsystem, version");
	ЗаполнитьЗначенияСвойств(ПараметрыСтандартнойКонфигурации, ПараметрыКонфигурации);
	ПараметрыСтандартнойКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
	Возврат ПараметрыСтандартнойКонфигурации;
	
КонецФункции

&НаКлиенте
Функция		СформироватьСписокИни(Кэш=Неопределено, ПараметрыПоиска, Отказ)
    Перем СбисМеню, Искать, Идентификатор, ТипыИни, СбисКоннекшен;
	Если 	ПараметрыПоиска.Свойство("Коннекшен", СбисКоннекшен) Тогда
		СбисМеню = СбисКоннекшен.Данные.Меню;
		Если СбисМеню = Неопределено Тогда
			Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
			КонецЕсли;
			СбисМеню = КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, СбисКоннекшен, Новый Структура("БратьВКэше", Ложь), Отказ);
		КонецЕсли;
	ИначеЕсли	Не	ПараметрыПоиска.Свойство("СбисМеню", СбисМеню)
		Или		СбисМеню = Неопределено Тогда
		Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
		КонецЕсли;
		Если Не ПараметрыПоиска.Свойство("Идентификатор", Идентификатор) Тогда
			Идентификатор = "";
		КонецЕсли;
		//Для Пользовательской ТИПОВОЙ конфигурации базовое меню будет пустым. Для коннекшена меню должно быть
		Если	ПустаяСтрока(Идентификатор)
			И	ПустаяСтрока(ПараметрыПоиска.ПараметрыКонфигурации.subsystem) Тогда
			СбисМеню = Новый Структура();
		Иначе
			КлассКонфиг	= НовыйIntegrationConnection(Кэш, Новый Структура("ПараметрыКонфигурации", ПараметрыПоиска.ПараметрыКонфигурации), Отказ); 
			СбисМеню	= КлассIntegrationConnection_ПолучитьСбисМеню(Кэш, КлассКонфиг, Новый Структура, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.СформироватьСписокИни");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		Если Кэш = Неопределено Тогда//Если не передаются ТипыИни, то кэш должен быть
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные. 01 - ищутся все, 0 - отключенные
	КонецЕсли;
	
	Результат = СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать);
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует по меню структуру с полями "Карта" и "Данные" для дальнейшего составления запроса. 
//Карта		- список имен для быстрого поиска. 
//Данные	- массив структур "type, name" из меню для передачи в методы получения уже самих ини.
&НаКлиенте                                  
Функция		СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать, СписокИни = Неопределено)	
	
	Если Не	ТипЗнч(СбисМеню) = Тип("Структура") Тогда
		ВызватьИсключение("Неизвестный формат меню");
	КонецЕсли;
	
	Если СписокИни = Неопределено Тогда
		СписокИни = Новый Структура("Карта, Данные",Новый СписокЗначений,Новый Массив);
	КонецЕсли;
	//Обойти меню и сформировать реестр ини.
	Для	Каждого	КлючИЗначение Из СбисМеню Цикл
		Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		enable = Неопределено;
		Если КлючИЗначение.Значение.Свойство("enable", enable) Тогда	
			ИмяИни	= КлючИЗначение.Ключ;
			ТипИни	= Неопределено;
			Если 	Не	КлючИЗначение.Значение.Свойство("type", ТипИни)
				Или		ТипыИни.Найти(ТипИни) = Неопределено Тогда//Фильтр по типу ини. Описание в инициализации кэша
				Продолжить;
			КонецЕсли;
			Карта		= СписокИни.Карта;//Карта для поиска значений без перебора
			Раздел		= СписокИни.Данные;//Данные - собственно список для передачи в запросы
			КлючКарты	= НРег(ИмяИни);
			enable		= Строка(enable);
			Фильтр		= Неопределено;
			Если		Искать.Свойство("Включено",Фильтр)
				И Не	Найти(Фильтр, enable) Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Имя",Фильтр)
				И 		Фильтр.Найти(ИмяИни) = Неопределено Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Тип")
				И 		Фильтр.Найти(ТипИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Не	Карта.НайтиПоЗначению(КлючКарты) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Раздел.Добавить(Новый Структура("type,name", ТипИни,ИмяИни));
			Карта.Добавить(КлючКарты, ИмяИни);
		Иначе//Это подраздел
			СформироватьСпискиИзМеню(ТипыИни, КлючИЗначение.Значение,Искать,СписокИни);	
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИни;
	
КонецФункции

&НаКлиенте
Функция		СбисОписаниеИни(Кэш, data_ini=Неопределено)
	Возврат Новый Структура("active,data,type,name", Истина, data_ini)
КонецФункции

//Функция переводит имена ини из шаблона онлайна в шаблон обработки и обратно
&НаКлиенте
Функция		ПолучитьИмяИни(СоответствиеНазваний, КлючИни, Направление="json_во")
	
	НаправлениеСтр	= СтрЗаменить(Направление, "_", Символы.ПС);
	КлючНаправления1= СтрПолучитьСтроку(НаправлениеСтр, 1);
	КлючНаправления2= СтрПолучитьСтроку(НаправлениеСтр, 2);
	
	ИмяИни	= КлючИни;
	Для Каждого Соответствие Из СоответствиеНазваний	Цикл
		Если Лев(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])) = Соответствие[КлючНаправления1] Тогда
			Если Соответствие[КлючНаправления1] = Соответствие[КлючНаправления2] Тогда
				ИмяИниНазвание	= Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
				ИмяИни			= Соответствие[КлючНаправления1];//Имена инишек идентичны и в онлайн и в обработке
				Если Не ИмяИниНазвание = "" Тогда
					//Это не имя ини, а направление
					ИмяИни = ИмяИни + "_" + ИмяИниНазвание;
				КонецЕсли;
			Иначе
				ИмяИни =	Соответствие[КлючНаправления2] + ?(ПустаяСтрока(Соответствие[КлючНаправления2]), "", "_") + //переводим имена по соответствию имен, убирая старый префикс.
							Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяИни;	
	
КонецФункции

//Функция возвращает описание инишки меню для запроса методами получения данных
&НаКлиенте
Функция		СбисОписаниеИниМеню(Кэш, СбисМеню=Неопределено)
	Результат = СбисОписаниеИни(Кэш, СбисМеню);
	Результат.type = "Меню";
	Результат.name = "сбисМеню";
	Возврат Результат;
КонецФункции

//В процедуре из переданной структуры убираются отключенные узлы, которые были оставлены для их записи и отправки на сервер (для отключения при получении), но которые будут мешать нормальной работе с настройками
&НаКлиенте
Процедура	ОчиститьОтключенныеУзлы(ДанныеИни, КонтекстУзла=Неопределено)
	
	КлючиУдалить = Новый Массив;
	Если ТипЗнч(ДанныеИни) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ДанныеИни Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПараметрыУзла = Новый Структура("ИмяУзла", КлючИЗначение.Ключ);
				ОчиститьОтключенныеУзлы(КлючИЗначение.Значение,ПараметрыУзла);
			ИначеЕсли	КлючИЗначение.Значение = "" Тогда
				Если	КонтекстУзла.Свойство("ИмяУзла")
					И	КонтекстУзла.ИмяУзла = "Отбор" Тогда
					КлючиУдалить.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого КлючУдалить Из КлючиУдалить Цикл
		ДанныеИни.Удалить(КлючУдалить);
	КонецЦикла;
	
КонецПроцедуры
	
//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Процедура	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации = Неопределено)
	Ини = Новый Структура();
	Если ПараметрыКонвертации = Неопределено Тогда
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
	КонецЕсли;
	Если Не Результат.Данные.Ини = Неопределено Тогда
		Для Каждого КлючИЗначение Из Результат.Данные.Ини Цикл
			Если		КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			ИначеЕсли	КлючИЗначение.Ключ = "СбисМеню" Тогда
				Ини.Вставить("СбисМеню", КлючИЗначение.Значение);
			Иначе
				ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ);
	 			ЗначениеИни = ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
				Ини.Вставить(ИмяИни, ЗначениеИни);
			КонецЕсли;
		КонецЦикла;
		Результат.Данные.Ини = Ини;
	КонецЕсли;
	Результат.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(Результат.ПараметрыКонфигурации.version);
КонецПроцедуры

//Формируем Сбис меню на основании переданного и внесенных изменений.
&НаКлиенте                                  
Функция		СформироватьМеню_Структура(Кэш, УстановленныеИни, БазовоеМеню=Неопределено, Отказ)//
	Если БазовоеМеню = Неопределено Тогда
		//Если меню отсутствует, то надо собрать его по алгоритму с нуля из инишек, которые имеются в наличии, если меню есть, то взять только отличия (то, что было переключено)
		БазовоеМеню	= Новый	Структура();
	КонецЕсли;
	СтруктураМеню = БазовоеМеню;
	Если СтруктураМеню = Неопределено Тогда
		СтруктураМеню = Новый Структура();
	КонецЕсли;

	//Сперва смотрим ини, которые есть в меню. Переставляем все флаги в базовом меню (по-идее, это меню от конфига)
	ПараметрыЗапроса= Новый Структура("СбисМеню, Искать, ДоступныеТипыИни", БазовоеМеню, Новый Структура("Включено", "1"), Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни);
	ДанныеСписка	= СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Для	Каждого	КлючИЗначениеРаздел	Из	БазовоеМеню	Цикл//Переключить то, что установлено в типовых настройках
		Если Не ТипЗнч(КлючИЗначениеРаздел.Значение) = Тип("Структура") Тогда
			//На случай добавления в меню не структурных параметров, пропускаем их
			Продолжить;
		КонецЕсли;
		Для	Каждого	Ини	Из КлючИЗначениеРаздел.Значение Цикл
			//+++ МАИ 02.08.2021 На случай добавления в ини не структурных параметров, пропускаем их
			ИниВключена	= Неопределено;
			ИниТип		= Неопределено;
			Если	Не	ТипЗнч(Ини.Значение) = Тип("Структура")
				Или	Не	Ини.Значение.Свойство("enable", ИниВключена)
				Или	Не	Ини.Значение.Свойство("type",	ИниТип)
				Или		Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ИниТип) = Неопределено Тогда//Ини не из списка поддерживаемых обработкой, не трогаем 
				Продолжить;
			КонецЕсли;
			//--- МАИ 02.08.2021
			ИмяИниМеню	= Ини.Ключ;
			ИмяИниВо	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниМеню);
			Добавить	= Ложь;
			Если		ИниВключена = "1"	Тогда
				Если	УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже включено.
				КонецЕсли;
				ИниВключена	= "0";
				Добавить	= Истина;
			ИначеЕсли	ИниВключена = "0"	Тогда
				Если Не УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже выключено.
				КонецЕсли;
				ИниВключена	= "1";
				Добавить	= Истина;
			КонецЕсли;
			Если Добавить Тогда
				Если Не	СтруктураМеню.Свойство(КлючИЗначениеРаздел.Ключ)	Тогда
					СтруктураМеню.Вставить(КлючИЗначениеРаздел.Ключ, Новый	Структура);
				КонецЕсли;
				Если Не СтруктураМеню[КлючИЗначениеРаздел.Ключ].Свойство(ИмяИниМеню)	Тогда
					СтруктураМеню[КлючИЗначениеРаздел.Ключ].Вставить(ИмяИниМеню, Новый Структура("enable", ИниВключена));
				Иначе
					СтруктураМеню[КлючИЗначениеРаздел.Ключ][ИмяИниМеню].enable = ИниВключена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Смотрим установленные ини - возможно, добавлена не стандартная инишка
	Для	Каждого	КлючИЗначениеИни Из УстановленныеИни Цикл
		ИмяИниВО	= КлючИЗначениеИни.Ключ;
		ИмяИниМеню	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
		ПунктМеню	= СформироватьМеню_Элемент(КлючИЗначениеИни.Значение, ИмяИниМеню);
		Для	шаг = 1 По СтрЧислоСтрок(ПунктМеню.КнопкиРеестров)	Цикл
			ИмяКнопки	= СтрПолучитьСтроку(ПунктМеню.КнопкиРеестров, шаг);
			Раздел		= Неопределено;
			ПодРаздел	= Неопределено;
			Если Не СтруктураМеню.Свойство(ИмяКнопки, Раздел)	Тогда
				Раздел = Новый Структура();
				СтруктураМеню.Вставить(ИмяКнопки, Раздел);
			КонецЕсли;
			Если Раздел.Свойство(ИмяИниМеню, ПодРаздел)	Тогда
				ПодРаздел.enable = ПунктМеню.ЗначениеМеню.enable;
			Иначе
				Раздел.Вставить(ИмяИниМеню, ПунктМеню.ЗначениеМеню);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураМеню.Вставить("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.СбисСформироватьСтруктуруРазделов(Кэш, УстановленныеИни, Новый Структура));
	
	Возврат	СтруктураМеню;
	
КонецФункции

&НаКлиенте                                  
Функция		СформироватьМеню_Элемент(ЗначениеИни, НазваниеИни)

	ИниВключена = "1";
    Если ЗначениеИни.Свойство("Реестр1С_Название")	Тогда
        ИмяРеестра = СтрЗаменить(ЗначениеИни.Реестр1С_Название.Значение,"'", "");
	Иначе	
		ИмяРеестра = НазваниеИни;
	КонецЕсли;
	КнопкиРеестров = "";
	Если ЗначениеИни.Свойство("РеестрСБИС_ИдМеню")	Тогда
        КнопкиРеестров = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЗначениеИни.РеестрСБИС_ИдМеню.Значение,
						 " ", ""), 
						 "'", ""), 
						 ",", Символы.ПС);
	КонецЕсли;
	Если ЗначениеИни.Свойство("мДокумент") Тогда
		Для Каждого КлючИЗначениеМДокумент Из ЗначениеИни["мДокумент"] Цикл 
			ИмяРаздела	= Неопределено;
			РеестрИдМеню= КлючИЗначениеМДокумент.Значение;
			Если 	Не РеестрИдМеню.Свойство("Имя", ИмяРаздела)
				Или Не ИмяРаздела = "РеестрСБИС_ИдМеню" Тогда
				Продолжить;
			КонецЕсли;
			КнопкиРеестров = КнопкиРеестров 
						   + ?(ПустаяСтрока(КнопкиРеестров), "", ",") 
						   + СтрЗаменить(СтрЗаменить(СтрЗаменить(РеестрИдМеню["Значение"],
							 " ", ""), 
							 "'", ""), 
							 ",", Символы.ПС);
            Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(КнопкиРеестров) Тогда
		КнопкиРеестров = "Handling";
	КонецЕсли;
	Если ЗначениеИни.Свойство("РеестрПоУмолчанию")	Тогда
        ПоУмолчанию = СтрЗаменить(ЗначениеИни.РеестрПоУмолчанию.Значение, "'", "");
	Иначе	
        ПоУмолчанию = "0";
	КонецЕсли;
	Если		НазваниеИни = "Конфигурация"	Тогда
		ТипИни	= "Система";
	ИначеЕсли	ЗначениеИни.Свойство("ТипИни")	Тогда
		ТипИни	= СтрЗаменить(ЗначениеИни.ТипИни.Значение, "'", "");
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "загрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "исходящий" Тогда
            ТипИни = ТипИни + "Исходящих";
		КонецЕсли;
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "выгрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "входящий" Тогда
            ТипИни = ТипИни + "Входящих";
		КонецЕсли;
	ИначеЕсли	ЗначениеИни.Свойство("мДокумент")	Тогда
		ТипИни	= "Загрузка";
	Иначе
		ТипИни	= "Выгрузка";
	КонецЕсли;
	
	Возврат Новый Структура("КнопкиРеестров, ЗначениеМеню", КнопкиРеестров, Новый Структура("name,type,default,enable", ИмяРеестра, ТипИни, ПоУмолчанию, ИниВключена));

КонецФункции

