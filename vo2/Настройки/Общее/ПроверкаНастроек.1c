
//Вызывает проверку структуры установленных файлов настроек	
&НаКлиенте
Функция		СбисПроверитьУстановленныеНастройки(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров, ИдентификаторНастроек=Неопределено) Экспорт
	СтруктураПараметров.Вставить("ДатаПоследнейПроверки", ТекущаяДата());									
    ГлавноеОкно = Кэш.ГлавноеОкно;
	Отказ = Ложь;
	ГлавноеОкно.сбисПоказатьСостояние("Установка пользовательских фильтров", ГлавноеОкно);
	//Перед проверкой установим пользовательские фильтры для запросов
	ПараметрыУстановкиФильтров = Новый Структура("СформироватьРазделыПоДанным, Ини", Истина, СтруктураИни);	
	РезультатЗаполнения = СбисЗаполнитьДополнительныеПараметрыФильтра(Кэш, ПараметрыУстановкиФильтров, Отказ);
	Если Отказ Тогда
		//TODO42 сделать проброску исключения на верхний уровень
		РезультатЗаполнения = Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаполнения, "ФайлыНастроекОбщее.сбисПроверитьУстановленныеНастройки");
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаполнения);
		Кэш.ИниВПорядке = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	ГлавноеОкно.сбисПоказатьСостояние("Проверка файлов настроек", ГлавноеОкно);
	УстановленныеИниФайлы = ПроверитьИниФайлы(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров);
	Если	УстановленныеИниФайлы.Количество()
		И	Кэш.ИниВПорядке Тогда
		Сообщить("Ошибок в ini файлах не обнаружено.");
	КонецЕсли;
	
	ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	
	Возврат УстановленныеИниФайлы;
	
КонецФункции

// Проверяет структуру установленных файлов настроек	
&НаКлиенте
Функция		ПроверитьИниФайлы(Кэш, СписокИниФайловДляПроверки, СтруктураИни, СтруктураПараметров)
	
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	//Формируется структура инишек, идентичная оригинальной, но в которой только ошибки, или узлы с ошибками. Дальше просто передать вместо инишек эту.
	СтруктураОшибокИни	= ПроверитьСтруктуруИниФайлов(СписокИниФайловДляПроверки, СтруктураИни, Кэш.ПараметрыФильтра); 
	ПоказатьПротокол	= Не Кэш.ТихийРежим И (СтруктураОшибокИни.Количество() Или СтруктураИни.Количество());
	
	// файл настроек Конфигурация обязательно должен быть, иначе выдаем ошибку
	Если Не Кэш.Ини.Свойство("Конфигурация") Тогда
		СтруктураОшибокИни.Вставить("Конфигурация", Новый Структура("сбисОшибки, сбисИмяФайла", Новый Массив, "Конфигурация.sbis3.xml"));
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра",		"Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра",	"Конфигурация");
		НоваяОшибка.Вставить("ТекстОшибки",			"Не установлен файл настроек конфигурации. ");
		НоваяОшибка.Вставить("ИнформацияПоОбъекту",	"");
		НоваяОшибка.Вставить("ИмяОбъекта",			"");
		НоваяОшибка.Вставить("ПолныйПуть",			"");
		СтруктураОшибокИни.Конфигурация.сбисОшибки.Добавить(НоваяОшибка);
	КонецЕсли;
	
	Если СтруктураОшибокИни.Количество() Тогда//Были ошибки, сформировать протокол и пользовательские файлы на соответствующей форме.
		Кэш.ИниВПорядке = Ложь;
		Если ПоказатьПротокол Тогда 
			ПараметрыПротокола = Кэш.ФормаНастроек.сбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки);
			ПараметрыПротокола.Вставить("УправляемоеПриложение", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение);
			//Показать протокол об ошибках
			ТабПротокол	= ВывестиПротоколПроверкиИниФайлов(Кэш.Ини, СтруктураОшибокИни, ПараметрыПротокола);
			ТабПротокол.Показать("Протокол проверки ini файлов");
		КонецЕсли;
		//Формируем пользовательские инишки на соответствующей форме
		Кэш.ФормаНастроек.сбисСформироватьИниФайлыКлиента(Кэш, СписокИниФайловДляПроверки, СтруктураОшибокИни);
	Иначе//Не было ошибок, сообщить что все ок
		Кэш.ИниВПорядке	= Истина;
		//Сохраняем параметры по завершении всех операций
		//Режим = Неопределено;
		//Если	Кэш.Свойство("ДополнительныеПараметры",Режим)//Сохраняем параметры, но только если это не загрузка из каталога. 
		//	И	Режим.Свойство("РежимРаботы", Режим)
		//	И	Режим = "ЗагрузкаИзКаталога" Тогда
		//	Кэш.КэшНастроек.Вставить("сбисПараметры", СтруктураПараметров);
		//Иначе
		//	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураПараметров, ИдентификаторНастроек);//сохранить сбис параметры
		//КонецЕсли;
	КонецЕсли;
	
	СписокУстановленныхИниФайлов = Кэш.ФормаНастроек.сбисОбновитьМассивУстановленныхИниФайлов(Кэш, СписокИниФайловДляПроверки);
	
	Возврат СписокУстановленныхИниФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьСтруктуруИниФайлов(СписокИниФайловДляПроверки, СтруктураИни, ПараметрыФильтра)
	
	СтруктураОшибок	= Новый	Структура();
	
	КлючСистемныхОшибок	= "сбисОшибки";
	КлючСвойствЗаполнить= "сбисИмяФайла,сбисПолноеИмяФайла";
	
	Для Каждого ИниФайл Из СписокИниФайловДляПроверки Цикл
		Ошибки				= Ложь;
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		сбисФайл			= СтруктураИни[ИмяИни];
		
		ПроверитьСтруктуруИни(сбисФайл,ИмяБезРасширения,ПараметрыФильтра);//Проверяет инишки, формирует и заполняет ошибки в структуре узлов
		
		//Формируются только структуры с инишками и узлами, где есть ошибки. Пока сделано так. В проверке параметров - черт ногу сломит.
		Если сбисФайл[КлючСистемныхОшибок].Количество() <> 0 Тогда //Есть системные ошибки
			СтруктураОшибкиВставка	= Новый	Структура(КлючСвойствЗаполнить);
			ЗаполнитьЗначенияСвойств(СтруктураОшибкиВставка,сбисФайл,КлючСвойствЗаполнить);
			СтруктураОшибкиВставка.Вставить(КлючСистемныхОшибок,	сбисФайл[КлючСистемныхОшибок]);
			Ошибки	= Истина;
		Иначе //Нет системных ошибок, строим узлы с ошибками
			СтруктураОшибкиВставка	= СформироватьСтруктуруОшибкиУзла(сбисФайл);
			Если	СтруктураОшибкиВставка.Количество()	Тогда
				КлючМногострочный	= СтрЗаменить(КлючСвойствЗаполнить	+ ","	+ КлючСистемныхОшибок,",",Символы.ПС);
				Для	шаг	= 1	По	СтрЧислоСтрок(КлючМногострочный)	Цикл
					СтруктураОшибкиВставка.Вставить(СтрПолучитьСтроку(КлючМногострочный,шаг),	сбисФайл[СтрПолучитьСтроку(КлючМногострочный,шаг)]);
				КонецЦикла;
				Ошибки	= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если	Ошибки	Тогда//Добавить в ошибки готовую структуру
			СтруктураОшибок.Вставить(ИмяИни,	СтруктураОшибкиВставка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	СтруктураОшибок;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьСтруктуруИни(СтруктураИниФайла,ИмяБезРасширения,ПараметрыФильтра)
	
	// Проверяет структуру файла настроек	
	Для Каждого Стр Из СтруктураИниФайла Цикл
		//не проверяем элементы структуры в имени которых есть слово "сбис"
		//так как это служебные элементы, которые мы добавили вручную
		Если Найти(Стр.Ключ,"сбис")>0 Тогда
			Продолжить
		КонецЕсли;
		ГрязнаяИни	= Новый Структура;
		сбисСкопироватьСтруктуру(ГрязнаяИни, СтруктураИниФайла);
		Попытка
			ПроверитьЗначениеПараметра(Стр.Ключ, Стр.Значение, ГрязнаяИни, СтруктураИниФайла[Стр.Ключ],ПараметрыФильтра);
		Исключение
			СбисОписаниеОшибки = СтрЗаменить(ИнформацияОбОшибке().Описание, "%Замена%", Символы.ПС);
			СбисТекстОшибки = "Неизвестная структура ини файла" + Символы.ПС + "Детальная информация: " + СтрПолучитьСтроку(СбисОписаниеОшибки, 1);
			СбисСтруктураОшибки = СбисОшибкаПроверки(Стр.Ключ, "Узел ини файла", СбисТекстОшибки,,,СтрПолучитьСтроку(СбисОписаниеОшибки, 2));
			СтруктураИниФайла.сбисОшибки.Добавить(СбисСтруктураОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьЗначениеПараметра(знач ИмяПараметра, знач ЗначениеПараметра, СтруктураИниФайла, СлужебнаяСтруктура, ПараметрыФильтра)
	
	// Проверяет значение параметра в файле настроек	
	Если	ТипЗнч(ЗначениеПараметра)	= Тип("Структура")
		И	ЗначениеПараметра.Свойство("Значение") Тогда
			ЗначениеПараметра = ЗначениеПараметра.Значение;	
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Структура")  Тогда
		сбисСкопироватьСтруктуру(СтруктураИниФайла,ЗначениеПараметра);
		Для Каждого Элемент Из ЗначениеПараметра Цикл //перебираем структуру - там не может быть запроса и массива
			Попытка
				ПроверитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение, СтруктураИниФайла, СлужебнаяСтруктура[Элемент.Ключ], ПараметрыФильтра);
			Исключение
				ВызватьИсключение(СбисТекстИсключениеПриПроверке(Элемент.Ключ, Элемент.Значение, ИнформацияОбОшибке().Описание));
			КонецПопытки;
		КонецЦикла;
		
		//Для Каждого ЭлементМассива Из ЗначениеПараметра Цикл
		//	Если ТипЗнч(ЭлементМассива.Значение) = Тип("Структура") Тогда
		//		сбисСкопироватьСтруктуру(СтруктураИниФайла,ЭлементМассива.Значение);
		//		Для Каждого Элемент Из ЭлементМассива.Значение Цикл //перебираем структуру - там не может быть запроса и массива
		//			ПроверитьЗначениеПараметра(Элемент.Ключ,Элемент.Значение,СтруктураИниФайла, СлужебнаяСтруктура[ЭлементМассива.Ключ][Элемент.Ключ],ПараметрыФильтра);
		//		КонецЦикла;
		//	Иначе
		//		ПроверитьЗначениеПараметра(ЭлементМассива.Ключ,ЭлементМассива.Значение,СтруктураИниФайла[ИмяПараметра],СлужебнаяСтруктура[ЭлементМассива.Ключ],ПараметрыФильтра);
		//	КонецЕсли;
		//КонецЦикла;
		Возврат Истина;
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Строка")  Тогда
		ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
	КонецЕсли;
	
	Если ИмяПараметра="ЗапросСпискаДокументов" Тогда
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = Сред(ЗначениеПараметра,2,СтрДлина(ЗначениеПараметра)-2);
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата());
				Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());	
				Запрос.УстановитьПараметр("ЗначениеДатаКонЗаполнено", Ложь);	
				Запрос.УстановитьПараметр("Контрагент", "");
				Запрос.УстановитьПараметр("КонтрагентПодключен", "");
				Запрос.УстановитьПараметр("ТекущаяОрганизация", "");
				Запрос.УстановитьПараметр("ЗначениеТекущаяОрганизацияЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ЗначениеКонтрагентЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ТекущийДокумент", "");
				Запрос.УстановитьПараметр("ЗначениеТекущийДокументЗаполнено", Ложь);
				Запрос.УстановитьПараметр("Ответственный", "");
				Запрос.УстановитьПараметр("Маска", ""); // alo СтатусГос
				Для каждого ПараметрФильтра из ПараметрыФильтра Цикл
					Запрос.УстановитьПараметр(ПараметрФильтра.Ключ, "");
					Запрос.УстановитьПараметр("Значение" + ПараметрФильтра.Ключ + "Заполнено", Ложь);
				КонецЦикла;	
				Запрос.Выполнить().Выбрать();
			КонецЕсли;
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			ТекстОшибки = "Неправильный текст запроса."+Символы.ПС+"("+ТекстОшибки.Причина.Описание+")";
			сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	Если	ТипЗнч(СтруктураИниФайла[ИмяПараметра])	= Тип("Структура")
		И	СтруктураИниФайла[ИмяПараметра].Свойство("Вычислить")
		И	Найти(СтруктураИниФайла[ИмяПараметра].Вычислить,"{") = 1 Тогда
			Если ПроверитьЗначениеПараметраНаВычисление(СтруктураИниФайла[ИмяПараметра].Вычислить) Тогда
				Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,СтруктураИниФайла[ИмяПараметра].Вычислить,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
			КонецЕсли;	
	КонецЕсли;	
	
	Если Найти(ЗначениеПараметра,"{") > 0  Тогда	
		//значение параметра вычисляется функцией, проверим что за функция
		Если ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра) и Найти(ЗначениеПараметра,"{") = 1 Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли Найти(ЗначениеПараметра,"[")=1 Тогда
		СтрОбъекта=Сред(ЗначениеПараметра,2,Найти(ЗначениеПараметра,"]")-2);
		// << alo Меркурий
		Если	СтрОбъекта = "Парам"
			Или	НРег(СтрОбъекта) = "входящийконтекст" Тогда
			Возврат Ложь;
		КонецЕсли;// alo Меркурий >>
		Попытка
			ЗначениеОбъекта = СтруктураИниФайла[СтрОбъекта];
			Если ТипЗнч(ЗначениеПараметра)= Тип("Строка") или ТипЗнч(ЗначениеПараметра)= Тип("Булево") или ТипЗнч(ЗначениеПараметра)= Тип("Число") Тогда
				Попытка
					Объект1С = ПроверитьЗначениеПараметра(СтрОбъекта,ЗначениеОбъекта,СтруктураИниФайла, СлужебнаяСтруктура,ПараметрыФильтра);
				Исключение
					ВызватьИсключение(СбисТекстИсключениеПриПроверке(СтрОбъекта, ЗначениеОбъекта, ИнформацияОбОшибке().Описание));
				КонецПопытки;
			Иначе	  
				Объект1С =  ЗначениеОбъекта;
			КонецЕсли;	
		Исключение
			ТекстОшибки = "Значение параметра ссылается на несуществующий параметр: """+СтрОбъекта+"""."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "1. Возможно в слове """+СтрОбъекта+""" опечатка. Исправьте её."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "2. Определите значение параметра """+СтрОбъекта+""" в виде: "+СтрОбъекта+" = ЗначениеПараметра // комментарий";
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
		КонецПопытки;
		
		Если Объект1С<>Ложь Тогда
			ИмяРек=ЗначениеПараметра;
			Если Не Найти(ИмяРек,".") Тогда
				Возврат Ложь;//Переадресация на другой атрибут
			КонецЕсли;
			Пока Найти(ИмяРек,".")>0 Цикл 
				ИмяРек=прав(ИмяРек,СтрДлина(ИмяРек)-Найти(ИмяРек,"."));
			КонецЦикла;	
			Если ИмяРек = "УникальныйИдентификатор" Тогда
				Возврат Ложь;
			КонецЕсли;
			Попытка
				Объект1СПолноеИмя = Объект1С.ПолноеИмя();
			Исключение
				Объект1СПолноеИмя = "";
			КонецПопытки;
			Попытка
				Объект1СТип = Объект1С.Тип;
			Исключение
				Объект1СТип = "";
			КонецПопытки;
			Попытка
				Если (Найти(Объект1СПолноеИмя,"ТабличнаяЧасть")>0 или Найти(Объект1СПолноеИмя,"TabularSection")>0) Тогда
					Попытка
						Попытка
							Возврат Объект1С.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат Объект1С.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								ТипСравочника=ВернутьТипСправочника(Объект1СТип);
								Попытка
									Возврат ТипСравочника.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ТипСравочника.СтандартныеРеквизиты[ИмяРек];									
									Исключение	
										Возврат ТипСравочника.ТабличныеЧасти[ИмяРек];								
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;	
						КонецПопытки;
					Исключение
						Попытка
							Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
								ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
								Попытка
									Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
									Исключение
										Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
									КонецПопытки;
								КонецПопытки;
							ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
								//составной тип реквизита, невозможно проверить
								Возврат Ложь;
							КонецЕсли;	
						Исключение
							//ЗначениеПараметраТабличнойЧасти = СтруктураИниФайла[СтрОбъекта];
							//ИмяПараметраДокумента           = Сред(ЗначениеПараметраТабличнойЧасти,2,Найти(ЗначениеПараметраТабличнойЧасти,"]")-2);
							//ЗначениеПараметраДокумента      = СтруктураИниФайла[ИмяПараметраДокумента];
							//не найден реквизит табличной части
							Возврат     сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Объект1СТип<> "" Тогда 
					Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
						ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
						Попытка
							Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								Попытка 
									Возврат ОбъектМетаданных.ТабличныеЧасти[ИмяРек];									
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.Ресурсы[ИмяРек];									
									Исключение
										Попытка 
											Возврат ОбъектМетаданных.Измерения[ИмяРек];									
										Исключение
											Попытка 
												Возврат ОбъектМетаданных.ЗначенияПеречисления[ИмяРек];									
											Исключение
												Попытка
													Если НРег(ИмяРек) = "этогруппа" Тогда
														Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
															Возврат Истина;
														КонецЕсли;
														Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
													КонецЕсли;
												Исключение
													//Падать в исключение не должно, но на всякий обернул.
												КонецПопытки;
												Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
											КонецПопытки;
										КонецПопытки;		
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
						//составной тип реквизита, невозможно проверить
						Возврат Ложь;
					КонецЕсли;	
				ИначеЕсли Объект1С <> Неопределено И (Метаданные.Документы.Найти(Объект1С.Имя)<> Неопределено) и (Лев(нрег(Объект1СПолноеИмя),8)="документ" или Лев(нрег(Объект1СПолноеИмя),8)="document") Тогда
					Попытка
						Возврат Объект1С.Реквизиты[ИмяРек];
					Исключение
						Попытка
							Попытка
								Возврат Метаданные.Документы[Объект1С.Имя].Реквизиты[имяРек];
							Исключение
								Попытка
									Возврат Метаданные.Документы[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
								Исключение
									//Изменено Рыбаков А.В. 2021.02.03. +
									Попытка
										Возврат Метаданные.Документы[Объект1С.Имя].ТабличныеЧасти[имяРек];                                           
                                    Исключение
                                        ОбщийРеквизит = Метаданные.ОбщиеРеквизиты[ИмяРек];
                                        Состав = ОбщийРеквизит.Состав;
                                        Если Состав.Найти(Объект1С).Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
                                            Или (Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать) тогда
                                            Возврат ОбщийРеквизит;
                                        КонецЕсли;
                                    КонецПопытки;
                                    //Изменено Рыбаков А.В. 2021.02.03. -
								КонецПопытки;
							КонецПопытки;	
						Исключение
							если ИмяРек="УникальныйИдентификатор" тогда
								Возврат истина;
							иначе
							Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
							конецесли;
						КонецПопытки;	
					КонецПопытки;
				ИначеЕсли Метаданные.Справочники.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),10)="справочник" или Лев(нрег(Объект1СПолноеИмя),7)="catalog") Тогда
					Попытка
						Возврат Метаданные.Справочники[Объект1С.Имя].Реквизиты[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.Справочники[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.Справочники[Объект1С.Имя].ТабличныеЧасти[имяРек];
							Исключение
								Попытка 
									Если НРег(ИмяРек) = "этогруппа" Тогда
										Возврат Истина;
									ИначеЕсли Справочники[Объект1С.Имя][имяРек].Предопределенный Тогда
										Возврат Метаданные.Справочники[Объект1С.Имя];
									Иначе
										ВызватьИсключение("");
									КонецЕсли;
								Исключение
									Попытка
										ОбщийРеквизит = Метаданные.ОбщиеРеквизиты[ИмяРек];
	                                    Состав = ОбщийРеквизит.Состав;
	                                    Если Состав.Найти(Объект1С).Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
	                                        Или (Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать) тогда
	                                        Возврат ОбщийРеквизит;
										КонецЕсли;
									Исключение
										Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
									КонецПопытки;
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;	
				ИначеЕсли Метаданные.РегистрыСведений.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),15)="регистрсведений" или Лев(нрег(Объект1СПолноеИмя),19)="informationregister") Тогда
					Попытка
						Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Ресурсы[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Измерения[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.РегистрыСведений[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
							Исключение
								Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Метаданные.Перечисления.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),12)="перечисление" или Лев(нрег(Объект1СПолноеИмя),11)="enumeration") Тогда
					Попытка
						Возврат Метаданные.Перечисления[Объект1С.Имя].ЗначенияПеречисления[имяРек];
					Исключение
						Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено значение перечисления "+Объект1С.Имя+" """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
					КонецПопытки;
				ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
					Возврат Ложь;
				Иначе
					Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Составной тип реквизита: """+Объект1С.Имя+""". Невозможно проверить правильность параметра.",СтруктураИниФайла, СлужебнаяСтруктура);
				КонецЕсли;
			Исключение
				Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1С.Имя+"."+ИмяРек);
			КонецПопытки;
		иначе
			Возврат ложь;
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Константа")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-10);
		Если Метаданные.Константы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдена константа: """+ЗначениеПараметра+"""",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Константы,"Константы");
		КонецЕсли;
		Возврат Метаданные.Константы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Перечисление")=1 Тогда	
		ИмяРек=сред(ЗначениеПараметра,14);
		Если Метаданные.Перечисления.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено перечисление: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"Перечисления");
		КонецЕсли;	
		Возврат Метаданные.Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Справочник")=1 или Найти(ЗначениеПараметра,"ЗаписьСправочника")=1 Тогда	
		
		ИмяРек = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, ".")+1);
		Если Метаданные.Справочники.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден справочник: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Справочники,"Справочники");
		Иначе
			Возврат Метаданные.Справочники[ИмяРек];
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Документ")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-9);
		Если Метаданные.Документы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реестр документа: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Документы,"Документы");
		КонецЕсли;
		Возврат Метаданные.Документы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"РегистрыСведений")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-17);
		Если Метаданные.РегистрыСведений.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден регистр сведений: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"РегистрыСведений");
		КонецЕсли;	
		Возврат Метаданные.РегистрыСведений[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"ПланыСчетов")=1 Тогда	// alo ПланыСчетов	
		ИмяРек = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, ".")+1);
		Если Метаданные.ПланыСчетов.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден план счетов: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Справочники,"ПланыСчетов");
		КонецЕсли;	
		Возврат Метаданные.ПланыСчетов[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"'")>0 Тогда	
		//значение параметра заключено в ' '
		Возврат Ложь;
	ИначеЕсли Найти(ЗначениеПараметра,"^")=1 Тогда	
		//значение параметра  - формула
		Возврат Ложь;
	ИначеЕсли нрег(ЗначениеПараметра)="истина" Или нрег(ЗначениеПараметра)="ложь" Тогда
		Возврат Ложь;
		//Иначе 
		//	Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Неподдерживаемый тип параметра."+Символы.ПС+"Если это строка - заключите её в одинарные кавычки.",СтруктураИниФайла, СлужебнаяСтруктура);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		СбисТекстИсключениеПриПроверке(ИмяПараметра=Неопределено, ЗначениеПараметра=Неопределено, ТекстИсключения)
	СбисШаблонЗамены = "%Замена%";
	Если Найти(ТекстИсключения, СбисШаблонЗамены) Тогда
		Если ИмяПараметра = Неопределено Тогда
			Возврат (СтрЗаменить(ТекстИсключения, СбисШаблонЗамены, ""));			
		Иначе
			Возврат (СтрЗаменить(ТекстИсключения, СбисШаблонЗамены, СбисШаблонЗамены + ИмяПараметра + "."));
		КонецЕсли;
	Иначе
		//Возврат ("При обработке узла " + СбисШаблонЗамены + ИмяПараметра + " произошла неизвестная ошибка: " + ТекстИсключения);
		Возврат (ТекстИсключения + СбисШаблонЗамены + ИмяПараметра);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция		СбисОшибкаПроверки(ИмяПараметра,ЗначениеПараметра,ТекстОшибки, Объект=Неопределено,ИмяОбъекта=Неопределено,ПолныйПуть = Неопределено)
	НоваяСтруктура = Новый Структура();
	НоваяСтруктура.Вставить("ИмяПараметра", ИмяПараметра);
	НоваяСтруктура.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	НоваяСтруктура.Вставить("ТекстОшибки", ТекстОшибки);
	НоваяСтруктура.Вставить("ИмяОбъекта", ИмяОбъекта);
	НоваяСтруктура.Вставить("ПолныйПуть", ПолныйПуть);
	
	Если Объект = Неопределено Тогда
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда				
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект.ПолноеИмя());
	ИначеЕсли ТипЗнч(Объект) = Тип("КоллекцияОбъектовМетаданных") Тогда	
		СтруктураОбъект = Новый Структура();		
		Для СчМет = 0 по Объект.Количество()-1 Цикл
			СтруктураОбъект.Вставить(Объект.Получить(СчМет).Имя, Объект.Получить(СчМет).ПолноеИмя());
		КонецЦикла;	
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", СтруктураОбъект);
	КонецЕсли;
	Возврат НоваяСтруктура;	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура, Объект=Неопределено,ИмяОбъекта=Неопределено,ПолныйПуть = Неопределено)
	// добавляет в структуру файла настроек структуру с информацией об ошибке	
	
	НоваяСтруктура = СбисОшибкаПроверки(ИмяПараметра,ЗначениеПараметра,ТекстОшибки, Объект, ИмяОбъекта, ПолныйПуть);
	//СтруктураИниФайла.сбисОшибки.Добавить(НоваяСтруктура);
	Если ТипЗнч(СтруктураИниФайла[ИмяПараметра]) = Тип("Структура")
		И не СтруктураИниФайла[ИмяПараметра].Свойство("Ошибка") Тогда
		СлужебнаяСтруктура.Вставить("Ошибка", НоваяСтруктура);		
		СтруктураИниФайла[ИмяПараметра].Вставить("Ошибка", НоваяСтруктура);		
	КонецЕсли;
	Возврат Ложь;
КонецФункции	

&НаСервереБезКонтекста
Функция		ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра)
	
	// Функция проверяет значение параметра, вычисляемого с помощью функции	
	ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
	ПозицияТочки = Найти(ЗначениеПараметра, ".");
	Если  Найти(ЗначениеПараметра, ";") > 0 Тогда
		//В строке на вычисление не может быть ";"
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ВернутьТипСправочника(ОбъектТип) 
	// Получает объект метаданных справочника по типу	
	ид=0;
	Пока 1=1 Цикл
		Попытка
			ОбъектСпр=Метаданные.Справочники[ид];
		Исключение
			прервать;
		КонецПопытки;	
		темпСтр=ОбъектСпр.ПолноеИмя();
		ИмяРек=прав(темпСтр,СтрДлина(темпСтр)-11);
		ТипСтр=Тип("СправочникСсылка."+ИмяРек);
		Если ОбъектТип.СодержитТип(ТипСтр) Тогда
			возврат ОбъектСпр;
		КонецЕсли;	
		ид=ид+1;
	КонецЦикла;
	возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция		СформироватьСтруктуруОшибкиУзла(Узел)
	// Рекурсивно проверяет, есть ли в узле структуры ошибка, формирует только структуру узлов, в которых есть ошибки	
	СтруктураОшибки	= Новый	Структура();
	ЕстьОшибка		= Ложь;
	
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат СтруктураОшибки;
		//Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда//ошибка, вернуть ошибочный узел
		Возврат	Узел;
		//Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				СтруктураОшибки.Вставить(ЭлементУзла.Ключ, ЭлементУзла.Значение);
				Продолжить;
				//Возврат Истина;
			КонецЕсли;
			ВложенныеОшибки	=  СформироватьСтруктуруОшибкиУзла(ЭлементУзла.Значение);//Проверяем вложенный узел
			Если	ВложенныеОшибки.Количество()	Тогда 
				СтруктураОшибки.Вставить(ЭлементУзла.Ключ, ВложенныеОшибки);
				Если ЭлементУзла.Значение.Свойство("сбисПараметрыУзла") Тогда
					СтруктураОшибки[ЭлементУзла.Ключ].Вставить("сбисПараметрыУзла", ЭлементУзла.Значение.сбисПараметрыУзла);					
				КонецЕсли;
			КонецЕсли;
			//Если СформироватьСтруктуруОшибкиУзла(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
			//	Возврат Истина;
			//КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат	СтруктураОшибки;
	
	//Возврат ЕстьОшибка;
	
КонецФункции

