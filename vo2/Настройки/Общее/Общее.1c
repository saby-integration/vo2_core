
&НаСервереБезКонтекста
Процедура	сбисСкопироватьСтруктуру(СтруктураКуда, СтруктураОткуда)
	
	// Копирует СтруктураОткуда в СтруктураКуда	
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый	Массив);
			сбисСкопироватьМассив(СтруктураКуда[Элемент.Ключ], Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	сбисСкопироватьМассив(МассивКуда, знач МассивОткуда)									Экспорт
	
	//Копирует массив откуда в массив куда.
	Для Каждого Элемент Из МассивОткуда Цикл	
		Если ТипЗнч(Элемент) = Тип("Массив") Тогда
			МассивДобавить	= Новый	Массив;
			сбисСкопироватьМассив(МассивДобавить, Элемент);
			МассивКуда.Добавить(МассивДобавить);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтруктураДобавить	= Новый	Структура();
			сбисСкопироватьСтруктуру(СтруктураДобавить, Элемент);
			МассивКуда.Добавить(СтруктураДобавить);
		Иначе
			МассивКуда.Добавить(Элемент);			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет тип настройки по префиксу файла настроек	
&НаСервереБезКонтекста
Функция		ОпределитьТипНастроекПоПрефиксу(ПрефиксСервис, ПрефиксПолный)							Экспорт

	Префикс	= СтрЗаменить(ПрефиксПолный, ПрефиксСервис, "");
	Конфигурация= "";
	
	Если		ВРег(Лев(Префикс,3))	= "БУХ" Тогда
		Конфигурация	= "Бухгалтерия предприятия";
		Версия	= Сред(Префикс, 4);
		Если		Сред(Префикс, 4, 1)	= "1"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 1.6"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция " + Сред(Префикс, 4, 1) +".0";
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,2))	= "УТ" Тогда	
		Конфигурация	= "Управление торговлей";
		Версия	= Сред(Префикс, 3);
		Если	Сред(Префикс, 3, 2)	= "11"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 11";
			Если		Сред(Префикс, 5, 1)	= "2"	Тогда
				Конфигурация	= Конфигурация	+ ".2 (не обновляется)";
			ИначеЕсли	Сред(Префикс, 5, 2)	= "-2"	Тогда
				Конфигурация	= Конфигурация	+ ".2";
				Префикс	= Сред(Префикс, Найти(Префикс, "-")+1);
			КонецЕсли;
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 10.3";
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,3))	= "УПП" Тогда	
		Конфигурация = "Управление производственным предприятием, редакция 1.3";
		Версия	= Сред(Префикс, 4);
	ИначеЕсли	ВРег(Лев(Префикс,2))	= "КА" Тогда	
		Конфигурация = "Комплексная автоматизация";
		Версия	= Сред(Префикс, 3);
		Если	Сред(Префикс, 3, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0";
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.1";
		КонецЕсли;
	ИначеЕсли ВРег(Лев(Префикс,3)) = "КЗП" Тогда
		Конфигурация = СтрЗаменить("КАМИН:Зарплата. Версия {0}.0", "{0}", Сред(Префикс,4,1));	
	ИначеЕсли	ВРег(Лев(Префикс,3))	= "БГУ" Тогда	
		Конфигурация = "Бухгалтерия государственного учреждения";
		Версия	= Сред(Префикс, 4);
		Если	Сред(Префикс, 4, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.0"
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,4)) = "БСХП" Тогда 
		Конфигурация = "Бухгалтерия сельскохозяйственного предприятия, редакция " + Сред(Префикс, 5, 1) + ".0";
		Версия	= Сред(Префикс, 5);
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "УНФ" Тогда 
		Конфигурация = "Управление небольшой фирмой, редакция " + СтрЗаменить(Сред(Префикс, 4, 3), "-", ".");
		Версия	= Сред(Префикс, 4);
		Если	Сред(Префикс, 4, 2)	= "15"	Тогда
			Конфигурация	= Конфигурация	+ " (не обновляется)";
		Иначе
			Префикс	= Сред(Префикс, Найти(Префикс, "-")+1);
		КонецЕсли;
	ИначеЕсли ВРег(Лев(Префикс,4)) = "РОЗН" Тогда 
		Конфигурация = "Розница";
		Версия = Сред(Префикс, 5);
		Если Лев(Версия, 1)	= "1"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 1.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция " + СтрЗаменить(Лев(Версия, 3),"-",".");
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "ЗУП" Тогда 
		Конфигурация = "Зарплата и Управление Персоналом, редакция 2.5";
		Версия	= Сред(Префикс, 4);		
	ИначеЕсли	Не	ПустаяСтрока(ПрефиксСервис)
			И	ПрефиксСервис	= ПрефиксПолный	Тогда
		Конфигурация = "Пользовательская конфигурация";
		Версия	= Сред(Префикс, Найти(Префикс, "-")+1);
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "ERP" Тогда 
		Конфигурация = "ERP управление предприятием, редакция 2";
		Версия	= Сред(Префикс, 4);	
	ИначеЕсли ВРег(Лев(Префикс, 4))  = "ШТП5" Тогда //d.ch 15.08.2019
		Конфигурация = "Штрих-М: Торговое предприятие 5"; 
		Версия = Сред(Префикс, 4);
	ИначеЕсли ВРег(Лев(Префикс, 4)) = "ШТП7" Тогда //d.ch 13.01.2020
		Конфигурация = "Штрих-М: Торговое предприятие 7";
		Версия = Сред(Префикс, 4);
	ИначеЕсли ВРег(Лев(Префикс,2)) = "АА" Тогда //bav 11.09.2019
		Конфигурация = "Альфа-Авто, редакция 5.1";
		Версия = Сред(Префикс, 3);
	ИначеЕсли ВРег(Лев(Префикс,5)) = "ЗИКГУ" Тогда
		Конфигурация = "Зарплата и кадры государственного учреждения";
		Версия = Сред(Префикс, 6);
	ИначеЕсли ВРег(Лев(Префикс,3)) = "УХ3" Тогда // alo 16.09.2019
		Конфигурация = "Управление холдингом, редакция 3.0";
		Версия = Сред(Префикс, 3);
	ИначеЕсли ВРег(Лев(Префикс,3)) = "ДУМ" Тогда //rav 04.07.2020
		Конфигурация = "ДАЛИОН: Управление магазином";
		Версия = Сред(Префикс, 4);
		Если Лев(Версия, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.2"
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,6)) = "АУНБУХ" Тогда	
		Конфигурация = "Аренда и управление недвижимостью для ""1С:Бухгалтерия 8""";
		Версия	= Сред(Префикс, 7);
	ИначеЕсли	ВРег(Лев(Префикс,4))	= "ПСУФ" Тогда
		Конфигурация	= "Подрядчик строительства. Управление финансами, редакция " + Сред(Префикс, 5, 1) +".0";
		Версия	= Сред(Префикс, 5);
	Иначе 
		Конфигурация = "";
		Версия	= "";
	КонецЕсли;	
	
	Если	Булево(Найти(Версия, "-")) Тогда
		Конфигурация	= Конфигурация	+ ", версия "	+ СтрЗаменить(Версия,"-",".")+" и выше";
	КонецЕсли;
	
	Возврат	Конфигурация;
	
КонецФункции	

&НаСервереБезКонтекста
Функция		ПолучитьМассивФайловДляКонфигурации(знач СписокТиповНастроек, ПрефиксСервис, ДопПараметры=Неопределено)	Экспорт
	// Получает список доступных настроек для текущей конфигурации	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ПрефиксТекущейКонфигурации	= ?(ДопПараметры.Свойство("ПрефиксТекущейКонфигурации"), ДопПараметры.ПрефиксТекущейКонфигурации, "");
	ВерсияТекущейКонфигурации	= ?(ДопПараметры.Свойство("ВерсияТекущейКонфигурации"), ДопПараметры.ВерсияТекущейКонфигурации, "");
	ЗначениеПредставление		= ?(ДопПараметры.Свойство("ЗначениеПредставление"), ДопПараметры.ЗначениеПредставление, "Значение");
	
	Если Не ЗначениеЗаполнено(СписокТиповНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПустаяСтрока(ПрефиксТекущейКонфигурации) Тогда
		ПрефиксТекущейКонфигурации = ОпределитьТипПодсистемы(Метаданные, Ложь);
	КонецЕсли;
	
	СписокТиповНастроекДляКонфигурации = Новый СписокЗначений;
	ПрефиксДляПоиска = ПрефиксСервис + ПрефиксТекущейКонфигурации;
	ДлинаПрефикса = СтрДлина(ПрефиксДляПоиска);
	Для Каждого Элемент Из СписокТиповНастроек Цикл
		Если Лев(Элемент.Представление,ДлинаПрефикса) = ПрефиксДляПоиска Тогда
			//Передаем представление версии конфигураций с клиента. В случае, если нет, пробуем определить
			СбисПредставлениеДляСортировки = Неопределено;
			Если Не Элемент.Значение.Свойство("ПредставлениеВерсии", СбисПредставлениеДляСортировки) Тогда
				СбисПредставлениеДляСортировки = Сред(Элемент.Представление,ДлинаПрефикса+1);
			КонецЕсли;
			СписокТиповНастроекДляКонфигурации.Добавить(Элемент.Представление, СбисЗаполнитьПрефиксНулями(СбисПредставлениеДляСортировки));
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ВерсияТекущейКонфигурации) Тогда
		ВерсияТекущейКонфигурации = СтрЗаменить(ОпределитьВерсиюСистемы(Метаданные.Версия),".","-"); 
	КонецЕсли;
	СписокТиповНастроекДляКонфигурации.Добавить("Текущая конфигурация", СбисЗаполнитьПрефиксНулями(ВерсияТекущейКонфигурации)+"-");
	СписокТиповНастроекДляКонфигурации.СортироватьПоПредставлению();
	ИндексТекущий = СписокТиповНастроекДляКонфигурации.Индекс(СписокТиповНастроекДляКонфигурации.НайтиПоЗначению("Текущая конфигурация"));
	Если ИндексТекущий>0 Тогда
		ПодходящаяВерсия = СписокТиповНастроекДляКонфигурации[ИндексТекущий-1].Значение;	
		Для Каждого Элемент Из СписокТиповНастроек Цикл
			Если Элемент.Представление = ПодходящаяВерсия Тогда
				Возврат Элемент[ЗначениеПредставление];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПрефиксСервис = "Com1C82" Тогда
		//Префикс - "Com1C82" и настроек нет. А значит что это пользовательская конфа. У неё должен быть пустой subsystem
		Если СписокТиповНастроек.Количество() Тогда
			шаг = СписокТиповНастроек.Количество();
			Пока шаг <> 0 Цикл
				шаг = шаг - 1;
				Если СписокТиповНастроек[шаг].Значение.ПараметрыКонфигурации.subsystem = "" Тогда
					Возврат СписокТиповНастроек[шаг][ЗначениеПредставление];
				КонецЕсли;
			КонецЦикла;
			Возврат	СписокТиповНастроек[0][ЗначениеПредставление];
		Иначе
			Возврат	Неопределено;
		КонецЕсли;
	Иначе
		Возврат СписокТиповНастроек[6][ЗначениеПредставление];
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПолучитьПрефиксФайловНовойВерсииНастроек(знач СписокТиповНастроек, ПрефиксСервис = "ВО82", ДопПараметры=Неопределено)	Экспорт
	// Работает так же, как и предыдущая функция, но возвращает только префикс актуальных настроек	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ПрефиксТекущейКонфигурации	= ?(ДопПараметры.Свойство("ПрефиксТекущейКонфигурации"), ДопПараметры.ПрефиксТекущейКонфигурации, "");
	ВерсияТекущейКонфигурации	= ?(ДопПараметры.Свойство("ВерсияТекущейКонфигурации"), ДопПараметры.ВерсияТекущейКонфигурации, "");
	ЗначениеПредставление		= ?(ДопПараметры.Свойство("ЗначениеПредставление"), ДопПараметры.ЗначениеПредставление, "Значение");
	
	Если Не ЗначениеЗаполнено(СписокТиповНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПустаяСтрока(ПрефиксТекущейКонфигурации) Тогда
		ПредставлениеПодсистемы = ОпределитьТипПодсистемы(Метаданные, Ложь);
		ПрефиксТекущейКонфигурации = ПрефиксСервис + ПредставлениеПодсистемы;
	КонецЕсли;
	
	СписокТиповНастроекДляКонфигурации = Новый СписокЗначений;
	ДлинаПрефикса = СтрДлина(ПрефиксТекущейКонфигурации);
	Для Каждого Элемент Из СписокТиповНастроек Цикл
		Если Лев(Элемент.Представление,ДлинаПрефикса) = ПрефиксТекущейКонфигурации Тогда
			//Передаем представление версии конфигураций с клиента. В случае, если нет, пробуем определить
			СбисПредставлениеДляСортировки = Неопределено;
			Если Не Элемент.Значение.Свойство("ПредставлениеВерсии", СбисПредставлениеДляСортировки) Тогда
				СбисПредставлениеДляСортировки = Сред(Элемент.Представление,ДлинаПрефикса+1);
			КонецЕсли;
			СписокТиповНастроекДляКонфигурации.Добавить(Элемент.Представление, СбисЗаполнитьПрефиксНулями(СбисПредставлениеДляСортировки));
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ВерсияТекущейКонфигурации) Тогда
		ВерсияТекущейКонфигурации = СтрЗаменить(ОпределитьВерсиюСистемы(Метаданные.Версия),".","-"); 
	КонецЕсли;
	СписокТиповНастроекДляКонфигурации.Добавить("Текущая конфигурация", СбисЗаполнитьПрефиксНулями(ВерсияТекущейКонфигурации)+"-");
	СписокТиповНастроекДляКонфигурации.СортироватьПоПредставлению();
	ИндексТекущий = СписокТиповНастроекДляКонфигурации.Индекс(СписокТиповНастроекДляКонфигурации.НайтиПоЗначению("Текущая конфигурация"));
	Если ИндексТекущий>0 Тогда
		ПодходящаяВерсия = СписокТиповНастроекДляКонфигурации[ИндексТекущий-1].Значение;
		Возврат ПодходящаяВерсия;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция		СбисЗаполнитьПрефиксНулями(Префикс)														Экспорт
	ФорматныйПрефикс = "";
	ВерсииКонф = РазбитьСтрокуВМассив(Префикс,"-");
	Для Каждого Элемент Из ВерсииКонф Цикл
		ФорматныйПрефикс = ФорматныйПрефикс + сбисЗаполнитьСлева(Элемент, "0", 4)+"-";	
	КонецЦикла;
	ФорматныйПрефикс = Лев(ФорматныйПрефикс, СтрДлина(ФорматныйПрефикс)-1);
	Возврат ФорматныйПрефикс;
КонецФункции

&НаСервереБезКонтекста
функция		РазбитьСтрокуВМассив(знач Строка, Разделитель)											Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции

&НаСервереБезКонтекста
функция		сбисЗаполнитьСлева(ИсходнаяСтрока, Заполнитель, Длина)									Экспорт
	// Функция заполняет строку слева указанным заполнителем до указанной длины	
	Результат = ИсходнаяСтрока;
	КолЗаполнителей = Длина-СтрДлина(ИсходнаяСтрока);
	Если КолЗаполнителей>0 Тогда
		Для сч = 1 По КолЗаполнителей Цикл
			Результат = строка(Заполнитель)+строка(Результат);	
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция		ТабДоступныеИниФайлыОбновить(Конфигурация, ФормаТабУстФайлы)							Экспорт
	// Функция возвращает массив доступных файлов настроек для выбранной конфигурации	
	МассивДоступныхИниФайлов = Новый Массив();
	
	Если Конфигурация<>Неопределено Тогда
		
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ТабУстФайлы = ФормаТабУстФайлы.Выгрузить(, "ИмяФайла");
		Иначе
			ТабУстФайлы = ФормаТабУстФайлы;
		КонецЕсли;	
		СтруктураФайлов = Конфигурация;
		Для Каждого Элемент Из СтруктураФайлов Цикл			
			НайденнаяСтрока			= ТабУстФайлы.Найти(Элемент.Имя, "ИмяФайла"); 
			РазделительРасширения	= Найти(Элемент.Имя,".");
			Если	РазделительРасширения	= 0	Тогда
				ИмяФайлаБезРасширения	= Элемент.ИмяБезРасширения;
			Иначе
				ИмяФайлаБезРасширения	= Лев(Элемент.Имя,РазделительРасширения-1);
			КонецЕсли;
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Имяфайла",				Элемент.Имя);
			НоваяСтрока.Вставить("ИмяФайлаБезРасширения",	ИмяФайлаБезРасширения);
			НоваяСтрока.Вставить("ПолноеИмя",				Элемент.ПолноеИмя);
			Если НайденнаяСтрока<>Неопределено Тогда
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Истина);
			Иначе
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
			КонецЕсли;	
			МассивДоступныхИниФайлов.Добавить(НоваяСтрока);	
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивДоступныхИниФайлов;	
	
КонецФункции

&НаСервере
Функция		СформироватьМассивТабДоступныеИниФайлыОбновить(Конфигурация, знач УстановленныеИни)		Экспорт
	// Функция возвращает массив доступных файлов настроек для выбранной конфигурации	
	
	Если Конфигурация=Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
		
	МассивДоступныхИниФайлов = Новый Массив();
	
	Если	ТипЗнч(УстановленныеИни)= Тип("ДанныеФормыКоллекция")
		И	ТипЗнч(ЭтаФорма)		= Тип("УправляемаяФорма") Тогда
		ТабУстФайлы = УстановленныеИни.Выгрузить(, "ИмяФайла");
	Иначе
		ТабУстФайлы = сбисПростыеДанныеВТаблицу(УстановленныеИни);
	КонецЕсли;
	Если	ТабУстФайлы.Количество()	Тогда
		ИскатьСтроку	= Истина;
	Иначе
		ИскатьСтроку	= Ложь;
	КонецЕсли;
	СтруктураФайлов	= Конфигурация;
	Для Каждого Элемент Из СтруктураФайлов Цикл			
		НоваяСтрока = Новый Структура();
		
		Если	ИскатьСтроку	Тогда
			НайденнаяСтрока = ТабУстФайлы.Найти(Элемент.Имя, "ИмяФайла");
			Если НайденнаяСтрока<>Неопределено Тогда
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Истина);
			Иначе
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
			КонецЕсли;
		Иначе
			НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
		КонецЕсли;
			
		РазделительРасширения	= Найти(Элемент.Имя,".");
		Если	РазделительРасширения	= 0	Тогда
			ИмяФайлаБезРасширения	= Элемент.ИмяБезРасширения;
		Иначе
			ИмяФайлаБезРасширения	= Лев(Элемент.Имя,РазделительРасширения-1);
		КонецЕсли;
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Имя);
		НоваяСтрока.Вставить("ИмяФайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("ПолноеИмя",				Элемент.ПолноеИмя);
		МассивДоступныхИниФайлов.Добавить(НоваяСтрока);	
		
	КонецЦикла;	
	
	Возврат МассивДоступныхИниФайлов;	
	
КонецФункции

&НаКлиенте
Функция		НайтиВыбраннуюКонфигурациюНастроек(СтруктураКонфигураций, ЗначениеКонфигурации)			Экспорт
	
	//Пока так криво ищем выбранную конфу
	НашаКонфигурация = Неопределено;
	Для Каждого СтрокаСтруктур из СтруктураКонфигураций Цикл
		Если СтрокаСтруктур.Значение.НазываниеКонфигурации = ЗначениеКонфигурации Тогда
			НашаКонфигурация = СтрокаСтруктур.Значение;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат	НашаКонфигурация;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПростыеДанныеВТаблицу(ИсходныеДанные, ПередатьНаКлиент=Ложь)
	
	ДанныеВозврата = Новый ТаблицаЗначений();
	Если ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		Если	ИсходныеДанные.Количество()
			И	ТипЗнч(ИсходныеДанные[0]) = Тип("Структура") Тогда
			Для	Каждого	ЭлементМассива Из ИсходныеДанные Цикл
				НоваяСтрока	= ДанныеВозврата.Добавить();
				Для	Каждого КлючИЗначение Из ЭлементМассива Цикл
					Если ДанныеВозврата.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
						МассивТипов	= Новый	Массив;
						МассивТипов.Добавить(ТипЗнч(КлючИЗначение.Значение));
						ДанныеВозврата.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(МассивТипов));
					КонецЕсли;
					НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ДанныеВозврата = ИсходныеДанные;	
	КонецЕсли;
		
	Если ПередатьНаКлиент Тогда
		ДанныеВозврата = ЗначениеВСтрокуВнутр(ДанныеВозврата);
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция		СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек)								Экспорт//Вынесено в общее, для возмности формирования списка конфигураций при получении настроек с сервера и установки конфигурации, которая указана как базовая
	
	СтруктураКонфигураций	= Новый Структура();
	СписокВыбора			= Новый	Массив();
	Для каждого СтрокаНастроек из СписокТиповНастроек Цикл
		НазываниеКонфигурации	= ОпределитьТипНастроекПоПрефиксу(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, СтрокаНастроек.Представление);
		СписокВыбора.Добавить(НазываниеКонфигурации);
		
		СтруктураОднойКонфигурации	= Новый Структура();
		СтруктураОднойКонфигурации.Вставить("НазываниеКонфигурации",	НазываниеКонфигурации);
		СтруктураОднойКонфигурации.Вставить("СтруктураКонфигурации",	СтрокаНастроек.Значение.МассивИни);
		СтруктураОднойКонфигурации.Вставить("ПараметрыКонфигурации",	СтрокаНастроек.Значение.ПараметрыКонфигурации);
		
		СтруктураКонфигураций.Вставить("Конфигурация" + Число(СписокТиповНастроек.Индекс(СтрокаНастроек) + 1),	СтруктураОднойКонфигурации);
	КонецЦикла;
	Результат	= Новый	Структура("СписокВыбора, СтруктураКонфигураций", СписокВыбора, СтруктураКонфигураций);
		
	Возврат	Результат
	
КонецФункции	
	
&НаКлиенте
Процедура	ОчиститьСобранныеНастройки(Кэш)															Экспорт 
	
	//Определяет данные в кэше, которые надо удалить при перезапуске, для повторного сбора
	КлючиКэшУдалить	= Новый	Структура("XSLT, Конфигурация");
	//Определяет данные в кэше, которые надо установить в значения по-умолчанию при перезапуске
	КлючиКэшОчистить= Новый Структура("ини, ИниВПорядке", Новый Структура, Ложь);
	
	Для	Каждого	КлючИЗначение	Из	КлючиКэшУдалить		Цикл
		Если Кэш.Свойство(КлючИЗначение.Ключ) Тогда
			Кэш.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для	Каждого	КлючИЗначение	Из	КлючиКэшОчистить	Цикл
		Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки") Тогда
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
	КонецЕсли;
	
	Кэш.ГлавноеОкно.Конфигурация = "";
	
КонецПроцедуры	

//Копирует и возвращает структуру файла(ов) настроек без системных и рассчитанных значений узлов
//Функция является дублем аналогичной функции из формы настроек каталога с добавлением проверки на флаг формата и рассчитанного значения
&НаКлиенте
Функция		ОчиститьСтруктуруИниОтСлужебныхЗначений(СлужебнаяСтруктура)		Экспорт
	НаборСлужебныхКлючей = Новый Массив;
	НаборСлужебныхКлючей.Добавить("ошибка");
	НаборСлужебныхКлючей.Добавить("формат2016");
	НаборСлужебныхКлючей.Добавить("формат2019");
	НаборСлужебныхКлючей.Добавить("форматукд2020");
	НаборСлужебныхКлючей.Добавить("входящийконтекст");
	НаборСлужебныхКлючей.Добавить("использоватьштрихкодыноменклатурыконтрагентов");
	НаборСлужебныхКлючей.Добавить("рассчитанноезначение");
	НаборСлужебныхКлючей.Добавить("сбисавтообновление");
	НаборСлужебныхКлючей.Добавить("сбисестьизменения");
	НаборСлужебныхКлючей.Добавить("сбисестьтиповая");
	НаборСлужебныхКлючей.Добавить("сбисимяфайла");
	НаборСлужебныхКлючей.Добавить("сбисошибки");
	НаборСлужебныхКлючей.Добавить("сбисполноеимяфайла");
	НаборСлужебныхКлючей.Добавить("сбиспараметрыузла");
	НаборСлужебныхКлючей.Добавить("сбисстандартная");
	НаборСлужебныхКлючей.Добавить("сбиспользовательская");
	Возврат ОчиститьСтруктуруИниОтСлужебныхЗначенийНаКлиенте(СлужебнаяСтруктура, НаборСлужебныхКлючей)
КонецФункции

&НаКлиенте
Функция		ОчиститьСтруктуруИниОтСлужебныхЗначенийНаКлиенте(СлужебнаяСтруктура, НаборСлужебныхКлючей)
	//Копирует и возвращает структуру файла(ов) настроек без системных и рассчитанных значений узлов
	//Функция является дублем аналогичной функции из формы настроек каталога с добавлением проверки на флаг формата и рассчитанного значения
	НоваяСлужебнаяСтруктура	= Новый	Структура();
	Для Каждого Узел Из СлужебнаяСтруктура Цикл
		СбисКлюч = НРег(Узел.Ключ);
		Если Не НаборСлужебныхКлючей.Найти(НРег(Узел.Ключ)) = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Узел.Значение) = Тип("Структура") Тогда
			НоваяСлужебнаяСтруктура.Вставить(Узел.Ключ, ОчиститьСтруктуруИниОтСлужебныхЗначений(Узел.Значение));
		Иначе
			НоваяСлужебнаяСтруктура.Вставить(Узел.Ключ, Узел.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат НоваяСлужебнаяСтруктура;
	
КонецФункции

//Структура с параметрами для работы extSDK. Параметры получаются для переданных параметров конфы.
//Вынесено в общее для сбора всех данных на сервере
&НаСервереБезКонтекста
Функция		ОпределитьПараметрыКонфигурации(ПараметрыСистемы, Отказ)								Экспорт
	
	Если Отказ Тогда
		Возврат	Ложь;
	КонецЕсли;
	РазделительВерсии = ".";
	ВерсияСырая = ПараметрыСистемы.Конфигурация.Версия;
	Результат = Новый Структура("subsystem,version");
	Результат.Вставить("subsystem", ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.Конфигурация.КраткаяИнформация, ВерсияСырая, Отказ));
	Если Найти(Результат.subsystem, "-") Тогда
		ВерсияСырая = Результат.subsystem;
		РазделительВерсии = "-";
		Результат.Вставить("subsystem", СтрПолучитьСтроку(СтрЗаменить(Результат.subsystem, "-", Символы.ПС),1));
	КонецЕсли;
	//Если это пользовательская конфа, то версию ставим от пользовательской.
	Если ПустаяСтрока(Результат.subsystem) Тогда
		Результат.Вставить("version",	"0.0.0.1");
	Иначе
		Результат.Вставить("version",	ОпределитьВерсиюСистемы(ВерсияСырая,Новый Структура("Разделитель", РазделительВерсии)));
	КонецЕсли;

	Возврат	Результат;	
	
КонецФункции

//Возвращает параметры системы, устанавливаемой по-умолчаению
&НаСервереБезКонтекста
Функция		СистемаПо_Умолчанию()																	Экспорт
	
	Возврат Новый Структура("subsystem,version","БУХ3","3.0.51.21");
	
КонецФункции

//Формирует префикс системы, вида "service" + "subsystem" + остаток "version"
&НаСервереБезКонтекста
Функция		СформироватьПрефиксСистемы(ПараметрыКонфигурации) 										Экспорт
		
	ВерсияКПрефиксу	= "";
	
	Если Не ПустаяСтрока(ПараметрыКонфигурации.subsystem) Тогда
		МногоуровневыйПрефикс	= СтрЗаменить(ПараметрыКонфигурации.subsystem,	"-", Символы.ПС);
		МногоуровневаяВерсия	= ?(ПараметрыКонфигурации.Свойство("version"), СтрЗаменить(ПараметрыКонфигурации.version,	".", Символы.ПС), "");
		Для	шаг = 1		По СтрЧислоСтрок(МногоуровневыйПрефикс)	Цикл
			СтрокаВерсии = СтрПолучитьСтроку(МногоуровневаяВерсия, шаг);
			Если	СтрокаВерсии = Прав(СтрПолучитьСтроку(МногоуровневыйПрефикс,шаг), СтрДлина(СтрокаВерсии))	Тогда
				ВерсияКПрефиксу	= "-";
			Иначе
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Для	шаг = шаг	По СтрЧислоСтрок(МногоуровневаяВерсия)	Цикл
			ВерсияКПрефиксу	= ВерсияКПрефиксу	+ СтрПолучитьСтроку(МногоуровневаяВерсия, шаг) + "-";
		КонецЦикла;
	КонецЕсли;
	Префикс = Неопределено;
	Если Не ПараметрыКонфигурации.Свойство("service", Префикс) Тогда
		Префикс = "";
	КонецЕсли;
	Префикс = Префикс + ПараметрыКонфигурации.subsystem + Лев(ВерсияКПрефиксу, СтрДлина(ВерсияКПрефиксу)-1);
	Возврат	Префикс;

КонецФункции

//Функция отсеивает не числовые символы, приводит версию к стандарту 1С
&НаСервереБезКонтекста
Функция		ОпределитьВерсиюСистемы(ВерсияПоиск, ДополнительныеПараметры=Неопределено)
	//Убираем не числовые символы из версии системы, сохраняя разрядность
	ДопустимыеСимволы	= "0123456789";
	РазделительПоиск	= Неопределено;
	РазделительОсновной	= ".";
	РазделителиАльт		= ";/- _*,\:№";//Возможные разделители в версии, которые прописаны не по формату 1С. 
	ЧислоРазрядов		= 4;
	Заполнитель			= "0";
	ВерсияСистемы		= "";
	Если		ДополнительныеПараметры = Неопределено
		Или Не	ДополнительныеПараметры.Свойство("Разделитель", РазделительПоиск) Тогда
		РазделительПоиск = РазделительОсновной;
	КонецЕсли;
	
	МногоуровневаяВерсия = СтрЗаменить(ВерсияПоиск, РазделительПоиск, Символы.ПС);
	
	Для	шагстрок = 1 По ЧислоРазрядов Цикл
		СтрокаРазряда	= СтрПолучитьСтроку(МногоуровневаяВерсия, шагстрок);
		шаг				= 1;
		Пока шаг	<= СтрДлина(СтрокаРазряда)	Цикл
			ТестСимвол	= Сред(СтрокаРазряда, шаг, 1);
			Если		Булево(Найти(ДопустимыеСимволы,ТестСимвол)) Тогда//Если допустимый символ, то ничего не делаем
				шаг	= шаг + 1;
				Продолжить;
			ИначеЕсли	Булево(Найти(РазделителиАльт,ТестСимвол)) Тогда//Если это возможный разделитель, то как разряд берём все, чтоб было до него
				СтрокаРазряда = Лев(СтрокаРазряда, шаг - 1);
				Прервать;
			КонецЕсли;
			СтрокаРазряда	= Лев(СтрокаРазряда, шаг - 1)	+ Сред(СтрокаРазряда, шаг + 1);
		КонецЦикла;
		ВерсияСистемы	= ВерсияСистемы	+ ?(ПустаяСтрока(ВерсияСистемы), "", РазделительОсновной)	+ ?(ПустаяСтрока(СтрокаРазряда), Заполнитель, СтрокаРазряда);
	КонецЦикла;
	
	Возврат	ВерсияСистемы;
	
КонецФункции

//Префикс конфы по названию. Изменено для совместимости и универсализации поиска по полному и сокращенному наименованию метаданных.
&НаСервереБезКонтекста
Функция		ОпределитьТипПодсистемы(ПараметрыСистемыПараметр = Неопределено, Отказ = Ложь) Экспорт
	Если ПараметрыСистемыПараметр = Неопределено Тогда
		ПараметрыСистемы = Метаданные;
	Иначе
		ПараметрыСистемы = ПараметрыСистемыПараметр;
	КонецЕсли;
	
	ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.Имя, ПараметрыСистемы.Версия, Ложь);
	Если ПустаяСтрока(ПредставлениеПодсистемы) И Не ПустаяСтрока(ПараметрыСистемы.КраткаяИнформация) Тогда
		ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.КраткаяИнформация, ПараметрыСистемы.Версия, Ложь);
	КонецЕсли;
	Если ПустаяСтрока(ПредставлениеПодсистемы) И Не ПустаяСтрока(ПараметрыСистемы.ПодробнаяИнформация) Тогда
		ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.ПодробнаяИнформация, ПараметрыСистемы.Версия, Ложь);
	КонецЕсли;
	Если ПустаяСтрока(ПредставлениеПодсистемы) Тогда//Система по-умолчанию - БУХ3 последней версии.
		ПараметрыСистемыПо_Умолчанию = СистемаПо_Умолчанию();
		ПредставлениеПодсистемы = СформироватьПрефиксСистемы(ПараметрыСистемыПо_Умолчанию);
	КонецЕсли;
	Возврат ПредставлениеПодсистемы;
КонецФункции

//Функция по параметрам ини определяет её тип и направление обрабатываемого документа
&НаКлиенте                                  
Функция		ОпределитьПараметрыИни(Кэш, ЗначениеИни, ИмяИни) Экспорт
	Результат = Новый Структура("Тип, Направление, Название", "Выгрузка", "Исходящий", ИмяИни);
	ЗначениеКлюча = СтрЗаменить(ИмяИни, "_", Символы.ПС);
	Если СтрЧислоСтрок(ЗначениеКлюча) = 5 Тогда
		//Всё описано в имени ини.
		Результат.Тип = СтрПолучитьСтроку(ЗначениеКлюча, 1);
		Результат.Направление = СтрПолучитьСтроку(ЗначениеКлюча, 2);
		Результат.Название = Сред(ИмяИни, СтрДлина(Результат.Тип + Результат.Направление) + 3);
	ИначеЕсли Не	ЗначениеИни = Неопределено
			И		ЗначениеИни.Свойство("мДокумент") Тогда
		Результат.Тип = "Загрузка";
		Результат.Направление = "Входящий";
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция		ОтсеятьЧисла(Строка) Экспорт
	
	СимволыФильтра = "0123456789";
	Результат = Строка;
	шаг = 1;
	Пока шаг <= СтрДлина(Результат)	Цикл
		ТекСимвол = Сред(Результат, шаг, 1);
		Если Не	ПустаяСтрока(ТекСимвол)
			И	Булево(Найти(СимволыФильтра,ТекСимвол)) Тогда
			Результат = Лев(Результат, шаг-1) + Сред(Результат, шаг+1);
			Продолжить;
		КонецЕсли;
		шаг = шаг+1;
	КонецЦикла;
	Возврат	Результат;
	
КонецФункции

//Префикс конфы по названию. Изменено для совместимости и универсализации поиска по полному и сокращенному наименованию метаданных.
&НаСервереБезКонтекста
Функция		ПолучитьПрефиксСистемыПоНазванию(Название, Версия, Отказ)
	
	ТипПодсистемы			= "";
	НомерРедакции			= "";
	МногострочноеНазвание	= СтрЗаменить(Название, " ", Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(МногострочноеНазвание) Цикл
		ТекСтрока = СтрПолучитьСтроку(МногострочноеНазвание, Счетчик);
		Если	ТекСтрока	= "редакция"  или ТекСтрока    = "ред."	Тогда
			НомерРедакции	= СтрПолучитьСтроку(МногострочноеНазвание, Счетчик	+ 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НомерРедакции	= СтрЗаменить(НомерРедакции, ".", "");
	НазваниеАнализ	= НРег(Название);	
	Если		Лев(НазваниеАнализ, 11) = "бухгалтерия" Тогда
		Если		Найти(НазваниеАнализ, "государственного") Тогда
			ТипПодсистемы	= "БГУ"	+ ?(Лев(НомерРедакции,1)="1", "", Лев(НомерРедакции,1));
		ИначеЕсли		Найти(НазваниеАнализ, "сельскохозяйственного") Тогда
			ТипПодсистемы	= "БСХП"	+ ?(Лев(НомерРедакции,1)="1", "", Лев(НомерРедакции,1));	
		ИначеЕсли   Найти(НазваниеАнализ, "предприятия") Тогда
			ТипПодсистемы	= "БУХ";
			Если Не Лев(НомерРедакции,1) = "1" Тогда
				ТипПодсистемы = ТипПодсистемы + Лев(НомерРедакции,1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(НазваниеАнализ, "бухгалтерия сельскохозяйственного") Тогда //  НазваниеАнализ = 1с:предприятие 8. бухгалтерия сельскохозяйственного предприятия, редакция 3.0
		ТипПодсистемы	= "БСХП"+ Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ, "холдингом") Тогда // alo 16.09.2019
		ТипПодсистемы = "УХ" + Лев(НомерРедакции,1);
	ИначеЕсли	Найти(НазваниеАнализ, "управление") Тогда
		Если		Найти(НазваниеАнализ, "производственным") Тогда
			ТипПодсистемы	= "УПП";
		ИначеЕсли   Найти(НазваниеАнализ, "торговлей") Тогда
			ТипПодсистемы	= "УТ"	+ Лев(НомерРедакции,2);
		ИначеЕсли	(	Найти(НазваниеАнализ, "небольшой")
					Или	Найти(НазваниеАнализ, "нашей"))
				И	Найти(НазваниеАнализ, "фирмой")	Тогда
			ТипПодсистемы	= "УНФ";//	+ Лев(НомерРедакции,2);
		ИначеЕсли	Найти(НазваниеАнализ, "предприятием")
				И	Найти(НазваниеАнализ, "erp")
				И	Лев(Версия,1) = "2" Тогда
			ТипПодсистемы	= "ERP";
		ИначеЕсли	Найти(НазваниеАнализ, "далион")
				И	Найти(НазваниеАнализ, "магазином") Тогда
			ТипПодсистемы = "ДУМ" + Лев(НомерРедакции,1);
		ИначеЕсли	Найти(НазваниеАнализ, "недвижимостью")
				И	Найти(НазваниеАнализ, "аренда") Тогда
			ТипПодсистемы = "АУНБУХ"+ Лев(НомерРедакции,1);
		ИначеЕсли	Найти(НазваниеАнализ, "подрядчик строительства") Тогда
			ТипПодсистемы = "ПСУФ"+ Лев(НомерРедакции,1);
		КонецЕсли;
	ИначеЕсли	Найти(НазваниеАнализ, "комплексная") Тогда
		НомерРедакции = Лев(Версия, 3);
		ТипПодсистемы	= "КА"	+ ?(Лев(НомерРедакции,1)="1", "", Лев(НомерРедакции,1));
	ИначеЕсли	Найти(НазваниеАнализ, "зарплата")
			И	Найти(НазваниеАнализ, "управление") Тогда
		ТипПодсистемы	= "ЗУП";
	ИначеЕсли	Найти(НазваниеАнализ, "розница") Тогда
		ТипПодсистемы	= "РОЗН"	+ Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ, "общепит1с") Тогда
		ТипПодсистемы = "БУХ" + Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ,"штрих-м: ") Тогда
		ТипПодсистемы = "ШТП" + Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ, "автосалон") Тогда //bav 11.09.2019
		ТипПодсистемы = "АА" + Лев(НомерРедакции,1);
	КонецЕсли;
	
	//Если	ПустаяСтрока(ТипПодсистемы)	Тогда
	//	Сообщить("Не удалось определить префикс настроек для текущей конфигурации!",	СтатусСообщения.Важное);
	//	Отказ	= Истина;
	//КонецЕсли;
	
	Возврат	ТипПодсистемы;
	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, сбисСтруктураРазделов, сбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	//Формируем кэш сбис для сопоставления документов
	КэшСБИС = Неопределено;
	Если Не Кэш.Свойство("СБИС", КэшСБИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	//%Отчетность%
	сбисСоответствиеНомеровНастраиваемыхРазделов = Новый Структура("Продажа, Покупка, Справочники, Отчетность", "3", "4", "6", "9");
	Для Каждого Раздел Из сбисСтруктураРазделов Цикл
		сбисНомерРаздела = Неопределено;
		Если сбисСоответствиеНомеровНастраиваемыхРазделов.Свойство(Раздел.Ключ, сбисНомерРаздела) Тогда
			Если Не Раздел.Значение.Свойство("Параметры") Тогда
				Раздел.Значение.Вставить("Параметры", Новый Структура);
			КонецЕсли;
			Раздел.Значение.Параметры.Вставить("Номер", сбисНомерРаздела);
			РазделЗаполнить(Кэш, Раздел.Ключ, Раздел.Значение);
		КонецЕсли;
		Для Каждого ПодРаздел Из Раздел.Значение.Список Цикл
			Если	ПодРаздел.Значение.Свойство("РеестрСБИС_Тип")
				И	ЗначениеЗаполнено(ПодРаздел.Значение.РеестрСБИС_Тип) Тогда
				СписокТипов = СтрЗаменить(ПодРаздел.Значение.РеестрСБИС_Тип, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокТипов) Цикл 
					ТипДок = СокрЛП(СтрПолучитьСтроку(СписокТипов, НомерСтроки));
					ТипДокИни = Неопределено;
					Если Не КэшСБИС.Ини.Свойство(ТипДок, ТипДокИни) Тогда
						ТипДокИни = Новый Массив;
						КэшСБИС.Ини.Вставить(ТипДок, ТипДокИни);
					КонецЕсли;
					ДокументЗначение = ПодРаздел.Значение.Документ;
					Если ПустаяСтрока(ДокументЗначение) Тогда
						Продолжить;
					КонецЕсли;
					Попытка
						ИмяДокумента1С	= Кэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(ДокументЗначение);
						СсылкаПустая	= Кэш.ОбщиеФункции.СформироватьПустуюСсылкуДокумента(ИмяДокумента1С);
						ТипДокИни.Добавить(Новый Структура("Тип,ПустаяСсылка,ини",ИмяДокумента1С,СсылкаПустая,ПодРаздел.Ключ));
					Исключение;
					КонецПопытки;
				КонецЦикла
			КонецЕсли;
			//Заполняем пользовательские фильтры
			Если	Не	ПодРаздел.Значение.Свойство("ЕстьЗапросРеестра")
				Или	Не	ПодРаздел.Значение.ЕстьЗапросРеестра Тогда
				Продолжить;
			КонецЕсли;
			ФормаДопФильтра = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра", 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_" + ПодРаздел.Ключ, 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_Шаблон");
			Если ФормаДопФильтра = Ложь Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьДополнительныеПараметрыФильтра(Кэш, ФормаДопФильтра);	
		КонецЦикла;
	КонецЦикла;
КонецФункции

//В функцию должны быть вынесены все параметры, определяемые из настройки Конфигурация.
&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, ИниКонфигурации, ДополнительныеПараметры=Неопределено, Отказ) Экспорт

	ФормаРаботыСоСтатусами		= Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСоСтатусами",				ИниКонфигурации);
	ФормаРаботыСНоменклатурой	= Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСНоменклатуройПоставщика",ИниКонфигурации);
	//Меняем форму работы со статусами
	Если	ФормаРаботыСоСтатусами= "Статусы_СостоянияЭД" 
		И	Кэш.Парам.СостояниеЭД = Ложь Тогда
		//ИниКонфигурации.ФормаРаботыСоСтатусами.Значение="'Статусы_Регистры'";
		ФормаРаботыСоСтатусами = "Статусы_Регистры";
		Кэш.ГлавноеОкно.СостояниеЭД	= Истина;
		Кэш.Парам.СостояниеЭД		= Истина;
	КонецЕсли;
	//Получим форму работы со статусами и пропишем туда кэш.
	ФормаРаботыСоСтатусамиЗначение = Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, ФормаРаботыСоСтатусами, Новый Структура, Отказ);
	Попытка
		//UAA НоваяЛента
		ФормаРаботыСоСтатусамиЗначение.ИнициироватьФормуСтатусов(Кэш);
	Исключение
		//Исключение не обрабатываем, отвалиться может только в случае, если форма вынесена в внешние функции
	КонецПопытки;
	//Кэш.ТекущийСеанс.Формы.Получены.Вставить(ФормаРаботыСоСтатусами, ФормаРаботыСоСтатусамиЗначение);
	
	//Меняем форму работы с номенклатурой
	Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
		СБИС_НоменклатураПоставщиков = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураПоставщиков", ИниКонфигурации);
		// если настройки хранятся на сервере, то номенклатуру сопоставляем не в каталоге
		Если Не ЗначениеЗаполнено(СБИС_НоменклатураПоставщиков) Тогда
		ИначеЕсли	Лев(СБИС_НоменклатураПоставщиков,10) = "Справочник" Тогда
			ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Справочники"; 
		ИначеЕсли	Лев(СБИС_НоменклатураПоставщиков,7) = "Регистр" Тогда
			ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Регистры"; 
		КонецЕсли;
	КонецЕсли;
	//Надо проверить что каталог настроек установлен. Если нет, то вернуть по-умолчанию.
	Если ФормаРаботыСоСтатусами = "Статусы_ДБФ" Тогда
		СбисУстановленКаталог = Кэш.Парам.ИдентификаторНастроек;
		Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
			//Если негде хранить статусы и они установлены на DBF, то не считаем за ошибку. 
			СбисУстановленКаталог = Кэш.Парам.КаталогНастроек;
			Если Не ЗначениеЗаполнено(СбисУстановленКаталог) Тогда
				ФормаНастроекКаталог = Кэш.ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекКаталог");
				СбисУстановленКаталог = ФормаНастроекКаталог.СформироватьКаталогНастроек(Кэш, "", Отказ);
				Если Отказ Тогда 
					Возврат СбисУстановленКаталог;
				КонецЕсли;
			КонецЕсли;
			Кэш.Парам.КаталогНастроек = СбисУстановленКаталог;
			Кэш.ГлавноеОкно.КаталогНастроек = СбисУстановленКаталог;
		КонецЕсли;
	КонецЕсли;
	//Делаем инициализацию форм хранения статусов и сопоставления.
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("Инициализировать", ФормаРаботыСоСтатусами);
	Если фрм <> Ложь Тогда
		фрм.Инициализировать(Кэш);
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("Инициализировать", ФормаРаботыСНоменклатурой);
	Если фрм <> Ложь Тогда
		фрм.Инициализировать(Кэш);
	КонецЕсли;
	Кэш.Вставить("ФормаРаботыСоСтатусами",		ФормаРаботыСоСтатусами);
	Кэш.Вставить("ФормаРаботыСНоменклатурой",	ФормаРаботыСНоменклатурой);  
	
	Если Не ЗначениеЗаполнено(Кэш.Парам.НастройкиКриптографии.ИмяПрограммы) Тогда
		ПодписьНаСервере = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере("ПодписьНаСервере", Новый Структура("ини",ИниКонфигурации));
		Если ПодписьНаСервере = Истина Тогда
			Кэш.Вставить("ФормаЭП",Кэш.ГлавноеОкно.СбисПолучитьФорму("ЭлектроннаяПодписьНаСервере"));
		Иначе
			Кэш.Вставить("ФормаЭП",Кэш.ГлавноеОкно.СбисПолучитьФорму("ЭлектроннаяПодписьНаКлиенте"));
		КонецЕсли;
	КонецЕсли;
	
	//Заполним кодировки, в которых нужно перечитывать файлы.
	СБИС_Кодировки = Кэш.ОбщиеФункции.РассчитатьЗначение("Кодировки", ИниКонфигурации);
	КодировкиЧтенияФайлов = Новый Структура("Определять, ПоУмолчанию", Новый Массив, Новый Структура("ДляВсех", "utf-8"));
	КодировкиЧтенияФайлов.Определять.Добавить("windows-1251");
	Если ЗначениеЗаполнено(СБИС_Кодировки) Тогда
		//Пример узла: <Кодировки Имя="ЧтениеФайлов"><windows1251>'нужная кодировка'</windows1251></Кодировки>
		Если СБИС_Кодировки.Свойство("ЧтениеФайлов") Тогда
			Для Каждого КлючИЗначение Из СБИС_Кодировки.ЧтениеФайлов Цикл
				СбисЗначениеКодировки = НРег(Кэш.ОбщиеФункции.РассчитатьЗначение(КлючИЗначение.Ключ, СБИС_Кодировки.ЧтениеФайлов));
				Если КодировкиЧтенияФайлов.Определять.Найти(СбисЗначениеКодировки) = Неопределено Тогда 
					КодировкиЧтенияФайлов.Определять.Добавить(СбисЗначениеКодировки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Пример узла: <Кодировки Имя="ЧтениеПоУмолчанию"><ДляВсех>'нужная кодировка'</ДляВсех></Кодировки>
		//Доступные варианты: ДляВсех, API_HTMLпоXML_Чтение (для интеграции через API)
		Если СБИС_Кодировки.Свойство("ЧтениеПоУмолчанию") Тогда
			Для Каждого КлючИЗначениеКодировки Из СБИС_Кодировки.ЧтениеПоУмолчанию Цикл
				КодировкиЧтенияФайлов.ПоУмолчанию.Вставить(КлючИЗначениеКодировки.Ключ, Кэш.ОбщиеФункции.РассчитатьЗначение(КлючИЗначениеКодировки.Ключ, СБИС_Кодировки.ЧтениеПоУмолчанию));
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	Кэш.КэшЗначенийИни.Вставить("КодировкиЧтенияФайлов", КодировкиЧтенияФайлов);
	////Возможность переопределить встроенный язык через ини конфигурации
	////Пример узла: <КодВстроенногоЯзыка>'utf-8'</КодВстроенногоЯзыка>
	//СбисКодВстроенногоЯзыка	= Кэш.ОбщиеФункции.РассчитатьЗначение("КодВстроенногоЯзыка", ИниКонфигурации);
	//Если ЗначениеЗаполнено(СбисКодВстроенногоЯзыка) Тогда
	//	Кэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = СбисКодВстроенногоЯзыка;		
	//КонецЕсли;
	
	Если ИниКонфигурации.Свойство("ИспользоватьОбработчикиСобытий") Тогда
		Кэш.ИспользоватьОбработчикиСобытий = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьОбработчикиСобытий", ИниКонфигурации);	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура	РазделЗаполнить(Кэш, НазваниеРаздела, ДанныеРаздела)
	
	Реестр1С_Названия			= Новый СписокЗначений;
	сбисМенюРаздела				= Новый Структура;
	сбисПодразделы				= Новый Массив;
	МассивНазванийКнопок		= Новый Массив;
	Кэш.Разделы[НазваниеРаздела]= Новый Структура;
	Кэш.МенюРазделов.Вставить(НазваниеРаздела, сбисМенюРаздела);
	
	// Структура в массив
	Подразделы = Новый Массив;
	Для Каждого сбисТипДокумента Из ДанныеРаздела.Список Цикл
		Подразделы.Добавить(сбисТипДокумента);
	КонецЦикла;
	
	// Сортировка подразделов в разделах Продажа и Покупка в алфавитном порядке
	Для Индекс1 = 0 По Подразделы.ВГраница() Цикл
		
		МинИндекс = Индекс1;
		Для Индекс2 = Индекс1 + 1 По  Подразделы.ВГраница() Цикл
			
			Если Подразделы[МинИндекс].Значение.Реестр1С_Название > Подразделы[Индекс2].Значение.Реестр1С_Название Тогда
				МинИндекс = Индекс2;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МинИндекс <> Индекс1 Тогда
			ВремЗнач = Подразделы[МинИндекс];
			Подразделы[МинИндекс] = Подразделы[Индекс1];
			Подразделы[Индекс1] = ВремЗнач;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого сбисТипДокумента Из Подразделы Цикл
		Если	Не(	сбисТипДокумента.Значение.ЕстьЗапросРеестра
				Или сбисТипДокумента.Значение.ЕстьСправочникТип) Тогда
			Продолжить;
		КонецЕсли;
		Если сбисТипДокумента.Значение.РеестрПоУмолчанию Тогда
			сбисПодразделы.Вставить(0,сбисТипДокумента.Ключ);	
		Иначе
			сбисПодразделы.Добавить(сбисТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	сбисИмяКнопки		= "Аккордеон" + НазваниеРаздела + "Док%сч%" + ДанныеРаздела.Параметры.Номер + ДанныеРаздела.Параметры.Номер;
	сбисСчетчикРазделов	= -1;
	Для Каждого сбисПодраздел Из сбисПодразделы Цикл
		сбисТипДокумента	= ДанныеРаздела.Список[сбисПодраздел];
		сбисТекстКнопки		= сбисТипДокумента.Реестр1С_Название;
		сбисИмяМеню			= сбисТипДокумента.Реестр1С_Меню;
		сбисМетодАктивации	= сбисТипДокумента.Реестр1С_МетодНаАктивацию;
		сбисЗаголовокМеню	= Неопределено;//Совместимость со старыми коннекшенами, где нет заголовка меню
		Если Не сбисТипДокумента.Свойство("Реестр1С_МенюЗаголовок", сбисЗаголовокМеню) Тогда
			сбисЗаголовокМеню = сбисТекстКнопки;
		КонецЕсли;
		сбисМетодАктивации	= сбисТипДокумента.Реестр1С_МетодНаАктивацию;
		Если		Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
			И	Не	МассивНазванийКнопок.Найти(сбисТекстКнопки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		сбисСчетчикРазделов	= сбисСчетчикРазделов + 1;
		лИмяКнопки = СтрЗаменить(сбисИмяКнопки, "%сч%", сбисСчетчикРазделов);
		МассивНазванийКнопок.Добавить(сбисТекстКнопки);
		Реестр1С_Названия.Добавить(сбисТекстКнопки, сбисТекстКнопки);
		
		Кэш.Разделы[НазваниеРаздела].Вставить(лИмяКнопки, сбисПодраздел);
		
		сбисМенюРаздела.Вставить(лИмяКнопки, Новый Массив());
		Если	Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
			И	Не Кэш.ТихийРежим Тогда
			//Для обычного прилоежния попробуем установить заголовок для кнопки
			Попытка
				Кэш.ГлавноеОкно.ЭлементыФормы[лИмяКнопки].Заголовок = "    " + сбисТекстКнопки;
			Исключение
				Сообщить("Раздел """ + сбисТекстКнопки + """ не подключен. Слишком много файлов настроек.");
			КонецПопытки;
		КонецЕсли;
		//Иначе
		//	Продолжить;
		//	//лИмяКнопки = СтрЗаменить(сбисИмяКнопки, "%сч%", 0);
		//КонецЕсли;
		сбисМенюРаздела[лИмяКнопки].Добавить(Новый Структура("ИмяКнопки, ЗаголовокКнопки, МетодАктивации, ИмяИни", сбисИмяМеню, сбисЗаголовокМеню, сбисМетодАктивации, сбисПодраздел));
	КонецЦикла;
	
	Если Кэш.ТихийРежим Тогда//При тихом режиме не требуется заполнять аккордеон на форме 
		Возврат;
	ИначеЕсли Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		//Для УФ заполним аккордеон на сервере
		Кэш.ГлавноеОкно.РазделЗаполнитьНаСервере(НазваниеРаздела, ДанныеРаздела.Параметры.Номер, МассивНазванийКнопок);
	Иначе
		//Для ОФ очищаем заголовки кнопок, если инишки были удалены
		Для СчР = сбисСчетчикРазделов + 1 По 9 Цикл
			Попытка
				Кэш.ГлавноеОкно.ЭлементыФормы[СтрЗаменить(сбисИмяКнопки, "%сч%", СчР)].Заголовок = "";
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция		СбисДобавитьПечатныеФормы(Кэш, Отказ) Экспорт
	ИмяФайлаОбработки = Кэш.ПараметрыСистемы.Обработка.ПолноеИмяОбработки;
	ВидДопОбработокПечатнаяФорма = неопределено;
	Если Кэш.Ини.Конфигурация.Свойство("ВидДопОбработокПечатнаяФорма") Тогда
		ВидДопОбработокПечатнаяФорма = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере("ВидДопОбработокПечатнаяФорма", Новый Структура("Ини", Кэш.Ини.Конфигурация));
	КонецЕсли;
	ПараметрыФормированияНаСервере = Новый Структура("УправляемоеПриложение, ВидДопОбработокПечатнаяФорма, ПометкаУдаления", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, ВидДопОбработокПечатнаяФорма, Ложь);
	Попытка
		Если Кэш.ПараметрыСистемы.Обработка.РежимИспользования = "Файл внешней обработки" Тогда
			ОбработкаХранитсяВСправочнике = Ложь;
			ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайлаОбработки);
		Иначе
			ОбработкаХранитсяВСправочнике = Истина;
			ДвоичныеДанныеОбработки = Неопределено;
		КонецЕсли;
		ДанныеОбработки  = Новый Структура("ДвоичныеДанныеОбработки, ОбработкаХранитсяВСправочнике", ДвоичныеДанныеОбработки, ОбработкаХранитсяВСправочнике);
		сбисДобавитьПечатныеФормыНаСервере(ДанныеОбработки, ПараметрыФормированияНаСервере);
		СбисДобавитьКомандыПечатиНаФормы(Кэш);	
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекОбщее.СбисДобавитьПечатныеФормы", 700, "Неизвестная ошибка подключения", ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура	СбисДобавитьПечатныеФормыНаСервере(ДанныеОбработки, ПараметрыФормированияНаСервере) Экспорт
	Перем ИмяСправочникаОбработок;
	Если		Не	Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ВнешниеОбработки";
		КлючХранилища = "ХранилищеВнешнейОбработки";
	ИначеЕсли	Не	Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ДополнительныеОтчетыИОбработки";
		КлючХранилища = "ХранилищеОбработки";
	Иначе//Нет справочника доп. обработок
		Возврат;
	КонецЕсли;
	СбисПредставлениеПФ = "Отправить через sbis";
	// << alo Меркурий
	Если ПараметрыФормированияНаСервере.свойство("ПредставлениеПФ") Тогда
		СбисПредставлениеПФ = ПараметрыФормированияНаСервере.ПредставлениеПФ;
	Конецесли;
	ИдентификаторКоманды = неопределено;
	Если ПараметрыФормированияНаСервере.свойство("ИдентификаторКоманды") Тогда
		ИдентификаторКоманды = ПараметрыФормированияНаСервере.ИдентификаторКоманды;
	Конецесли;	// alo Меркурий >>
	СправочникВОМенеджер = Справочники[ИмяСправочникаОбработок];
	СбисОбработка = СправочникВОМенеджер.НайтиПоНаименованию(СбисПредставлениеПФ);
	Если СбисОбработка = Неопределено Или СбисОбработка.Пустая() Тогда
		//Нет обработки, создать
		СбисОбработка = СправочникВОМенеджер.СоздатьЭлемент();		
		СбисОбработка.Наименование = СбисПредставлениеПФ;
		Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
			Если ПараметрыФормированияНаСервере.Свойство("ВидДопОбработокПечатнаяФорма") И ЗначениеЗаполнено(ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма) Тогда
				СбисОбработка.Вид = ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма;
			Иначе
				СбисОбработка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
			КонецЕсли;
			СбисОбработка.ИспользоватьДляФормыОбъекта = Истина;
			СбисОбработка.ИспользоватьДляФормыСписка = Истина;
			СбисОбработка.БезопасныйРежим = Ложь;
			НоваяКоманда = СбисОбработка.Команды.Добавить();
			НоваяКоманда.Представление = СбисПредставлениеПФ;
			НоваяКоманда.Идентификатор = ИдентификаторКоманды;  // на управляемых формах передача параметров работает только для ВариантЗапуска= ОткрытиеФормы, 
													//	поэтому используем ИдентификаторКоманды, а не ДополнительныеПараметрыОбработки  // alo Меркурий 
			НоваяКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		Иначе
			Если ПараметрыФормированияНаСервере.Свойство("ВидДопОбработокПечатнаяФорма") И ЗначениеЗаполнено(ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма) Тогда
				СбисОбработка.ВидОбработки = ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма;
			Иначе
				СбисОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
			КонецЕсли;
        КонецЕсли;
	Иначе
		сбисОбработка = СбисОбработка.ПолучитьОбъект();
	КонецЕсли;
	// << alo Меркурий
	Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
		сбисОбработка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	КонецЕсли;
	Если ПараметрыФормированияНаСервере.свойство("ПометкаУдаления") Тогда
		сбисОбработка.ПометкаУдаления = ПараметрыФормированияНаСервере.ПометкаУдаления;
	Конецесли;	// alo Меркурий >>
	
	//Добавить команды
	Если ДанныеОбработки.ОбработкаХранитсяВСправочнике Тогда
		Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
			НаименованиеОткрытойОбработки = "Отправить документ через online.sbis.ru";
		Иначе
			НаименованиеОткрытойОбработки = "Электронный обмен документами в СБиС";
		КонецЕсли;
		ОткрытаяОбработкаВСправочнике = СправочникВОМенеджер.НайтиПоНаименованию(НаименованиеОткрытойОбработки);
		ХранилищеОбработки = ОткрытаяОбработкаВСправочнике[КлючХранилища];
	Иначе
		ХранилищеОбработки = Новый ХранилищеЗначения(ДанныеОбработки.ДвоичныеДанныеОбработки);
	КонецЕсли;
	
	сбисОбработка[КлючХранилища] = ХранилищеОбработки;
	
	СбисОбработка.Записать();	
КонецПроцедуры

&НаКлиенте
Функция		СбисДобавитьКомандыПечатиНаФормы(Кэш, Отказ = Ложь) Экспорт
	Попытка
		СписокДокументов = Новый СписокЗначений;
		Для Каждого Элемент Из Кэш.Ини Цикл
			Если Элемент.Значение.Свойство("ЗапросСпискаДокументов") Тогда
				СписокДокументов.Добавить(Элемент.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормированияКомандПечати = Новый Структура("УправляемоеПриложение, СписокДокументов", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, СписокДокументов);		
		
		СбисДобавитьКомандыПечатиНаФормыНаСервере(ПараметрыФормированияКомандПечати);
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекОбщее.СбисДобавитьКомандыПечатиНаФормы", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Процедура	СбисДобавитьКомандыПечатиНаФормыНаСервере(ПараметрыФормированияКомандПечати) Экспорт

	Перем ИмяСправочникаОбработок;
	Если		Не	Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ВнешниеОбработки";
	ИначеЕсли	Не	Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ДополнительныеОтчетыИОбработки";
	Иначе//Нет справочника доп. обработок
		Возврат;
	КонецЕсли;
	СбисПредставлениеПФ = "Отправить через sbis";
	// << alo Меркурий
	Если ПараметрыФормированияКомандПечати.свойство("ПредставлениеПФ") Тогда
		СбисПредставлениеПФ = ПараметрыФормированияКомандПечати.ПредставлениеПФ;
	Конецесли;
	ИдентификаторКоманды = неопределено;
	Если ПараметрыФормированияКомандПечати.свойство("ИдентификаторКоманды") Тогда
		ИдентификаторКоманды = ПараметрыФормированияКомандПечати.ИдентификаторКоманды;
	Конецесли;	// alo Меркурий >>
	
	СправочникВОМенеджер = Справочники[ИмяСправочникаОбработок];
	СбисОбработка = СправочникВОМенеджер.НайтиПоНаименованию(СбисПредставлениеПФ);
	
	Если СбисОбработка = Неопределено Или СбисОбработка.Пустая() Тогда
		// обработки нет в справочнике
		Возврат;
	КонецЕсли;
	
	сбисОбработка = СбисОбработка.ПолучитьОбъект();
	
	//Добавить команды
	Для Каждого Элемент Из ПараметрыФормированияКомандПечати.СписокДокументов Цикл
		МетаданныеДок = Метаданные.Документы.Найти(Элемент.Значение);
		Если МетаданныеДок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПараметрыФормированияКомандПечати.УправляемоеПриложение Тогда
			Если Метаданные.Справочники.Найти("ИдентификаторыОбъектовМетаданных") <> Неопределено Тогда
				ОбъектНазначения = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Документ." + Элемент.Значение);
				Если СбисОбработка.Назначение.Найти(ОбъектНазначения, "ОбъектНазначения") = Неопределено Тогда
					НоваяСтрока = сбисОбработка.Назначение.Добавить();
					НоваяСтрока.ОбъектНазначения = ОбъектНазначения;
				КонецЕсли;
			Иначе
				//Для конфигураций, где нет справочника "ИдентификаторыОбъектовМетаданных", команды для печати не генерируем.
				Возврат;
			КонецЕсли;
		Иначе
			Если СбисОбработка.Принадлежность.Найти("Документ """ + МетаданныеДок.Синоним + """", "ПредставлениеОбъекта") = Неопределено Тогда
				НоваяСтрока = СбисОбработка.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Документ """ + МетаданныеДок.Синоним + """";
				НоваяСтрока.ПредставлениеКнопки = СбисПредставлениеПФ;
				НоваяСтрока.СсылкаОбъекта = Документы[Элемент.Значение].ПустаяСсылка();
				Попытка
					НоваяСтрока.МетаданныеОбъекта = "Документ." + МетаданныеДок.Имя;
				Исключение
				КонецПопытки;
				// << alo Меркурий
				Если ЗначениеЗаполнено(ИдентификаторКоманды) Тогда
					СтруктураПараметрыОбработки = Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды);
					НоваяСтрока.ДополнительныеПараметрыОбработки = новый ХранилищеЗначения(СтруктураПараметрыОбработки);   
				Конецесли;		// alo Меркурий >>
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	СбисОбработка.Записать();	
	
КонецПроцедуры

//Процедура выполняет переключение способа хрнения настроек из каталога в СБИС
&НаКлиенте
Функция 	ПереключитьСпособХраненияНастроекВСбис(Аргумент, ДопПараметры) Экспорт
	Кэш = ДопПараметры.Кэш;
	Отказ = Ложь;
	Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
		//Облачные настройки уже активны
		Возврат "Не требуется";
	ИначеЕсли Не Кэш.Интеграция.ДоступныСерверныеНастройки() Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис", 735,,"Облачные настройки недоступны для настроенного способа обмена.");
	КонецЕсли;
	УидТекущейСистемы		= Кэш.ПараметрыСистемы.Конфигурация.УИДИнтеграции;
	СбисПараметрыКаталога	= Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
	СбисПараметрыПодключения= Новый Структура;
	Для Каждого СбисПараметрПодключения Из СбисПараметрыКаталога Цикл
		Если Лев(СбисПараметрПодключения.Ключ, 2) = "ВО" Тогда
			Продолжить;
		КонецЕсли;
		СбисПараметрыПодключения.Вставить(СбисПараметрПодключения.Ключ, СбисПараметрПодключения.Значение);
	КонецЦикла;
	//Создаём временный кэш с настройкой на облако
	ВременныйКэш = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Кэш,,Ложь);
	ВременныйКэш.Парам					= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(Кэш.Парам,,Ложь);
	ВременныйКэш.ИниВПорядке			= Кэш.ИниВПорядке;
	ВременныйКэш.ТихийРежим				= Истина;
	ВременныйКэш.Ини					= Новый Структура;
	ВременныйКэш.КэшНастроек			= Новый Структура;
	ВременныйКэш.ТекущийСеанс.Функции	= Новый Структура;
	ВременныйКэш.КэшЗначенийИни			= Новый Структура("ИниЗагрузки", Новый Структура);
	
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек",	1);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек",	"");
	
	ПродолжитьВыполнение	= Истина;
	ВременныйКэш.ГлавноеОкно.ОпределитьФормуРаботыСНастройками(ВременныйКэш, ВременныйКэш.Парам.СпособОбмена, ВременныйКэш.Парам.СпособХраненияНастроек);
	ПараметрыПредустановки = Новый Структура("УИДИнтеграции, АвтоматическаяУстановка, СбисПараметры", УидТекущейСистемы, Истина, СбисПараметрыПодключения);
	
	РезультатПредустановки = ВременныйКэш.ФормаНастроек.СбисПрименитьПредустановленныеНастройки(ВременныйКэш, Отказ, ПродолжитьВыполнение, ПараметрыПредустановки);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(РезультатПредустановки, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис");
	ИначеЕсли Не РезультатПредустановки = Неопределено Тогда
		//Предустановлен коннекшен.
		ВременныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(ВременныйКэш, СбисПараметрыКаталога, РезультатПредустановки);
		ВременныйКэш.ТихийРежим = Кэш.ТихийРежим;
		ВременныйКэш.ГлавноеОкно.СпособХраненияНастроек = ВременныйКэш.Парам.СпособХраненияНастроек;
		ЗаполнитьЗначенияСвойств(Кэш, ВременныйКэш, "ФормаНастроек, Парам, КэшНастроек, Ини, ИниВПорядке");
		Возврат "Применены Предустановленные настройки";
	КонецЕсли;
	СписокНастроек = Кэш.ФормаНастроек.СобратьСпискиНастроекНаСервере(Кэш.ОбщиеФункции.КэшДляСервера(Кэш), Кэш.Парам.ИдентификаторНастроек, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(РезультатПредустановки, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис");
	КонецЕсли;
	Если	СписокНастроек.XSLT.Количество()
		Или	СписокНастроек.EPF.Количество() Тогда 
		//Есть пользовательские xslt и внешние функции
		Кэш.ОбщиеФункции.СбисВызватьИсключение(, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис", 735,,"Имеются пользовательские изменения, которые невозможно перенести в облако.");
	КонецЕсли;
	Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
	ВременныйКэш.Ини = Кэш.Ини;
	ВременныйКэш.Парам.ИдентификаторНастроек = "";
	//Создаем шаблон из текущих настроек	
	НовыйШаблонКоннекшена = ВременныйКэш.ФормаНастроек.СформироватьСтруктуруТекущихНастроек(ВременныйКэш, Новый Структура("ТипНастроек, СбисПараметры", "Шаблон", СбисПараметрыПодключения), Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(НовыйШаблонКоннекшена, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис");
	КонецЕсли;
	НовыйШаблонКоннекшена.Идентификатор = УидТекущейСистемы;
	ВременныйКэш.КэшНастроек.Вставить("ВыбранныеНастройки", НовыйШаблонКоннекшена);
	НовыйШаблонКоннекшена.Данные.Параметры = Новый Структура("comment", "Создано обработкой при переводе настроек в СБИС");
	НовыйШаблонКоннекшена.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	НовыйШаблонКоннекшена.ПараметрыРаботы.Статус = "Новый";
	Для Каждого КлючИЗначениеИни Из НовыйШаблонКоннекшена.Данные.Ини Цикл
		НовыйШаблонКоннекшена.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениеИни.Ключ);
	КонецЦикла;
	//Сохраним шаблон
	ПараметрыЗаписи = Новый Структура("Отказ, ПродолжитьВыполнение", Отказ, Истина);
	НовыйШаблонКоннекшена.Название = Кэш.Парам.ИдентификаторНастроек;
	ВременныйКэш.ИниВПорядке = Кэш.ИниВПорядке;
	РезультатВыполнения = ВременныйКэш.ФормаНастроек.КлассIntegrationConnection_Установить(ВременныйКэш, НовыйШаблонКоннекшена, Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(РезультатВыполнения, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис");
	КонецЕсли;
	РезультатВыполнения = ВременныйКэш.ФормаНастроек.КлассIntegrationConnection_СохранитьПодключение(ВременныйКэш, НовыйШаблонКоннекшена, Новый Структура("ТихийРежим", ВременныйКэш.ТихийРежим), Отказ);
	Если Отказ Тогда
		Кэш.ОбщиеФункции.СбисВызватьИсключение(РезультатВыполнения, "ФайлыНастроекОбщее.ПереключитьСпособХраненияНастроекВСбис");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Кэш.Парам, ВременныйКэш.Парам, "СпособХраненияНастроек,ИдентификаторНастроек,ИдентификаторыНастроекВСБИС");
	ВременныйКэш.ТихийРежим = Кэш.ТихийРежим;
	ВременныйКэш.ГлавноеОкно.СпособХраненияНастроек = ВременныйКэш.Парам.СпособХраненияНастроек;
	ЗаполнитьЗначенияСвойств(Кэш, ВременныйКэш);
	Если РезультатВыполнения.ЗаписьВыполнялась Тогда
		Возврат "Создан новый шаблон и подключение";
	КонецЕсли;
	Возврат "Настройки переключены, шаблон не записывался";
КонецФункции

