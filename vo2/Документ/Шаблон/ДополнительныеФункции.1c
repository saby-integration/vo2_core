////////////////////////////////////////////////////
//////////Вспомогательные функции загрузки//////////
////////////////////////////////////////////////////

//Проводит поиск значения по узлу описания и обновление из описанного узла. Если не найдено, досоздаёт.
//Контекст - контекст расчета
//УППоиск - Ключ узла с описанием поиска.
//УПТип - Параметр, определяет тип объекта.
//УПОписаниеОбъекта - Ключ узла с описанием структуры для обновления объекта.
//Дополнительные параметры определяются в переменных из контекста узлами:
//	СбисНайтиИОбновить_Сообщить - сообщает о результате обновления(создания) объекта. По-умолчанию - Ложь (не сообщать)
//	СбисНайтиИОбновить_Обновлять - определяет необходимость обновить найденный объект. По-умолчанию - Ложь (вернуть ссылку, не трогая).
//	СбисНайтиИОбновить_Досоздать - определяет необходимость создать новый объект, если не найден. По-умолчанию - Истина (вернуть ссылку нового объекта).
&НаСервереБезКонтекста
Функция СбисНайтиИОбновить(Знач Контекст, Знач УППоиск, Знач УПТип="", Знач УПОписаниеОбъекта=Неопределено)
	Перем СообщитьСтатус, ОбновитьОбъект;
	РезультатПоиска = РассчитатьЗначениеСервер(УППоиск, Контекст);
	Если РезультатПоиска = Неопределено Тогда
		Если (	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Досоздать", ОбновитьОбъект)
			И	ОбновитьОбъект = Ложь) Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли Не	(	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Обновить", ОбновитьОбъект)
		И	ОбновитьОбъект = Истина) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	УниверсальныйПоиск_Тип = СтрЗаменить(УПТип, ".", Символы.ПС);
	Отказ = Ложь;
	СтруктураДосоздать = РассчитатьЗначениеСервер(УПОписаниеОбъекта, Контекст);
	ПараметрыСоздания = Новый Структура("ТипОбъекта,ПодТипОбъекта,ОбъектПерезаполнитьСсылка", 
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 1),
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 2),
	РезультатПоиска);
	РезультатСоздания = СоздатьОбъектИзСтруктуры(СтруктураДосоздать, ПараметрыСоздания, Отказ);
	Если	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Сообщить", СообщитьСтатус)
		И	СообщитьСтатус = Истина Тогда
		Сообщить(РезультатСоздания.Сообщение);
	КонецЕсли;
	Возврат РезультатСоздания.Ссылка;
КонецФункции

//Функция возвращает глубокую копию раздела ини без копии расчитанных значений. 
//Поддерживаемые составные типы: Структура, Массив.
//ДопПараметры: КлючиНеКопировать - массив ключей, значения которых не копируются, а переносятся как есть.
&НаСервереБезКонтекста
Функция СкопироватьОбъектСПараметрамиСервер(Знач СбисОбъект, ГлубокоеКопирование=Истина, СбисКлючи=Неопределено)
	Если ТипЗнч(СбисОбъект) = Тип("Структура") Тогда
		Если СбисКлючи = Неопределено Тогда
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СбисОбъект Цикл
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Если ГлубокоеКопирование Тогда
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)			
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = Новый Структура(СбисКлючи);
			ЗаполнитьЗначенияСвойств(Результат, СбисОбъект);
			Если ГлубокоеКопирование Тогда
				Для Каждого КлючИЗначение Из Результат Цикл
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СбисОбъект) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Если СбисКлючи = Неопределено Тогда
			Для Каждого ЭлементМассива Из СбисОбъект Цикл
				Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
			КонецЦикла;
		Иначе
			Для Счетчик = 0 По СбисОбъект.Количество() Цикл
				Если СбисКлючи.Найти(Счетчик) Тогда
					Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Результат = СбисОбъект;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПоле=Неопределено, СбисКонтекст, ДопПараметры)
	Попытка
		Возврат СбисКонтекст.Ини.Свойство(СбисПараметр, СбисПоле);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаКлиенте
Функция ЭтоСложныйУзел_Клиент(Кэш, Поле)
	Перем ЗначениеТипПодУзла;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			//Проверку делаем по первому элементу узла. Если там нет описания, то адью.
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаСервереБезКонтекста
Функция ЭтоСложныйУзел_Сервер(Аргумент)
	Перем ЗначениеТипПодУзла;
	Поле = Аргумент.Значение;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

