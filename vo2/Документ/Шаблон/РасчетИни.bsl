
////////////////////////////////////////////////////
////////////////Расчет по ини документа/////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисЗаполнитьПараметрыДокумента(СтруктураСвойств, Ини, РазделИниПараметры, Документ1С, СтруктураФайла, СоставПакета, Кэш)
	Для Каждого Элемент из РазделИниПараметры.мПараметрыДокумента Цикл
		Переменные = Новый Структура;
		мПараметры = Новый Структура;
		
		Если Элемент.Значение.Параметр_Значение.Свойство("Данные") Тогда
			Параметр_Значение = ЗаполнитьЗначениеРеквизитаИзФайла(Элемент.Значение.Параметр_Значение, СтруктураФайла, мПараметры, МестныйКэш);						
		КонецЕсли;
		Если Элемент.Значение.Параметр_Имя.Свойство("Вычислить") и (Найти(Элемент.Значение.Параметр_Имя.Вычислить,"'")>0 или Найти(Элемент.Значение.Параметр_Имя.Вычислить,"{")>0) Тогда
			Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, Документ1С, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация);
			Параметр_Имя = РассчитатьЗначение(Элемент.Значение.Параметр_Имя.Вычислить,Контекст,МестныйКэш);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Параметр_Значение) и ЗначениеЗаполнено(Параметр_Имя) Тогда
			СтруктураСвойств.Вставить(Параметр_Имя, Параметр_Значение);
		КонецЕсли;
	КонецЦикла;	
КонецФункции

//Функция заполняет структуру документа 1С по файлу настроек
&НаСервере
Процедура ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокументаНаСервере(ОбъектЗаполнить, Знач ПараметрыОбработчика)
	СбисКонтекст = Новый Структура("ДанныеИсточник, ДанныеРезультат, ДополнительныеПараметры, Переменные, Ини, СопоставлениеДанныеКлючиИни", Новый Структура, ОбъектЗаполнить, Новый Структура);
	СбисКонтекст.ДанныеИсточник.Вставить("СтруктураФайла", ПараметрыОбработчика.СтруктураФайла);
	Если Не ПараметрыОбработчика.ТаблДок = Неопределено Тогда
		СбисКонтекст.ДанныеИсточник.Вставить("ТаблДок", ПараметрыОбработчика.ТаблДок);
	КонецЕсли;
	
	СбисКонтекст.Вставить("ИмяОбъекта", "Документ");
	ЗаполнитьЗначенияСвойств(СбисКонтекст, ПараметрыОбработчика);
	АргументыРассчитать = Новый Структура("Контекст", СбисКонтекст);
	Для Каждого КлючИЗначение Из СбисКонтекст.Ини Цикл
		Обработчик_УзелИниСервер(КлючИЗначение, АргументыРассчитать);
	КонецЦикла;
КонецПроцедуры

//Функция возвращает результат с учетом применения фильтра
&НаКлиенте
Функция ВычислитьОтборНаКлиенте(Аргумент, ПараметрыОбработчика)
	Перем СбисВыбрать, ПараметрПроверить, СбисИндексСтроки;
	
	Кэш					= ПараметрыОбработчика.Кэш;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	ПараметрыРасчета	= ПараметрыОбработчика.ДополнительныеПараметры;
	СбисПоле			= Аргумент.Значение;
	РасчитанноеЗначение	= Аргумент.РассчитанноеЗначение;
	Если Не ЗначениеЗаполнено(РасчитанноеЗначение) Тогда
		Возврат РасчитанноеЗначение;
	КонецЕсли;
	
	СписокОтборов = Новый Структура;
	Для Каждого ЭлементОтбора Из СбисПоле.Отбор Цикл
		СписокОтборов.Вставить(ЭлементОтбора.Ключ, РассчитатьПараметрИни(Кэш, ЭлементОтбора.Значение, , СбисКонтекст, ПараметрыРасчета));
	КонецЦикла;
	Если Не СбисПоле.Свойство("Выбрать", СбисВыбрать) Тогда
		СбисВыбрать = "все";
	Иначе
		СбисВыбрать = НРег(СбисВыбрать);
		Если Не СбисВыбрать = "все" Тогда
			Попытка
				СбисВыбрать = Число(СбисВыбрать);
			Исключение
				Сообщить("Не верно указан размер выборки. Допустимые значения: число; ""Все""");
				Возврат РасчитанноеЗначение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//Отбор по номеру строки
	Если		СписокОтборов.Свойство("НомерСтроки", СбисИндексСтроки) Тогда
		СписокОтборов.Удалить("НомерСтроки");
		СбисИндексСтроки = Число(СбисИндексСтроки);
	ИначеЕсли	СписокОтборов.Свойство("ИндексСтроки", СбисИндексСтроки) Тогда
		СписокОтборов.Удалить("ИндексСтроки");
		СбисИндексСтроки = Число(СбисИндексСтроки);
	КонецЕсли;
	Результат = РасчитанноеЗначение;
	ТипЗначенияСтрокой = Строка(ТипЗнч(РасчитанноеЗначение));
	//Выполним отбор
	Если	Не СбисИндексСтроки = Неопределено Тогда
		Попытка
			РезультатОтбора = РасчитанноеЗначение[СбисИндексСтроки];
			Если ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(РезультатОтбора, СписокОтборов) Тогда
				Результат = РезультатОтбора;
			КонецЕсли;
		Исключение
			//Добавить обработку ошибок
			//ВызватьИсключение(СтрЗаменить(СтрЗаменить("Ошибка отбора по индексу строки в узле {0}. Подробно: {1}",	"{0}",	СбисКонтекст.ТекущееПолеКлюч),
			//																										"{1}",	ОписаниеОшибки()));
		КонецПопытки;
	#Если ТолстыйКлиентОбычноеПриложение Тогда	
	ИначеЕсли	ТипЗнч(РасчитанноеЗначение) = Тип("ТаблицаЗначений") Или Найти(НРег(ТипЗначенияСтрокой), "табличная часть") Тогда
		Если СбисИндексСтроки = Неопределено Тогда
			РезультатОтбора = РасчитанноеЗначение.НайтиСтроки(СписокОтборов);
			Результат = Новый Массив;
			Если	СбисВыбрать = "все" Тогда
				Результат = РезультатОтбора;
			ИначеЕсли РезультатОтбора.Количество() Тогда
				Если СбисВыбрать = 1 Тогда
					Возврат РезультатОтбора[0];
				ИначеЕсли СбисВыбрать >= РезультатОтбора.Количество() Тогда
					Для ЧислоСтрокВыборки = 1 По СбисВыбрать Цикл
						Результат.Добавить(РезультатОтбора[ЧислоСтрокВыборки-1]);
					КонецЦикла;
				Иначе
					Результат = РезультатОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли 	
	ИначеЕсли	ТипЗнч(РасчитанноеЗначение) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого СтрокаРасчитанноеЗначение Из РасчитанноеЗначение Цикл
			Если Не ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(СтрокаРасчитанноеЗначение, СписокОтборов) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Добавить(СтрокаРасчитанноеЗначение);
			Если СбисВыбрать = 1 Тогда
				Результат = СтрокаРасчитанноеЗначение;
				Прервать;
			ИначеЕсли Не СбисВыбрать = "все" Тогда
				Если Результат.Количество() = СбисВыбрать Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	ПараметрыРасчета.Посчитано = Истина;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Проверяет, соответствует ли строка установленному отбору.
&НаКлиенте
Функция ВычислитьОтборНаКлиенте_СтрокаСоответствуетОтбору(СтрокаЗначениеПроверить, СписокОтборов)
	Попытка
		Для Каждого КлючИЗначениеОтбор Из СписокОтборов Цикл
			Если Не СтрокаЗначениеПроверить[КлючИЗначениеОтбор.Ключ] = КлючИЗначениеОтбор.Значение Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина
КонецФункции

&НаСервере
Функция ВычислитьОтборНаСервере(Аргумент, АргументыРассчитать)
	Перем СбисВыбрать, ПараметрПроверить;
	СбисПоле = АРгумент.Значение;
	РасчитанноеЗначение = Аргумент.РассчитанноеЗначение;
	Результат = РасчитанноеЗначение;
	Если Не ЗначениеЗаполнено(РасчитанноеЗначение) Тогда
		Возврат Результат;
	КонецЕсли;
	СписокОтборов = Новый Структура;
	Для Каждого ЭлементОтбора Из СбисПоле.Отбор Цикл
		СписокОтборов.Вставить(ЭлементОтбора.Ключ, МодульОбъектаСервер().РассчитатьЗначениеСервер(ЭлементОтбора.Значение, АргументыРассчитать.Контекст));
	КонецЦикла;
	Если Не СбисПоле.Свойство("Выбрать", СбисВыбрать) Тогда
		СбисВыбрать = "все";
	Иначе
		СбисВыбрать = НРег(СбисВыбрать);
		Если Не СбисВыбрать = "все" Тогда
			Попытка
				СбисВыбрать = Число(СбисВыбрать);
			Исключение
				Сообщить("Не верно указан размер выборки. Допустимые значения: число; ""Все""");
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;                          
	КонецЕсли;
	ТипЗначенияСтрокой = Строка(ТипЗнч(РасчитанноеЗначение));
	Если ТипЗнч(РасчитанноеЗначение) = Тип("ТаблицаЗначений") Или Найти(НРег(ТипЗначенияСтрокой), "табличная часть") Тогда
		РезультатОтбора = РасчитанноеЗначение.НайтиСтроки(СписокОтборов);
		Результат = Новый Массив;
		Если	СбисВыбрать = "все" Тогда
			Результат = РезультатОтбора;
		ИначеЕсли РезультатОтбора.Количество() Тогда
			Если СбисВыбрать = 1 Тогда
				Возврат РезультатОтбора[0];
			ИначеЕсли СбисВыбрать >= РезультатОтбора.Количество() Тогда
				Для ЧислоСтрокВыборки = 1 По СбисВыбрать Цикл
					Результат.Добавить(РезультатОтбора[ЧислоСтрокВыборки-1]);
				КонецЦикла;
			Иначе  
				Результат = РезультатОтбора;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(РасчитанноеЗначение) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого СтрокаРасчитанноеЗначение Из РасчитанноеЗначение Цикл
			ДобавитьСтроку = Истина;
			Для Каждого КлючИЗначениеОтбор Из СписокОтборов Цикл
				Если	Не СтрокаРасчитанноеЗначение.Свойство(КлючИЗначениеОтбор.Ключ, ПараметрПроверить)
					Или	Не ПараметрПроверить = КлючИЗначениеОтбор.Значение Тогда
					ДобавитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ДобавитьСтроку Тогда
				Результат.Добавить(СтрокаРасчитанноеЗначение);
				Если СбисВыбрать = 1 Тогда
					Возврат СтрокаРасчитанноеЗначение;
				ИначеЕсли Не СбисВыбрать = "все" Тогда
					Если Результат.Количество() = СбисВыбрать Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Процедура проставляет связи документов, загруженных из одного пакета	
Процедура ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, знач РазделИни, ДокОбъект, МассивОснований)
	Если Метаданные.Документы[ТипДок].Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание.Тип);
		Для Каждого ОснованиеСтруктура Из МассивОснований Цикл
			Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
				ДокОснование = ОснованиеСтруктура.ДокОснование;
			Иначе
				ДокОснование = ОснованиеСтруктура;
			КонецЕсли;
			Если ТипыОснований.СодержитТип(ТипЗнч(ДокОснование)) Тогда	
				ДокОбъект.Вставить(ИмяРеквизита, ДокОснование);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Метаданные.Документы[ТипДок].ТабличныеЧасти.Найти(ИмяРеквизита)<>Неопределено Тогда
		ИмяРеквизитаВТЧ = Сред(РазделИни.Основание_Документ.Значение, Найти(РазделИни.Основание_Документ.Значение,".")+1);
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание_Документ.Тип);
		Для Каждого ОснованиеСтруктура Из МассивОснований Цикл
			Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
				ДокОснование = ОснованиеСтруктура.ДокОснование;
			Иначе
				ДокОснование = ОснованиеСтруктура;
			КонецЕсли;
			Если ТипыОснований.СодержитТип(ТипЗнч(ДокОснование)) Тогда	
				Если Не ДокОбъект.Свойство(ИмяРеквизита) Тогда
					ДокОбъект.Вставить(ИмяРеквизита, Новый массив);
				КонецЕсли;
				ДокОбъект[ИмяРеквизита].Добавить(Новый Структура(ИмяРеквизитаВТЧ, ДокОснование));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция заполняет структуру документа 1С, создает документ и заполняет его из структуры	
&НаКлиенте
Функция ЗаполнитьДанныеДокумента1С(Кэш, ини, СтруктураФайла, МассивОснований, СоставПакета, Вложение, Документ1С = Неопределено, ДополнительныеДанные = Неопределено) Экспорт
	Перем ДопПараметрыРассчета, Отказ, ЗаполнитьДетализацию;
	
	Если Не ДополнительныеДанные = Неопределено Тогда
		
		ДополнительныеДанные.Свойство("ЗаполнитьДетализацию",				ЗаполнитьДетализацию);
		ДополнительныеДанные.Свойство("Отказ",								Отказ);
		ДополнительныеДанные.Свойство("ДополнительныеПараметрыРассчета",	ДопПараметрыРассчета);
		
	КонецЕсли;
	
	Если Отказ = Неопределено Тогда
		
		Отказ = Ложь;
		
	КонецЕсли;
	
	Если ЗаполнитьДетализацию = Неопределено Тогда
		
		ЗаполнитьДетализацию = Ложь;
		
	КонецЕсли;

	ДополнятьТабЧасть = Ложь;
	ЗаполняемыеТабЧасти = Новый Массив;
	
	// если документ загружен в рамках текущего пакета, то нужно дополнить его данными текущего вложения, а не очищать и перезаполнять
	// например при загрузке акта и накладной в одно поступление
	Для каждого ОснованиеСтруктура Из МассивОснований Цикл
		Если ТипЗнч(ОснованиеСтруктура) = Тип("Структура") Тогда
			ДокОснование = ОснованиеСтруктура.ДокОснование;
			МассивТабЧастей = ОснованиеСтруктура.МассивТабЧастей;
		Иначе
			ДокОснование = ОснованиеСтруктура;
			МассивТабЧастей = Новый Массив;
		КонецЕсли;
		Если ДокОснование = Документ1С Тогда
			ЗаполняемыеТабЧасти = МассивТабЧастей;
			ДополнятьТабЧасть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	ПараметрыВложения	= МодульОбъектаКлиент().ВложениеСБИС_Получить(Вложение, "Параметры");

	// Вносить изменения в существующую таб часть документа (не очищать и не заполнять с нуля)
	РедактироватьТабЧасть = ПараметрыВложения.РедактироватьТабЧасть;
		
	Если ПараметрыВложения.РедактироватьДокумент Тогда
		
		// Редактируется документ 1С (признак в инишке и установлена ссылка на документ в Параметры.РедактируемыеПоля.Документ)
		СтруктураДокОбъект = МодульОбъектаКлиент().ВложениеСбис_Получить(Вложение, "РассчитанныйОбъект");
		
	ИначеЕсли Не Документ1С = Неопределено Тогда
			
		// Документ перезаполняется. Структура с названиями полей, как у создаваемого документа 1С, но без ТЧ!
		СтруктураДокОбъект = Новый Структура;
		МестныйКэш.ОбщиеФункции.ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект, Документ1С);
				
	Иначе
		
		// Документ 1С не определен, нечего редактировать.
		СтруктураДокОбъект		= Новый Структура;
		РедактироватьТабЧасть	= Ложь;

	КонецЕсли;

	// Вносим ручные изменения перед расчетом, чтобы правильно рассчитались зависимые от них реквизиты (например, валюта из договора)
	ПараметрыЗаполнить = Новый ФиксированнаяСтруктура("РассчитываемыйОбъект, ПоляРассчета", СтруктураДокОбъект, Новый Структура("Режим", "Загрузка"));
	МодульОбъектаКлиент().ВложениеСБИС_ЗаполнитьПараметрыПередРасчетом(Вложение, ПараметрыЗаполнить);

	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента", "Документ_" + Вложение.ТипДокумента, "Документ_Шаблон");
	фрм.ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(Кэш, СтруктураФайла, ини, СтруктураДокОбъект, МассивОснований, СоставПакета, Вложение, ДопПараметрыРассчета);
	
	Вложение.Вставить("СтруктураДокумента1С", СтруктураДокОбъект);

	ТипОбъекта = Кэш.ОбщиеФункции.РассчитатьЗначение("Документ", Ини);
	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		ТипОбъекта = МодульОбъектаКлиент().ВложениеСБИС_Получить(Вложение, "ТипОбъекта");
	КонецЕсли;	
	ТипОбъекта = СтрПолучитьСтроку(СтрЗаменить(ТипОбъекта, ".", Символы.ПС), 1);
	сбисДополнительныеПараметры = Новый Структура("ОбъектПерезаполнитьСсылка, ТипОбъекта, ПодТипОбъекта, ДополнятьТабЧасть, РедактироватьТабЧасть, Ини, ПерезаполнятьТолькоНепроведенные, ЗаполняемыеТабЧасти",
													Документ1С, ТипОбъекта, ТипДокумента, ДополнятьТабЧасть, РедактироватьТабЧасть, ини, Кэш.Парам.ПерезаполнятьТолькоНепроведенные, ЗаполняемыеТабЧасти);
	РезультатЗагрузки = СоздатьОбъектИзСтруктуры(СтруктураДокОбъект, сбисДополнительныеПараметры, Отказ);
	РезультатЗагрузки.Вставить("СтруктураДокумента1С", СтруктураДокОбъект);//Для дальнейшей обработки и чтобы не тянуть с сервера на клиента добавляем в результат структуру документа 1С тут.
	Если ЗаполнитьДетализацию Тогда
		РезультатЗагрузки.Вставить("Ошибки", Отказ);
		Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДополнительныеДанные.СтрокаДетализации, РезультатЗагрузки);
		ДополнительныеДанные.Отказ = Отказ;
	Иначе                      
		Сообщить(РезультатЗагрузки.Сообщение);
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ДопРасчетыПриЗагрузке","Документ_"+ТипДокумента,"Документ_Шаблон",МестныйКэш);			
	Если фрм<>Ложь Тогда
		Попытка
			фрм.ДопРасчетыПриЗагрузке(РезультатЗагрузки.Ссылка, Новый Структура("СтруктураФайла, СоставПакета, Кэш",СтруктураФайла,СоставПакета,МестныйКэш));
		Исключение
			фрм.ДопРасчетыПриЗагрузке(РезультатЗагрузки.Ссылка);//Вставлено исключение для совместимости со старой версией
		КонецПопытки
	КонецЕсли;
	
	Возврат РезультатЗагрузки.Ссылка;
КонецФункции

//Функция заполняет реквизит в структуре документа 1С значением из файла
&НаКлиенте
Функция ЗаполнитьЗначениеРеквизитаИзФайла(ЭлементИни, СтруктураФайла, Контекст, МестныйКэш) Экспорт
	ЗнПер = ЭлементИни.Значение;
	ЗначениеРеквизита = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ЭлементИни.Данные, СтруктураФайла);
	
	Если ЭлементИни.Свойство("Тип") Тогда//AU вынесена проверка наличия атрибута типа для всех значений для корректного обсчета формул.
		Если ЭлементИни.Тип="Дата" и ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4),Сред(ЗначениеРеквизита,4,2),Лев(ЗначениеРеквизита,2));
		КонецЕсли;
	КонецЕсли;
	Если ЭлементИни.Свойство("Отбор") И ЭлементИни.Отбор.Свойство("НомерСтроки") И ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
		Попытка
			НомерСтроки = Число(ЭлементИни.Отбор.НомерСтроки);
			ЗначениеРеквизита = ЗначениеРеквизита[НомерСтроки];
			ЭлементИни.Значение = ЗначениеРеквизита;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Контекст.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	Иначе // если нет ссылка на реквизит, кладем значение в саму структуру ини, чтобы потом это значение можно было использовать при расчете других 
		ЭлементИни.Значение = ЗначениеРеквизита;
	КонецЕсли;
	Возврат ЗначениеРеквизита;
КонецФункции

//Функция заполняет реквизит в структуре документа 1С значением	
&НаКлиенте
Процедура ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПоле, Контекст, ДопПараметры) Экспорт
	Перем ЗаполнитьКуда, ПутьРеквизита;
	Если Не СбисПоле.Свойство("Значение", ПутьРеквизита) Тогда 
		Возврат;
	ИначеЕсли Найти(ПутьРеквизита,"[") = 1 Тогда  // ссылка на реквизит
		Если	Не	ДопПараметры.Свойство("ЗаполнитьДанные")
			Или		ДопПараметры.ЗаполнитьДанные Тогда
			
			ЗаполнитьКуда = ПолучитьПриемникЗаполненияРеквзиита(ПутьРеквизита, Контекст);
			
			Если ЗаполнитьКуда = Неопределено Тогда
				Если Не Контекст.Свойство("ДанныеРезультатЛокальные", ЗаполнитьКуда) Тогда
					ЗаполнитьКуда = Контекст.ДанныеРезультат.Документ;
				КонецЕсли;
			КонецЕсли;
			
			ИмяРеквизита = Сред(ПутьРеквизита, МодульОбъектаКлиент().СбисСтрНайти(ПутьРеквизита, ".") + 1);
			ЗаполнитьКуда.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	ИначеЕсли	Не Найти(ПутьРеквизита,"'")
		И	Не Найти(ПутьРеквизита,".") Тогда
		Попытка
			Контекст.Переменные.Вставить(СтрЗаменить(ПутьРеквизита, ".", "_"), ЗначениеРеквизита);
		Исключение
			//На случай, если в качестве переменной пришло значение из документа
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПриемникЗаполненияРеквзиита(ЗначениеПараметра, СбисКонтекст, Постфикс = "")
	
	СбисПараметрРазбит	= СтрЗаменить(ЗначениеПараметра, ".", Символы.ПС);
	КлючПоля			= СтрПолучитьСтроку(СбисПараметрРазбит, 1);
	КлючПоля			= Сред(КлючПоля, 2, СтрДлина(КлючПоля) - 2);
	
	Если СбисКонтекст.Свойство("СопоставлениеДанныеКлючиИни") Тогда 
		КлючЗаполнить		= СбисКонтекст.СопоставлениеДанныеКлючиИни.Получить(КлючПоля + Постфикс); 
	Иначе
		КлючЗаполнить = Неопределено;
	КонецЕсли;
	
	Если КлючЗаполнить = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КлючРазбит	= СтрЗаменить(КлючЗаполнить, ".", Символы.ПС);
	Результат	= СбисКонтекст;
	Для НомерСтроки = 1 По СтрЧислоСтрок(КлючРазбит) Цикл
		
		Результат = Результат[СтрПолучитьСтроку(КлючРазбит, НомерСтроки)];
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Функция заполняет реквизит в структуре документа 1С значением	
&НаСервере
Процедура ЗаполнитьЗначениеРеквизита_Сервер(ЗначениеРеквизита, СбисПоле, СбисКонтекст, ДопПараметры) Экспорт
	Перем ЗаполнитьКуда, ПутьРеквизита;
	Если Не СбисПоле.Свойство("Значение", ПутьРеквизита) Тогда 
		Возврат;
	ИначеЕсли Найти(ПутьРеквизита,"[") = 1 Тогда  // ссылка на реквизит
		Если	(	СбисПоле.Свойство("Тип")
			И	НРег(СбисПоле.Тип) = "табличнаячасть")
			Или	(		ДопПараметры.Свойство("ЗаполнитьДанные")
			И	Не	ДопПараметры.ЗаполнитьДанные) Тогда
			//Не заполняем в документ узлы, у которых в типе "ТабличнаяЧасть", т.к. это описание таб.части, которое не должно попадать в итог
			//Или если для узла указано не заполнять
			Возврат;
		КонецЕсли;
		СтрПутьРеквизита = СтрЗаменить(СтрЗаменить(СтрЗаменить(ПутьРеквизита, "[", ""), "]", ""), ".", Символы.ПС);
		Если Не СтрЧислоСтрок(СтрПутьРеквизита) = 2 Тогда
			Возврат;
		КонецЕсли;
		СтрИмяОбъектаКуда = СтрПолучитьСтроку(СтрПутьРеквизита, 1);
		Если СбисКонтекст.ДанныеРезультат.Свойство(СтрИмяОбъектаКуда, ЗаполнитьКуда) Тогда 
			ЗаполнитьКуда.Вставить(СтрПолучитьСтроку(СтрПутьРеквизита, 2), ЗначениеРеквизита);
		КонецЕсли;
	ИначеЕсли	Не Найти(ПутьРеквизита,"'")
		И	Не Найти(ПутьРеквизита,".") Тогда
		Попытка
			СбисКонтекст.Переменные.Вставить(СтрЗаменить(ПутьРеквизита, ".", "_"), ЗначениеРеквизита);
		Исключение
			//На случай, если в качестве переменной пришло значение из документа
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//Возвращает имя реквизита из значения в файле настроек	
Функция СообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции

//Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов		
&НаСервере
функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	МассивЭлементов = Новый Массив();
	Если Строка<>"" Тогда
		ЕстьРазделитель = Истина;
		Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
			Если Найти(Строка,Разделитель)=0 Тогда
				Прервать;
			КонецЕсли;
			Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
			МассивЭлементов.Добавить(Элемент);
			Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
		КонецЦикла;
		МассивЭлементов.Добавить(Строка);
	КонецЕсли;
	Возврат МассивЭлементов;
КонецФункции

//OLD! Использовать РассчитатьПараметрИни Функция рассчитывает	значение параметра из файла настроек
//Для функций и строк возвращает результат, для других значений вызывает расчет на сервере
//Контекст{ини,Документ,СтрТабл}
&НаКлиенте
Функция РассчитатьЗначение(Параметр, Контекст, ВходящийКэш = "") Экспорт 
	
	Если ВходящийКэш = "" Тогда
		Кэш = МодульОбъектаКлиент().ПолучитьТекущийЛокальныйКэш();
	Иначе
		Кэш = ВходящийКэш;
	КонецЕсли;
	
	ИмяПеременнойВПараметре = Ложь;
	Если	Найти(Параметр,"'")
		Или	Найти(Параметр,"{")
		Или Найти(Параметр,"^") Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер = СокрЛП(Параметр);
	ИначеЕсли Найти(Параметр,"[") Тогда
		ЗнПер = СокрЛП(Параметр);
		Если Найти(ЗнПер, "]") = СтрДлина(ЗнПер) Тогда
			//Обращение к узлу напрямую, но через ["Узел"]
			ЗнПер = Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2);//Обрезаем лишние скобки
			РасчитанноеЗначение = Неопределено;
			Если	Контекст.Ини.Свойство(ЗнПер, РасчитанноеЗначение)
				И	РасчитанноеЗначение.Свойство("РассчитанноеЗначение", РасчитанноеЗначение) Тогда
				Возврат РасчитанноеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗнПер = Параметр;
		ИмяПеременнойВПараметре = Истина;
	КонецЕсли;
	Если ИмяПеременнойВПараметре Тогда
		Попытка
			ЗнПер = Контекст.Ини[ЗнПер].Значение;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		Возврат СбисВычислитьФункциюНаКлиенте(Кэш, ЗнПер, Контекст, Новый Структура);
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;               
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			Возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"^")=1 Тогда  // формула, которую необходимо вычислить
		Возврат СбисВычислитьФормулуНаКлиенте(Кэш, ЗнПер,Параметр,Контекст,Новый Структура);
	Иначе
		Возврат РассчитатьЗначениеНаСервере(Параметр,Контекст);
	КонецЕсли	
КонецФункции

&НаКлиенте
Функция СбисВычислитьФункциюНаКлиенте(Кэш, ЗнПер, СбисКонтекст, ДопПараметры)
	Перем Документ, СтрТабл, Переменные;
	НовыйФормат			= Истина;
	
	РазбивкаФункции		= Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2);
	РазбивкаФункции		= СтрЗаменить(СтрЗаменить(СокрЛП(РазбивкаФункции), "(", Символы.ПС), ")", Символы.ПС);
	ИмяФункции			= СокрЛП(СтрПолучитьСтроку(РазбивкаФункции, 1));
	АргументыФункции	= СокрЛП(СтрПолучитьСтроку(РазбивкаФункции, 2));
	
	//Аргументы, которые указаны как узлы через ини
	АргументыДляФункции = Новый Структура;
	АргументыРассчитать	= СтрЗаменить(АргументыФункции, ",", Символы.ПС);
	Если Не ПустаяСтрока(АргументыРассчитать) Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(АргументыРассчитать) Цикл
			
			КлючАргумента = СокрЛП(СтрПолучитьСтроку(АргументыРассчитать, НомерСтроки));
			Если ПустаяСтрока(КлючАргумента) Тогда
				ЗначениеПараметра = Неопределено;
			Иначе
				ЗначениеПараметра = РассчитатьПараметрИни(Кэш, КлючАргумента,, СбисКонтекст, ДопПараметры);
			КонецЕсли;
			АргументыДляФункции.Вставить("Параметр" + НомерСтроки, ЗначениеПараметра);
			
		КонецЦикла;
	КонецЕсли;
	
	//Поддержка старых функций
	Если		СбисКонтекст.Свойство("Документ", Документ) Тогда
		СбисКонтекст.Свойство("СтрТабл", СтрТабл);
		Контекст = СбисКонтекст;
		НовыйФормат = Ложь;
	Иначе
		//Делаем поверхностную копию контекста и отдаём в функцию в старом виде.
		СбисКонтекст.ДанныеРезультат.Свойство("Документ", Документ);
		Контекст = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,"Вложение,СоставПакета,Ини,ИниКонфигурация,МассивОснований,ТекущееПолеИни,Переменные",Ложь);
		Контекст.Вставить("Документ",			Документ);
		Контекст.Вставить("СтруктураФайла",		СбисКонтекст.ДанныеИсточник);
		Контекст.Вставить("АргументыВходящие",	АргументыДляФункции);
		//Если требуется пробросить какие-то свои аргументы в функцию, то передаём в доп. параметрах
		Если ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
			Для Каждого КлючИЗначениеАргумент Из ДопПараметры.ДопАргументыДляФункции Цикл
				Контекст.Вставить(КлючИЗначениеАргумент.Ключ, КлючИЗначениеАргумент.Значение);
			КонецЦикла;
		КонецЕсли;
		Контекст.Свойство("СтрТабл", СтрТабл);
	КонецЕсли;
	СбисКонтекст.Свойство("Переменные", Переменные);
	Попытка
		Если Найти(ИмяФункции, ".") Тогда
			Результат = Вычислить(Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2));
		Иначе
			фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции(ИмяФункции, "РаботаСДокументами1С", "", Кэш);
			Результат = Вычислить("фрм." + ИмяФункции + "(Контекст)");
		КонецЕсли;	
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка+ "(ошибка при вычислении функции """ + Сред(ЗнПер, 2, СтрДлина(ЗнПер) - 2) + """)");
	КонецПопытки;
	Если НовыйФормат Тогда
		//Если СбисКонтекст.Свойство("ДанныеРезультатЛокальные") Тогда
		//	СбисКонтекст.ДанныеРезультатЛокальные = Контекст.СтрТабл;
		//КонецЕсли;
		СбисКонтекст.ДанныеРезультат.Документ = Контекст.Документ;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

//Функция для рассчета значения по имени узла
//Сперва смотрим само значение ПараметрИмя - может быть три варианта:
//1. Это может быть строка, которую надо посчитать - начинается на '^{[
//1.1. Это может быть ссылка на узел, пример [Узел]
//2. Это может быть имя параметра из ини, в котором ищем что конкретно считать. 
//		В таком случае, лучше передать только Узел Ини (СбисПоле), чтобы не проверять лишний раз ключ, либо отдавать только ПараметрИмя для удобства записи.
//Кэш			- структура кэша обработки
//ПараметрИмя	- имя параметра из ини контекста, либо строка, которую требуется рассчитать
//СбисПоле		- поле из ини для расчета и заполнения "рассчитанного значения". Если не передано, то после проверки параметра (если это не строка, требующая расчета) определяется из ини контекста.
//СбисКонтекст	- Контекст расчета.
//ДопПараметры	- дополнительные параметры для расширения. 
//		ВызовСервера -	булево(Ложь). Так, как поле "Вычислить", или общение к данным через [] может потребовать вызова сервера, 
//						то при общем алгоритме должно считаться после того, как весь расчет уйдёт на сервер. Но если ОЧЕНЬ надо (но нежелательно) на клиенте сделать полный расчет узла, 
//						то можно передать признак и тогда значение не будет дожидаться общего вызова сервера.
//		БратьПосчитанное - булево(Истина). Для возможности расчета, не применяя расчитанное значение в ини.
&НаКлиенте
Функция РассчитатьПараметрИни(Кэш, ПараметрИмя="", СбисПоле=Неопределено, СбисКонтекст, ДопПараметры) Экспорт
	Перем ПараметрыРасчета, ЗначениеРеквизита, СбисПараметрРасчет;
	БратьПосчитанное= Не ДопПараметры.Свойство("БратьПосчитанное") Или ДопПараметры.БратьПосчитанное;
	
	СбисПолеРасчет	= СбисПоле;
	Если	Не	СбисПолеРасчет = Неопределено
		И		СбисПолеРасчет.Свойство("РассчитанноеЗначение", ЗначениеРеквизита)
		И	БратьПосчитанное Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	ПараметрыРасчета = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);
	Если Не ПараметрыРасчета.Свойство("ВызовСервера") Тогда
		ПараметрыРасчета.Вставить("ВызовСервера", Ложь);
	КонецЕсли;
	Если Не ПараметрыРасчета.Свойство("Источник") Тогда
		ПараметрыРасчета.Вставить("Источник",	"Имя");
	КонецЕсли;
	ПараметрыРасчета.Вставить("Посчитано",	Ложь);
	
	Если	Не ПустаяСтрока(ПараметрИмя)
		И	Не ПараметрыРасчета.Источник = "ПоСсылкеНаУзел" Тогда
		СбисПараметр	= СокрЛП(ПараметрИмя);
		
		//Сперва проверим имя узла на предмет необходимости расчета (Формулы)
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметр, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		Если ПараметрыРасчета.Посчитано Тогда
			Если Не СбисПоле = Неопределено Тогда
				СбисПоле.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
				ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПоле, СбисКонтекст, ПараметрыРасчета);
			КонецЕсли;
			Возврат ЗначениеРеквизита;
		КонецЕсли;
		
		//Далее точно понадобится узел ини для рассчета
		Если СбисПолеРасчет = Неопределено Тогда
			Если Не ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПолеРасчет, СбисКонтекст, ДопПараметры) Тогда
				Возврат Неопределено;
			ИначеЕсли	СбисПолеРасчет.Свойство("РассчитанноеЗначение", ЗначениеРеквизита)
				И	БратьПосчитанное Тогда
				//Проверим ини на то, что посчитано
				Возврат ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисПолеРасчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Значение
	Если СбисПолеРасчет.Свойство("Значение", СбисПараметрРасчет) Тогда
		
		ПараметрыРасчета.Источник = "Значение";
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		
		Если		ЗначениеРеквизита = Неопределено
			И Не	ПараметрыРасчета.Посчитано Тогда
				
			// Старая логика: если есть значение, но там не что-то, что надо рассчитывать, то берём его как значение. Если есть Данные, Вычислить то заменится.
			ЗначениеРеквизита = СбисПараметрРасчет;
			
		КонецЕсли;
		
	КонецЕсли;
		
	//Вычислить
	//Атрибут на Вычислить является приоритетным, потому даже если ранее уже было что-то посчитано (Данные), но при этом есть параметр Вычислить, либо Вычислить с контекстом то считаем, что ещё не считали.
	Если Не ПараметрыРасчета.Посчитано Тогда
		
		//Данные
		Если СбисПолеРасчет.Свойство("Данные", СбисПараметрРасчет) Тогда
			ПараметрыРасчета.Источник = "Данные";
			ЗначениеРеквизита = РассчитатьПоДаннымПараметра(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
		КонецЕсли;
		// Посчитано, Вычислить не попадаем
		
		Если	СбисПолеРасчет.Свойство("Вычислить", СбисПараметрРасчет) Тогда
			//Универсальный вычислить с вызовом сервера, если необходимо
			ПараметрыРасчета.Источник		= "Вычислить";
			ПараметрыРасчета.Посчитано		= Ложь;
			ПараметрыРасчета.ВызовСервера	= Истина;
			ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
			
		ИначеЕсли	СбисПолеРасчет.Свойство("ВычислитьНаКлиенте", СбисПараметрРасчет) Тогда
			
			ПараметрыРасчета.Источник		= "ВычислитьНаКлиенте";
			ПараметрыРасчета.Посчитано		= Ложь;
			ПараметрыРасчета.ВызовСервера	= Ложь;
			ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
			
		ИначеЕсли	ПараметрыРасчета.ВызовСервера Тогда
			
			//Если включен вызов сервера, то выполним основные расчеты.
			Если		СбисПолеРасчет.Свойство("ВычислитьНаСервере", СбисПараметрРасчет) Тогда
				//Если вызов сервера активен, то отправляем узел на расчет.
				ПараметрыРасчета.Источник		= "ВычислитьНаСервере";
				ПараметрыРасчета.Посчитано		= Ложь;
				ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметрРасчет, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
			ИначеЕсли	СбисПолеРасчет.Свойство("Отбор", СбисПараметрРасчет)
					И	СтрЧислоСтрок(СтрЗаменить(ЗначениеРеквизита, ".", Символы.ПС)) = 2 Тогда 
				//Есть значение и в нём точка, это отбор к регистру/справочнику/докумету и пр. 	
				ПараметрыРасчета.Посчитано		= Ложь;
				ПараметрыРасчета.Источник		= "ОтборНаСервере";
				ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, ПараметрИмя, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если источник не данные, то поставим отбор и приведем тип
	Если Не ПараметрыРасчета.Источник = "Данные" Тогда
		//Сделаем отбор, если есть что отбирать
		Если	СбисПолеРасчет.Свойство("Отбор")
			И	ПараметрыРасчета.Посчитано Тогда
			ПараметрыРасчета.Источник = "Отбор";
			ПараметрыРасчета.Посчитано = Ложь;
			АргументРасчитать = Новый Структура("Значение, РассчитанноеЗначение", СбисПолеРасчет, ЗначениеРеквизита);
			ПараметрыОтбора = Новый Структура("Кэш, Контекст, ДополнительныеПараметры", Кэш, СбисКонтекст, ПараметрыРасчета);
			ЗначениеРеквизита = ВычислитьОтборНаКлиенте(АргументРасчитать, ПараметрыОтбора);
		КонецЕсли;
		
		//Приведем получившееся значение к типу, если указано.
		Если СбисПолеРасчет.Свойство("Тип") Тогда
			Если		СбисПолеРасчет.Тип = "Дата" Тогда
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4), Сред(ЗначениеРеквизита,4,2), Лев(ЗначениеРеквизита,2));
				КонецЕсли;
			ИначеЕсли	СбисПолеРасчет.Тип = "Булево" Тогда
				ЗначениеРеквизита = Булево(ЗначениеРеквизита);
			ИначеЕсли	СбисПолеРасчет.Тип = "Число" Тогда
				ЗначениеРеквизита = Число(ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыРасчета.Посчитано Тогда
		СбисПолеРасчет.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
		ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, СбисПолеРасчет, СбисКонтекст, ПараметрыРасчета);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

//Функция формирует контекст и делает вызов сервера с клиента, если ОЧЕНЬ надо
&НаКлиенте
Функция РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	КонтекстДляСервера = Новый Структура("ДанныеИсточник, ДанныеРезультат, Переменные, Ини, ИмяОбъекта", Новый Структура, Новый Структура, СбисКонтекст.Переменные, СбисКонтекст.Ини, СбисКонтекст.ИмяОбъекта);
	КонтекстДляСервера.ДанныеРезультат.Вставить(СбисКонтекст.ИмяОбъекта,СбисКонтекст.ДанныеРезультат.Документ);
	КонтекстДляСервера.ДанныеИсточник.Вставить("СтруктураФайла",		СбисКонтекст.ДанныеИсточник);
	Если СбисКонтекст.Свойство("ИмяОбъектаЛокальное") И СбисКонтекст.Свойство("ДанныеИсточникЛокальные") Тогда
		КонтекстДляСервера.ДанныеРезультат.Вставить(СбисКонтекст.ИмяОбъектаЛокальное, СбисКонтекст.ДанныеИсточникЛокальные);
		КонтекстДляСервера.Вставить("ИмяОбъектаЛокальное", СбисКонтекст.ИмяОбъектаЛокальное);
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗначениеРеквизита = РассчитатьЗначениеСервер(СбисПараметр, КонтекстДляСервера);
	#Иначе
		ЗначениеРеквизита = РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, КонтекстДляСервера);
	#КонецЕсли
	ДопПараметры.Вставить("Посчитано", Истина);
	
	Возврат ЗначениеРеквизита;
КонецФункции

//Обёртка для УФ, где передаём по значению, чтобы не ломать ссылки и ускорить вызов сервера
&НаСервере
Функция РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, Знач СбисКонтекст)
	
	Возврат МодульОбъектаСервер().РассчитатьЗначениеСервер(СбисПараметр, СбисКонтекст);
	
КонецФункции

//Функция делает рассчет по описанию в поле "Значение", либо по значению в формуле
&НаКлиенте
Функция РассчитатьПоЗначениюПараметра_Клиент(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ЗначениеПосчитано, УзелИниЗначение;
	СбисПервыйСимвол = Лев(СбисПараметр, 1);
	
	Попытка
		Если		СбисПервыйСимвол = "'"	Тогда
			//' - булево, строка
			Если		СбисПараметр = "'Истина'" Тогда
				ЗначениеПосчитано = Истина;               
			ИначеЕсли	СбисПараметр = "'Ложь'" Тогда
				ЗначениеПосчитано = Ложь;
			ИначеЕсли	Сред(СбисПараметр, 2, 1) = СбисПервыйСимвол
				И	ДопПараметры.Источник = "Значение" Тогда
				//Если это '' в значении, то не запоминаем
				Возврат "";
			Иначе
				ЗначениеПосчитано = Сред(СбисПараметр, 2, СтрДлина(СбисПараметр)-2);
			КонецЕсли;
			
			Если	СбисПоле = Неопределено
				ИЛИ (ДопПараметры.Источник <> "Значение"
					ИЛИ	Не СбисПоле.Свойство("Данные")
					И	Не СбисПоле.Свойство("Вычислить")
					И	Не СбисПоле.Свойство("ВычислитьНаСервере")
					И	Не СбисПоле.Свойство("ВычислитьНаКлиенте")) Тогда
					
				// Нет поля расчёта, либо нечего считать дальше, то финита	
				ДопПараметры.Вставить("Посчитано", Истина);
				
			КонецЕсли;
		ИначеЕсли	СбисПервыйСимвол = "{"	Тогда
			//{ - функция
			ЗначениеПосчитано = СбисВычислитьФункциюНаКлиенте(Кэш, СбисПараметр, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		ИначеЕсли	СбисПервыйСимвол = "^"	Тогда
			//^ - формула
			ЗначениеПосчитано = СбисВычислитьФормулуНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		ИначеЕсли	СбисПервыйСимвол = "[" Тогда
			
			Если	ДопПараметры.Источник = "Значение" Тогда
				
				// Проверка по значению. Если в объекте уже есть
				ЗначениеИсточник = ПолучитьПриемникЗаполненияРеквзиита(СбисПараметр, СбисКонтекст, "_РучныеПравки");
				Если Не ЗначениеИсточник = Неопределено Тогда
					КлючДанные = Сред(СбисПараметр, МодульОбъектаКлиент().СбисСтрНайти(СбисПараметр, ".") + 1);
					
					Если ЗначениеИсточник.Свойство(КлючДанные, ЗначениеПосчитано) Тогда
						
						ДопПараметры.Вставить("Посчитано", Истина);
						
					КонецЕсли;	
						
				КонецЕсли;

			Иначе
				
				ЗначениеПосчитано = СбисВычислитьОбращениеКДаннымНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
				
			КонецЕсли;
			
		ИначеЕсли	ДопПараметры.Источник = "Значение" Тогда
			
			//Обращение к данным в значении это параметры для заполнения, не рассчета
		
		ИначеЕсли	ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, УзелИниЗначение, СбисКонтекст, ДопПараметры) Тогда
			ДопПараметры.Источник = "ПоСсылкеНаУзел";
			ЗначениеПосчитано = РассчитатьПараметрИни(Кэш, СбисПараметр, УзелИниЗначение, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		Иначе
			//Прочий расчет сперва идёт через поле ини и там определяется, что это - данные, либо вычислить либо что-то ещё.
		КонецЕсли;
	Исключение
		//Добавить обработку ошибок. Пока игнор.
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЗначениеПосчитано;
	
КонецФункции

&НаКлиенте
Функция РассчитатьПоДаннымПараметра(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ИндексДляОтбора;
	РезультатРасчета = РассчитатьДанныеИзСтруктуры(Кэш, СбисПараметр, СбисКонтекст);
	//Пока что оставить старые костыли с приведением типов до расчета в вычислить. Используеся в функциях.
	Если СбисПоле.Свойство("Тип") Тогда
		Если		СбисПоле.Тип = "Дата" Тогда
			Если ЗначениеЗаполнено(РезультатРасчета) Тогда
				РезультатРасчета = Дата(Сред(РезультатРасчета,7,4),Сред(РезультатРасчета,4,2),Лев(РезультатРасчета,2));
			КонецЕсли;
		ИначеЕсли	СбисПоле.Тип = "Булево" Тогда
			РезультатРасчета = Булево(РезультатРасчета);
		ИначеЕсли	СбисПоле.Тип = "Число" Тогда
			РезультатРасчета = Число(РезультатРасчета);
		КонецЕсли;
	ИначеЕсли	СбисПоле.Свойство("Отбор")//Какой-то костыль для отбора из данных. Переделать на нормальную обработку отборов.
		И	(	СбисПоле.Отбор.Свойство("НомерСтроки",	ИндексДляОтбора)
		Или	СбисПоле.Отбор.Свойство("ИндексСтроки",	ИндексДляОтбора))
		И	ТипЗнч(РезультатРасчета) = Тип("Массив") Тогда
		Попытка
			СбисИндексСтроки = Число(ИндексДляОтбора);
			РезультатРасчета = РезультатРасчета[СбисИндексСтроки];
		Исключение
			//Добавить обработку ошибок
			//ВызватьИсключение(СтрЗаменить(СтрЗаменить("Ошибка отбора по индексу строки в узле {0}. Подробно: {1}",	"{0}",	СбисКонтекст.ТекущееПолеКлюч),
			//																										"{1}",	ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;
	ДопПараметры.Вставить("Посчитано", Истина);
	СбисПоле.Вставить("РассчитанноеЗначение", РезультатРасчета);
	ЗаполнитьЗначениеРеквизита(РезультатРасчета, СбисПоле, СбисКонтекст, ДопПараметры);
	Возврат РезультатРасчета;
КонецФункции

//Рассчитывает данные из стукрутры в контексте сперва в локальных данных, потом в глобальных
&НаКлиенте
Функция РассчитатьДанныеИзСтруктуры(Кэш, ПараметрДанныеРассчитать, СбисКонтекст)
	Перем ДанныеИсточникЛокальные, Результат;
	МодульРасчета = Кэш.ГлавноеОкно.МодульОбъектаКлиент();
	Если		СбисКонтекст.Свойство("ДанныеИсточникЛокальные", ДанныеИсточникЛокальные) Тогда
		//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, ДанныеИсточникЛокальные);
		Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, ДанныеИсточникЛокальные));
	ИначеЕсли	СбисКонтекст.Свойство("СтекДанныеИсточник", ДанныеИсточникЛокальные) Тогда
		//Проброска данных с учетом их пути, чтобы не менять структуру данных
		Для Каждого СтрокаСтека Из ДанныеИсточникЛокальные Цикл
			//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, СтрокаСтека);
			Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, СтрокаСтека));
			Если Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		//Результат = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПараметрДанныеРассчитать, СбисКонтекст.ДанныеИсточник);
		Результат = МодульРасчета.ПолучитьДанныеПоПути(Новый Структура("Путь, Данные", ПараметрДанныеРассчитать, СбисКонтекст.ДанныеИсточник));
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СбисВычислитьФормулуНаКлиенте(Кэш, ЗнПер, ПараметрИни, Контекст, ДопПараметры)
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		ПозСкобки = Найти(ВычисляемаяСтрока, "(");
		ИмяФормулы = нрег(СокрЛП(Лев(ВычисляемаяСтрока, ПозСкобки-1)));
		СтрокаПараметров = Сред(ВычисляемаяСтрока,ПозСкобки+1, СтрДлина(ВычисляемаяСтрока)-ПозСкобки-1);
		МассивПараметров = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(СтрокаПараметров, ",");
		ТекущееПолеИни = Новый Структура;
		Если ТипЗнч(ПараметрИни)=Тип("Структура") Тогда
			ТекущееПолеИни = ПараметрИни;
		ИначеЕсли Контекст.Свойство("ТекущееПолеИни") Тогда
			ТекущееПолеИни = Контекст.ТекущееПолеИни;
		КонецЕсли;
		Если ИмяФормулы = ">" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "<" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "!=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "+" Тогда
			Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				Если ТекущееПолеИни.Свойство("Тип") и ТекущееПолеИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "*" Тогда
			Результат = 1;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				Результат = Результат * Число(Элемент);
			КонецЦикла;
			Если ТекущееПолеИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ТекущееПолеИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "сред" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "найти" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли ИмяФормулы = "или" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-1], , Контекст, ДопПараметры);
			МассивПараметров[КолПараметров-2] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-2], , Контекст, ДопПараметры);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, МассивПараметров[сч], , Контекст, ДопПараметры);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
		ИначеЕсли ИмяФормулы = "и" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-1], , Контекст, ДопПараметры);
			МассивПараметров[КолПараметров-2] = РассчитатьПараметрИни(Кэш, МассивПараметров[КолПараметров-2], , Контекст, ДопПараметры);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, МассивПараметров[сч], , Контекст, ДопПараметры);
				Если МассивПараметров[сч] = Ложь Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		ИначеЕсли ИмяФормулы = "окрбольше" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[0] = РассчитатьПараметрИни(Кэш, МассивПараметров[0], , Контекст, ДопПараметры);
			Если Цел(МассивПараметров[0]) = МассивПараметров[0] Тогда
				Возврат МассивПараметров[0];
			Иначе
				Возврат Цел(МассивПараметров[0])+1;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "окр" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<2 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьПараметрИни(Кэш, Элемент, , Контекст, ДопПараметры);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров.Количество() = 2 Тогда
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]));
			Иначе
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]), РежимОкругления.Окр15как10);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции

//Функция делает расчет обращения к данным
&НаКлиенте
Функция СбисВычислитьОбращениеКДаннымНаКлиенте(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры)
	Перем ЗначениеПосчитано, УзелИниЗначение;
	СтрПараметрРазбит	= СтрЗаменить(СбисПараметр, ".", Символы.ПС);
	СтрОбъекта			= Сред(СбисПараметр, 2, СтрДлина(СтрПолучитьСтроку(СтрПараметрРазбит, 1)) - 2);
	
	Если СбисКонтекст.ДанныеРезультат.Свойство(СтрОбъекта, УзелИниЗначение) Тогда
		
		// Обращение к рассчитанным данным
		СтрокаКлючПеременной = СокрЛП(СтрПолучитьСтроку(СтрПараметрРазбит, 2));
		УзелИниЗначение.Свойство(СтрокаКлючПеременной, ЗначениеПосчитано);
		ДопПараметры.Вставить("Посчитано", Истина);
		
	ИначеЕсли ЭтоСсылкаНаУзелИни(Кэш, СтрОбъекта, УзелИниЗначение, СбисКонтекст, ДопПараметры) Тогда
		УзелИниЗначение.Свойство("РассчитанноеЗначение", ЗначениеПосчитано);
		Если	ЗначениеЗаполнено(ЗначениеПосчитано) Тогда
			Если Прав(СбисПараметр, 1) = "]" Тогда
				ДопПараметры.Вставить("Посчитано", Истина);
			ИначеЕсли ТипЗнч(ЗначениеПосчитано) = Тип("Структура") Тогда
				//Если от узла берётся значение, то пробуем взять.
				СтрокаКлючПараметра = СокрЛП(СтрПолучитьСтроку(СтрПараметрРазбит, 2));
				Попытка
					ЗначениеПосчитано = ЗначениеПосчитано[СтрокаКлючПараметра];
					ДопПараметры.Вставить("Посчитано", Истина);
				Исключение
					СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Параметр """ + СтрокаКлючПараметра + """ отсутствует в значении");
					Возврат Неопределено;
				КонецПопытки
			КонецЕсли;
		КонецЕсли;
		Если		ДопПараметры.Посчитано Тогда
			//Всё кончено
		ИначеЕсли	ДопПараметры.ВызовСервера Тогда
			ЗначениеПосчитано = РассчитатьПоЗначениюПараметра_ДляСервера(Кэш, СбисПараметр, СбисПоле, СбисКонтекст, ДопПараметры);
		ИначеЕсли	ДопПараметры.Источник = "ВычислитьНаКлиенте" Тогда
			//Для вычислить на клиенте вызываем расчет. В противном случае, уже должно быть рассчитанное значение.
			ЗначениеПосчитано = РассчитатьПараметрИни(Кэш,, УзелИниЗначение, СбисКонтекст, ДопПараметры);
			ДопПараметры.Вставить("Посчитано", Истина);
		КонецЕсли;
		
	ИначеЕсли СтрОбъекта = "Переменные" Тогда
		
		СтрПараметрРазбит = СтрЗаменить(СбисПараметр, ".", Символы.ПС);
		СтрокаКлючПеременной = СокрЛП(СтрПолучитьСтроку(СтрПараметрРазбит, 2));
		Попытка
			Если Не СбисКонтекст.Переменные.Свойство(СтрокаКлючПеременной, ЗначениеПосчитано) Тогда
				СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Переменная """ + СтрокаКлючПеременной + """ отсутствует в расчитанных данных");
				Возврат Неопределено;
			КонецЕсли;
		Исключение
			СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(, "Документ_Шаблон.РассчитатьПоЗначениюПараметра_Клиент",600,"Ошибка при расчете", "Не поддерживаемая строка " + СтрокаКлючПеременной);
			Возврат Неопределено;
		КонецПопытки;
		ДопПараметры.Вставить("Посчитано", Истина);
		
	Иначе
		
		ЗначениеПосчитано = Неопределено
		
	КонецЕсли;
	
	Возврат ЗначениеПосчитано;
КонецФункции
	
//OLD! использовать РассчитатьЗначениеСервер Функция рассчитывает значение параметра из файла настроек на сервере	
&НаКлиенте
Функция РассчитатьЗначениеНаСервере(СбисПараметр, СбисКонтекст) Экспорт
	КонтекстДляСервера = Новый Структура("ДанныеИсточник, ДанныеРезультат, Переменные, Ини, ИмяОбъекта", Новый Структура, Новый Структура, СбисКонтекст.Переменные, СбисКонтекст.Ини, "Документ");
	КонтекстДляСервера.ДанныеРезультат.Вставить(КонтекстДляСервера.ИмяОбъекта, СбисКонтекст.Документ);
	КонтекстДляСервера.ДанныеИсточник.Вставить("СтруктураФайла", СбисКонтекст.СтруктураФайла);
	Если СбисКонтекст.Свойство("СтрокаФайла") Тогда
		КонтекстДляСервера.ДанныеРезультат.Вставить("ТаблДок", СбисКонтекст.СтрокаФайла);
		КонтекстДляСервера.Вставить("ИмяОбъектаЛокальное", "ТаблДок");
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат РассчитатьЗначениеСервер(СбисПараметр, КонтекстДляСервера);
	#Иначе
		Возврат РассчитатьПоЗначениюПараметра_ДляСервераВызов(СбисПараметр, КонтекстДляСервера);
	#КонецЕсли
КонецФункции

//Процедура копирует структуру на сервере	
&НаСервере
Процедура СбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = Тип("Массив") Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Создание дополнительных свойств
&НаСервере
Функция СоздатьНаборСвойствПоМассиву(РассчитанныйНаборСвойств, МассивКлючей, ИниКонфигурация, Отказ) Экспорт
	
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	ИмяНаборыДополнительныхРеквизитовИСведений = ИмяНаборыДополнительныхРеквизитовИСведений(ИниКонфигурация);
	ИмяЗначенияСвойствОбъектов = ИмяЗначенияСвойствОбъектов(ИниКонфигурация);
	
	Если ИмяПланаВидовХарактеристикСвойствОбъектов = Неопределено Тогда
		Возврат "Не известно, где хранить дополнительные сведения.";	
	КонецЕсли;
	
	Для Каждого Ключ ИЗ МассивКлючей Цикл
		
		СтруктураОбъекта = РассчитанныйНаборСвойств[Ключ.ИмяНабора].мФайл[Ключ.ИмяСвойства];
		
		ДопСведение = НайтиДопСведение(СтруктураОбъекта, ИмяПланаВидовХарактеристикСвойствОбъектов, Отказ);
		
		Если Отказ Тогда
			Возврат ДопСведение;	
		КонецЕсли;
		
		ЭтоНовоеСвойство = ЛОжь;
		
		Если НЕ ЗначениеЗаполнено(ДопСведение) Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", Неопределено);
			ДополнительныеПараметры.Вставить("ТипОбъекта", "ПланВидовХарактеристик");
			ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяПланаВидовХарактеристикСвойствОбъектов);
			
			Результат = СоздатьОбъектИзСтруктуры(СтруктураОбъекта, ДополнительныеПараметры, Отказ);
			
			Если Отказ Тогда
				Возврат Результат.Сообщение;	
			КонецЕсли;
			
			ДопСведение = Результат.Ссылка;
			ЭтоНовоеСвойство = Истина;
			
		КонецЕсли;
		
		НаборСвойств = Неопределено;
		СтруктураОбъекта.Свойство("НаборСвойств", НаборСвойств);
		
		Если ИмяНаборыДополнительныхРеквизитовИСведений <> Неопределено 
			И ЗначениеЗаполнено(НаборСвойств) Тогда
			
			НаборДопСведений = НайтиНаборыДополнительныхРеквизитовИСведений(НаборСвойств, ИмяНаборыДополнительныхРеквизитовИСведений, ДопСведение);
			
			Если НЕ ЗначениеЗаполнено(НаборДопСведений) Тогда
				
				ЭтоДополнительноеСведение = Ложь;
				Если СтруктураОбъекта.Свойство("ЭтоДополнительноеСведение") Тогда
					ЭтоДополнительноеСведение = СтруктураОбъекта.ЭтоДополнительноеСведение;	
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", НаборСвойств);
				ДополнительныеПараметры.Вставить("ТипОбъекта", "Справочник");
				ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяНаборыДополнительныхРеквизитовИСведений);
				
				СтруктураСправочника = Новый Структура();
				
				Если ЭтоДополнительноеСведение Тогда
					ИмяРеквизита = "ДополнительныеСведения";	
				Иначе
					ИмяРеквизита = "ДополнительныеРеквизиты";
				КонецЕсли;
				
				СтруктураСправочника.Вставить(ИмяРеквизита, Новый Массив);
				
				Попытка
					Для Каждого ТекСтрока ИЗ НаборСвойств[ИмяРеквизита]Цикл
						СтруктураСтроки = Новый Структура();
						СтруктураСтроки.Вставить("Свойство", ТекСтрока.Свойство);
						СтруктураСтроки.Вставить("ПометкаУдаления", ТекСтрока.ПометкаУдаления);
						СтруктураСтроки.Вставить("ИмяПредопределенногоНабора", ТекСтрока.ИмяПредопределенногоНабора);
						СтруктураСправочника[ИмяРеквизита].Добавить(СтруктураСтроки)		
					КонецЦикла;
					СтруктураСтроки = Новый Структура();
					СтруктураСтроки.Вставить("Свойство", ДопСведение);
					СтруктураСправочника[ИмяРеквизита].Добавить(СтруктураСтроки);		
				Исключение
					Возврат ОписаниеОшибки();
				КонецПопытки;
				
				Результат = СоздатьОбъектИзСтруктуры(СтруктураСправочника, ДополнительныеПараметры, Отказ);
				
				Если Отказ Тогда
					Сообщить(Результат.Сообщение);	
				КонецЕсли;
				
			Конецесли;
		КонецЕсли;
		
		Если ИмяЗначенияСвойствОбъектов <> Неопределено 
			И ЭтоНовоеСвойство
			И СтруктураОбъекта.Свойство("ДополнительныеЗначение") Тогда
			
			Для Каждого ТекСтрока ИЗ СтруктураОбъекта.ДополнительныеЗначение Цикл
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ОбъектПерезаполнитьСсылка", Неопределено);
				ДополнительныеПараметры.Вставить("ТипОбъекта", "Справочник");
				ДополнительныеПараметры.Вставить("ПодТипОбъекта", ИмяЗначенияСвойствОбъектов);
				
				СтруктураСправочника = Новый Структура();
				СтруктураСправочника.Вставить("Владелец", ДопСведение);
				СтруктураСправочника.Вставить("Наименование", ТекСтрока);
				
				Результат = СоздатьОбъектИзСтруктуры(СтруктураСправочника, ДополнительныеПараметры, Отказ);
				
				Если Отказ Тогда
					Сообщить(Результат.Сообщение);	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация) Экспорт
	
	Если ИниКонфигурация.Свойство("ИмяПланаВидовХарактеристикСвойствОбъектов") 
		И ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов.Значение, "'", "");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ИмяНаборыДополнительныхРеквизитовИСведений(ИниКонфигурация)
	
	Если ИниКонфигурация.Свойство("ИмяНаборыДополнительныхРеквизитовИСведений") 
		И ИниКонфигурация.ИмяНаборыДополнительныхРеквизитовИСведений <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяНаборыДополнительныхРеквизитовИСведений.Значение, "'", "");
	ИначеЕсли Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") <> Неопределено Тогда
		Возврат "НаборыДополнительныхРеквизитовИСведений";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ИмяЗначенияСвойствОбъектов(ИниКонфигурация)
	
	Если ИниКонфигурация.Свойство("ИмяЗначенияСвойствОбъектов") 
		И ИниКонфигурация.ИмяЗначенияСвойствОбъектов <> Неопределено Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяЗначенияСвойствОбъектов.Значение, "'", "");
	ИначеЕсли Метаданные.Справочники.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		Возврат Неопределено;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция НайтиДопСведение(СтруктураОбъекта, ИмяПланаВидовХарактеристикСвойствОбъектов, Отказ)
	
	ОбщееДляНесколькихНаборов = СтруктураОбъекта.Свойство("ОбщееДляНесколькихНаборов") И СтруктураОбъекта.ОбщееДляНесколькихНаборов;
	
	НаборСвойств = Неопределено;
	СтруктураОбъекта.Свойство("НаборСвойств", НаборСвойств);
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", СтруктураОбъекта.Наименование);
		
		Если НаборСвойств <> Неопределено Тогда    
			Если НЕ ОбщееДляНесколькихНаборов Тогда
				Запрос.Текст =	Запрос.Текст + "
				|	И ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств";
				
				Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
			КонецЕсли;
		Иначе
			Если СтруктураОбъекта.Свойство("НазначениеСвойства") Тогда 
				Запрос.Текст =	Запрос.Текст + "
				|	И ДополнительныеРеквизитыИСведения.НазначениеСвойства = &НазначениеСвойства";
				
				Запрос.УстановитьПараметр("НазначениеСвойства", СтруктураОбъекта.НазначениеСвойства);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДополнительныеРеквизитыИСведения", ИмяПланаВидовХарактеристикСвойствОбъектов); 
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	Исключение
		Отказ = Истина;
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиНаборыДополнительныхРеквизитовИСведений(НаборСвойств, ИмяНаборыДополнительныхРеквизитовИСведений, Свойство)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство = &Свойство
		|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = &НаборСвойств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство
		|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = &НаборСвойств";
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НаборыДополнительныхРеквизитовИСведений", ИмяНаборыДополнительныхРеквизитовИСведений);  
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;	
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;	
	
КонецФункции

//Функция заполняет реквизиты объекта 1С из одноименных полей структуры. Поддерживаемые типы: Документ, Справочник	
&НаСервере
Функция СоздатьОбъектИзСтруктуры(Знач СтруктураДокОбъект, Знач ДополнительныеПараметры, Отказ)
	
	Возврат МодульОбъектаСервер().СоздатьОбъект1СИзСтруктурыНаСервере(СтруктураДокОбъект, ДополнительныеПараметры, Отказ);

КонецФункции 

//Возвращает Истина, если есть ВычислитьНаСервере, либо Вычислить определенного вида
//В СтрокуПараметраВычислить Отдаётся значение параметра.
&НаСервере
Функция ЕстьПараметрВычислитьНаСервере(СбисЭлементПроверки, СтрокаПараметраВычислить=Неопределено)
	Возврат 	(	СбисЭлементПроверки.Свойство("ВычислитьНаСервере", СтрокаПараметраВычислить)//ВычислитьНаСервере берём в приоритете (совместимость старой логики). Только если нет узла, смотрим Вычислить
	И	ЗначениеЗаполнено(СтрокаПараметраВычислить))
	Или	(	СбисЭлементПроверки.Свойство("Вычислить", СтрокаПараметраВычислить) 
	И	ЗначениеЗаполнено(СтрокаПараметраВычислить)
	И	Не (	Лев(СтрокаПараметраВычислить,1) = "'"
	Или	Лев(СтрокаПараметраВычислить,1) = "{" 
	Или	Лев(СтрокаПараметраВычислить,1) = "^"));	
КонецФункции

