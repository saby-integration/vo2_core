////////////////////////////////////////////////////
//////////Вспомогательные функции загрузки//////////
////////////////////////////////////////////////////

//Проводит поиск значения по узлу описания и обновление из описанного узла. Если не найдено, досоздаёт.
//Контекст - контекст расчета
//УППоиск - Ключ узла с описанием поиска.
//УПТип - Параметр, определяет тип объекта.
//УПОписаниеОбъекта - Ключ узла с описанием структуры для обновления объекта.
//Дополнительные параметры определяются в переменных из контекста узлами:
//	СбисНайтиИОбновить_Сообщить - сообщает о результате обновления(создания) объекта. По-умолчанию - Ложь (не сообщать)
//	СбисНайтиИОбновить_Обновлять - определяет необходимость обновить найденный объект. По-умолчанию - Ложь (вернуть ссылку, не трогая).
//	СбисНайтиИОбновить_Досоздать - определяет необходимость создать новый объект, если не найден. По-умолчанию - Истина (вернуть ссылку нового объекта).
&НаСервере
Функция СбисНайтиИОбновить(Знач Контекст, Знач УППоиск, Знач УПТип="", Знач УПОписаниеОбъекта=Неопределено)
	Перем СообщитьСтатус, ОбновитьОбъект;
	РезультатПоиска = РассчитатьЗначениеСервер(УППоиск, Контекст);
	Если РезультатПоиска = Неопределено Тогда
		Если (	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Досоздать", ОбновитьОбъект)
			И	ОбновитьОбъект = Ложь) Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли Не	(	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Обновить", ОбновитьОбъект)
		И	ОбновитьОбъект = Истина) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	УниверсальныйПоиск_Тип = СтрЗаменить(УПТип, ".", Символы.ПС);
	Отказ = Ложь;
	СтруктураДосоздать = РассчитатьЗначениеСервер(УПОписаниеОбъекта, Контекст);
	ПараметрыСоздания = Новый Структура("ТипОбъекта,ПодТипОбъекта,ОбъектПерезаполнитьСсылка", 
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 1),
	СтрПолучитьСтроку(УниверсальныйПоиск_Тип, 2),
	РезультатПоиска);
	РезультатСоздания = СоздатьОбъектИзСтруктуры(СтруктураДосоздать, ПараметрыСоздания, Отказ);
	Если	Контекст.Переменные.Свойство("СбисНайтиИОбновить_Сообщить", СообщитьСтатус)
		И	СообщитьСтатус = Истина Тогда
		Сообщить(РезультатСоздания.Сообщение);
	КонецЕсли;
	Возврат РезультатСоздания.Ссылка;
КонецФункции

//Функция возвращает глубокую копию раздела ини без копии расчитанных значений. 
//Поддерживаемые составные типы: Структура, Массив.
//ДопПараметры: КлючиНеКопировать - массив ключей, значения которых не копируются, а переносятся как есть.
&НаСервере
Функция СкопироватьОбъектСПараметрамиСервер(Знач СбисОбъект, ГлубокоеКопирование=Истина, СбисКлючи=Неопределено)
	Если ТипЗнч(СбисОбъект) = Тип("Структура") Тогда
		Если СбисКлючи = Неопределено Тогда
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СбисОбъект Цикл
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Если ГлубокоеКопирование Тогда
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)			
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = Новый Структура(СбисКлючи);
			ЗаполнитьЗначенияСвойств(Результат, СбисОбъект);
			Если ГлубокоеКопирование Тогда
				Для Каждого КлючИЗначение Из Результат Цикл
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СбисОбъект) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Если СбисКлючи = Неопределено Тогда
			Для Каждого ЭлементМассива Из СбисОбъект Цикл
				Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
			КонецЦикла;
		Иначе
			Для Счетчик = 0 По СбисОбъект.Количество() Цикл
				Если СбисКлючи.Найти(Счетчик) Тогда
					Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Результат = СбисОбъект;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция проверяет, не является ли указанный параметр ссылкой на узел в ини контекста, либо в стекеИни, если указано. В СбисПоле будет помещён найденный узел при успехе.
&НаКлиенте
Функция ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПоле=Неопределено, СбисКонтекст, ДопПараметры)
	Если СбисКонтекст.Свойство("СтекИни") Тогда
		//Стек ини для возможности указать узел на рассчет без изменения контекста (например, для составных узлов)
		Для Каждого ЭлементСтека Из СбисКонтекст.СтекИни Цикл
			Попытка
				Если ЭлементСтека.Свойство(СбисПараметр, СбисПоле) Тогда
					Прервать;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		Возврат Не СбисПоле = Неопределено;
	Иначе
	Попытка
		Возврат СбисКонтекст.Ини.Свойство(СбисПараметр, СбисПоле);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	КонецЕсли;
КонецФункции

//Процедура устанавливает стек в контекст
&НаКлиенте
Процедура УстановитьЗначениеИниВСтек(Кэш, СбисКонтекст, ЗначениеИниВСтек) Экспорт
	Перем СтекИни;
	Если СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		СтекИни.Вставить(0, ЗначениеИниВСтек);
	Иначе
		СтекИни = Новый Массив;
		СтекИни.Добавить(ЗначениеИниВСтек);
		СтекИни.Добавить(СбисКонтекст.Ини);
		СбисКонтекст.Вставить("СтекИни", СтекИни);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗначениеИниИзСтека(Кэш, СбисКонтекст) Экспорт
	Перем СтекИни;
	Если Не СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		Возврат;
	КонецЕсли;
	Если СтекИни.Количество() = 2 Тогда
		СбисКонтекст.Удалить("СтекИни");
	Иначе	
		СтекИни.Удалить(0);
	КонецЕсли;
КонецПроцедуры

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаКлиенте
Функция ЭтоСложныйУзел_Клиент(Кэш, Поле)
	Перем ЗначениеТипПодУзла;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			//Проверку делаем по первому элементу узла. Если там нет описания, то адью.
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаСервере
Функция ЭтоСложныйУзел_Сервер(Аргумент)
	Перем ЗначениеТипПодУзла;
	Поле = Аргумент.Значение;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПрерываниеПользователемФормированияДокументов()
	// Если пользователь прервал формирование документов, прячем состояние
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СбисПоискОснованияКорректировки(Контекст, ИдПакета, Вложения) Экспорт 
	Если Не ТипЗнч(Вложения) = Тип("Массив") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВремТабл = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	КС = Новый КвалификаторыСтроки(50);
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив,, КС);
	ВремТабл.Колонки.Добавить("Ид", ОписаниеТиповС);
	ВремТабл.Колонки.Добавить("ИдВложения", ОписаниеТиповС);
	ИдВложения = Неопределено;
	
	Для Каждого ЭлВлождение Из Вложения Цикл
		
		Если НРег(ЭлВлождение.Направление) = "исходящий"
			И НРег(ЭлВлождение.Тип) = "уведомлотгр" Тогда
			
			ИдВложения = ЭлВлождение.Идентификатор;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдВложения = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	НовСтрВремТабл = ВремТабл.Добавить();
	НовСтрВремТабл.Ид = ИдПакета;
	НовСтрВремТабл.ИдВложения = ИдВложения;
	
	мСвойстваДокументСбисИд = Новый Массив; 
	мСвойстваДокументСбисИдВложения = Новый Массив;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ИмяРегистраСвойствОбъектов = "ДополнительныеСведения"; 
		ИмяРеквизитаСвойства = "Заголовок";
		//мСвойстваДокументСбисИд.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", "ДокументСБИС_Ид"));
		//мСвойстваДокументСбисИдВложения.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", "ДокументСБИС_ИдВложения"));
	#Иначе
		ИмяРегистраСвойствОбъектов = "ЗначенияСвойствОбъектов"; 
		ИмяРеквизитаСвойства = "Наименование";
		//мСвойстваДокументСбисИд.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДокументСБИС_Ид", Истина));
		//мСвойстваДокументСбисИдВложения.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДокументСБИС_ИдВложения", Истина));
	#КонецЕсли
	
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ТЗ.Ид,
	|	ТЗ.ИдВложения
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ид,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыПакета
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	|		ПО ЗначенияСвойствОбъектов.Значение ПОДОБНО ВТ.Ид + ""%""
	|		И (ЗначенияСвойствОбъектов.Свойство." + ИмяРеквизитаСвойства + " ПОДОБНО ""%"" + &мСвойстваДокументСбисИд)
	|СГРУППИРОВАТЬ ПО Ид, Объект;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ИдВложения,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыВложений
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.ИдВложения = ЗначенияСвойствОбъектов.Значение
	|		И (ЗначенияСвойствОбъектов.Свойство." + ИмяРеквизитаСвойства + " ПОДОБНО ""%"" + &мСвойстваДокументСбисИдВложения)
	|СГРУППИРОВАТЬ ПО ИдВложения, Объект;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыПакета.Ид,
	|	ЕСТЬNULL(ВТДокументыВложений.ИдВложения, """") КАК ИдВложения,
	|	ВТДокументыПакета.Док1С								
	|ИЗ
	|	ВТДокументыПакета КАК ВТДокументыПакета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыВложений 
	|		ПО ВТДокументыПакета.Док1С = ВТДокументыВложений.Док1С";
	
	запрос.УстановитьПараметр("ТЗ", ВремТабл);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИд", "ДокументСБИС_Ид");
	запрос.УстановитьПараметр("мСвойстваДокументСбисИдВложения", "ДокументСБИС_ИдВложения");
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(), Выборка.Док1С, Неопределено);
КонецФункции

Функция СбисПоискСвойств(Знач Контекст, Знач Заголовок) Экспорт
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок");
	#Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.СвойстваОбъектов КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Наименование = &Заголовок");
	#КонецЕсли
	Запрос.УстановитьПараметр("Заголовок", Заголовок);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуРасхождений (Кэш, СписокОтмеченныхДокументов, ДопПараметры) Экспорт
	
	Обновлять = Ложь;

	СписокРасхожденийПолучить = Новый СписокЗначений;
	Для Каждого СтрокаСпискаОтметить Из СписокОтмеченныхДокументов Цикл
		СтрокаСравнениеПолучить = Новый Структура("Документ1С, ДокументСБИСНазвание, ИдВложения, СоставПакета");
		ЗаполнитьЗначенияСвойств(СтрокаСравнениеПолучить, СтрокаСпискаОтметить.Значение);
		СписокРасхожденийПолучить.Добавить(СтрокаСравнениеПолучить);
	КонецЦикла;
	
	ДопПараметрыСравнения		= Новый Структура("Кэш", МестныйКэш);
	ПараметрыСравненияИсходящеи	= Новый Структура("СписокСопоставлений", СписокРасхожденийПолучить);
	Возврат МодульОбъектаКлиент().СравнитьВыбранныеДокументы(ПараметрыСравненияИсходящеи, ДопПараметрыСравнения);
	
КонецФункции

