////////////////////////////////////////////////////
//////////Вспомогательные функции загрузки//////////
////////////////////////////////////////////////////

//Функция возвращает глубокую копию раздела ини без копии расчитанных значений. 
//Поддерживаемые составные типы: Структура, Массив.
//ДопПараметры: КлючиНеКопировать - массив ключей, значения которых не копируются, а переносятся как есть.
&НаСервере
Функция СкопироватьОбъектСПараметрамиСервер(Знач СбисОбъект, ГлубокоеКопирование=Истина, СбисКлючи=Неопределено)
	Если ТипЗнч(СбисОбъект) = Тип("Структура") Тогда
		Если СбисКлючи = Неопределено Тогда
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СбисОбъект Цикл
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Если ГлубокоеКопирование Тогда
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)			
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = Новый Структура(СбисКлючи);
			ЗаполнитьЗначенияСвойств(Результат, СбисОбъект);
			Если ГлубокоеКопирование Тогда
				Для Каждого КлючИЗначение Из Результат Цикл
					Результат[КлючИЗначение.Ключ] = СкопироватьОбъектСПараметрамиСервер(КлючИЗначение.Значение,ГлубокоеКопирование)
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СбисОбъект) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Если СбисКлючи = Неопределено Тогда
			Для Каждого ЭлементМассива Из СбисОбъект Цикл
				Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
			КонецЦикла;
		Иначе
			Для Счетчик = 0 По СбисОбъект.Количество() Цикл
				Если СбисКлючи.Найти(Счетчик) Тогда
					Результат.Добавить(?(ГлубокоеКопирование, СкопироватьОбъектСПараметрамиСервер(ЭлементМассива,ГлубокоеКопирование), ЭлементМассива));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Результат = СбисОбъект;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция проверяет, не является ли указанный параметр ссылкой на узел в ини контекста, либо в стекеИни, если указано. В СбисПоле будет помещён найденный узел при успехе.
&НаКлиенте
Функция ЭтоСсылкаНаУзелИни(Кэш, СбисПараметр, СбисПоле=Неопределено, СбисКонтекст, ДопПараметры)
	Если СбисКонтекст.Свойство("СтекИни") Тогда
		//Стек ини для возможности указать узел на рассчет без изменения контекста (например, для составных узлов)
		Для Каждого ЭлементСтека Из СбисКонтекст.СтекИни Цикл
			Попытка
				Если ЭлементСтека.Свойство(СбисПараметр, СбисПоле) Тогда
					Прервать;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		Возврат Не СбисПоле = Неопределено;
	Иначе
	Попытка
		Возврат СбисКонтекст.Ини.Свойство(СбисПараметр, СбисПоле);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	КонецЕсли;
КонецФункции

//Процедура устанавливает стек в контекст
&НаКлиенте
Процедура УстановитьЗначениеИниВСтек(Кэш, СбисКонтекст, ЗначениеИниВСтек) Экспорт
	Перем СтекИни;
	Если СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		СтекИни.Вставить(0, ЗначениеИниВСтек);
	Иначе
		СтекИни = Новый Массив;
		СтекИни.Добавить(ЗначениеИниВСтек);
		СтекИни.Добавить(СбисКонтекст.Ини);
		СбисКонтекст.Вставить("СтекИни", СтекИни);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗначениеИниИзСтека(Кэш, СбисКонтекст) Экспорт
	Перем СтекИни;
	Если Не СбисКонтекст.Свойство("СтекИни", СтекИни) Тогда
		Возврат;
	КонецЕсли;
	Если СтекИни.Количество() = 2 Тогда
		СбисКонтекст.Удалить("СтекИни");
	Иначе	
		СтекИни.Удалить(0);
	КонецЕсли;
КонецПроцедуры

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаКлиенте
Функция ЭтоСложныйУзел_Клиент(Кэш, Поле)
	Перем ЗначениеТипПодУзла;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			//Проверку делаем по первому элементу узла. Если там нет описания, то адью.
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//Проверяет узел на то, что он составной (таб.часть у вложения)
&НаСервере
Функция ЭтоСложныйУзел_Сервер(Аргумент)
	Перем ЗначениеТипПодУзла;
	Поле = Аргумент.Значение;
	Если ТипЗнч(Поле) = Тип("Структура") Тогда
		//Если Поле.Свойство("НомСредИдентТов") Тогда
		//	Возврат Истина;
		//КонецЕсли;
		Для Каждого КлючИЗначение Из Поле Цикл
			Если	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И	КлючИЗначение.Значение.Свойство(КлючИЗначение.Ключ, ЗначениеТипПодУзла)
				И	ЗначениеТипПодУзла.Свойство("Тип", ЗначениеТипПодУзла)
				И	НРег(ЗначениеТипПодУзла) = "табличнаячасть" Тогда
				Возврат Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПрерываниеПользователемФормированияДокументов()
	// Если пользователь прервал формирование документов, прячем состояние
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры

Функция СбисПоискСвойств(Знач Контекст, Знач Заголовок) Экспорт
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок");
	#Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РАЗЛИЧНЫЕ ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	ПланВидовХарактеристик.СвойстваОбъектов КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.Наименование = &Заголовок");
	#КонецЕсли
	Запрос.УстановитьПараметр("Заголовок", Заголовок);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуРасхождений (Кэш, СписокОтмеченныхДокументов, ДопПараметры) Экспорт
	
	Обновлять = Ложь;

	СписокРасхожденийПолучить = Новый СписокЗначений;
	Для Каждого СтрокаСпискаОтметить Из СписокОтмеченныхДокументов Цикл
		СтрокаСравнениеПолучить = Новый Структура("Документ1С, ДокументСБИСНазвание, ИдВложения, СоставПакета");
		ЗаполнитьЗначенияСвойств(СтрокаСравнениеПолучить, СтрокаСпискаОтметить.Значение);
		СписокРасхожденийПолучить.Добавить(СтрокаСравнениеПолучить);
	КонецЦикла;
	
	ДопПараметрыСравнения		= Новый Структура("Кэш", МестныйКэш);
	ПараметрыСравненияИсходящеи	= Новый Структура("СписокСопоставлений", СписокРасхожденийПолучить);
	Возврат МодульОбъектаКлиент().СравнитьВыбранныеДокументы(ПараметрыСравненияИсходящеи, ДопПараметрыСравнения);
	
КонецФункции

