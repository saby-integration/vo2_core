
////////////////////////////////////////////////////
/////////////Обработчики для узлов//////////////////
////////////////////////////////////////////////////

//Стандартный обработчик узла при загузке в 1С
//Аргумент - Структура с полями Ключ, Значение/КлючИЗначение - расчитываемое имя и значение узла 
//ПараметрыОбработчика - структура Кэш, Контекст, Обработчики, ДополнительныеПараметры
//Кэш - Кэш ВО
//Контекст - структура контекста для рассчета узла
//Обработчики - структура с описанием функции-обработчика для определенных узлов
&НаКлиенте
Процедура Обработчик_УзелИни(Аргумент, ПараметрыОбработчика) Экспорт
	Перем РезультатРасчета, СбисОбработчикДляУзла, ДопПараметры;
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисПоле	= Аргумент.Значение;
	СбисКлюч	= Аргумент.Ключ;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	//Обратная совместимость со старыми функциями.
	СбисКонтекст.Вставить("ТекущееПолеИни", СбисПоле);
	СбисКонтекст.Вставить("ТекущееПолеКлюч",СбисКлюч);
	
	Если ПараметрыОбработчика.Обработчики.Свойство(Аргумент.Ключ, СбисОбработчикДляУзла) Тогда
		//Если есть отдельный обработчик на узел по его имени, то применим его
		СбисАргументДляОбработчика		= Неопределено;
		ОписаниеОповещенияОбработчика	= Неопределено;
		Если Не СбисОбработчикДляУзла.Свойство("Аргумент", СбисАргументДляОбработчика) Тогда
			СбисАргументДляОбработчика = Аргумент;
		КонецЕсли;
		Если Не СбисОбработчикДляУзла.Свойство("ОписаниеОповещения", ОписаниеОповещенияОбработчика) Тогда
			СбисПараметрыДляОбработчика	= Неопределено;
			Если Не СбисОбработчикДляУзла.Свойство("Параметры", СбисПараметрыДляОбработчика) Тогда
				СбисПараметрыДляОбработчика = ПараметрыОбработчика;
			КонецЕсли;
			ОписаниеОповещенияОбработчика = МодульОбъектаКлиент().НовыйСбисОписаниеОповещения(СбисОбработчикДляУзла.Метод, СбисОбработчикДляУзла.Модуль, СбисПараметрыДляОбработчика);
		КонецЕсли;
		МодульОбъектаКлиент().ВыполнитьСбисОписаниеОповещения(СбисАргументДляОбработчика, ОписаниеОповещенияОбработчика);
	ИначеЕсли 		НРег(Лев(Аргумент.Ключ, 5)) = "выбор" Тогда
		//Если это выбор, то посчитаем условие и вынесем подходящие узлы в контекст	
		Обработчик_Выбор(Аргумент, ПараметрыОбработчика);
	ИначеЕсли Не	Аргумент.Значение.Свойство("Значение")Тогда
		//Если нет значения, то может быть это сложный узел, или какая-то ересь.	
		Если	НРег(Аргумент.Ключ) = "мтаблобъект"
			Или	ЭтоСложныйУзел_Клиент(Кэш, Аргумент.Значение) Тогда
			Обработчик_СложныйУзелКлиент(Аргумент, ПараметрыОбработчика);
		КонецЕсли;
	ИначеЕсли		Аргумент.Значение.Свойство("РассчитанноеЗначение", РезультатРасчета) Тогда
		//Расчитанное значение, ничего не делаем, раз уже всё готово
	Иначе
		//Во всех прочих случая - стандартная обработка	
		Если Не ПараметрыОбработчика.Свойство("ДополнительныеПараметры", ДопПараметры) Тогда
			ДопПараметры = Новый Структура;
		КонецЕсли;
		РассчитатьПараметрИни(Кэш,, Аргумент.Значение, СбисКонтекст, ДопПараметры);		
	КонецЕсли; 	
КонецПроцедуры

//Вынесен общий код и проверки в отдельную функцию
&НаСервере
Процедура Обработчик_УзелИниСервер(Аргумент, ПараметрыРассчитать)
	Перем лПараметрВычислить, РезультатРасчета, ПолеЗначение;
	СбисКлюч	= Аргумент.Ключ;
	СбисПоле 	= Аргумент.Значение;
	СбисКонтекст= ПараметрыРассчитать.Контекст;
	Если		НРег(Лев(СбисКлюч, 5)) = "выбор" Тогда
		Обработчик_ВыборСервер(Аргумент, ПараметрыРассчитать);
	ИначеЕсли	НРег(СбисКлюч) = "добавлятьстроку" Тогда
		Обработчик_ДобавлятьСтрокуСервер(Аргумент, ПараметрыРассчитать);		
	ИначеЕсли	НРег(СбисКлюч) = "мтаблдок" Тогда
		Обработчик_мТаблДокСервер(Аргумент, ПараметрыРассчитать);
	ИначеЕсли	Не	СбисПоле.Свойство("Значение", ПолеЗначение) Тогда
		Если	НРег(Аргумент.Ключ) = "мтаблобъект"
			Или	ЭтоСложныйУзел_Сервер(Аргумент) Тогда//Это сложный узел, требующий рекурсивного обсчёта
			Обработчик_СложныйУзелСервер(Аргумент, ПараметрыРассчитать);
		КонецЕсли;
	ИначеЕсли	СбисПоле.Свойство("РассчитанноеЗначение", РезультатРасчета) Тогда
		Если ЗначениеЗаполнено(РезультатРасчета) Тогда
			//Расчитанные значения заполняем только те, что посчитались
			ЗаполнитьЗначениеРеквизита_Сервер(РезультатРасчета, СбисПоле, СбисКонтекст, СбисКонтекст.ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли 	ЕстьПараметрВычислитьНаСервере(Аргумент.Значение, лПараметрВычислить) Тогда
		РезультатРасчета = РассчитатьЗначениеСервер(лПараметрВычислить, СбисКонтекст);
		Если СбисПоле.Свойство("Отбор") Тогда
			Аргумент.Вставить("РассчитанноеЗначение", РезультатРасчета);
			РезультатРасчета = ВычислитьОтборНаСервере(Аргумент, ПараметрыРассчитать);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизита_Сервер(РезультатРасчета, СбисПоле, СбисКонтекст, СбисКонтекст.ДополнительныеПараметры);
		СбисПоле.Вставить("РассчитанноеЗначение", РезультатРасчета);
	КонецЕсли;
КонецПроцедуры

//Обработка структуры стороны.
//ПараметрыОбработчика - структура Кэш, Контекст, Обработчики
//Кэш - Кэш ВО
//Контекст - структура контекста для рассчета узла
&НаКлиенте
Процедура Обработчик_мСторона(Аргумент, ПараметрыОбработчика) Экспорт
	Ограничения		= Новый Структура;	
	
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	Вложение		= СбисКонтекст.Вложение;
	Ини				= СбисКонтекст.Ини;
	ДопПараметры	= Новый Структура;
	
	КонтрагентРоль	= РассчитатьЗначение("Контрагент_Роль",	СбисКонтекст, Кэш);
	ОрганизацияРоль	= РассчитатьЗначение("Организация_Роль",СбисКонтекст, Кэш);
	
	//Порождаем экземпляр класса контекста.
	ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
	СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
	СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
	СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);
	
	// сначала ищем организацию, т.к. она может потребоваться при поиске контрагента (при определенной настройке прав)
	Если ТекущееЗначение.Свойство(ОрганизацияРоль) Тогда
		Сторона = ТекущееЗначение[ОрганизацияРоль];
		
		//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
		КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
		ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, Сторона);
		//Заполним в контекст Сторона данные стороны, чтобы правильно заполнить значение.
		КонтекстИниСтроки.Сторона.Вставить("РассчитанноеЗначение", Сторона);
		
		СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
		
		ЗначениеПараметра = РассчитатьПараметрИни(Кэш,, Сторона.Сторона, СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("Сторона", Сторона)));
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда  // структура в формате СБИС
			ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, ЗначениеПараметра);
		КонецЕсли;
		Если Кэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и Кэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(Кэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
			Ограничения = Новый Структура("Организация",ЗначениеПараметра);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, ТекущееЗначение[ОрганизацияРоль].Сторона, СбисКонтекстРассчета, ДопПараметры);	
	КонецЕсли;
	Для Каждого Сторона Из ТекущееЗначение Цикл
		Если Сторона.Ключ = ОрганизацияРоль Тогда
			Продолжить;
		КонецЕсли;   
		
		//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
		КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
		ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, Сторона.Значение);
		//Заполним в контекст Сторона данные стороны, чтобы правильно заполнить значение.
		КонтекстИниСтроки.Сторона.Вставить("РассчитанноеЗначение", Сторона.Значение);
		
		СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			 
		СтруктураСтороны = РассчитатьПараметрИни(Кэш,, Сторона.Значение.Сторона, СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("Сторона", Сторона.Значение)));
		Если ТипЗнч(СтруктураСтороны) = Тип("Структура") Тогда
			//ЗначениеПараметра = НайтиСоздатьКонтрагента(СтруктураСтороны, Сторона.Значение);
			Если ЗначениеЗаполнено(Ограничения) Тогда
				СтруктураСтороны.Вставить("Ограничения",Ограничения);
			КонецЕсли;
			Если Сторона.Значение.Сторона.Свойство("Тип") и Найти(Сторона.Значение.Сторона.Тип, "Организаци")>0 Тогда
				ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтруктураСтороны);
			ИначеЕсли Сторона.Значение.Сторона.Свойство("Тип") и Найти(Сторона.Значение.Сторона.Тип, "Контрагент")>0 Тогда
				ЗначениеПараметра = Кэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(Кэш.Ини.Конфигурация, СтруктураСтороны, Ини);	
			КонецЕсли;
			Если Сторона.Ключ = КонтрагентРоль Тогда
				Если Вложение.Свойство("РучноеИзменение") И Вложение.РучноеИзменение = Истина и Вложение.Свойство("Контрагент1С") и ЗначениеЗаполнено(Вложение.Контрагент1С) Тогда
					ЗначениеПараметра = Вложение.Контрагент1С;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, Сторона.Значение.Сторона, СбисКонтекстРассчета, ДопПараметры);      
		Иначе
			ЗаполнитьЗначениеРеквизита(СтруктураСтороны, Сторона.Значение.Сторона, СбисКонтекстРассчета, ДопПараметры);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Обработка структуры табличной части
&НаКлиенте
Процедура Обработчик_мТаблДок(Аргумент, ПараметрыОбработчика) Экспорт
	Перем УзелТаблДок, УзелИмяТЧ;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	Если Не ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
		ДопПараметры.Вставить("ДопАргументыДляФункции", Новый Структура);
	КонецЕсли;
	
	ИмяПервойТЧ = "";
	мТаблДокРассчитанноеЗначение = Новый Структура;
	Для Каждого ТабЧасть Из ТекущееЗначение Цикл
		ТабЧастьРассчитанноеЗначение = Новый Массив;
		мТаблДокРассчитанноеЗначение.Вставить(ТабЧасть.Ключ, ТабЧастьРассчитанноеЗначение);
		//Определим узел с описанием ТЧ
		Если ТабЧасть.Значение.Свойство("ТаблДок", УзелТаблДок) Тогда
			//Создаём копию, чтобы рассчитанное значение данных ТЧ не попадало в расчитанную ини, т.к. иначе замедлим передачу данных на сервер
			УзелТаблДок = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(УзелТаблДок,, Ложь);
		Иначе
			УзелТаблДок = Новый Структура;
		КонецЕсли;
		Если Не УзелТаблДок.Свойство("Данные") Тогда
			//По-умолчанию, хардкодим путь к данным, если не указаны
			УзелТаблДок.Вставить("Данные", "Файл.Документ.ТаблДок.СтрТабл");
		КонецЕсли;
		
		ТаблДок = РассчитатьПараметрИни(Кэш, "ТаблДок", УзелТаблДок, СбисКонтекст, Новый Структура("ЗаполнитьДанные", Ложь));
		Если Не ЗначениеЗаполнено(ТаблДок) Тогда
			//При заполнении пустого документа
			Продолжить;
		КонецЕсли;
		СбисКонтекст.Вставить("ТаблДок", ТаблДок);
		Если ПустаяСтрока(ИмяПервойТЧ) Тогда
			ИмяПервойТЧ = ТабЧасть.Ключ;
		КонецЕсли;
		//Порождаем экземпляр класса контекста.
		ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
		СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
		СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
		СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);		
		
		НомерСтрокиДокумента = 0;
		Для Каждого Строка Из ТаблДок Цикл
			Если Строка.Свойство("НеЗагружать") Тогда
				Продолжить;
			КонецЕсли;
			//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
			КонтекстИниСтроки = Новый Структура(СбисКонтекст.Ключи.Шапка);
			ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
			Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, ТабЧасть.Значение);
			//Заполним в контекст ТаблДок данные строки, чтобы правильно заполнить значение.
			КонтекстИниСтроки.ТаблДок.Вставить("РассчитанноеЗначение", Строка);
			
			СбисКонтекстРассчета.Вставить("ДанныеИсточникЛокальные",	Строка);
			СбисКонтекстРассчета.Вставить("ДанныеРезультатЛокальные", 	Новый Структура);
			СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			ИмяТЧ = РассчитатьПараметрИни(Кэш, "ИмяТЧ",,СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("СтрТабл", Строка)));
			Если ИмяТЧ = Неопределено Тогда
				ИмяТЧ = ИмяПервойТЧ;
			КонецЕсли;
			
			Если		Не ИмяТЧ = ТабЧасть.Ключ Тогда
				Продолжить;
			ИначеЕсли	Не СбисКонтекстРассчета.ДанныеРезультат.Свойство(ИмяТЧ) Тогда
				СбисКонтекстРассчета.ДанныеРезультат.Вставить(ИмяТЧ, Новый массив);
			КонецЕсли;
			ТабЧастьРассчитанноеЗначение.Добавить(КонтекстИниСтроки);
			НомерСтрокиДокумента	= НомерСтрокиДокумента + 1;
			ТабЧастьЗначение		= ТабЧасть.Значение;
			
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрТабл",		СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрокаФайла",	Строка);
			АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, СбисКонтекстРассчета, ПараметрыОбработчика.Обработчики, ДопПараметры);
			//Расчет ведём по контексту из табчасти, заполняем в контекст ини
			Для Каждого Элемент Из ТабЧастьЗначение Цикл
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстИниСтроки[Элемент.Ключ]), АргументыВызова);
			КонецЦикла;
			СбисКонтекст.ДанныеРезультат[ИмяТЧ].Добавить(СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			Строка.Вставить("ИмяТЧ",ИмяТЧ);
			Строка.Вставить("НомерСтрокиТЧ", НомерСтрокиДокумента - 1);
		КонецЦикла
	КонецЦикла;
	ТекущееЗначение.Вставить("РассчитанноеЗначение", мТаблДокРассчитанноеЗначение);
	
КонецПроцедуры

//Обработка структуры параметров заказа
&НаКлиенте
Процедура Обработчик_мПараметрыДокумента(Аргумент, ПараметрыОбработчика) Экспорт
	Если ПараметрыОбработчика.ДополнительныеПараметры.Режим = "Подготовка" Тогда
		Возврат;
	КонецЕсли;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	ДопПараметры.Вставить("ЗаполнитьДанные", Ложь);
	СтруктураСвойств = Новый Структура;
	Для Каждого Элемент Из Аргумент.Значение Цикл
		Параметр_Значение = Элемент.Значение.Параметр_Значение;	
		Параметр_Имя = Элемент.Значение.Параметр_Имя;	
		
		Параметр_Значение	= РассчитатьПараметрИни(Кэш,, Элемент.Значение.Параметр_Значение, СбисКонтекст, ДопПараметры);
		Параметр_Имя		= РассчитатьПараметрИни(Кэш,, Элемент.Значение.Параметр_Имя, СбисКонтекст, ДопПараметры);
		Если	ЗначениеЗаполнено(Параметр_Значение)
			И	ЗначениеЗаполнено(Параметр_Имя)	Тогда
			СтруктураСвойств.Вставить(Параметр_Имя, Параметр_Значение);
		КонецЕсли;
	КонецЦикла;
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ДокументШаблон.СтруктураСвойств", СбисКонтекст.Вложение.Идентификатор, СтруктураСвойств); 
	Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
КонецПроцедуры

//Обработчик узла мТаблДок для сервера
&НаСервере
Процедура Обработчик_мТаблДокСервер(Аргумент, ПараметрыОбработчика)
	Перем мТаблДокКонтекст, СбисДобавлятьСтроку, ТабЧастьДанные;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	СбисПоле			= Аргумент.Значение;
	Объект1СЗаполнить	= СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъекта];
	КлючДанныеТЧ		= "ТаблДок";
	
	Если Не СбисПоле.Свойство("РассчитанноеЗначение",	мТаблДокКонтекст)Тогда
		Возврат;
	КонецЕсли;
	АргументыРассчитать = Новый Структура("Контекст");
	//Перебираем исходную ини, в которой нет узлов шапки
	Для Каждого ТабЧасть Из СбисПоле Цикл
		Если ТабЧасть.Ключ = "РассчитанноеЗначение" Тогда
			Продолжить;
		КонецЕсли;
		ТабЧастьКонтекст= мТаблДокКонтекст[ТабЧасть.Ключ];
		ИндексТч = -1;
		
		СбисКонтекстРассчета						= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст, Ложь);
		СбисКонтекстРассчета.Переменные				= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.Переменные, Ложь);
		СбисКонтекстРассчета.ДополнительныеПараметры= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.ДополнительныеПараметры, Ложь);
		СбисКонтекстРассчета.ДополнительныеПараметры.Вставить("ЗаполнитьДанные", Истина);
		
		Если Не СбисКонтекст.ДанныеИсточник.Свойство(КлючДанныеТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СбисКонтекст.ДанныеИсточник[КлючДанныеТЧ] Цикл
			Если	СтрокаТЧ.Свойство("НеЗагружать")
				Или Не	(	СтрокаТЧ.Свойство("ИмяТЧ")
				И	СтрокаТЧ.ИмяТЧ = ТабЧасть.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			ТабЧастьДанные = Объект1СЗаполнить[СтрокаТЧ.ИмяТЧ];
			ИндексТч = ИндексТч + 1;
			
			СбисКонтекстРассчета.Вставить("Ини", 						ТабЧастьКонтекст[ИндексТЧ]);
			СбисКонтекстРассчета.Вставить("ИмяТЧ",						ТабЧасть.Ключ);
			СбисКонтекстРассчета.Вставить("СтрокаФайла",				СтрокаТЧ);
			СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		КлючДанныеТЧ);
			СбисКонтекстРассчета.ДанныеРезультат.Вставить(КлючДанныеТЧ,	ТабЧастьДанные[СтрокаТЧ.НомерСтрокиТЧ]);
			АргументыРассчитать.Контекст = СбисКонтекстРассчета;
			Для Каждого Элемент Из ТабЧасть.Значение Цикл
				СбисКонтекстРассчета.ДополнительныеПараметры.ЗаполнитьДанные = Не Элемент.Ключ = КлючДанныеТЧ;
				//Составные узлы могут формировать строки в ту же ТЧ, откуда вызываются. 
				Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", Элемент.Ключ, СбисКонтекстРассчета.Ини[Элемент.Ключ]), АргументыРассчитать);
			КонецЦикла;
		КонецЦикла;
		Если Не ТабЧастьДанные = Неопределено Тогда
			//Удалям строки после общего расчета. Некоторые функции требует строки ТЧ в процессе загрузки и должны быть сформированы на клиенте
			Шаг = 0;
			Пока Шаг < ТабЧастьДанные.Количество() Цикл
				Если	ТабЧастьДанные[Шаг].Свойство("ДобавлятьСтроку", СбисДобавлятьСтроку)
					И	СбисДобавлятьСтроку = Ложь Тогда
					ТабЧастьДанные.Удалить(Шаг);
					Продолжить;
				КонецЕсли;
				Шаг = Шаг + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Обработка узла на добавлять строку. Работает от контекста в узле ини (кроме выбора)
&НаСервере
Процедура Обработчик_ДобавлятьСтрокуСервер(Аргумент, ПараметрыОбработчика)
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	СбисПоле			= Аргумент.Значение;
	Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", "", Аргумент.Значение), ПараметрыОбработчика);
	Если Аргумент.Значение.Свойство("РассчитанноеЗначение") Тогда
		СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъектаЛокальное].Вставить(Аргумент.Ключ, Аргумент.Значение.РассчитанноеЗначение);
	КонецЕсли;
КонецПроцедуры

//Обработка заполнения оснований
&НаКлиенте
Процедура Обработчик_мОснование(Аргумент, ПараметрыОбработчика) Экспорт
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	Для Каждого Основание Из Аргумент.Значение Цикл
		ТипДок			= Сред(СбисКонтекст.Ини.Документ.Значение,	Найти(СбисКонтекст.Ини.Документ.Значение, ".") + 1);
		ИмяРеквизита	= Сред(Основание.Значение.Основание.Значение, Найти(Основание.Значение.Основание.Значение, ".") + 1);
		ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, Основание.Значение, СбисКонтекст.ДанныеРезультат, СбисКонтекст.МассивОснований);
	КонецЦикла;
КонецПроцедуры	

//Стандартный обработчик на узел, начинающийся на "Выбор" для загрузки документов. 
//Работает аналогично выгрузке: если встречаем узел с Выбором, то смотрим Условие, если true, то выносим все узлы в ини на уровень выше
&НаКлиенте
Процедура Обработчик_Выбор(Аргумент, ПараметрыОбработчика)
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	СбисПоле	= Аргумент.Значение;
	
	КонтекстРассчетаВыбор		= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,	,Ложь);
	КонтекстРассчетаВыбор.Ини	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Ини,,Ложь);
	КонтекстРассчетаВыбор.Вставить("ДополнительныеПараметры", Новый Структура("ВызовСервера", Истина));
	
	АргументыВызова = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
	АргументыВызова.Контекст = КонтекстРассчетаВыбор;
	Для Каждого ПодРаздел Из СбисПоле Цикл //Выбираем подузлы
		Если Не (	ТипЗнч(ПодРаздел.Значение) = Тип("Структура")
			И	ПодРаздел.Значение.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		Кэш.ОбщиеФункции.СбисСкопироватьСтруктуру(КонтекстРассчетаВыбор.Ини, ПодРаздел.Значение);
		Если ПодРаздел.Значение.Свойство("Условие") Тогда
			Обработчик_УзелИни(Новый Структура("Ключ, Значение", "Условие", ПодРаздел.Значение.Условие), АргументыВызова);
			РезультатУсловия = ПодРаздел.Значение.Условие;
			Если	Не РезультатУсловия.Свойство("РассчитанноеЗначение", РезультатУсловия)
				Или	Не РезультатУсловия = Истина Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если условие выполнено, либо его нет(узел по-умолчанию), то выберем в контекст ини подузлы и рассчитаем их
		Для Каждого ПодЭлемент Из ПодРаздел.Значение Цикл //Выбираем подузлы
			Если ПодЭлемент.Ключ = "Условие" Тогда
				Продолжить;
			КонецЕсли;
			ПодЭлементЗначение = КонтекстРассчетаВыбор.Ини[ПодЭлемент.Ключ];
			Если Не ПодЭлементЗначение.Свойство("РассчитанноеЗначение") Тогда
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", ПодЭлемент.Ключ, ПодЭлементЗначение), АргументыВызова);
			КонецЕсли;
			СбисКонтекст.Ини.Вставить(ПодЭлемент.Ключ, ПодЭлементЗначение);
		КонецЦикла;
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура Обработчик_ВыборСервер(Аргумент, ПараметрыОбработчика)
	СбисКонтекст			= ПараметрыОбработчика.Контекст;
	СбисПоле				= Аргумент.Значение;
	КонтекстРассчетаВыбор	= СкопироватьОбъектСПараметрамиСервер(СбисКонтекст, Ложь);
	
	АргументыВызова = Новый Структура("Контекст", КонтекстРассчетаВыбор);
	Для Каждого ПодРаздел Из СбисПоле Цикл //Выбираем подузлы
		Если Не (	ТипЗнч(ПодРаздел.Значение) = Тип("Структура")
			И	ПодРаздел.Значение.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		//Условие на клиенте заполняем в подраздел, так как оно может перекрыть другие узлы выбора.
		//Все остальные узлы посчитанного выбора уже есть в контексте ини.
		Если ПодРаздел.Значение.Свойство("Условие") Тогда
			УзелУсловие = ПодРаздел.Значение["Условие"]; 
			Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", "Условие", УзелУсловие), АргументыВызова);
			РезультатУсловия = Неопределено;
			Если	Не УзелУсловие.Свойство("РассчитанноеЗначение", РезультатУсловия)
				Или	Не РезультатУсловия = Истина Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если условие выполнено, либо его нет(узел по-умолчанию), то выберем в контекст ини подузлы и рассчитаем их
		Для Каждого ПодЭлемент Из ПодРаздел.Значение Цикл 
			//Выбираем подузлы.Перебираем подраздел, а как данные берём текущую ини - там может быть посчитанное значение на клиенте
			Если ПодЭлемент.Ключ = "Условие" Тогда
				Продолжить;
			КонецЕсли;
			ПодЭлементЗначение = КонтекстРассчетаВыбор.Ини[ПодЭлемент.Ключ];
			Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", ПодЭлемент.Ключ, ПодЭлементЗначение), АргументыВызова);
			СбисКонтекст.Ини.Вставить(ПодЭлемент.Ключ, ПодЭлементЗначение);
		КонецЦикла;
		Прервать;
	КонецЦикла;	
КонецПроцедуры

//Стандартный обработчик для сложных узлов
&НаКлиенте
Процедура Обработчик_СложныйУзелКлиент(Аргумент, ПараметрыОбработчика) Экспорт
	Перем СтрокаРодительСоставнойУзел;
	Кэш			= ПараметрыОбработчика.Кэш;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	СбисПоле	= Аргумент.Значение;
	УзелНаРасчет= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисПоле);
	
	Если Не СбисКонтекст.Свойство("ДанныеИсточникЛокальные", СтрокаРодительСоставнойУзел) Тогда
		СтрокаРодительСоставнойУзел = СбисКонтекст.ДанныеИсточник;
	КонецЕсли;
	РезультатОбработкиСложногоУзла = Новый Структура;
	
	ДопПараметрыОбработчика = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	ДопПараметрыОбработчика.Вставить("ЗаполнитьДанные", Ложь);
	Для Каждого АтрибутУзла Из УзелНаРасчет Цикл
		Если Не ТипЗнч(АтрибутУзла.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		//Получить первый элемент внутри сложного узла и проверрить не массив ли он?
		Для Каждого Элемент Из АтрибутУзла.Значение Цикл
			Если Не	(	Элемент.Значение.Свойство("Тип")
				И	НРег(Элемент.Значение.Тип) = "табличнаячасть") Тогда
				//Первый элемент это не описание ТЧ	
				Прервать;
			КонецЕсли;
			//Рассчитаем первый параметр в составном узле - это должно быть описание ТЧ
			РассчитанноеЗначение = РассчитатьПараметрИни(Кэш,, Элемент.Значение, СбисКонтекст, ДопПараметрыОбработчика);
			Если РассчитанноеЗначение = Неопределено Тогда
				//Данных ТЧ нет, значит дальше не смотрим.
				Прервать;
			КонецЕсли;	
			//Запись массива в табличную часть? Переходим к его обработке 
			//Формируем "РасчитанноеЗначение" в таб части. Заполнение док.Объекта уже на сервере
			ПараметрыОбработчикаСУ = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
			ПараметрыОбработчикаСУ.ДополнительныеПараметры = ДопПараметрыОбработчика;
			РезультатОбработкиПодУзла = Новый Массив;
			Если ТипЗнч(РассчитанноеЗначение) = Тип("Массив") Тогда
				Для Каждого СоставнаяСтрока Из РассчитанноеЗначение Цикл
					Элемент.Значение.Вставить("РассчитанноеЗначение", СоставнаяСтрока);
					РезультатОбработкиПодУзла.Добавить(ОбработатьЭлементСУ_Клиент(Кэш, СоставнаяСтрока, АтрибутУзла.Значение, ПараметрыОбработчикаСУ));
				КонецЦикла;
				РезультатОбработкиСложногоУзла.Вставить(АтрибутУзла.Ключ, Новый Структура("РассчитанноеЗначение", РезультатОбработкиПодУзла));
			ИначеЕсли Не РассчитанноеЗначение = Неопределено Тогда
				Элемент.Значение.Вставить("РассчитанноеЗначение", РассчитанноеЗначение);
				РезультатОбработкиПодУзла.Добавить(ОбработатьЭлементСУ_Клиент(Кэш, РассчитанноеЗначение, АтрибутУзла.Значение, ПараметрыОбработчикаСУ));
				РезультатОбработкиСложногоУзла.Вставить(АтрибутУзла.Ключ, Новый Структура("РассчитанноеЗначение", РезультатОбработкиПодУзла));
			КонецЕсли;
			//в обработке СУ интересует только поиск элемента СУ, сама обработка узлов идёт дальше
			Прервать;
		КонецЦикла;
	КонецЦикла;	
	//Для составных узлов заполним расчитанные значения, чтобы это попало дальше на сервер.
	//Заполнение в ДокОбъект происходит на сервере!
	//При необходимости обратиться к результату обсчёта составного узла, брать из Контекст.Ини.мТаблДок[РассчитанноеЗначение]
	Для Каждого РасчитанныйПодУзел Из РезультатОбработкиСложногоУзла Цикл
		СбисПоле[РасчитанныйПодУзел.Ключ].Вставить("РассчитанноеЗначение", РасчитанныйПодУзел.Значение["РассчитанноеЗначение"]);
	КонецЦикла;
КонецПроцедуры

//Обрабатывает сложные узел на сервере, дозаполняет ДокОбъект
&НаСервере
Процедура Обработчик_СложныйУзелСервер(Аргумент, ПараметрыОбработчика)
	Перем лПараметрВычислить, РассчитанноеЗначение, АтрибутУзлаЗначение;
	СбисПоле	= Аргумент.Значение;
	СбисКонтекст= ПараметрыОбработчика.Контекст;
	Для Каждого АтрибутУзла Из СбисПоле Цикл
		Если		ТипЗнч(АтрибутУзла.Значение) = Тип("Структура")
			И	Не	АтрибутУзла.Ключ = "РассчитанноеЗначение" Тогда
			АтрибутУзлаЗначение = АтрибутУзла.Значение;
		Иначе
			Продолжить;
		КонецЕсли;
		//Если есть расчитанное значение, то оно было посчитано на клиенте. Берём его за основу и досчитываем.
		//Иначе пробуем посчитать на сервере
		АргументСУ = Новый Структура("Ключ,Значение", АтрибутУзла.Ключ, АтрибутУзла.Значение);
		Если АтрибутУзла.Значение.Свойство("РассчитанноеЗначение") Тогда
			//АргументСУ.Вставить("РассчитанноеЗначение");
			АтрибутУзлаЗначение = АтрибутУзлаЗначение.РассчитанноеЗначение;
			Если ТипЗнч(АтрибутУзлаЗначение) = Тип("Массив") Тогда
				Для Каждого СтрокаАтрибутУзла Из АтрибутУзлаЗначение Цикл
					АргументСУ.Значение = СтрокаАтрибутУзла;
					Обработчик_ЭлементСложногоУзлаСервер(АргументСУ, ПараметрыОбработчика);
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Обработчик_ЭлементСложногоУзлаСервер(АргументСУ, ПараметрыОбработчика)
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура Обработчик_ЭлементСложногоУзлаСервер(Аргумент, ПараметрыОбработчика)
	Перем лПараметрВычислить, РассчитанноеЗначение, ИмяТЧ;
	СбисПоле			= Аргумент.Значение;
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	Для Каждого Элемент Из СбисПоле Цикл
		Если	(	Элемент.Значение.Свойство("РассчитанноеЗначение", РассчитанноеЗначение))
			И	Не	РассчитанноеЗначение = Неопределено Тогда
			//Есть расчитанное значение
		ИначеЕсли 	ЕстьПараметрВычислитьНаСервере(Элемент.Значение, лПараметрВычислить) Тогда
			РассчитанноеЗначение = РассчитатьЗначениеСервер(лПараметрВычислить, СбисКонтекст);
			//РассчитанноеЗначение = РассчитатьЗначениеНаСервере(лПараметрВычислить, Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СтрокаФайла", ДопПараметры.Ини, СбисПоле, ДопПараметры.Переменные, ДопПараметры.СтруктураФайла, Строка));
		КонецЕсли;
		
		//Запись массива в табличную часть? Переходим к его обработке 
		Если	Элемент.Значение.Свойство("Тип")
			И	НРег(Элемент.Значение.Тип) = "табличнаячасть" Тогда
			//Какую ТЧ заполнять из массива?
			Если Найти(Элемент.Значение.Значение, "[") = 1 Тогда  // ссылка на реквизит
				ИмяТЧ = Сред(Элемент.Значение.Значение, Найти(Элемент.Значение.Значение,".") + 1);
			Иначе//Не правильно указан путь к ТЧ. Не обрабатываем.
				Возврат;				
			КонецЕсли;
			
			//ПараметрыОбработчика.Контекст.Вставить("ИмяТЧ", ИмяТЧ);
			АргументЭлементаСУ = Новый Структура("Ключ,Значение,ИмяУзла,РассчитанноеЗначение", Элемент.Ключ, СбисПоле, ИмяТЧ, РассчитанноеЗначение);
			Если ТипЗнч(РассчитанноеЗначение) = Тип("Массив") Тогда
				Для Каждого Строка Из РассчитанноеЗначение Цикл
					АргументЭлементаСУ.РассчитанноеЗначение = Строка;
					Обработчик_СтрокаДанныеСложногоУзлаСервер(АргументЭлементаСУ, ПараметрыОбработчика);
				КонецЦикла;
			ИначеЕсли Не РассчитанноеЗначение = Неопределено Тогда
				Обработчик_СтрокаДанныеСложногоУзлаСервер(АргументЭлементаСУ, ПараметрыОбработчика);
			КонецЕсли;
			//ПараметрыОбработчика.Контекст.Удалить("ИмяТЧ");
			//в обработке сложного узла интересует только поиск массива, сама обработка узлов структуры массива в специальной функции
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Обработчик_СтрокаДанныеСложногоУзлаСервер(Аргумент, ДопПараметры)
	Перем лПараметрВычислить, СБисТип;
	СбисПоле	= Аргумент.Значение;
	СбисКонтекст= ДопПараметры.Контекст;
	
	КонтекстИниСтроки = СкопироватьОбъектСПараметрамиСервер(СбисКонтекст.Ини,Ложь);
	Для Каждого Элемент Из СбисПоле Цикл
		КонтекстИниСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	КонтекстРасчета = СкопироватьОбъектСПараметрамиСервер(СбисКонтекст,Ложь);
	КонтекстРасчета.Вставить("ДополнительныеПараметры",		Новый Структура);
	КонтекстРасчета.Вставить("ИмяОбъектаЛокальное",			Аргумент.Ключ);
	КонтекстРасчета.Вставить("Ини",							КонтекстИниСтроки);
	КонтекстРасчета.ДанныеРезультат.Вставить(Аргумент.Ключ, Новый Структура);
	
	//Перебрать структуру данных и найти соответствие каждому элементу в структуре строки
	АргументыРасчета = Новый Структура("Контекст", КонтекстРасчета);
	Для Каждого ЭлементСД Из СбисПоле Цикл
		//Это узел описания ТЧ. Его не заполняем.
		Обработчик_УзелИниСервер(Новый Структура("Ключ, Значение", ЭлементСД.Ключ, КонтекстИниСтроки[ЭлементСД.Ключ]), АргументыРасчета);
	КонецЦикла;
	ОбъектДанные = СбисКонтекст.ДанныеРезультат[СбисКонтекст.ИмяОбъекта];
	Если НЕ ОбъектДанные.Свойство(Аргумент.ИмяУзла) Тогда
		ОбъектДанные.Вставить(Аргумент.ИмяУзла, Новый Массив);
	КонецЕсли;	
	Если ЗначениеЗаполнено(КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]) Тогда
		Если КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ].Свойство("ДобавлятьСтроку") И КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]["ДобавлятьСтроку"] = Ложь Тогда
			Возврат;
		Иначе
			ОбъектДанные[Аргумент.ИмяУзла].Добавить(КонтекстРасчета.ДанныеРезультат[Аргумент.Ключ]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_мРасхожденияОбъектов(Аргумент, ПараметрыОбработчика) Экспорт
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	
	РезультатЗаполнения = Новый Структура;
	Для Каждого Расхождение Из Аргумент.Значение Цикл  
		Ини = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(СбисКонтекст.Ини.мСравнениеДокументов[Расхождение.Ключ]);
		//ЗаполнитьЗначенияСвойств(Ини, РезультатЗаполнения);
		КонтекстЗаполнения = Новый Структура("Ини, ДанныеИсточник", Ини, СбисКонтекст.ДанныеИсточник);
		ОписаниеОбъекта = Новый Структура("Ключ, Значение, Ини", "ОписаниеОшибки", Новый Структура, Ини);
		ПараметрыЗаполнения	= Новый Структура("Кэш, Контекст, ДополнительныеПараметры, Обработчики",
			Кэш, КонтекстЗаполнения, Новый Структура, ПараметрыОбработчика.Обработчики);
		СтруктураОбъекта = СбисЗаполнитьСтруктуруОбъекта(ОписаниеОбъекта, ПараметрыЗаполнения).Значение;
		
		РезультатЗаполнения.Вставить(Расхождение.Ключ, Новый Структура);
		
		Для Каждого ЭлементОбъекта Из СтруктураОбъекта Цикл
			Если ТипЗнч(ЭлементОбъекта.Значение) = Тип("Массив")
				Или Найти("ОписаниеОшибки,ОписаниеКратко,ЗначениеСБИС,Значение1С", ЭлементОбъекта.Ключ) > 0 Тогда
				
				РезультатЗаполнения[Расхождение.Ключ].Вставить(ЭлементОбъекта.Ключ, ЭлементОбъекта.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СбисКонтекст.ДанныеРезультат = РезультатЗаполнения;
КонецПроцедуры

//Обработка структуры табличной части
&НаКлиенте
Процедура Обработчик_мТаблДокДляРасхождений(Аргумент, ПараметрыОбработчика) Экспорт
	Перем УзелТаблДок, УзелИмяТЧ;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	ТекущееЗначение = Аргумент.Значение;
	СтруктураФайла	= СбисКонтекст.ДанныеИсточник;
	ДопПараметры	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика.ДополнительныеПараметры,,Ложь);
	Если Не ДопПараметры.Свойство("ДопАргументыДляФункции") Тогда
		ДопПараметры.Вставить("ДопАргументыДляФункции", Новый Структура);
	КонецЕсли;
	
	ИмяПервойТЧ = "";
	мТаблДокРассчитанноеЗначение = Новый Структура;
	Для Каждого ТабЧасть Из ТекущееЗначение Цикл
		ТабЧастьРассчитанноеЗначение = Новый Массив;
		мТаблДокРассчитанноеЗначение.Вставить(ТабЧасть.Ключ, ТабЧастьРассчитанноеЗначение);
		//Определим узел с описанием ТЧ
		Если ТабЧасть.Значение.Свойство("ТаблДокРасхождения", УзелТаблДок) Тогда
			//Создаём копию, чтобы рассчитанное значение данных ТЧ не попадало в расчитанную ини, т.к. иначе замедлим передачу данных на сервер
			УзелТаблДок = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(УзелТаблДок,, Ложь);
		Иначе
			УзелТаблДок = Новый Структура;
		КонецЕсли;
		Если Не УзелТаблДок.Свойство("Данные") Тогда
			//По-умолчанию, хардкодим путь к данным, если не указаны
			УзелТаблДок.Вставить("Данные", "Файл.Документ.ТаблДок.СтрТабл");
		КонецЕсли;
		
		ТаблДок = РассчитатьПараметрИни(Кэш, "ТаблДокРасхождения", УзелТаблДок, СбисКонтекст, Новый Структура("ЗаполнитьДанные", Ложь));
		Если Не ЗначениеЗаполнено(ТаблДок) Тогда
			//При заполнении пустого документа
			Продолжить;
		КонецЕсли;
		СбисКонтекст.Вставить("ТаблДок", ТаблДок);
		Если ПустаяСтрока(ИмяПервойТЧ) Тогда
			ИмяПервойТЧ = ТабЧасть.Ключ;
		КонецЕсли;
		//Порождаем экземпляр класса контекста.
		ПеременныеДляСтроки	= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст.Переменные,	, Ложь);
		СбисКонтекстРассчета= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,			, Ложь);
		СбисКонтекстРассчета.Вставить("ИмяОбъектаЛокальное",		"ТаблДок");
		СбисКонтекстРассчета.Вставить("Переменные",					ПеременныеДляСтроки);		
		
		НомерСтрокиДокумента = 0;
		Для Каждого Строка Из ТаблДок Цикл
			Если ТипЗнч(Строка) = Тип("КлючИЗначение") Тогда
				Строка = Строка.Значение;
			КонецЕсли;
			
			Если Строка.Свойство("НеЗагружать") Тогда
				Продолжить;
			КонецЕсли;
			//Возьмём шапку, дополним ТабЧастью. Это наш контекст строки
			КонтекстИниСтроки = Новый Структура;
			ЗаполнитьЗначенияСвойств(КонтекстИниСтроки, СбисКонтекст.Ини);
			Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстИниСтроки, ТабЧасть.Значение);
			//Заполним в контекст ТаблДок данные строки, чтобы правильно заполнить значение.
			КонтекстИниСтроки.ТаблДокРасхождения.Вставить("РассчитанноеЗначение", Строка);
			
			СбисКонтекстРассчета.Вставить("ДанныеИсточникЛокальные",	Строка);
			СбисКонтекстРассчета.Вставить("ДанныеРезультатЛокальные", 	Новый Структура);
			СбисКонтекстРассчета.Вставить("Ини",						КонтекстИниСтроки);
			ИмяТЧ = РассчитатьПараметрИни(Кэш, "ИмяТЧ",,СбисКонтекстРассчета, Новый Структура("ВызовСервера,БратьПосчитанное,ДопАргументыДляФункции", Истина, Ложь, Новый Структура("СтрТабл", Строка)));
			Если ИмяТЧ = Неопределено Тогда
				ИмяТЧ = ИмяПервойТЧ;
			КонецЕсли;
			
			//Если		Не ИмяТЧ = ТабЧасть.Ключ Тогда
			//	Продолжить;
			//Иначе
			Если	Не СбисКонтекстРассчета.ДанныеРезультат.Свойство(ИмяТЧ) Тогда
				СбисКонтекстРассчета.ДанныеРезультат.Вставить(ИмяТЧ, Новый массив);
			КонецЕсли;
			ТабЧастьРассчитанноеЗначение.Добавить(КонтекстИниСтроки);
			НомерСтрокиДокумента	= НомерСтрокиДокумента + 1;
			ТабЧастьЗначение		= ТабЧасть.Значение;
			
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрТабл",		СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			ДопПараметры.ДопАргументыДляФункции.Вставить("СтрокаФайла",	Строка);
			АргументыВызова = Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, СбисКонтекстРассчета, ПараметрыОбработчика.Обработчики, ДопПараметры);
			//Расчет ведём по контексту из табчасти, заполняем в контекст ини
			Для Каждого Элемент Из ТабЧастьЗначение Цикл
				Обработчик_УзелИни(Новый Структура("Ключ, Значение", Элемент.Ключ, КонтекстИниСтроки[Элемент.Ключ]), АргументыВызова);
			КонецЦикла;
			СбисКонтекст.ДанныеРезультат[ИмяТЧ].Добавить(СбисКонтекстРассчета.ДанныеРезультатЛокальные);
			Строка.Вставить("ИмяТЧ",ИмяТЧ);
			Строка.Вставить("НомерСтрокиТЧ", НомерСтрокиДокумента - 1);
		КонецЦикла
	КонецЦикла;
	ТекущееЗначение.Вставить("РассчитанноеЗначение", мТаблДокРассчитанноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////
//////Обработка составных узлов документа///////////
////////////////////////////////////////////////////

//Функция возвращает результат обсчета сложного узла
&НаКлиенте
Функция ОбработатьЭлементСУ_Клиент(Кэш, Строка, СтруктураДанных, ПараметрыОбработчика)
	СбисКонтекст		= ПараметрыОбработчика.Контекст;
	
	ПараметрыОбработкиУзла = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ПараметрыОбработчика,,Ложь);
	//Готовим контекст расчета
	КонтекстРасчета		= Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,,Ложь);
	СтрокаИниРезультат	= Новый Структура;
	Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(КонтекстРасчета.Ини,	СтруктураДанных);
	Кэш.ОбщиеФункции.СбисСкопироватьСтруктуруНаКлиенте(СтрокаИниРезультат,	СтруктураДанных);
	КонтекстРасчета.Вставить("ДанныеРезультатЛокальные",СтрокаИниРезультат);
	Если КонтекстРасчета.Свойство("ИмяОбъектаЛокальное") Тогда
	КонтекстРасчета.Вставить("ДанныеИсточникЛокальные",	Строка);
	КонецЕсли;
	УстановитьЗначениеИниВСтек(Кэш, КонтекстРасчета, СтрокаИниРезультат);	
	ПараметрыОбработкиУзла.Контекст = КонтекстРасчета;
	
	//Перебрать структуру данных и найти соответствие каждому элементу в структуре строки
	Для Каждого ЭлементСД Из СтруктураДанных Цикл
		Обработчик_УзелИни(Новый Структура("Ключ, Значение", ЭлементСД.Ключ, КонтекстРасчета.ДанныеРезультатЛокальные[ЭлементСД.Ключ]), ПараметрыОбработкиУзла);
	КонецЦикла;
	Возврат КонтекстРасчета.ДанныеРезультатЛокальные;
КонецФункции

