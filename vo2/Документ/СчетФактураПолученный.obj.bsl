
&НаКлиенте
Функция СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С = Неопределено) Экспорт
// Функция ищет документ-основание СФ (в случае, если СФ пришел один), загружает СФ
	Если МассивОснований.Количество()=0 тогда   // пришел один СФ
		ФорматВерсияФайлаДляИни = Вложение.СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтрЗаменить(Вложение.СтруктураФайла.Файл.ВерсияФормата,".", "_"), " ", "");
		
		// Костыль, т.к. ини "СчФактКор" называется с большой буквы, а формат и всё остальное с маленькой
		ФорматВерсияФайлаДляИни = СтрЗаменить(ФорматВерсияФайлаДляИни, "счФактКор", "СчФактКор");
		
		Ини = Кэш.ОбщиеФункции.сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайлаДляИни);
		Аванс = Ложь;
		Если Вложение.СтруктураФайла.Файл.Свойство("Документ") и Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") и Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ИдВизуализации") и Найти(нрег(Вложение.СтруктураФайла.Файл.Документ.Параметр.ИдВизуализации), "аванс")>0 Тогда
			Аванс = Истина;
		КонецЕсли;
		Если ИниДок.Свойство("мОснование") и Не Аванс Тогда   // перебираем основания в инишке фактуры
			Для каждого Основание Из ИниДок.мОснование Цикл
				Если Основание.Значение.Свойство("Основание_Документ") и Основание.Значение.Основание_Документ.Свойство("Тип") Тогда
					Попытка
						ТипыОснований = Новый ОписаниеТипов(Основание.Значение.Основание_Документ.Тип);
						ДокументПоступления = Неопределено;
						ИниПервогоОснования = Неопределено;
						ПервыйДокументПоступления = Неопределено;
						СписокДокументов = Новый СписокЗначений;
						сч = 1;
						Для Каждого РазделДок Из Ини.мДокумент Цикл   // Ищем в инишке фактуры мДокумент с типом, который может быть основанием СФ
							ТипМДок = Сред(РазделДок.Значение.Документ.Значение, Найти(РазделДок.Значение.Документ.Значение, ".")+1);
							Если ТипыОснований.СодержитТип(Тип("ДокументСсылка."+ТипМДок)) Тогда	
								ИниПост = РазделДок.Значение;
								Если сч = 1 Тогда
									ИниПервогоОснования = РазделДок.Значение;
									ПервыйДокументПоступления = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С,РазделДок.Ключ);
								КонецЕсли;
								сч = сч + 1; 
	                            фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+РазделДок.Ключ,"Документ_Шаблон",Кэш);
								ТекущийДокументПоступления = Кэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С,РазделДок.Ключ);  // уже есть связанный документ поступления
								
								Если Не ЗначениеЗаполнено(ТекущийДокументПоступления) Тогда  // если нет связанного документа поступления, пытаемся найти его по реквизитам основания из СФ
									РеквизитыДляПоиска = Новый Структура;
									РеквизитыДляПоиска.Вставить("НашаОрганизация", СоставПакета.НашаОрганизация);
									РеквизитыДляПоиска.Вставить("Контрагент", СоставПакета.Контрагент);
									Если ИниПост.Свойство("Документ_ДатаВх") Тогда
										Если ИниПост.Документ_ДатаВх.Свойство("Данные") Тогда
											ДатаПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_ДатаВх.Данные, Вложение.СтруктураФайла);
										ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеДата") Тогда
											ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеДата;
										ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Дата") Тогда
											ДатаПост = Вложение.СтруктураФайла.Файл.Документ.Дата;
										КонецЕсли;	
										Попытка
											ДатаПост = Дата(Сред(ДатаПост,7,4),Сред(ДатаПост,4,2),Лев(ДатаПост,2));
											РеквизитыДляПоиска.Вставить("Дата", ДатаПост);
										Исключение
										КонецПопытки;
									КонецЕсли;
									Если ИниПост.Свойство("Документ_НомерВх") Тогда
										Если ИниПост.Документ_НомерВх.Свойство("Данные") Тогда
											НомерПост = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниПост.Документ_НомерВх.Данные, Вложение.СтруктураФайла);
										ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Параметр") И Вложение.СтруктураФайла.Файл.Документ.Параметр.Свойство("ОснованиеНомер") Тогда
											НомерПост = Вложение.СтруктураФайла.Файл.Документ.Параметр.ОснованиеНомер;
										ИначеЕсли Вложение.СтруктураФайла.Свойство("Файл") И Вложение.СтруктураФайла.Файл.Свойство("Документ") И Вложение.СтруктураФайла.Файл.Документ.Свойство("Номер") Тогда
											НомерПост = Вложение.СтруктураФайла.Файл.Документ.Номер;
										КонецЕсли;
										Если ЗначениеЗаполнено(НомерПост) Тогда
											РеквизитыДляПоиска.Вставить("Номер", НомерПост);
										КонецЕсли;
									КонецЕсли;
									Если РеквизитыДляПоиска.Свойство("Дата") и РеквизитыДляПоиска.Свойство("Номер") Тогда
										фрмНайтиДок = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа","РаботаСДокументами1С",,Кэш);
										фрмНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, ИниПост, Кэш.Ини, Кэш.Парам, РеквизитыДляПоиска);
									КонецЕсли;										
								КонецЕсли;
								Если СписокДокументов.Количество()>0 Тогда  // если нашли подходящий документ, берем его, иначе создаем новый
									ДокументПоступления	= СписокДокументов[0].Значение;
									ТекстСообщения		= "Найден подходящий документ-основание "+строка(ДокументПоступления);
									ДанныеДозаполнить	= Кэш.ОбщиеФункции.РезультатДействия_ИзвлечьВременныеДанные(Кэш);
									//AU если заполняем детализацию, то не сообщаем сразу.
									Если ДанныеДозаполнить.ЗаполнитьДетализацию Тогда
										ПараметыЗаполнения = Новый Структура("Ссылка, Тип, Состояние, Сообщение", ДокументПоступления, ИниПост.Документ.Значение, "Найден.", ТекстСообщения);
										Кэш.ОбщиеФункции.РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаДокумента", ДанныеДозаполнить.СтрокаДетализации, ПараметыЗаполнения);
									Иначе
										Сообщить("Для документа " + Вложение.Название + " н" + Сред(ТекстСообщения, 2));
									КонецЕсли;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СписокДокументов.Количество()=0 и ЗначениеЗаполнено(ИниПервогоОснования)Тогда  // если не нашли подходящий документ, создаем новый
							//AU если заполнение детализации происходит внутри функции создания документа.
							ДокументПоступления = фрм.СоздатьДокумент(Кэш,Вложение,ИниПервогоОснования,СоставПакета,МассивОснований, ?(Документ1С = Неопределено, Неопределено, ПервыйДокументПоступления));
						КонецЕсли;
						Если ЗначениеЗаполнено(ДокументПоступления) Тогда
							МассивОснований.Добавить(Новый Структура("ДокОснование, МассивТабЧастей", ДокументПоступления, Новый Массив));
						КонецЕсли;
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("Документ_Шаблон").СоздатьДокумент(Кэш, Вложение, ИниДок, СоставПакета, МассивОснований, Документ1С);
КонецФункции

&НаКлиенте
Функция ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(Кэш, СтруктураФайла, ини, СтруктураДокОбъект, МассивОснований,СоставПакета, Вложение, ДопПараметры=Неопределено) Экспорт
	Обработчики = Новый Структура;
	Обработчики.Вставить("мСведПрослеж",Новый Структура("Метод, Модуль",	"Обработчик_мСведПрослеж",	ЭтаФорма));
	фрм = Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, "Документ_Шаблон", Новый Структура, Ложь);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметрыЗаполненияДокумента = Новый Структура;
	Иначе
		ДопПараметрыЗаполненияДокумента = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(ДопПараметры,,Ложь);	
	КонецЕсли;
	ДопПараметрыЗаполненияДокумента.Вставить("Обработчики", Обработчики);	
	Возврат фрм.ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(Кэш, СтруктураФайла, ини, СтруктураДокОбъект, МассивОснований,СоставПакета, Вложение, ДопПараметрыЗаполненияДокумента);
КонецФункции

//Обработка заполнения сведений о прослеживаемости. Пересчет
&НаКлиенте
Процедура Обработчик_мСведПрослеж(Аргумент, ПараметрыОбработчика) Экспорт
	Перем РасчитанныеМПрослеж;
	Кэш				= ПараметрыОбработчика.Кэш;
	СбисКонтекст	= ПараметрыОбработчика.Контекст;
	Документ_Шаблон	= Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, "Документ_Шаблон", Новый Структура, Ложь);
	
	//Сперва это стандартная обработка узла, чтобы получить посчитанное на клиенте
	Документ_Шаблон.Обработчик_УзелИни(Аргумент, Новый Структура("Кэш, Контекст, Обработчики, ДополнительныеПараметры", Кэш, СбисКонтекст, Новый Структура, Новый Структура));
	//Выполним распределение сумм для прослеживаемых товаров, если сформировался узел прослеживаемости.
	Если Не Аргумент.Значение.СведПрослеж.Свойство("РассчитанноеЗначение", РасчитанныеМПрослеж) Тогда
		Возврат;
	КонецЕсли;
	ДопПараметрыРасчета = Новый Структура("ВызовСервера", Истина);
	ИспользоватьРаспределение = Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослежПараметр_ИспользоватьРаспределение",, СбисКонтекст, ДопПараметрыРасчета) = Истина;
	Если Не ИспользоватьРаспределение Тогда
		Возврат;
	КонецЕсли;
	СведПрослежПараметр_Распределение	= Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослежПараметр_Распределение",	, СбисКонтекст, ДопПараметрыРасчета);
	СведПрослежПараметр_РаспределитьПо	= Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослежПараметр_РаспределитьПо",	, СбисКонтекст, ДопПараметрыРасчета);
	СведПрослежПараметр_РаспределитьЧто	= Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослежПараметр_РаспределитьЧто",	, СбисКонтекст, ДопПараметрыРасчета);
	СведПрослежПараметр_ПересчитатьЦену = Ложь;
	Попытка
		СведПрослежПараметр_Распределение = Число(СведПрослежПараметр_Распределение);
	Исключение
		//Добавить обработку ошибок
		Возврат;
	КонецПопытки;
	КоличествоРаспределитьПоОбщее = 0;
	КонтекстДляРасчета = Кэш.ОбщиеФункции.СкопироватьОбъектСПараметрамиКлиент(СбисКонтекст,,Ложь);
	КонтекстДляРасчета.Вставить("СтекИни",				Новый Массив);
	КонтекстДляРасчета.Вставить("СтекДанныеИсточник",	Новый Массив);
	КонтекстДляРасчета.СтекДанныеИсточник.Добавить(КонтекстДляРасчета.ДанныеИсточникЛокальные);
	КонтекстДляРасчета.СтекИни.Добавить(КонтекстДляРасчета.Ини);
	КонтекстДляРасчета.Удалить("ДанныеИсточникЛокальные");
	
	//Считаем общее количество по РНПТ
	Для Каждого ЗначениеПоРНПТ Из РасчитанныеМПрослеж Цикл
		КонтекстДляРасчета.СтекИни.Вставить				(0, ЗначениеПоРНПТ);
		ДанныеИсточник = Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослеж",, КонтекстДляРасчета, ДопПараметрыРасчета);
		КонтекстДляРасчета.СтекДанныеИсточник.Вставить	(0, ДанныеИсточник);
		
		РаспределитьПо = Документ_Шаблон.РассчитатьПараметрИни(Кэш, СведПрослежПараметр_РаспределитьПо,, КонтекстДляРасчета, ДопПараметрыРасчета);
		ПересчитатьЦенуЛок = Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослежПараметр_ПересчитатьЦену",, КонтекстДляРасчета, ДопПараметрыРасчета);
		Если ПересчитатьЦенуЛок = Истина Тогда
			СведПрослежПараметр_ПересчитатьЦену = Истина;
		КонецЕсли;
		Попытка
			КоличествоРаспределитьПоОбщее = КоличествоРаспределитьПоОбщее + Число(РаспределитьПо);
		Исключение
			//Добавить обработку ошибок
			Возврат;
		КонецПопытки;
		КонтекстДляРасчета.СтекИни.Удалить(0);	
		КонтекстДляРасчета.СтекДанныеИсточник.Удалить(0);	
	КонецЦикла;
	Если	КоличествоРаспределитьПоОбщее = 0
		Или	(	Не СведПрослежПараметр_ПересчитатьЦену
			И	Не РасчитанныеМПрослеж.Количество() > 1)	Тогда
		Возврат;
	КонецЕсли;
	
	ЧтоРаспределять = СтрЗаменить(СведПрослежПараметр_РаспределитьЧто, ",", Символы.ПС);
	Распределение = Новый Структура;
	Для НомерСтрокиЧтоРаспределить = 1 По СтрЧислоСтрок(ЧтоРаспределять) Цикл
		ЧтоРаспределитьКлючи = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(ЧтоРаспределять, НомерСтрокиЧтоРаспределить)), "|", Символы.ПС); 
		ЧтоРаспределитьКлюч = СтрПолучитьСтроку(ЧтоРаспределитьКлючи, 1);
		ЧтоРаспределитьЗнач = Документ_Шаблон.РассчитатьПараметрИни(Кэш, ЧтоРаспределитьКлюч, , КонтекстДляРасчета, ДопПараметрыРасчета);
		Попытка
			ЧтоРаспределитьЗнач = Число(ЧтоРаспределитьЗнач);
		Исключение
			Возврат;
		КонецПопытки;	 
		Распределение.Вставить(ЧтоРаспределитьКлюч, Новый Структура("Остаток, Доля, КудаРаспределить, Копейки", ЧтоРаспределитьЗнач, ЧтоРаспределитьЗнач/КоличествоРаспределитьПоОбщее, СтрПолучитьСтроку(ЧтоРаспределитьКлючи, 2), "Последний"));
	КонецЦикла;
	//Выполняем распределение
	Для Каждого КлючИЗначениеРаспределить Из Распределение Цикл
		Для Каждого ЗначениеПоРНПТ Из РасчитанныеМПрослеж Цикл
			КонтекстДляРасчета.СтекИни.Вставить				(0, ЗначениеПоРНПТ);
			ДанныеИсточник = Документ_Шаблон.РассчитатьПараметрИни(Кэш, "СведПрослеж",, КонтекстДляРасчета, ДопПараметрыРасчета);
			КонтекстДляРасчета.СтекДанныеИсточник.Вставить	(0, ДанныеИсточник);
			
			РаспределитьПо = Документ_Шаблон.РассчитатьПараметрИни(Кэш, СведПрослежПараметр_РаспределитьПо,, КонтекстДляРасчета, ДопПараметрыРасчета);
			РаспределитьПо = Число(РаспределитьПо);
			
			ЗначениеРаспределение = Окр(РаспределитьПо * КлючИЗначениеРаспределить.Значение.Доля, 2);
			КлючИЗначениеРаспределить.Значение.Остаток = КлючИЗначениеРаспределить.Значение.Остаток - ЗначениеРаспределение;
			ЗначениеПоРНПТ[КлючИЗначениеРаспределить.Значение.КудаРаспределить].Вставить("РассчитанноеЗначение", ЗначениеРаспределение);
			
			КонтекстДляРасчета.СтекИни.Удалить(0);	
			КонтекстДляРасчета.СтекДанныеИсточник.Удалить(0);	
		КонецЦикла;
		Если Не КлючИЗначениеРаспределить.Значение.Остаток = 0 Тогда
			Если КлючИЗначениеРаспределить.Значение.Копейки = "Последний" Тогда
				СтрокаДляКопеек = РасчитанныеМПрослеж[РасчитанныеМПрослеж.Количество()-1];
			Иначе
				СтрокаДляКопеек = РасчитанныеМПрослеж[0];
			КонецЕсли;
			СтрокаДляКопеек[КлючИЗначениеРаспределить.Значение.КудаРаспределить].РассчитанноеЗначение = СтрокаДляКопеек[КлючИЗначениеРаспределить.Значение.КудаРаспределить].РассчитанноеЗначение + КлючИЗначениеРаспределить.Значение.Остаток;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

