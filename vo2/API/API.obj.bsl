
&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
&НаКлиенте
Перем Заголовки Экспорт;

#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(СбисИмяФормы)
	Возврат ВладелецФормы.сбисПолучитьФорму(СбисИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "") Экспорт
	// в апи ничего не делает		
КонецФункции
&НаКлиенте
Функция сбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ВремяОжиданияОтвета", ВремяОжидания);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	// Получает список доступных сертификатов	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Если filter=Неопределено Тогда
		filter = Новый Структура("Фильтр", Новый Структура);
	КонецЕсли;
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокСертификатов", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
	
	Object = Результат;
	ObjectList = Неопределено;
	Object.Свойство("Сертификат",ObjectList);
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте                   
Функция ПолучитьСписокСертификатовПоФильтру(Кэш, filter=Неопределено, Отказ) Экспорт
	Возврат Новый СписокЗначений();	
КонецФункции
&НаКлиенте
Функция ПолучитьСписокЛокальныхСертификатов(Кэш, filter=Неопределено) Экспорт
	
	СертификатыЛокальные = Новый СписокЗначений();
	ТекстОшибки = "";
	Попытка
		
		СертификатыЛокальные =  Кэш.ФормаЭП.сбисСписокЛокальныхСертификатов(Кэш, ТекстОшибки);
		
	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		МодульОбъектаКлиент().ВызватьСбисИсключение(ТекстОшибки, "API.ПолучитьСписокЛокальныхСертификатов");
		Возврат СертификатыЛокальные;
	КонецПопытки;              

	Возврат СертификатыЛокальные;
	
КонецФункции
&НаКлиенте
Функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	СписокСертификатов = ПолучитьСписокСертификатов(Кэш);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
Функция ПолучитьКодАктивацииСертификата(Кэш, Сертификат) Экспорт
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	certificate = Новый Структура;
	certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
	
	СтруктураПараметровЗапроса = Новый Структура("Сертификат", certificate);
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПолучитьКодАктивацииСертификата", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		certificate = Новый Структура;
		certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
		certificate.Вставить("КодАктивации", Сертификат.КодАктивации);
		СтруктураПараметровЗапроса = Новый Структура("Сертификат", certificate);
		
		СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.АктивироватьСертификат", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
		Если Отказ Тогда 
			Если СтруктураРезультата.code = 775 Тогда
				ТекстОшибки = "Не удалось активировать сертификат.";
			Иначе
				ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
			КонецЕсли;
			Сообщить(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ПолучитьТикетДляТекущегоПользователя(Кэш) Экспорт
	// Функция получает токен по текущему сиду	
	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	
	МестныйКэш = Кэш;
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "САП.GetTicketForCurrentSid", Новый Структура, ДопПараметры, Отказ);
	Если Отказ Тогда 
		ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат СтруктураРезультата
КонецФункции
&НаКлиенте
Функция ПолучитьИдТекущегоАккаунта(Кэш) Экспорт
	Перем СбисИдАккаунта;
	Если Кэш.СБИС.ПараметрыИнтеграции.Свойство("ИдАккаунта", СбисИдАккаунта) Тогда
		Возврат СбисИдАккаунта;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
&НаКлиенте
Функция ПолучитьТокенДляТекущегоПользователя(Кэш,Отказ=Ложь) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	
	КэшПарам = Новый Структура("ПолнаяВерсияПродукта,ТипПрокси,ПроксиСервер,ПроксиПорт,ПроксиЛогин,ПроксиПароль,UserAgent");
	ЗаполнитьЗначенияСвойств(КэшПарам, Кэш.Парам);//Отправляем только те параметры, что нужны для вызова команды, чтобы не перегружать вызов сервера.
	КэшПарам.Вставить("АдресСервера",Кэш.СБИС.АдресСервера);
	КэшПарам.Вставить("СовместимостьМетодов",Кэш.СовместимостьМетодов);
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисСформироватьДанныеТекущегоПользователя","РаботаСДокументами1С","",Кэш);
	ДанныеСотрудника = фрм.сбисСформироватьДанныеТекущегоПользователя(Кэш);
	
	ИдСотрИС = ДанныеСотрудника.Сотрудник.ИдентификаторИС;
	Если ИдСотрИС = "00000000-0000-0000-0000-000000000000" Тогда
		Отказ = Истина;
		ТекстОшибки = "Не удалось получить идентификатор сотрудника. Возможно текущий пользователь 1С не связан с физическим лицом.";
		Ошибка = Кэш.ОбщиеФункции.сбисИсключение(Новый Структура("message,details,code",ТекстОшибки,ТекстОшибки,100), "ПолучитьТокенДляТекущегоПользователя");
		Возврат Ошибка;
	КонецЕсли;

	Результат = ПолучитьТокенДляТекущегоПользователяНаСервере(КэшДляЗапросаНаСервере(Кэш), ДанныеСотрудника, Отказ);
	Если Отказ Тогда 
		Ошибка = Кэш.ОбщиеФункции.сбисИсключение(Новый Структура("message,details,code",Результат,Результат,100), "ПолучитьТокенДляТекущегоПользователя");
		Возврат Ошибка;
	КонецЕсли;
	Возврат Результат
КонецФункции
&НаСервере
Функция ПолучитьТокенДляТекущегоПользователяНаСервере(Кэш, ДанныеСотрудника,Отказ=Ложь) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	КэшПарам = Кэш.Парам;
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		Настройки = ХранилищеОбщихНастроек.Загрузить("СБИС", "Авторизация",,"ПользовательСБИС");
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		Ошибка = ОписаниеОшибки();
		Отказ = Истина;
		Возврат Ошибка;
	КонецПопытки;
	Если Настройки = Неопределено Тогда
		Отказ = Истина;
		Возврат "Не заполнены данные администратора системы для авторизации по токену.";
	КонецЕсли;
	Если Настройки.Свойство("ИДПриложения") И ЗначениеЗаполнено(Настройки.ИДПриложения) Тогда
		
		СтруктураРезультата = АвторизоватьсяПриложением(Кэш, Настройки.ИДПриложения, Настройки.КлючПриложения, Настройки.КлючАутентификации, Отказ);
		
	Иначе
		
		СтруктураРезультата = АвторизоватьсяПоЛогинуПаролюНаСервере(Кэш, Настройки.Логин, Настройки.Пароль, Отказ);
		
	КонецЕсли;
	Если Отказ Тогда 
		СтруктураРезультата = СтруктураРезультата.Результат;
		ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЕстьРезультат, ИдСессии", Истина, СтруктураРезультата.Результат);
	
	СтруктураПараметровЗапроса = Новый Структура("ExternalId", ДанныеСотрудника.Сотрудник.ИдентификаторИС);
	
	СтруктураРезультата = сбисОтправитьИОбработатьКомандуНаСервере(Кэш, "User.GetTokenByExternalId", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		Возврат ТекстОшибки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураРезультата) Тогда
		СтруктураРезультата = сбисПрочитатьСотрудника(Кэш, ДанныеСотрудника.Сотрудник.ИдентификаторИС, ДопПараметры, Отказ);
		Если Отказ Тогда 
			Если Лев(СтруктураРезультата.message, 27) = "Не удалось найти сотрудника" Тогда
				СоздаватьСотрудника = Ложь;
				Попытка
					Для Каждого Стр Из Настройки.Профили Цикл
						Для Каждого Элемент Из ДанныеСотрудника.Права.Роль Цикл
							Если Стр.Наименование = Элемент.Название Тогда
								СоздаватьСотрудника = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;						
					КонецЦикла;
					Если СоздаватьСотрудника Тогда
						ДанныеСотрудников = Новый Соответствие;
						ДанныеСотрудников.Вставить(ПараметрыСеанса.ТекущийПользователь, ДанныеСотрудника);
						Отказ = Ложь;
						РезультатОтправки = сбисЗаписатьСотрудниковНаСервере(Кэш, ДанныеСотрудников, ДопПараметры, Отказ);
						Если Отказ Тогда
							Для Каждого Ошибка Из РезультатОтправки.ДетализацияОшибок Цикл
							ТекстОшибки = Ошибка.Значение[0].СтруктураОшибки.message +?(Ошибка.Значение[0].СтруктураОшибки.details = Ошибка.Значение[0].СтруктураОшибки.message, "", (" "+ Ошибка.Значение[0].СтруктураОшибки.details)); 
							Возврат ТекстОшибки;	
							КонецЦикла;
						КонецЕсли;
						ИдСотрудникаСБИС = РезультатОтправки.Успешные[0].Сотрудник.Идентификатор;
					Иначе
						ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
						Возврат ТекстОшибки;
					КонецЕсли;
				Исключение
					Ошибка = ОписаниеОшибки();
					ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
					Возврат ТекстОшибки;	
				КонецПопытки;
			Иначе
				ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
				Возврат ТекстОшибки;
			КонецЕсли;
		Иначе
			ИдСотрудникаСБИС = СтруктураРезультата.Сотрудник.Идентификатор;
		КонецЕсли;
		СтруктураРезультата = УстановитьСвязиЛиц(Кэш, ДанныеСотрудника.Сотрудник.ИдентификаторИС, ИдСотрудникаСБИС, ДопПараметры, Отказ);
	    Если Отказ Тогда 
			ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
			Возврат ТекстОшибки;
		КонецЕсли;
		СтруктураРезультата = сбисОтправитьИОбработатьКомандуНаСервере(Кэш, "User.GetTokenByExternalId", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
		Если Отказ Тогда 
			ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
			Возврат ТекстОшибки;
		КонецЕсли;
		Возврат СтруктураРезультата;
	КонецЕсли;
	Возврат СтруктураРезультата;
КонецФункции
&НаСервере
Функция УстановитьСвязиЛиц(КэшПарам, ИдСотрИС, ИдСотрСБИС, ДопПараметры = Неопределено, Отказ=Ложь) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	Отказ = Ложь;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	КонецЕсли;
	//ИдСотрИС = ПолучитьИдентификаторТекущегоПользователя();
	СтруктураПараметровЗапроса = Новый Структура("ExternalId, FaceId", ИдСотрИС, ИдСотрСБИС);
	
	СтруктураРезультата = сбисОтправитьИОбработатьКомандуНаСервере(КэшПарам, "User.LinkExternalUser", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Возврат СтруктураРезультата;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаСервере
Функция сбисПрочитатьСотрудника(Кэш, ИдСотрИС, ДопПараметры = Неопределено, Отказ=Ложь) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	Отказ = Ложь;
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	КонецЕсли;
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура("Сотрудник", Новый Структура("ИдентификаторИС", ИдСотрИС)));
	
	СтруктураРезультата = сбисОтправитьИОбработатьКомандуНаСервере(Кэш, "СБИС.ПрочитатьСотрудника", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиенте
Функция сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	
	Возврат сбисЗаписатьСотрудниковНаСервере(КэшДляЗапросаНаСервере(Кэш), ДанныеСотрудников);
	
КонецФункции

&НаСервере
Функция сбисЗаписатьСотрудниковНаСервере(Кэш, ДанныеСотрудников, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	// Функция активирует серверные сертификаты для определенного списка ИНН	
	РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов, Успешные", Новый СписокЗначений,0,0,0,0, Новый Соответствие,ДанныеСотрудников.Количество(), Новый Массив);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	КонецЕсли;
	Для Каждого Элемент Из ДанныеСотрудников Цикл 
		Отказ = Ложь;
		СтруктураПараметровЗапроса = Новый Структура("Параметр", Элемент.Значение);
		
		РезультатЗапроса = сбисОтправитьИОбработатьКомандуНаСервере(Кэш, "СБИС.ЗаписатьСотрудника", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
		Если Отказ Тогда 
			РезультатОтправки.Ошибок = РезультатОтправки.Ошибок + 1;
			// TODO убрать после обертки ошибки в плагине
			Если РезультатЗапроса.message = "Неизвестная ошибка БЛ" и Лев(РезультатЗапроса.details, 30) = "В справочнике ролей не найдены" Тогда
				РезультатЗапроса.message = "В справочнике ролей не найдены роли";
			КонецЕсли;
			ТекстОшибки = РезультатЗапроса.message;
			ЭлементСписка = РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
			Если ЭлементСписка=Неопределено Тогда
				РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
			Иначе
				ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
			КонецЕсли;
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
			Если ЭлементСоответствия=Неопределено Тогда
				ЭлементСоответствия = Новый Массив;
				РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
			КонецЕсли;
			СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", Элемент.Ключ, РезультатЗапроса.details, Новый Структура("message,details,code", ТекстОшибки, РезультатЗапроса.details, РезультатЗапроса.code));
			ЭлементСоответствия.Добавить(СтрокаВСоответствие);
		Иначе			
			РезультатОтправки.Отправлено = РезультатОтправки.Отправлено + 1;
			РезультатОтправки.Успешные.Добавить(РезультатЗапроса);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатОтправки;
КонецФункции
//Метод устарел, вместо него использовать Кэш.СБИС.МодульОбъектаКлиент.СбисПолучитьИнформациюОТекущемПользователе
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	// Получает информацию о текущем пользователе	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура);
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОТекущемПользователе", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;
	
	Если Не СтруктураРезультата.Пользователь.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не СтруктураРезультата.Пользователь.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не СтруктураРезультата.Пользователь.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли;
	Возврат Фамилия + " " + Имя + " " + Отчество;
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
	// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно,ДопПараметры) Экспорт
	Возврат ГлавноеОкно.Кэш.ОбщиеФункции.ПолучитьФильтрСобытий(ГлавноеОкно.Кэш, ДопПараметры);
КонецФункции	
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	// Получает список документов реализации с online.sbis.ru 	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = Кэш.ОбщиеФункции.ПолучитьФильтрСобытий(Кэш, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр",filter);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокДокументов", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Если Результат.code = 775 Тогда
			ТекстОшибки = "Не удалось получить список документов отгрузки.";
		Иначе
			ТекстОшибки = Результат.message +?(Результат.details = Результат.message, "", (" "+ Результат.details)); 
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Сообщить(ТекстОшибки);
		Возврат Новый Структура;
	КонецЕсли;
	Возврат Кэш.ОбщиеФункции.ОбработатьСписокДокументовОтгрузки(Кэш, Результат);
КонецФункции
&НаКлиенте
Функция ПолучитьHTMLПоXML(Кэш, Вложение) экспорт
	Перем СбисКодировка;
	// Получает html по xml	
	// Используется при просмотре документов из реестров продаж (1С)
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	МестныйКэш = Кэш;
	
	param = Новый Структура; 
	Если ТипЗнч(Вложение) = Тип("Структура") Тогда
		param.Вставить("XML", Вложение.XMLДокумента);
	Иначе   // для совместимости с внешними Функциями (СформироватьРасхождение)
		param.Вставить("XML", Вложение);
	КонецЕсли;
	param.XML = СериализоватьИзСтроки_ВBase64(Кэш, param.XML,, Отказ);
	Если Отказ Тогда 
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, param.XML);
		Возврат Ложь;
	КонецЕсли;

	СтруктураПараметровЗапроса = Новый Структура("Параметр", param);
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СформироватьHTMLИзXML", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Если СтруктураРезультата.code = 775 Тогда
			ТекстОшибки = "Не удалось получить печатную форму документа.";
		Иначе
			ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Если Не Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.Свойство("API_HTMLпоXML_Чтение", СбисКодировка) Тогда
		СбисКодировка = "windows-1251";
	КонецЕсли;
	ТекстXMLBase64 = СтруктураРезультата.HTML;
	html_text = СериализоватьИзBase64_ВСтроку(Кэш, ТекстXMLBase64, СбисКодировка, Отказ);
	Если Отказ Тогда 
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, html_text);
		Возврат Ложь;
	КонецЕсли;
	Возврат html_text;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = Кэш.ОбщиеФункции.ПолучитьФильтрСобытий(Кэш, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	СтруктураДляОбновленияФормы = Новый Структура;
	
	Результат = СБИС_СписокДокументовПоСобытиям(Кэш, filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		
		МодульОбъектаКлиент().СбисСообщить(Результат);
		
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	Возврат Кэш.ОбщиеФункции.ОбработатьСписокСобытий(Кэш, Результат);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	// Получает список документов определенного типа с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = Кэш.ОбщиеФункции.ПолучитьФильтрСобытий(Кэш, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Возврат сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно); 
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт	
	// Получает список документов определенного типа с online.sbis.ru
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	СтруктураДляОбновленияФормы = Новый Структура();
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр",filter);
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокДокументов", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Если Результат.code = 775 Тогда
			ТекстОшибки = "Не удалось получить список документов.";
		Иначе
			ТекстОшибки = Результат.message +?(Результат.details = Результат.message, "", (" "+ Результат.details)); 
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Сообщить(ТекстОшибки);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Возврат Кэш.ОбщиеФункции.ОбработатьСписокДокументов(Кэш, Результат);
КонецФункции
&НаКлиенте
Функция ПрочитатьДокумент(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	// Получает структуру документа СБИС	
	Отказ = Ложь;
	МестныйКэш = Кэш;   
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ПерегенерироватьВложения") И ДополнительныеПараметры.ПерегенерироватьВложения Тогда
		ПараметрыЧтения = Новый Структура("Документ",Новый Структура("Идентификатор,ДопПоля", строка(ИдДок), "ЭтапВернутьВсеСертификаты,Лицо2,Лицо3"));	
	Иначе
		ПараметрыЧтения = Новый Структура("Документ",Новый Структура("Идентификатор,ДопПоля", строка(ИдДок), "ЭтапВернутьВсеСертификаты,Лицо2,Лицо3,НеПерегенерироватьВложения"));
	КонецЕсли;		
	
	Если ДополнительныеПараметры.Свойство("Этап") Тогда
		ПараметрыЧтения.Документ.Вставить("Этап", ДополнительныеПараметры.Этап);
	КонецЕсли;
	
	Если МодульОбъектаКлиент().ПолучитьЗначениеПараметраСБИС("ПоддержкаОбменаЕИС")
        И ДополнительныеПараметры.Свойство("РеализацияЕИС")
        И ДополнительныеПараметры.РеализацияЕИС Тогда
		
		ПараметрыЧтения.Документ.ДопПоля = ПараметрыЧтения.Документ.ДопПоля + ",Расширение,ЕИС";
		ДополнительныеПараметры.Удалить("РеализацияЕИС");
		
	КонецЕсли;
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат, СообщатьПриОшибке", Истина, Истина);
	
	оДокумент = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПрочитатьДокумент", ПараметрыЧтения, ДопПараметрыЗапроса,Отказ);
	Если	Отказ//Для сохранения совместимости со старым функционалом.
		И	НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции
&НаКлиенте
Функция ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	Сообщить("Для работы с зашифрованными документами выберите способ обмена ""extSDK2"" на вкладке Настройки.");
	Возврат "";
КонецФункции
&НаКлиенте
Функция ПроверитьПодписиВложения(Кэш,Вложение) экспорт
	// Расшифровывает данные файла вложения	
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисФайлСКлиентаВBASE64(ПолноеИмяФайла) экспорт
	# Если НЕ ВебКлиент Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Возврат сбисФайлНаСервереВBASE64(ДвоичныеДанные);
	# Иначе
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла,""));
		ПомещенныеФайлы = Новый Массив;
		Попытка
			ПоместитьФайлы(ПомещаемыеФайлы,ПомещенныеФайлы,,Ложь, УникальныйИдентификатор);
			Возврат сбисФайлНаСервереВBASE64(ПомещенныеФайлы, Истина);
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	# КонецЕсли
	Возврат "";
КонецФункции
&НаСервереБезКонтекста
Функция сбисФайлНаСервереВBASE64(Данные, ЭтоВебКлиент = Ложь) экспорт
	Если ЭтоВебКлиент Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные[0].Хранение);
	Иначе
		ДвоичныеДанные = Данные;
	КонецЕсли;
	
	НедопустимыеСимволы = Новый Массив;
	НедопустимыеСимволы.Добавить(Символы.ПС);
	НедопустимыеСимволы.Добавить(Символы.ВК);
	ДанныеВозврат = Base64Строка(ДвоичныеДанные);
	Для Каждого НедопустимыйСимвол Из НедопустимыеСимволы Цикл
		ДанныеВозврат = СтрЗаменить(ДанныеВозврат, НедопустимыйСимвол, "");
	КонецЦикла;

	Возврат ДанныеВозврат;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	МодульТекущий	= МодульОбъектаКлиент(); 
	ИмяИнтерация	= МодульТекущий.ПолучитьЗначениеПараметраСБИС("ИнтеграцияИмя");
	
	// Прочитаем пакет   
	ОшибкаЧтенияПакета = Ложь;
	СоставПакета = ПрочитатьДокумент(Кэш,Идентификатор,,ОшибкаЧтенияПакета);
	Если ОшибкаЧтенияПакета Тогда
				
		Если МодульТекущий.ПолучитьЗначениеПараметраСБИС("ТихийРежим") Тогда
			
			ОшибкаВыполнитьДействие = МодульТекущий.НовыйСбисИсключение(СоставПакета, ИмяИнтерация + ".сбисВыполнитьКоманду");
			ВызватьИсключение МодульТекущий.СбисИсключение_Представление(ОшибкаВыполнитьДействие);
			
		Иначе

			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущееДействие = Неопределено;
	
	Если СоставПакета.Свойство("Этап") Тогда
		Для Каждого ЭлДействие Из СоставПакета.Этап[0].Действие Цикл
			Если ЭлДействие.Название = ИмяКоманды Тогда
				ТекущееДействие = ЭлДействие;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееДействие <> Неопределено Тогда 
		action = Неопределено;
		Комментарий = "";
		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,Действие,ПредставлениеПакета",Кэш, СоставПакета, ТекущееДействие, ПредставлениеПакета);
		Если НРег(ТекущееДействие.ТребуетКомментария) = "да" Тогда
			СтрокаПодсказка = "Необходим комментарий"; 
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
					Комментарий = "";
				КонецЕсли;
			#Иначе
				ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
				Возврат Ложь;
			#КонецЕсли
		КонецЕсли;	
		Возврат сбисВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения);
	КонецЕсли;	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция сбисВыполнитьКомандуПослеВвводаКомментария(Комментарий, ДопПараметры) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	Кэш = ДопПараметры.Кэш;
	СоставПакета = ДопПараметры.СоставПакета;
	ПредставлениеПакета = ДопПараметры.ПредставлениеПакета;
	Действие = ДопПараметры.Действие;
	ИмяКоманды = Действие.Название;
	МодульТекущий	= МодульОбъектаКлиент(); 
	
	Если	НРег(Действие.ТребуетКомментария) = "да"
		И	Не ЗначениеЗаполнено(Комментарий) Тогда 
		
		Если МодульТекущий.ПолучитьЗначениеПараметраСБИС("ТихийРежим") Тогда
			
			ИмяИнтерация = МодульТекущий.ПолучитьЗначениеПараметраСБИС("ИнтеграцияИмя");
			ОшибкаВыполнитьДействие = МодульТекущий.НовыйСбисИсключение(, ИмяИнтерация + ".сбисВыполнитьКоманду", 780,, "Для выполнения операции, необходимо указать комментарий!");
			ВызватьИсключение МодульТекущий.СбисИсключение_Представление(ОшибкаВыполнитьДействие);
			
		Иначе
			
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать комментарий!"), Новый Структура());
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
    Если ДопПараметры.Действие.ТребуетКомментария  = "Да" Тогда
        СтруктураДЛяОтложеногоДействия = Новый Структура("ИмяПроцедуры, Модуль","ОбновитьКонтент",Кэш.ГлавноеОкно );
        ОтложенноеДействие = МодульОбъектаКлиент().НовыйОтложенноеДействие(СтруктураДЛяОтложеногоДействия);
        МодульОбъектаКлиент().ПодключитьОтложенноеДействие(ОтложенноеДействие);
    КонецЕсли;
	
	Результат = сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция сбисВыполнитьКомандуОтклонить(Комментарий, ДополнительныеПараметры) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	
	Кэш = ДополнительныеПараметры.Кэш;
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать комментарий!"), Новый Структура());
		Возврат Ложь;
	КонецЕсли;
	
	СоставПакета = ДополнительныеПараметры.СоставПакета;
	ПредставлениеПакета = ДополнительныеПараметры.ПредставлениеПакета;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	ГлавноеОкно = ДополнительныеПараметры.ГлавноеОкно;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			ДействиеВыполнено = сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	Перем Сертификат,Алгоритм;
	
	МодульТекущий = МодульОбъектаКлиент();
	МестныйКэш = Кэш;
	Отказ = Ложь; 
	
	ПараметрыВыполнить = Новый Структура("СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета, Сертификат", СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета, Сертификат);

	Если Действие.ТребуетПодписания="Да" Тогда
		Попытка
			Сертификат = МодульОбъектаКлиент().ПодобратьСертификатДляДействияСДокументомСБИС(ПараметрыВыполнить);
			
			Если Сертификат = Неопределено Тогда
				
				ВызватьИсключение "Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов " + ПредставлениеПакета;
				
			КонецЕсли;
			
			ПараметрыВыполнить.Вставить("Сертификат", Сертификат);
			
			Если Не Сертификат.Ключ.Тип = "Отложенный" И Не Сертификат.Ключ.Тип = "Серверный"  И не Сертификат.Ключ.Тип = "ОтложенныйСПодтверждением" Тогда
				
				Попытка
					СертификатДД = Кэш.ФормаЭП.сбисДвоичныеДанныеСертификатаПоОтпечатку(Кэш, Сертификат.Отпечаток); 
				Исключение
					Ошибка = ОписаниеОшибки();	
				КонецПопытки;
						
				ПараметрыВыполнить.Вставить("СертификатДляПодписания", СертификатДД);
				ПараметрыВыполнить.Вставить("Алгоритм", Кэш.ФормаЭП.сбисВыбратьНаборАлгоритмовДляСозданияПодписи(Сертификат.Алгоритм));
				
			КонецЕсли;
		Исключение
			
			Если МодульТекущий.ПолучитьЗначениеПараметраСБИС("ТихийРежим") Тогда
				
				ОшибкаВыполнитьДействие = МодульТекущий.НовыйСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", Кэш.ИнтеграцияИмя + ".СбисВыполнитьДействие"));
				ВызватьИсключение МодульТекущий.СбисИсключение_Представление(ОшибкаВыполнитьДействие);
				
			Иначе
				
				Отказ = Истина;
				МодульТекущий.СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", Кэш.ИнтеграцияИмя + ".СбисВыполнитьДействие"));
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	
	Попытка
		
		//Шифрование только ExtSDK
		Если СоставПакета.Свойство("Вложение") Тогда
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("Зашифрован") И Вложение.Зашифрован = "Да" Тогда
					
					ОшибкаСертификат = МодульТекущий.НовыйСбисИсключение(, "API.сбисВыполнитьДействие", 601, "Для корректной обработки зашифрованных документов выберите способ обмена ""extSDK"" на вкладке Настройки.");
					ВызватьИсключение МодульТекущий.СбисИсключение_Представление(ОшибкаСертификат);

				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		МодульОбъектаКлиент().ВыполнитьДействиеСДокументомСБИС(ПараметрыВыполнить);
		
	Исключение
		
		Если МодульТекущий.ПолучитьЗначениеПараметраСБИС("ТихийРежим") Тогда
			
			ОшибкаВыполнитьДействие = МодульТекущий.НовыйСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", Кэш.ИнтеграцияИмя + ".СбисВыполнитьДействие"));
			ВызватьИсключение МодульТекущий.СбисИсключение_Представление(ОшибкаВыполнитьДействие);
			
		Иначе
			
			Отказ = Истина;
			МодульТекущий.СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды", Кэш.ИнтеграцияИмя + ".СбисВыполнитьДействие"));
			
		КонецЕсли;
			
	КонецПопытки;
	
	Возврат Не Отказ;

КонецФункции
// Подписывает вложения
&НаКлиенте
Функция сбисПодписатьВложения(Кэш, attachmentList, ПараметрыДействия, Отказ=Неопределено) Экспорт
	СертификатДляПодписания = ПараметрыДействия.ПараметрыПодписанияВложения.СертификатДляПодписания;
	Алгоритм = ПараметрыДействия.ПараметрыПодписанияВложения.Алгоритм;
	
	ТекстОшибки = "";
	сч = 0;
	Для Каждого Вложение Из attachmentList Цикл
		Если Вложение.Файл.Свойство("Ссылка") Тогда    // файл с онлайна
			ПолноеИмяФайла = МестныйКэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент();   
			МестныйКэш.ТекущийСеанс.Модули.Интеграция.СохранитьВложениеПоСсылкеВФайл(МестныйКэш,Вложение.Файл.Ссылка,ПолноеИмяФайла);
			Подпись = МестныйКэш.ФормаЭП.сбисПодписатьФайл(МестныйКэш, ПолноеИмяФайла, СертификатДляПодписания, Алгоритм, ТекстОшибки);
		Иначе
			Подпись = МестныйКэш.ФормаЭП.сбисПодписатьДвоичныеДанные(МестныйКэш, Вложение.Файл.ДвоичныеДанные, СертификатДляПодписания, Алгоритм, ТекстОшибки);
		КонецЕсли;
		Если ТекстОшибки<>"" Тогда
			Прервать;	
		КонецЕсли;
		ЭЦП = Новый Массив;	
		ЗаписьЭЦП = Новый Структура;
		ФайлЭЦП = Новый Структура; 
		
		ИмяФайлаПодписи = Лев(Вложение.Файл.Имя, Найти(Вложение.Файл.Имя,"."))+"sgn";
		ФайлЭЦП.Вставить( "Имя", ИмяФайлаПодписи ); 
		ФайлЭЦП.Вставить( "ДвоичныеДанные", Подпись); 
		ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
		Если ПараметрыДействия.Сертификат.Свойство("Доверенность") Тогда  
	        СертификатЭЦП = Новый Структура;
			СертификатЭЦП.Вставить("Доверенность", ПараметрыДействия.Сертификат.Доверенность);
			ЗаписьЭЦП.Вставить("Сертификат",СертификатЭЦП);			
		КонецЕсли;
		ЭЦП.Добавить(ЗаписьЭЦП);
		attachmentList[сч].Вставить( "Подпись", ЭЦП );
		сч = сч+1;
	КонецЦикла;	
	Если ТекстОшибки<>"" Тогда 
		Отказ = Истина;
		Возврат ТекстОшибки;
	КонецЕсли;
КонецФункции
// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция сбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	ПараметрыКоманды = Новый Структура("Документ", Новый Структура("Идентификатор,Этап",ИдДок, Новый Структура("Название", ЭтапНазвание)));
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат, СообщатьПриОшибке", Истина, Истина);
	
	оДокумент = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПовторитьЭтап", ПараметрыКоманды, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	Перем Сертификат;
	// Обрабатывает служебные по одному пакету
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	param = Новый Структура("ИдентификаторДокумента,ДопПоля",СоставПакета.Идентификатор, "ЭтапВернутьВсеСертификаты");
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр", param);
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОСлужебныхЭтапах", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	// Получаем количество необработанных служебных документов
	РезультатНеобрДок = Неопределено;
	Если Не	СтруктураРезультата.Свойство("ЧислоНеобработанныхЭтапов", РезультатНеобрДок)
		Или	РезультатНеобрДок = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Всего = Число(РезультатНеобрДок);
	
	Если Всего <= 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокСлужебныхЭтапов", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда 
		Если Результат.code = 775 Тогда
			ТекстОшибки = "Не удалось получить список служебных этапов.";
		Иначе
			ТекстОшибки = Результат.message +?(Результат.details = Результат.message, "", (" "+ Результат.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Для Каждого Док Из Результат.Документ Цикл
		//Выполнено = сбисВыполнитьДействиеБезОбработкиСлужебных(МестныйКэш, СоставПакета, СоставПакета.Этап[0], СоставПакета.Этап[0].Действие[0], "", "");
		Действие = Док.Этап[0].Действие[0];
		СертификатДляПодписания = Неопределено;
		Алгоритм = Неопределено;	
		Если Действие.ТребуетПодписания="Да" Тогда
		    ПараметрыВыполнить = Новый Структура("СоставПакета, Этап, Действие, Комментарий, Сертификат, СертификатДляПодписания, Алгоритм", Док, Док.Этап[0], Действие, "", Сертификат, СертификатДляПодписания, Алгоритм);
			
			Сертификат = МодульОбъектаКлиент().ПодобратьСертификатДляДействияСДокументомСБИС(ПараметрыВыполнить);
			
			Если Сертификат = Неопределено Тогда 
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(, "API.СбисВыполнитьДействие", 755,, "Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "));
				Возврат Ложь;
			КонецЕсли;
			
			ПараметрыВыполнить.Вставить("Сертификат", Сертификат);
			
			Если Не Сертификат.Ключ.Тип = "Отложенный" И Не Сертификат.Ключ.Тип = "Серверный"  И не Сертификат.Ключ.Тип = "ОтложенныйСПодтверждением" Тогда
				
				Попытка
					ХранилищеСертификатовКриптографии = Кэш.МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
					СертификатДД = ХранилищеСертификатовКриптографии.НайтиПоОтпечатку(Кэш.ТекущийСеанс.КэшСертификатовСБИС.Сертификаты.Получить(Сертификат.Отпечаток).Значение.Серт.Отпечаток); 
				Исключение
					Ошибка = ОписаниеОшибки();	
				КонецПопытки;
						
				ПараметрыВыполнить.Вставить("СертификатДляПодписания", Base64Строка(СертификатДД.Выгрузить()));
				ПараметрыВыполнить.Вставить("Алгоритм", Кэш.ФормаЭП.сбисВыбратьНаборАлгоритмовДляСозданияПодписи(Сертификат.Алгоритм));
			КонецЕсли; 
		КонецЕсли;

		Попытка
			МодульОбъектаКлиент().ВыполнитьДействиеСДокументомСБИС(ПараметрыВыполнить);
		Исключение
			МодульОбъектаКлиент().СообщитьСбисИсключение(ИнформацияОбОшибке(), Новый Структура("ИмяКоманды, СтатусСообщения", "API.СбисВыполнитьДействие", "message"));
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат, ПреобразовыватьДаты", Истина, Ложь);
	МестныйКэш = Кэш;
	
	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;
	СертификатДляПодписания = Неопределено;
	Алгоритм = Неопределено;
	Если Действие.Свойство("Сертификат") и Действие.ТребуетПодписания="Да" Тогда
		СертификатВыбран = Ложь;
		ТекстОшибки = "";
		Сертификат = Кэш.ФормаЭП.сбисВыбратьПодходящийСертификат(Кэш, Действие.Сертификат, ТекстОшибки);
		Если Сертификат<>Ложь Тогда
			action.Вставить("Сертификат", Сертификат.СертификатДок);
			СертификатДляПодписания = Сертификат.СертификатДляПодписания;
			Алгоритм = Сертификат.Алгоритм;
			СертификатВыбран = Истина;
		КонецЕсли;
		Если Не СертификатВыбран и ТекстОшибки<>"" Тогда
			Сообщить(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
    КонецЕсли;
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	document_in.Вставить( "Этап", stage );
	
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если СтруктураРезультата.code = 775 Тогда
			ТекстОшибки = "Не удалось подготовить действие."
		Иначе
			ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	ДопПараметры.Удалить("ПреобразовыватьДаты");
	prepared_document = СтруктураРезультата;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	ОшибкаФормирования = Ложь;
	РезультатФормирования = Кэш.ОбщиеФункции.сбисСформироватьТитулы(Кэш, СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисВыполнитьДействие"));
		Возврат Ложь;
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование = сбисПараметрыТитулов.Шифрование;
	
	Размер = attachmentListPrepared.Количество();
	Если СертификатДляПодписания <> Неопределено Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить( "Идентификатор",  Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить( "Имя", Запись.Файл.Имя );
			file.Вставить( "Хеш", Запись.Файл.Хеш ); 
			file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			attachment.Вставить( "Файл", file );
			attachmentList.Добавить( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип =  СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = ?(Вложение.Свойство("ИмяФайла"),Вложение.ИмяФайла,Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml");
				file.Вставить( "Имя", ИмяФайла ); 
				file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					Если СертификатДляПодписания <> Неопределено Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
						attachmentList.Удалить(НомПодтвЗаказа);
					КонецЕсли;
				Иначе 
					Попытка
						// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
						ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип+Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
						Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
							ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
							Если СертификатДляПодписания <> Неопределено Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
								attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
							КонецЕсли;
						Иначе
							ИдВложения = строка(Новый УникальныйИдентификатор());
						КонецЕсли;
					Исключение
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецПопытки;
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатДляПодписания) Тогда
		ТекстОшибки = "";
		сч = 0;
		Для Каждого Вложение Из attachmentList Цикл
			Если Вложение.Файл.Свойство("Ссылка") Тогда
				ПолноеИмяФайла = КаталогВременныхФайлов()+ Вложение.Файл.Имя;   // файл с онлайна
				СохранитьВложениеПоСсылкеВФайл(Кэш,Вложение.Файл.Ссылка,ПолноеИмяФайла);
				Подпись = Кэш.ФормаЭП.сбисПодписатьФайл(Кэш, ПолноеИмяФайла, СертификатДляПодписания, Алгоритм, ТекстОшибки);
			Иначе
				Подпись = Кэш.ФормаЭП.сбисПодписатьДвоичныеДанные(Кэш, Вложение.Файл.ДвоичныеДанные, СертификатДляПодписания, Алгоритм, ТекстОшибки);
			КонецЕсли;
			Если ТекстОшибки<>"" Тогда
				Прервать;	
			КонецЕсли;
			ЭЦП = Новый Массив;	
			ЗаписьЭЦП = Новый Структура;
			ФайлЭЦП = Новый Структура;
			ИмяФайлаПодписи = Лев(Вложение.Файл.Имя, Найти(Вложение.Файл.Имя,"."))+"sgn";
			ФайлЭЦП.Вставить( "Имя", ИмяФайлаПодписи ); 
			ФайлЭЦП.Вставить( "ДвоичныеДанные", Подпись); 
			ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
			ЭЦП.Добавить(ЗаписьЭЦП);
			attachmentList[сч].Вставить( "Подпись", ЭЦП );
			сч = сч+1;
		КонецЦикла;
		Если ТекстОшибки<>"" Тогда
			Сообщить(ТекстОшибки);
			Возврат Ложь;	
		КонецЕсли;
    КонецЕсли;
	
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура;
	action.Вставить("Комментарий", prepared_action.Комментарий);
	action.Вставить("Название", prepared_action.Название);
	action.Вставить("Идентификатор", ?(prepared_action.Свойство("Идентификатор"),prepared_action.Идентификатор,""));
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	//aa.buhov назначение на нужные этапы испольнителей. подразделения/сотдрудники
    Если Действие.Свойство("СледующийЭтап") Тогда
        action.Вставить("СледующийЭтап", Действие.СледующийЭтап);   
    КонецЕсли;
    //aa.buhov
	stage = Новый Структура;
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	stage.Вставить("Идентификатор", prepared_stage.Идентификатор);
	stage.Вставить("Название", prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда//Добавлено, так как у документов может быть этап, связанный с исполнителем не только при работе через extSDK
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", prepared_document.Идентификатор );
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	document_in.Вставить( "Редакция", redactions );
	document_in.Вставить( "Этап", stage );

	
	// Завершение этапа
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если СтруктураРезультата.code = 775 Тогда
			ТекстОшибки = "Не удалось выполнить действие."
		Иначе
			ТекстОшибки = СтруктураРезультата.message +?(СтруктураРезультата.details = СтруктураРезультата.message, "", (" "+ СтруктураРезультата.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	kontr = Новый Структура; 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СтруктураКонтрагента.СвФЛ.ИНН ); 
		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СтруктураКонтрагента.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СтруктураКонтрагента.СвЮЛ.КПП );
		Если СтруктураКонтрагента.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Вставить( "КодФилиала", СтруктураКонтрагента.СвЮЛ.КодФилиала );
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	СтруктураРезультата = СБИС_ИнформацияОКонтрагенте(Кэш, kontr, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат СтруктураРезультата;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	// Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	МестныйКэш = Кэш;

	ЕстьЕще = Истина;
	ТекущаяСтраница = 0;
	МассивОрганизаций = Новый Массив;
	Пока ЕстьЕще Цикл
		filter  = Новый Структура;
		navigation = Новый Структура;
		navigation.Вставить( "Страница", ТекущаяСтраница);
		filter.Вставить( "Навигация", navigation );
		СтруктураПараметровЗапроса = Новый Структура;
		СтруктураПараметровЗапроса.Вставить("Фильтр", filter);
		Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокНашихОрганизаций", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
		Если Отказ Тогда
			Если Результат.code = 775 Тогда
				ТекстОшибки = "Не удалось получить список наших организаций.";
			Иначе
				ТекстОшибки = Результат.message +?(Результат.details = Результат.message, "", (" "+ Результат.details)); 
			КонецЕсли;
			Сообщить(ТекстОшибки);
			Возврат МассивОрганизаций;
		КонецЕсли;
		
		Выборка = Результат.НашаОрганизация;
		Размер = Выборка.Количество();
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			Запись = Выборка[сч];
			оОрганизация = Выборка[сч];	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("Название", строка(Организация1С));
				
				param  = Новый Структура;
				param.Вставить( "НашаОрганизация", Запись );
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("Фильтр", param);
				СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОСлужебныхЭтапах", СтруктураПараметровЗапроса, Новый Структура, Отказ);
				Если НЕ СтруктураРезультата.Свойство("result") Тогда
					Продолжить;
				КонецЕсли;
			
				РезультатНеобрДок = Неопределено;
				СтруктураРезультата.Свойство("ЧислоНеобработанныхЭтапов",РезультатНеобрДок); // Получаем количество необработанных служебных документов
				Если РезультатНеобрДок = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				оОрганизация.Вставить("ЧислоНеобработанныхЭтапов", Число(РезультатНеобрДок));
				Если оОрганизация.ЧислоНеобработанныхЭтапов <> 0 Тогда
					МассивОрганизаций.Добавить(оОрганизация);	
					// добавляем ИНН в список для активации серверных ключей
					Если оОрганизация.Свойство("СвФЛ") Тогда
						Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
							СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
						КонецЕсли;
					Иначе
						Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
							СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);	
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", Кэш.ОбщиеФункции.СформироватьЗаголовокСертификатаДляФормыВвода(Кэш, Сертификат));
			КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
			Если	Не	ЗначениеЗаполнено(КодАктивации)
				Или		КодАктивации.ПинКод = "" Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;	
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации.ПинКод);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого оОрганизация из МассивОрганизаций Цикл
		ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(оОрганизация);
	КонецЦикла;
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(оОрганизация)
	// Обрабатывает служебные документы организации
	Отказ = Ложь;
	ДопПараметры = Новый Структура("ЕстьРезультат", Истина);
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	param   = Новый Структура;
	Орг = оОрганизация;
	org = Новый Структура; 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", Орг.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.Вставить("НашаОрганизация,ДопПоля",org,"ЭтапВернутьВсеСертификаты");
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	Всего = оОрганизация.ЧислоНеобработанныхЭтапов;	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			СтруктураПараметровЗапроса = Новый Структура("Фильтр", param);
			Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш, "СБИС.СписокСлужебныхЭтапов", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
			Если Отказ Тогда
				Если Результат.code = 775 Тогда
					ТекстОшибки = "Не удалось получить список служебных этапов."
				Иначе
					ТекстОшибки = Результат.message +?(Результат.details = Результат.message, "", (" "+ Результат.details)); 
				КонецЕсли;
				сбисСпрятатьСостояние(ГлавноеОкно);
				Сообщить(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
			Для Каждого СоставПакета Из Результат.Документ Цикл
				Выполнено = сбисВыполнитьДействие(МестныйКэш, СоставПакета, СоставПакета.Этап[0], СоставПакета.Этап[0].Действие[0], "", "");
				Если Выполнено Тогда
					Обработано = Обработано + 1;
				КонецЕсли;
			КонецЦикла;
			
			ЕстьНеобработанныеИзвещения = Результат.Навигация.ЕстьЕще;
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если (Обработано=0 и ЕстьНеобработанныеИзвещения = "Да") или Результат.Документ.Количество() = 0  Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
	// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры

&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	Перем ДопПараметрыСтороны;                                                               
	МассивСтатусРегламент = Новый Массив;
	Если  Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент =  Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;

	// Отправляет сформированные пакеты документов	
	ДопПараметры = Новый Структура("ЕстьРезультат, ПреобразовыватьДаты", Истина, Ложь);
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьПараметрыДокументовСБИС");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	documenty = Новый Массив;
	Для СчетчикПакетов=0 По КоличествоПакетов-1 Цикл
		СоставПакета = МассивПакетов[СчетчикПакетов];
		document = Новый Структура;
		Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
			document.Вставить( "Дата",СоставПакета.Дата);	
		КонецЕсли;
		Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
			document.Вставить( "Номер",СоставПакета.Номер);	
		КонецЕсли;
		Если СоставПакета.Свойство("Сумма") и ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
			document.Вставить( "Сумма",СоставПакета.Сумма);	
		КонецЕсли; 
		
		org = Новый Структура; 
		Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
			СвФЛ = Новый Структура; 
			ИННОрг = СоставПакета.НашаОрганизация.СвФЛ.ИНН;
			СвФЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН);
			Если СоставПакета.НашаОрганизация.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвФЛ.КодФилиала) Тогда
				СвФЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвФЛ.КодФилиала );	
			КонецЕсли;
			org.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			ИННОрг = СоставПакета.НашаОрганизация.СвЮЛ.ИНН;
			СвЮЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
			СвЮЛ.Вставить( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
			Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала) Тогда
				СвЮЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
			КонецЕсли;
			Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодСтраны") Тогда
				СвЮЛ.Вставить( "КодСтраны", СоставПакета.НашаОрганизация.СвЮЛ.КодСтраны );	
			КонецЕсли;
			org.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		document.Вставить( "НашаОрганизация", org );
		
		Если СоставПакета.Свойство("Контрагент") Тогда
			document.Вставить("Контрагент", МодульОбъектаКлиент().СоставПакета_СтруктураКонтрагентаДляОтправки(СоставПакета));
			КодФилиалаОтправителя = МодульОбъектаКлиент().ПрочитатьДополнительныйПараметрСтороны(СоставПакета.Контрагент, "КодФилиалаОтправителя");
			Если ЗначениеЗаполнено(КодФилиалаОтправителя) Тогда
				Если document.НашаОрганизация.Свойство("СвФЛ") Тогда
					document.НашаОрганизация.СвФЛ.Вставить("КодФилиала",КодФилиалаОтправителя); 
				Иначе
					document.НашаОрганизация.СвЮЛ.Вставить("КодФилиала",КодФилиалаОтправителя); 
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
			
		attachmentList = Новый Массив;
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			attachment = Новый Структура;
			Если Вложение.Свойство("Зашифрован") Тогда   // может быть в случае пересылки зашифрованных пакетов
				attachment.Вставить( "Зашифрован", Вложение.Зашифрован);
			КонецЕсли;
			file = Новый Структура;
			Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
				file.Вставить( "Имя", Вложение.ИмяФайла ); 
				file.Вставить( "ДвоичныеДанные", сбисФайлСКлиентаВBASE64(Вложение.ПолноеИмяФайла) ); 
			Иначе  // сформирован xml
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
				file.Вставить( "Имя", ИмяФайла );
				ДвоичныеДанныеXML = СбисСтрокаВДвоичныеДанныеКлиент(Кэш, Вложение.XMLДокумента, , Ложь);
				file.Вставить( "ДвоичныеДанные", СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"") ); 
			КонецЕсли;
			
			Если Вложение.Свойство("Подпись") Тогда //d.ch
				ЭЦП = Новый Массив;
				Для Каждого Запись из Вложение.Подпись Цикл
					ЗаписьЭЦП = Новый Структура;
					Если Запись.Свойство("Направление") Тогда
						ЗаписьЭЦП.Вставить("Направление",Запись.Направление);
					КонецЕсли;
					ФайлЭЦП = Новый Структура;
					ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
					ФайлЭЦП.Вставить( "ДвоичныеДанные",сбисФайлСКлиентаВBASE64(Запись.Файл.ПолноеИмяФайла)); 
					ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
					ЭЦП.Добавить(ЗаписьЭЦП);
				КонецЦикла;
				attachment.Вставить( "Подпись", ЭЦП ); 
			КонецЕсли;
			
			attachment.Вставить( "Файл", file );
			ИдВложения = строка(Новый УникальныйИдентификатор());
			Вложение.Вставить("Идентификатор", ИдВложения);
			attachment.Вставить( "Идентификатор",  ИдВложения);
			// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
			//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
			//	attachment.Вставить( "Тип",  Вложение.Тип);
			//	attachment.Вставить( "Подтип",  Вложение.ПодТип);
			//	attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
			//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
			//		attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
			//	КонецЕсли;
			//КонецЕсли;
			attachmentList.Добавить( attachment );
		КонецЦикла;
		document.Вставить( "Тип",СоставПакета.Тип);	
		Если СоставПакета.Свойство("Подтип") и ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
			document.Вставить( "Подтип",СоставПакета.Подтип);
		КонецЕсли;
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") и Не (СоставПакета.Свойство("Контрагент") и СоставПакета.Контрагент.Свойство("ЗапретРедакций")) Тогда
			ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
		Иначе
			ИдПакета = строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		СоставПакета.Вставить("Идентификатор", ИдПакета);
		document.Вставить( "Идентификатор", ИдПакета ); 
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
			redaction = Новый Структура;
			redaction.Вставить("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
			document.Вставить( "Редакция", redaction);
		КонецЕсли;
		Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
			document.Вставить( "Примечание", СоставПакета.Примечание);
		КонецЕсли;
		document.Вставить( "Вложение", attachmentList );
		
		Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
			otv = Новый Структура;
			Для Каждого Элемент Из СоставПакета.Ответственный Цикл
				otv.Вставить( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.Вставить( "Ответственный", otv ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
			podrazdel = Новый Структура;
			Для Каждого Элемент Из СоставПакета.Подразделение Цикл
				podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.Вставить( "Подразделение", podrazdel ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
			regl = Новый Структура;
			Для Каждого Элемент Из СоставПакета.Регламент Цикл
				regl.Вставить( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.Вставить( "Регламент", regl ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
			osnovania = Новый Массив;
			Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
				osn = Новый Структура;
				Если ДокОсн.Свойство("ВидСвязи") Тогда
					osn.Вставить( "ВидСвязи", ДокОсн.ВидСвязи );	
				КонецЕсли;
				doc = Новый Структура;
				Для Каждого Элемент Из ДокОсн Цикл
					Если Элемент.Ключ<>"ВидСвязи" Тогда
						doc.Вставить( Элемент.Ключ, Элемент.Значение );	
					КонецЕсли;
				КонецЦикла;
				osn.Вставить( "Документ", doc );
				osnovania.Добавить(osn);
			КонецЦикла;
			document.Вставить( "ДокументОснование", osnovania ); 				
		КонецЕсли;
		document.Вставить( "ДопПоля", "ЭтапВернутьВсеСертификаты" );
		
		ДопПоля = МодульОбъектаКлиент().СоставПакета_Получить(СоставПакета, "ДопПоля");
		
		Если ЗначениеЗаполнено(ДопПоля) Тогда
			Для каждого ДопПоле Из ДопПоля Цикл
				document.ДопПоля = document.ДопПоля + "," + ДопПоле;
			КонецЦикла;
		КонецЕсли;
		
		documenty.Добавить(document);
	КонецЦикла;	
	
	ДанныеПоСтатусам = Новый Массив;
	Кэш.РезультатОтправки.Вставить("НефатальныеОшибкиПодряд", 0);
	сч = 0;
	Для Каждого СтруктураДок Из documenty Цикл
		СтруктураПараметровЗапроса = Новый Структура("Документ",СтруктураДок);
		
		//ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОшибкаЗаписи = Ложь;
		СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ЗаписатьДокумент", СтруктураПараметровЗапроса, ДопПараметры, ОшибкаЗаписи);
		СоставПакета = МассивПакетов[сч];
		Если ОшибкаЗаписи Тогда
			сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам,СтруктураРезультата);				
		Иначе
			Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
			Если МассивПакетов[0].Свойство("НеЗапускатьВДокументооборот") и МассивПакетов[0].НеЗапускатьВДокументооборот = Истина Тогда   // если не запускаем в документооборот, то сразу проставляем состояния на документах 1С и больше ничего не делаем
				Элемент = СтруктураРезультата;
				СоставПакета.Вставить("Отправлен", Истина);
				Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Вложение.Свойство("Документы1С") Тогда
						Для Каждого Документ1С Из Вложение.Документы1С Цикл
							СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор, Вложение.Идентификатор, Элемент.Состояние.Название); 
							СтрокаЗаписьСтатусы = Новый Структура("СтруктураСвойств, Документ1С, Регламент, ИдАккаунта", СтруктураСвойств, Документ1С.Значение, "",  ПолучитьИдТекущегоАккаунта(Кэш));
							Если Вложение.Свойство("Регламент")
								И Вложение.Регламент.Свойство("Название")
								И Не МассивСтатусРегламент.Найти(Вложение.Регламент.Название) = Неопределено Тогда
								
								СтрокаЗаписьСтатусы.Регламент = Вложение.Регламент.Название;
							КонецЕсли;
							ДанныеПоСтатусам.Добавить(СтрокаЗаписьСтатусы);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе   // запускаем в документооборот
				// Подготовить действие
				
				// Назначение действия на этап
				action = Новый Структура;
				action.Вставить("Название", СтруктураРезультата.Этап[0].Действие[0].Название); 
				
				СертификатДляПодписания = Неопределено;
				Алгоритм = Неопределено;
				Если СтруктураРезультата.Этап[0].Действие[0].ТребуетПодписания = "Да" и СтруктураРезультата.Этап[0].Действие[0].свойство("Сертификат") Тогда
					СертификатВыбран = Ложь;
					ТекстОшибки = "";
					
					Если СтруктураРезультата.НашаОрганизация.Свойство("СвЮЛ") Тогда
						ДопПараметрыСертификата = Новый Структура("ИНННашейОрганизации", СтруктураРезультата.НашаОрганизация.СвЮЛ.ИНН);
					Иначе
						ДопПараметрыСертификата = Новый Структура("ИНННашейОрганизации", СтруктураРезультата.НашаОрганизация.СвФЛ.ИНН);
					КонецЕсли;

					Сертификат = Кэш.ФормаЭП.сбисВыбратьПодходящийСертификат(Кэш, СтруктураРезультата.Этап[0].Действие[0].Сертификат, ТекстОшибки, ДопПараметрыСертификата);
					Если Сертификат<>Ложь Тогда
						action.Вставить("Сертификат", Сертификат.СертификатДок);
						СертификатДляПодписания = Сертификат.СертификатДляПодписания;
						Алгоритм = Сертификат.Алгоритм;
						СертификатВыбран = Истина;
					КонецЕсли;

					Если Не СертификатВыбран и ТекстОшибки<>"" Тогда
						сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам, Новый Структура("message, details", "Не найден подходящий сертификат для подписания документа", ТекстОшибки));
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Назначение этапа
				stage = Новый Структура;
				stage.Вставить("Название", СтруктураРезультата.Этап[0].Название);
				stage.Вставить("Действие", action);
				
				
				document_in = Новый Структура;
				document_in.Вставить( "Идентификатор", СтруктураРезультата.Идентификатор );	
				document_in.Вставить( "Этап", stage );
				
				СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
				
				// Подготовка этапа
				ОшибкаПодготовки = Ложь;
				СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, ДопПараметры, ОшибкаПодготовки);
				Если ОшибкаПодготовки Тогда
					сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам,СтруктураРезультата);									
				Иначе  // выполняем действие
					Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
					prepared_document = СтруктураРезультата;
                    // Назначение этапа
					stage = Новый Структура;
					stage.Вставить("Название", prepared_document.Этап[0].Название);
					// Назначение действия на этап
					action = Новый Структура;
					action.Вставить("Название", prepared_document.Этап[0].Действие[0].Название);
					Если СтруктураРезультата.Этап[0].Действие[0].свойство("Сертификат") Тогда 
						Если ЗначениеЗаполнено(СертификатДляПодписания) и СтруктураРезультата.Этап[0].Свойство("Вложение") Тогда
							stage.Вставить("Вложение", Новый Массив);
							ТекстОшибки = "";
							ПараметрыДействия = Новый Структура;
							ПараметрыДействия.Вставить("ПараметрыПодписанияВложения", Новый Структура("СертификатДляПодписания, Алгоритм, Сертификат", СертификатДляПодписания, Алгоритм));
							ПараметрыДействия.Вставить("Сертификат", Сертификат.СертификатДок);
							сбисПодписатьВложения(Кэш, prepared_document.Этап[0].Вложение,ПараметрыДействия);
							stage.Вложение = prepared_document.Этап[0].Вложение;
							Если ТекстОшибки<>"" Тогда
								сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам,Новый Структура("message, details", "Не удалось подписать вложение", ТекстОшибки));
								Продолжить;	
							КонецЕсли;
                       	 			КонецЕсли;
						action.Вставить("Сертификат", СтруктураРезультата.Этап[0].Действие[0].Сертификат[0]);
					КонецЕсли;
					stage.Вставить("Действие", action);
										
					document_in = Новый Структура;
					document_in.Вставить( "Идентификатор", prepared_document.Идентификатор );	
					document_in.Вставить( "Этап", stage );
					
					СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
					
					// Выполнение этапа
					ОшибкаДействия	= Ложь;
					СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, ДопПараметры, ОшибкаДействия);
					Если ОшибкаДействия Тогда
						сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам,СтруктураРезультата);						
					Иначе
						Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
						Элемент = СтруктураРезультата;
						СоставПакета = МассивПакетов[сч];
						СоставПакета.Вставить("Отправлен", Истина);
						Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
						Для Каждого Вложение Из СоставПакета.Вложение Цикл
							Если Вложение.Свойство("Документы1С") Тогда
								Для Каждого Документ1С Из Вложение.Документы1С Цикл
									СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,Элемент.Состояние.Название);
									СтрокаЗаписьСтатусы = Новый Структура("СтруктураСвойств, Документ1С, Регламент, ИдАккаунта",СтруктураСвойств, Документ1С.Значение,,ПолучитьИдТекущегоАккаунта(Кэш));
									Если Вложение.Свойство("Регламент")
										И Вложение.Регламент.Свойство("Название")
										И Не МассивСтатусРегламент.Найти(Вложение.Регламент.Название) = Неопределено Тогда
										
										СтрокаЗаписьСтатусы.Регламент = Вложение.Регламент.Название;
									КонецЕсли;
									ДанныеПоСтатусам.Добавить(СтрокаЗаписьСтатусы);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ДатаКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//Кэш.РезультатОтправки.ВремяОтправки = Кэш.РезультатОтправки.ВремяОтправки+(ДатаКнц-ДатаНач)/1000;
		сч = сч+1;
		Если Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 5 Тогда
			Сообщить("Отправка была прервана."+Символы.ПС + Кэш.РезультатОтправки.ПрерватьОтправку );
			Кэш.РезультатОтправки.ПрерватьОтправку = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, ГлавноеОкно.Кэш.Парам.КаталогНастроек);
	// << alo 
	Если Не Кэш.Парам.СостояниеЭД Тогда 
	ИначеЕсли	Не фрмЭД = Неопределено
				И Не фрмЭД = Ложь Тогда
				
		фрмЭД.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.Кэш.Парам.КаталогНастроек);
	Иначе 
		МодульОбъектаКлиент().СбисСообщить(Новый Структура("Текст", "Дублирование событий СБИС в типовых регистрах 1с в данной конфигурации не поддерживается"));
	КонецЕсли;	// alo >>
	
	//AU точка входа после отправки партии пакетов документов с данными по статусам.
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисОбработатьСписокОтправленных","РаботаСДокументами1С","", Кэш);
	Если Не фрм = Ложь Тогда
		//Данные по детализации статусов и списка номенклатуры смотреть в кэше.
		Контекст = Новый Структура("ДанныеПоСтатусам", ДанныеПоСтатусам);//Структура для возможности расширения, если понадобится добавить что-то ещё.
		фрм.сбисОбработатьСписокОтправленных(Кэш, Контекст);
	КонецЕсли;
	//	
	//ДатаКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//Кэш.РезультатОтправки.ВремяЗаписиСтатусов = Кэш.РезультатОтправки.ВремяЗаписиСтатусов+(ДатаКнц-ДатаНач)/1000;
	сбисСпрятатьСостояние(ГлавноеОкно);
	
КонецФункции

&НаКлиенте
Функция сбисДобавитьОшибкуОтправки(Кэш,СоставПакета,ДанныеПоСтатусам,СтруктураРезультата)
	ТекстОшибки = Неопределено; 
	МассивСтатусРегламент = Новый Массив;
	Если  Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент =  Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	Если Не СтруктураРезультата.Свойство("message", ТекстОшибки) Тогда
		ТекстОшибки = "Не удалось отправить документ";
	КонецЕсли;
	ОписаниеРасширенное = СтруктураРезультата.details;	
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	Если СоставПакета.Вложение.Количество()>0 и СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	Иначе
		ОсновнойДокумент1С = Неопределено;
	КонецЕсли;
	//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", ОсновнойДокумент1С, ОписаниеРасширенное, СтруктураРезультата);
	ЭлементСоответствия.Добавить(СтрокаВСоответствие);
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Документы1С") Тогда
			Для Каждого Документ1С Из Вложение.Документы1С Цикл
				СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Ошибка: "+Лев(ТекстОшибки, 230));
				СтрокаЗаписьСтатусы = Новый Структура("СтруктураСвойств, Документ1С, Регламент",СтруктураСвойств, Документ1С.Значение, "");
				Если Вложение.Свойство("Регламент")
					И Вложение.Регламент.Свойство("Название")
					И Не МассивСтатусРегламент.Найти(Вложение.Регламент.Название) = Неопределено Тогда
					
					СтрокаЗаписьСтатусы.Регламент = Вложение.Регламент.Название;
				КонецЕсли;
				ДанныеПоСтатусам.Добавить(СтрокаЗаписьСтатусы);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(ТекстОшибки, 14) = "Ошибка WinHTTP" и НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
	КонецЕсли;
	Если СтруктураРезультата.Свойство("data") 
		И Не СтруктураРезультата.data = Неопределено
		И СтруктураРезультата.data.Свойство("classid") 
		И Лев(Врег(СтруктураРезультата.data.classid), 28) = "{00000000-0000-0000-0000-1AA" Тогда // нефатальная ошибка
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = Кэш.РезультатОтправки.НефатальныеОшибкиПодряд + 1;
		Если Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 5 Тогда
			Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", "Повторите попытку позже. Получен ряд нефатальных ошибок: "+ТекстОшибки + ?(ТекстОшибки<>ОписаниеРасширенное, " ("+ОписаниеРасширенное+")", ""));
		КонецЕсли
	КонецЕсли
КонецФункции

&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие", "Отправка"),Ложь);
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш, ДопПараметрыФильтра = Неопределено) Экспорт
	// Получает статусы документов сбис
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	МестныйКэш	= Кэш;
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СбисЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");

	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Новый Структура; 
		filter.Вставить( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Вставить( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		Если ДопПараметрыФильтра <> Неопределено Тогда
			Для Каждого ДопПарам Из ДопПараметрыФильтра Цикл
				filter.Вставить( ДопПарам.Ключ, ДопПарам.Значение);     
			КонецЦикла;
		КонецЕсли;
		
		navigation = Новый Структура; 
		navigation.Вставить( "РазмерСтраницы", "100" );
		filter.Вставить( "Навигация", navigation );
		//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатНачЧтенияСтатусов", сбисТекущаяДата(Кэш)),Кэш.Парам.ИдентификаторНастроек);
			ГлавноеОкно.ДатНачЧтенияСтатусов = сбисТекущаяДата(Кэш);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			Если сч>0 Тогда
				Если оДокумент.Свойство("Событие") Тогда
					КоличествоСобытий = оДокумент.Событие.Количество();
					filter.Вставить( "ИдентификаторСобытия", оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
					filter.Удалить( "ДатаВремяС");
				Иначе
					//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), Кэш.Парам.ИдентификаторНастроек);
					ГлавноеОкно.ДатКнцЧтенияСтатусов = ТекущаяДата();
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			СобытиеУдалено = Ложь;
			СтруктураПараметровЗапроса = Новый Структура("Фильтр", filter);
			Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокИзменений", СтруктураПараметровЗапроса, ДопПараметры, СобытиеУдалено);
			Если СобытиеУдалено Тогда
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) И сч = 0 Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
					filter = Новый Структура("ПолныйСертификатЭП, Навигация, ДатаВремяС", "Нет", navigation, Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
					Если ДопПараметрыФильтра <> Неопределено Тогда
						Для Каждого ДопПарам Из ДопПараметрыФильтра Цикл
							filter.Вставить( ДопПарам.Ключ, ДопПарам.Значение);     
						КонецЦикла;
					КонецЕсли;
					СтруктураПараметровЗапроса = Новый Структура("Фильтр", filter);
					Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокИзменений", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Отказ Тогда
				Если Результат.code = 775 Тогда
					ТекстОшибки = "Не удалось получить список изменений.";
				Иначе
					ТекстОшибки = Результат.message +?(Результат.details=Результат.message, "", (" "+ Результат.details)); 
				КонецЕсли;
				Сообщить(ТекстОшибки);
				сбисСпрятатьСостояние(ГлавноеОкно);
				//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
				ГлавноеОкно.ДатКнцЧтенияСтатусов = ТекущаяДата();
				Возврат Ложь;
			КонецЕсли;
			сч = сч + 1;
			СписокИзменений = Результат;
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
				Если Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
					ИмяОбработчика = СтрЗаменить("сбис"+оДокумент.Регламент.Название+"_"+оДокумент.Событие[0].Название, " ", "_");
					фрмОбработчика = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяОбработчика,"РаботаСДокументами1С","",Кэш);
					Если фрмОбработчика <> Ложь Тогда
						Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
						Результат=вычислить("фрмОбработчика."+ИмяОбработчика+"(Контекст)");
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			фрм.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура("ИдАккаунта", ПолучитьИдТекущегоАккаунта(Кэш)));
			// << alo 
			если кэш.парам.СостояниеЭД тогда
				фрмЭД.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.Кэш.Парам.КаталогНастроек);
			конецесли; // alo >>
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
			ГлавноеОкно.ДатКнцЧтенияСтатусов = ТекущаяДата();
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураНастроек, Кэш.Парам.ИдентификаторНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
	// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш, СтруктураНастроек, МестныйКэш.Парам.ИдентификаторНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	//МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(МестныйКэш)), МестныйКэш.Парам.ИдентификаторНастроек);
	ГлавноеОкно.ДатКнцЧтенияСтатусов = ТекущаяДата();
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	// Получает структуру документа СБИС	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Параметр",Новый Структура("Файл", сбисСтрокаВBASE64(КаталогТоваров, "UTF-16")));
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИмпортНоменклатурыИзCML", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Не удалось загрузить каталог товаров в личный кабинет.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	param = Новый Структура("Документ", Новый Структура("Идентификатор",ИдДок));
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ЕстьРезультат", Истина);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ЭмитироватьКМ", param, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЭмитироватьКМ");
	КонецЕсли;
	Возврат Результат
	
КонецФункции

&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	param = Новый Структура("Документ", Новый Структура("Идентификатор",ИдДок));
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ЕстьРезультат", Истина);
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ЗарегистрироватьВГоссистеме", param, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЗарегистрироватьВГоссистеме");
	КонецЕсли;
	Возврат Результат
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиКлиента(Кэш,Префикс) экспорт
	// Получает настройки клиента	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Маска", Префикс+"*.json");
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "Интеграция.ПолучитьНастройкиКлиента", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Не удалось получить файлы настроек.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокФайлов(Кэш,Маска) экспорт
	// Получает настройки клиента	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Маска",Маска);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "Интеграция.ПолучитьСписокФайлов", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Не удалось получить файлы настроек.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции
&НаКлиенте
Функция ПолучитьПараметрыКлиента(Кэш,ИмяПараметра) экспорт
	// Получает параметры клиента	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Путь",ИмяПараметра);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "ПользовательскиеПараметры.ПолучитьЗначение", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Не удалось получить параметры клиента.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции
&НаКлиенте
Функция ЗаписатьПараметрыКлиента(Кэш,ИмяПараметра, ЗначениеПараметра) экспорт
	// Получает параметры клиента	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат", Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Путь,ЗначениеПараметра",ИмяПараметра, Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(ЗначениеПараметра, Новый Структура("Режим", "API")));
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "ПользовательскиеПараметры.ВставитьЗначение", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Не удалось записать параметры клиента.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции
// Заглушка (SDK)
&НаКлиенте
Функция ВключитьОтладку(Кэш, КаталогОтладки) Экспорт
КонецФункции
// Заглушка (SDK)
&НаКлиенте
Функция ОтключитьОтладку(Кэш) Экспорт
КонецФункции
// Изменяет каталог отладки с соответствующими проверками
&НаКлиенте
Функция УстановитьКаталогОтладки(Кэш) Экспорт
	ГлавноеОкно = Кэш.ГлавноеОкно;
	КаталогДоИзменения = Кэш.Парам.КаталогОтладки;
	
	// Если никакой каталог не задан и мы поставили галку, то открывать выбор каталога
	Если	ГлавноеОкно.РежимОтладки 
		И	ГлавноеОкно.РежимОтладки <> Кэш.Парам.РежимОтладки
		И	ГлавноеОкно.КаталогОтладки = "" Тогда
		РежимВыбора = Истина;
	Иначе
		РежимВыбора = Ложь;
	КонецЕсли;
	
	Попытка
		КаталогИзменен = УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора);	
	Исключение
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(, "API.УстановитьКаталогОтладкиРекурсивно", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, СбисИсключение);
		ГлавноеОкно.КаталогОтладки = КаталогДоИзменения;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат КаталогИзменен;
КонецФункции
&НаКлиенте
Функция УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест = "")
	Если ГлавноеОкно.КаталогОтладки = "" Тогда
		Если РежимВыбора Тогда
			ОтказОтВыбора = Ложь;
			л_КаталогОтладки = ГлавноеОкно.сбисВыбратьКаталог(КаталогТест, ОтказОтВыбора);
			Если ОтказОтВыбора Тогда
				ГлавноеОкно.РежимОтладки = Ложь;
				Возврат Истина;
			КонецЕсли;
			ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
		Иначе
			ГлавноеОкно.РежимОтладки = Ложь;
		КонецЕсли;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		//Каталог менялся руками, проверить что такой есть
	Иначе
		л_КаталогОтладки = ГлавноеОкно.сбисФорматКаталога(ГлавноеОкно.КаталогОтладки);
		Файл = Новый Файл(ГлавноеОкно.КаталогОтладки);
		Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда
			КаталогТест	= ГлавноеОкно.КаталогОтладки;
			РежимВыбора	= Истина;
			ГлавноеОкно.КаталогОтладки = "";
			УстановитьКаталогОтладкиРекурсивно(ГлавноеОкно, КаталогДоИзменения, РежимВыбора, КаталогТест);
			Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
		КонецЕсли;
		ГлавноеОкно.КаталогОтладки = л_КаталогОтладки;
		Возврат ГлавноеОкно.КаталогОтладки <> КаталогДоИзменения;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисТекущаяДата(Кэш) Экспорт
	// получает текущую дату-время на сервере СБИС	
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ИнформацияОВерсии", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат ТекущаяДата();
	КонецЕсли;
	Возврат РезультатЗапроса.ВнешнийИнтерфейс.ДатаВремяЗапроса;
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	// Если более часа не проверяли статусы, то выводим красное предупреждение
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ОбновитьСтатусы	= Ложь;
	Если Не ЗначениеЗаполнено(ГлавноеОкно.ДатКнцЧтенияСтатусов) или сбисТекущаяДата(Кэш)-ГлавноеОкно.ДатКнцЧтенияСтатусов > 3600 Тогда
		ОбновитьСтатусы = Истина;
	КонецЕсли;
	сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = ОбновитьСтатусы;
КонецПроцедуры
&НаКлиенте
Функция Аккордеон_ОтключенныеРазделы() Экспорт
	ОтключенныеРазделы = Новый Структура();
	Возврат ОтключенныеРазделы;
КонецФункции
////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	
	УРЛОбновления = "{Протокол}://{Сервер}{URL}";
	УРЛОбновления = МодульОбъектаКлиент().ПрименитьФорматКСтроке(УРЛОбновления, ПараметрыОбновления);
	
	СбисРезультатЧтения = СБИС_СохранитьПоСсылкеВФайл(Кэш, Новый Структура("Ссылка, ИмяФайла", УРЛОбновления, ПараметрыОбновления.ИмяФайла), Новый Структура, Отказ);
	Если Отказ Тогда 
		Возврат Кэш.ОбщиеФункции.сбисИсключение(СбисРезультатЧтения, "API.сбисПолучитьПараметрыАктуальнойВерсии");
	КонецЕсли;
	Возврат Истина;

КонецФункции

//Функция сохраняет вложение по ссылке на клиенте.
&НаКлиенте
Функция сбисСохранитьВФайлПоСсылке(Кэш, СбисПараметрыФайла, Отказ) Экспорт
	Перем УРЛОбновления;
	
	Если			СбисПараметрыФайла.Свойство("URL",	УРЛОбновления) Тогда
		//Есть полный адрес ресурса
		Если Не Лев(УРЛОбновления, 8) = "https://" Тогда   //передан полный url
			УРЛОбновленияШаблон	= "{Протокол}://{Сервер}{URL}";
			УРЛОбновления		= МодульОбъектаКлиент().ПрименитьФорматКСтроке(УРЛОбновленияШаблон, СбисПараметрыФайла);
		КонецЕсли;
	ИначеЕсли	Не	СбисПараметрыФайла.Свойство("URLПолный", УРЛОбновления) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.сбисИсключение(100, "API.сбисСохранитьВФайлПоСсылке",,,"Отсутствует URL для скачивания файла.");
		//Тут может придти сервер, отличающийся от установленного
	КонецЕсли;

	СбисРезультатЧтения = СБИС_СохранитьПоСсылкеВФайл(Кэш, Новый Структура("Ссылка, ИмяФайла", УРЛОбновления, СбисПараметрыФайла.ИмяФайла), Новый Структура, Отказ);
	Если Отказ Тогда 
		Возврат Кэш.ОбщиеФункции.сбисИсключение(СбисРезультатЧтения, "API.сбисСохранитьВФайлПоСсылке");
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////
////////////////////Авторизация/////////////////////
////////////////////////////////////////////////////

// Авторизуется по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт 	
	МестныйКэш	= Кэш;
	КэшПарам	= Новый Структура("ПолнаяВерсияПродукта,ТипПрокси,ПроксиСервер,ПроксиПорт,ПроксиЛогин,ПроксиПароль,UserAgent");
	ЗаполнитьЗначенияСвойств(КэшПарам, Кэш.Парам);//Отправляем только те параметры, что нужны для вызова команды, чтобы не перегружать вызов сервера.
	КэшПарам.Вставить("АдресСервера",Кэш.СБИС.АдресСервера);
	КэшПарам.Вставить("СовместимостьМетодов",Кэш.СовместимостьМетодов);
	
	ДопПараметры= Новый Структура("СообщатьПриОшибке, ЕстьРезультат, ИдСессии, АдресРесурса, ОчиститьПараметры", Ложь, Истина, "", "/auth/service/", Истина);
	ИмяМетода	= "СБИС.Аутентифицировать";
	СтруктураПараметровЗапроса = Новый Структура("Логин, Пароль", Логин, Пароль);
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

&НаСервере
Функция АвторизоватьсяПоЛогинуПаролюНаСервере(Кэш, Логин, Пароль, Отказ=Ложь) Экспорт 	
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса", Истина, "", "/auth/service/");
	ИмяМетода	= "СБИС.Аутентифицировать";
	
	СтруктураПараметровЗапроса = Новый Структура("Логин, Пароль", Логин, Пароль);
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКомандуНаСервере(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ));
	Возврат ПараметрыРезультат;
КонецФункции

&НаСервере
Функция АвторизоватьсяПриложением(Кэш, ИДПриложения, КлючПриложения, КлючАутентификации,Отказ=Ложь) Экспорт 	
	ДопПараметры= Новый Структура("ИдСессии, АдресРесурса", "", "/oauth/service/");
	ИмяМетода	= "";
	
	СтруктураПараметровЗапроса = Новый Структура("app_client_id, app_secret, secret_key", ИДПриложения, КлючПриложения, КлючАутентификации);
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	Рез = сбисОтправитьИОбработатьКомандуНаСервере(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		ПараметрыРезультат.Вставить("Результат", Рез);
	Иначе
		ПараметрыРезультат.Вставить("Результат", Рез.sid);
	КонецЕсли;
	Возврат ПараметрыРезультат;
КонецФункции

// Авторизуется по сертификату		
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	МестныйКэш	= Кэш;
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса, ОчиститьПараметры", Истина, "", "/auth/service/", Истина);
	ИмяМетода	= "СБИС.АутентифицироватьПоСертификату";
	
	СертДвоичныеДанные = Кэш.ФормаЭП.сбисДвоичныеДанныеСертификатаПоОтпечатку(Кэш,Сертификат); 
	СтруктураПараметровЗапроса = Новый Структура("Сертификат", Новый Структура("ДвоичныеДанные", СертДвоичныеДанные));
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	РезультатАвторизации = сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат РезультатАвторизации;	
	КонецЕсли;
	ДвоичныеДанные = Base64Значение(РезультатАвторизации);  
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.txt";
	Попытка
		Кэш.ФормаЭП.сбисРасшифровать(Кэш, ДвоичныеДанные, ИмяВрФ);
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат Кэш.СБИС.МодульОбъектаКлиент.НовыйСбисИсключение(, "сбисРасшифровать", 785, "Ошибка 1С при выполнении метода ""Расшифровать""", ИнформацияОбОшибке.Описание+?(ИнформацияОбОшибке.Причина<>Неопределено," Причина: "+ИнформацияОбОшибке.Причина.Описание,""));
	КонецПопытки;
	
	ЧтениеОтвета = Новый ЧтениеТекста(ИмяВрФ, КодировкаТекста.UTF8, Символы.ПС);
	Результат = ЧтениеОтвета.Прочитать();
	ЧтениеОтвета.Закрыть(); 
	Попытка
		УдалитьФайлы(ИмяВрФ);
	Исключение
	КонецПопытки;
	ПараметрыРезультат.Вставить("Результат", Результат);
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

// Авторизуется по токену	
&НаКлиенте
Функция АвторизоватьсяПоТокену(Кэш,Отказ=Ложь) Экспорт 	
	МестныйКэш	= Кэш;
	
	Токен = ПолучитьТокенДляТекущегоПользователя(Кэш,Отказ);
	Если Отказ Тогда
		Возврат Токен;
	КонецЕсли;
	
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса, ОчиститьПараметры", Истина, "", "/auth/service/", Истина);
	ИмяМетода	= "СБИС.ExternalAuth";
	
	СтруктураПараметровЗапроса = Новый Структура("Token, Params", Токен, Новый Структура());
	ПараметрыРезультат = Новый Структура("Метод, Параметры, ДополнительныеПараметры", ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, СтруктураПараметровЗапроса, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);

КонецФункции

&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт

	МодульОбъектаКлиент().ИзменитьПараметрСбис("ОбменВключен",					Истина);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Версия",						Кэш.ПараметрыСистемы.Обработка.Версия);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ИнтеграцияИмя",					"API");
	МодульОбъектаКлиент().ИзменитьПараметрСбис("СтатусыВРазрезеРегламента", 	Истина);
	//API работает сихронно и не занимает потоки, но отправка происходит по 10 штук
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Потоки_МаксимальноеКоличество",	10);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Отправка_РазмерПачки",			10);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Интеграция",					ЭтаФорма);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("ВключитьВО3",					Истина);

	СведенияОбИнтеграции = СведенияОбИнтеграции();
	Для Каждого ПараметрИнтеграции Из СведенияОбИнтеграции.Параметры Цикл
		
		МодульОбъектаКлиент().ИзменитьПараметрСбис(ПараметрИнтеграции.Ключ, ПараметрИнтеграции.Значение);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СведенияОбИнтеграции() Экспорт

	ЛокальныйКэш = МодульОбъектаКлиент().ПолучитьТекущийЛокальныйКэш();
	
	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("ГенераторФЭД",		Истина);
	ПараметрыИнтеграции.Вставить("Шифрование",			Ложь);
	ПараметрыИнтеграции.Вставить("МногопоточныйРежим",	Ложь);
	ПараметрыИнтеграции.Вставить("ДоступныСерверныеНастройки",	Истина);
	
	Возврат Новый Структура(
	"Имя, Версия, Модуль, Параметры", 
	"API3", ЛокальныйКэш.ПараметрыСистемы.Обработка.Версия, ЭтаФорма, ПараметрыИнтеграции);
	
КонецФункции

&НаКлиенте
Функция Завершить(Кэш, ДопонительныеПараметры, Отказ) Экспорт
	Возврат Истина;
КонецФункции

//Закрывает текущую сессию	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("АдресРесурса", "/auth/service/");
	сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.Выход", Новый Структура, ДопПараметры, Отказ);
	МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Ложь);
КонецФункции

//Выполняет вызов отправки кода СМС для подтверждения авторизации
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса, ИдСессии, ОчиститьПараметры", Истина, "/auth/service/", ПараметрыПодтверждения.ИдентификаторСессии, Истина);
	СтруктураПараметровЗапроса = Новый Структура("Идентификатор", ПараметрыПодтверждения.Идентификатор);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыПодтверждения.МетодОтправкиКодаПодтверждения, СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось отправить код аутентификации.";
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//Функция делает вызов отправки кода в СМС для подтверждения входа
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса, ИдСессии, ОчиститьПараметры", Истина, "/auth/service/", ПараметрыПодтверждения.ИдентификаторСессии, Истина);
	
	СтруктураПараметровЗапроса = Новый Структура("Код, Идентификатор", ПараметрыВвода.ПинКод, ПараметрыПодтверждения.Идентификатор);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПодтвердитьВход", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details= "Не удалось отправить код аутентификации.";
		КонецЕсли;
	Иначе
		МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Истина);
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

// Получает список сертификатов для авторизации	
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат, ИдСессии, АдресРесурса", Истина, "", "/auth/service/");
	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	СертификатыДляАвторизации = Кэш.ФормаЭП.сбисСписокСертификатовДляАвторизации(Кэш, ТекстОшибки);
	Если ТекстОшибки <> "" Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
		
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура("Сертификат", СертификатыДляАвторизации));
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.СписокСертификатовДляАутентификации", СтруктураПараметровЗапроса, ДопПараметры, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			ТекстОшибки = "Сертификаты не найдены.";
		Иначе
			ТекстОшибки = РезультатЗапроса.message +?(РезультатЗапроса.details=РезультатЗапроса.message, "", (" "+ РезультатЗапроса.details)); 
		КонецЕсли;
		Возврат СписокСертификатов;
	КонецЕсли;

	Object = РезультатЗапроса;
	ObjectList = Неопределено;
	Object.Свойство("Сертификат",ObjectList);
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
				Если Сертификат.Свойство("ДействителенПо") Тогда
					Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
						ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
					Иначе
						ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
					КонецЕсли;
				КонецЕсли;
				 СписокСертификатов.Добавить(Сертификат, Кэш.ОбщиеФункции.ПолучитьПредставлениеСертификата(Сертификат, "[ФИО].([Должность])., [Название].(ИНН [ИНН])., действителен до [ДействителенПо]", Истина, "ДЛФ=DD"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции

//Функция обрабатывает результат авторизации
&НаКлиенте
Функция сбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		МодульОбъектаКлиент().ИзменитьПараметрСбис("Авторизован",	Истина);
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.details = "Для входа введите полученный код подтверждения." Тогда
		РезультатАвторизации.message= "Требуется подтверждение действия";
		РезультатАвторизации.code	= 303;
	ИначеЕсли РезультатАвторизации.code = 775 Тогда
		РезультатАвторизации.details= "Не удалось авторизоваться по " + ?(ПараметрыРезультата.Параметры.Свойство("Логин"), "логину/паролю.", "сертификату.");
	ИначеЕсли РезультатАвторизации.code = 759 Тогда//Переключимся на альтернативный домен и повторим авторизацию
		Возврат сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

//Проверяет действительность текущей сессии
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("ЕстьРезультат, АдресРесурса", Истина, "/auth/service/");
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "СБИС.ПроверитьСессию", Новый Структура, ДопПараметры, Отказ);
	Если Не Отказ
		И Результат.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////
/////////////////Списочные методы///////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисПолучитьСписокЗадач(Кэш, сбисФильтр, Отказ) Экспорт
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат", Истина);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "API3.TaskList", Новый Структура("Фильтр", сбисФильтр), ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSDK.сбисПолучитьСписокЗадач");
	КонецЕсли;
	Возврат Результат
КонецФункции

////////////////////////////////////////////////////
/////////////////Системные функции//////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Булево(СтрЧислоВхождений(АдресСервера, ".saby.ru"));
КонецФункции

&НаКлиенте                                                                                                              
Функция СбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ) Экспорт
	
	РежимОтладки	= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("РежимОтладки");
	ДанныеВЛог		= Новый Массив;
	ИДЗапроса		= Новый УникальныйИдентификатор;

	Если РежимОтладки Тогда
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "CALL", МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя"));
		лОтладочныеДанные.Модуль		= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Вызов			= Метод;
		Если	Не ДопПараметры.Свойство("ОчиститьПараметры")
			Или	Не ДопПараметры.ОчиститьПараметры Тогда
			
			лОтладочныеДанные.Сообщение = ПараметрыМетода;
			
		КонецЕсли;
		лОтладочныеДанные.Идентификатор	= ИДЗапроса;
		лОтладочныеДанные.Время			= ТекущаяДата();
		ДанныеВЛог.Добавить(лОтладочныеДанные);
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		РезультатОтвет = СбисОтправитьИОбработатьКомандуВызовСервера(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		РезультатОтвет = СбисОтправитьИОбработатьКомандуВызовКлиента(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	#Иначе
		Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			РезультатОтвет = СбисОтправитьИОбработатьКомандуВызовКлиента(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
		Иначе
			РезультатОтвет = СбисОтправитьИОбработатьКомандуВызовСервера(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
		КонецЕсли;
	#КонецЕсли
	
	Если Отказ Тогда
		Если РезультатОтвет.code = (-32000) Тогда
			
			Если	Найти(РезультатОтвет.message, "СБИС.Диск")
				И	Найти(РезультатОтвет.message, "недоступен") Тогда
				РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(РезультатОтвет, "API.СбисОтправитьИОбработатьКоманду", 301, "Сервис СБИС.Диск временно недоступен", РезультатОтвет.details);
			Иначе
				
				СбисКодОшибки			= Неопределено;
				СообщениеОшибкиДефолт	= МодульОбъектаКлиент().СбисИсключение_СообщениеПоКоду(Неопределено);
				Если	Не	РезультатОтвет.Свойство("data",			СбисКодОшибки)
					Или	Не	СбисКодОшибки.Свойство("error_code",	СбисКодОшибки)
					Или		МодульОбъектаКлиент().СбисИсключение_СообщениеПоКоду(СбисКодОшибки) = СообщениеОшибкиДефолт Тогда
					
					//Если пришёл код ошибки от Исключения на БЛ, то берём его как есть.
					СбисКодОшибки = 300;
					
				КонецЕсли;
				
				СбисБазоваяОшибка = РезультатОтвет;
				Если Лев(РезультатОтвет.details, 1) = "{" Тогда
					
					//Если в details json
					СбисБазоваяОшибка = РезультатОтвет.details;
					
				КонецЕсли;
				
				РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(СбисБазоваяОшибка, "API.СбисОтправитьИОбработатьКоманду", СбисКодОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если РежимОтладки Тогда
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "ERROR");
			лОтладочныеДанные.Модуль		= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
			лОтладочныеДанные.Вызов			= Метод;
			лОтладочныеДанные.Сообщение		= РезультатОтвет;
			лОтладочныеДанные.Идентификатор	= ИДЗапроса;
			лОтладочныеДанные.Время			= ТекущаяДата();
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			
			МодульОбъектаКлиент().СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
		
		//Приведено в соотсвтетствие с способом обмена ExtSdk
		Если	ДопПараметры.Свойство("СообщатьПриОшибке")
			И	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатОтвет);
		КонецЕсли;
		//Для интеграции через АПИ ошибка возвращается почти всегда
		Если Не	ДопПараметры.Свойство("ВернутьОшибку")
			Или	ДопПараметры.ВернутьОшибку Тогда
			Возврат РезультатОтвет;
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли РежимОтладки Тогда
		
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "MESSAGE");
		лОтладочныеДанные.Модуль		= МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		лОтладочныеДанные.Вызов			= Метод;
		Если	Не ДопПараметры.Свойство("ОчиститьПараметры")
			Или	Не ДопПараметры.ОчиститьПараметры Тогда
			
			лОтладочныеДанные.Сообщение = РезультатОтвет;
			
		Иначе
			
			лОтладочныеДанные.Сообщение = "Успешно";
			
		КонецЕсли;
		лОтладочныеДанные.Идентификатор	= ИДЗапроса;
		лОтладочныеДанные.Время			= ТекущаяДата();
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		
		МодульОбъектаКлиент().СохранитьОтладочныеДанныеСБИС(Новый Структура("Log", ДанныеВЛог));
		
	КонецЕсли;
	
	Возврат РезультатОтвет;
	
КонецФункции

&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуВызовСервера(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ) Экспорт
	КэшПарам = Новый Структура("ПолнаяВерсияПродукта,ТипПрокси,ПроксиСервер,ПроксиПорт,ПроксиЛогин,ПроксиПароль,ИдентификаторСессии,UserAgent");
	ЗаполнитьЗначенияСвойств(КэшПарам, Кэш.Парам);//Отправляем только те параметры, что нужны для вызова команды, чтобы не перегружать вызов сервера.
	
	РезультатОтвет = СбисОтправитьИОбработатьКомандуНаСервере(КэшДляЗапросаНаСервере(Кэш), Метод, ПараметрыМетода, ДопПараметры, Отказ);
	Если Отказ Тогда
		РезультатОтвет = Кэш.ОбщиеФункции.сбисИсключение(РезультатОтвет, "API.СбисОтправитьИОбработатьКомандуВызовСервера");
	КонецЕсли;
	Возврат РезультатОтвет;
КонецФункции

&НаСервере
Функция СбисОтправитьИОбработатьКомандуНаСервере(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ) Экспорт
	Перем ПреобразовыватьДаты, СообщатьПриОшибке, ИдСессии, АдресРесурса, РезультатОтвет;
	
	КэшПарам		= Кэш.Парам;
	ОбработкаОбъект = МодульОбъектаСервер();
	Если Не ДопПараметры.Свойство("ИдСессии", ИдСессии) Тогда
		ИдСессии = КэшПарам.ИдентификаторСессии;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("АдресРесурса", АдресРесурса) Тогда
		АдресРесурса = "/service/?srv=1";
	КонецЕсли;
	
	ДопПараметрыТекста = Новый Структура("Метод, Режим", Метод, "API");
	Если ДопПараметры.Свойство("РежимКонвертации") Тогда
		ДопПараметрыТекста.Режим = ДопПараметры.РежимКонвертации;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("АдресСервера",	Кэш.СБИС.АдресСервера);
	ПараметрыКоманды.Вставить("АдресРесурса",	АдресРесурса);
	ТекстЗапроса = ОбработкаОбъект.ПреобразоватьЗначениеВJSON(ПараметрыМетода, ДопПараметрыТекста);
	Если ЗначениеЗаполнено(ДопПараметрыТекста.Метод) Тогда
		ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":""" + ДопПараметрыТекста.Метод + """,""params"":" + ТекстЗапроса + ",""id"":1}" ;
	КонецЕсли;
	ПараметрыКоманды.Вставить("ТекстЗапроса",	ТекстЗапроса);
	
	ДопПараметрыКоманды	= Новый Структура("ИдСессии", ИдСессии);  
	РезультатКоманды	= сбисВыполнитьКомандуНаСервере(Кэш, ПараметрыКоманды, ДопПараметрыКоманды, Отказ);
	Если Отказ Тогда
		//Если упало при попытке отправки сообщения, то уже готовая ошибка
		РезультатОтвет = ОбработкаОбъект.НовыйСбисИсключение(РезультатКоманды, "API.сбисВыполнитьКомандуНаСервере");
	Иначе
		//Разберем и оценим результат
		Если Не ДопПараметры.Свойство("ПреобразовыватьДаты", ПреобразовыватьДаты) Тогда
			ПреобразовыватьДаты = Истина;
		КонецЕсли;
		Попытка
			РезультатВыполнения = ОбработкаОбъект.СбисПрочитатьJSON(РезультатКоманды,,,ПреобразовыватьДаты);
		Исключение
			Отказ = Истина;
			Если Лев(СокрЛП(РезультатКоманды),1)="{" Тогда     // кривой json не смогли разобрать
				РезультатОтвет = ОбработкаОбъект.НовыйСбисИсключение(, "РаботаСJSON.СбисПрочитатьJSON", 785, "Ошибка во входящих данных", "Ошибка при разборе ответа от сервера: " + ОписаниеОшибки());
			Иначе    // в РезультатКоманды вернулась ошибка строкой
				РезультатОтвет = ОбработкаОбъект.НовыйСбисИсключение(, , , РезультатКоманды, РезультатКоманды);  
			КонецЕсли;
		КонецПопытки;
		Если Не Отказ Тогда
			Checkparam = Неопределено;
			Если РезультатВыполнения.Свойство("error", РезультатОтвет) Тогда
				Отказ = Истина;
				РезультатОтвет = ОбработкаОбъект.НовыйСбисИсключение(РезультатОтвет, Метод);
			ИначеЕсли Не РезультатВыполнения.Свойство("result", РезультатОтвет) Тогда
				Если	ДопПараметры.Свойство("ЕстьРезультат", Checkparam)
					И	Checkparam Тогда
					Отказ = Истина;
					РезультатОтвет = ОбработкаОбъект.НовыйСбисИсключение(, "API.сбисОтправитьИОбработатьКоманду", 775, "Не удалось получить ответ сервера", "Отсутствует результат выполнения метода " + Метод + "()");
				Иначе
					РезультатОтвет = РезультатВыполнения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОтвет;
	
КонецФункции

//Функция переключает выбранный сервер на резерв
&НаКлиенте
Функция сбисПереключитьДомен(Кэш, ПараметрыВызова, Отказ) Экспорт
	
	РезультатАвторизации = ПараметрыВызова.Результат;
	Если	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен
		Или	(	ПараметрыВызова.Свойство("ПроверкаВыполнена")
			И	ПараметрыВызова.ПроверваВыполнена) Тогда//Уже включен резервный домен, или проверка была выполнена выходим
		Возврат РезультатАвторизации;
	КонецЕсли;
	Отказ = Ложь;
	СтрокаЗамена1 = ".sbis.ru";
	СтрокаЗамена2 = ".saby.ru";
	
	//Пробуем сделать запрос на резервный адрес если не включено.
	Кэш.СБИС.АдресСервера = СтрЗаменить(Кэш.СБИС.АдресСервера, СтрокаЗамена1, СтрокаЗамена2);
	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен = Истина;
	
	Отказ = Ложь;
	РезультатАвторизации2 = Кэш.Интеграция.СформироватьНастройкиПодключения(Кэш);
	Если Отказ Тогда
		Возврат РезультатАвторизации2;
	КонецЕсли;
	ПараметрыВызова.Вставить("Результат", Кэш.Интеграция.сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыВызова.Метод, ПараметрыВызова.Параметры, ПараметрыВызова.ДополнительныеПараметры, Отказ));
	ПараметрыВызова.Вставить("ПроверкаВыполнена", Истина);
	РезультатАвторизации2 = Кэш.Интеграция.сбисРезультатАвторизации(Кэш, ПараметрыВызова, Отказ);
	Если	Отказ 
		И	РезультатАвторизации2.code = 759 Тогда//Резервный адрес не доступен, может быть проблема прокси, либо неверно указан адрес. Вернём как было
		Кэш.СБИС.АдресСервера = СтрЗаменить(Кэш.СБИС.АдресСервера, СтрокаЗамена2, СтрокаЗамена1);
	Иначе
		РезультатАвторизации = РезультатАвторизации2;
	КонецЕсли;
	Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен = сбисВключенРезервныйДомен(Кэш, Кэш.СБИС.АдресСервера);
	Возврат РезультатАвторизации;
	
КонецФункции

//Делает вызов команды и возвращает результат, либо ошибку
&НаСервереБезКонтекста
Функция СбисВыполнитьКомандуНаСервере(Кэш, ПараметрыКоманды, ДопПараметры, Отказ)
	Заголовки	= Неопределено;
	Протокол	= "https";
	
	КэшПарам	= Кэш.Парам;
	АдресСервера= СтрЗаменить(ПараметрыКоманды.АдресСервера, Протокол + "://","");
	
	Если Не ПараметрыКоманды.Свойство("Заголовки", Заголовки) Тогда
		Заголовки = СбисСформироватьЗаголовкиНаСервере(КэшПарам, ДопПараметры);
	КонецЕсли;
	
	Прокси = СбисСформироватьПрокси(Кэш);
	
	Соединение		= Новый HTTPСоединение(АдресСервера, , , , Прокси, , Новый ЗащищенноеСоединениеOpenSSL());
	сбисHTTPЗапрос	= ПараметрыКоманды.АдресРесурса;
	Попытка
		Если Кэш.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда 
			сбисHTTPЗапрос = Вычислить("Новый HTTPЗапрос(сбисHTTPЗапрос)");
			сбисHTTPЗапрос.Заголовки = Заголовки;
			сбисHTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.ТекстЗапроса, "UTF-8", Вычислить("ИспользованиеByteOrderMark.Авто"));
			Результат = Соединение.ОтправитьДляОбработки(сбисHTTPЗапрос);                 
		Иначе
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 716, "Платформа не поддерживается. Используйте версию выше текущей", "Платформа не поддерживается. Используйте версию выше текущей");
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		Если Найти(ОписаниеОшибки, "Couldn't resolve host name") Или Найти(ОписаниеОшибки, НСтр("ru = 'Не могу установить соединение'")) Тогда
			Результат = Новый Структура("code, message, details", 756, "Не удалось отправить пакет на указанный сервер", "Сервер " + АдресСервера + " не доступен.");
		ИначеЕсли Найти(ОписаниеОшибки, "Failure when receiving data from the peer") Или	Найти(ОписаниеОшибки, НСтр("ru = 'Не могу установить соединение'")) Тогда
			Результат = Новый Структура("code, message, details", 759, "Невозможно соединиться с удаленным сервером", "Сервер " + АдресСервера + " не доступен.");
		Иначе
			Результат = Новый Структура("code,message,details", 100, "Неизвестная ошибка HTTP соединения", ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;   
	
	Если Результат.КодСостояния = 503 Тогда
		Отказ = Истина;                   
		Результат = Новый Структура("code, message, details", 302, "Невозможно соединиться с удаленным сервером", "Сервер " + АдресСервера + " временно не доступен.");
	КонецЕсли;
	
	Соединение = Неопределено;
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	Если Кэш.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда 
		Возврат Результат.ПолучитьТелоКакСтроку();
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция возвращает траспортируемый на сервер огрызок кэша
&НаКлиенте
Функция КэшДляЗапросаНаСервере(Кэш)
	КэшПарам = Новый Структура("ИдентификаторСессии, ПолнаяВерсияПродукта, ПроксиСервер, ПроксиПорт, ТипПрокси, ПроксиЛогин, ПроксиПароль, UserAgent");
	ЗаполнитьЗначенияСвойств(КэшПарам, Кэш.Парам);
	Результат = Новый Структура("СБИС,	Парам,	КэшЗначенийИни,	СовместимостьМетодов",  
								Новый Структура("АдресСервера, ПараметрыИнтеграции", Кэш.СБИС.АдресСервера, Кэш.СБИС.ПараметрыИнтеграции),
										КэшПарам, 
												Новый Структура("КодировкиЧтенияФайлов"),
																Новый Структура("HTTPСоединение", Кэш.СовместимостьМетодов.HTTPСоединение));
																
	Если Не Кэш.КэшЗначенийИни.Свойство("КодировкиЧтенияФайлов", Результат.КэшЗначенийИни.КодировкиЧтенияФайлов) Тогда 
		Результат.КэшЗначенийИни.КодировкиЧтенияФайлов = Новый Структура("Определять, ПоУмолчанию", Новый Массив, Новый Структура("ДляВсех", "utf-8"));
		Результат.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять.Добавить("windows-1251");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////
/////////////////Вызовы на клиенте//////////////////
////////////////////////////////////////////////////
	
#Если Не ВебКлиент Тогда
	
&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуВызовКлиента(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ) Экспорт
	Перем ПреобразовыватьДаты, СообщатьПриОшибке, ИдСессии, АдресРесурса, РезультатОтвет;
	Если Не ДопПараметры.Свойство("ИдСессии", ИдСессии) Тогда
		ИдСессии = Кэш.Парам.ИдентификаторСессии;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("АдресРесурса", АдресРесурса) Тогда
		АдресРесурса = "/service/?srv=1";
	КонецЕсли;
	
	ДопПараметрыТекста = Новый Структура("Метод, Режим", Метод, "API");
	Если ДопПараметры.Свойство("РежимКонвертации") Тогда
		ДопПараметрыТекста.Режим = ДопПараметры.РежимКонвертации;
	КонецЕсли;
	
	ТекстЗапроса = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(ПараметрыМетода, ДопПараметрыТекста);
	Если ЗначениеЗаполнено(ДопПараметрыТекста.Метод) Тогда
		ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":""" + ДопПараметрыТекста.Метод + """,""params"":" + ТекстЗапроса + ",""id"":1}" ;
	КонецЕсли;
	
	ДопПараметрыКоманды	= Новый Структура("ИдСессии", ИдСессии);
	ПараметрыКоманды = Новый Структура("АдресРесурса, ТекстЗапроса", АдресРесурса, ТекстЗапроса);
	РезультатКоманды = СбисВыполнитьКомандуНаКлиенте(Кэш, ПараметрыКоманды, ДопПараметрыКоманды, Отказ);
	Если Отказ Тогда
		//Если упало при попытке отправки сообщения, то уже готовая ошибка
		РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(РезультатКоманды, "API.сбисВыполнитьКомандуНаСервере");
	Иначе
		//Разберем и оценим результат
		Если Не ДопПараметры.Свойство("ПреобразовыватьДаты", ПреобразовыватьДаты) Тогда
			ПреобразовыватьДаты = Истина;
		КонецЕсли;
		Попытка
			РезультатВыполнения = Кэш.РаботаСJson.сбисПрочитатьJSON(РезультатКоманды,,,ПреобразовыватьДаты);
		Исключение
			Отказ = Истина;
			Если Лев(СокрЛП(РезультатКоманды),1)="{" Тогда     // кривой json не смогли разобрать
				РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(, "РаботаСJSON.сбисПрочитатьJSON", 785, "Ошибка во входящих данных", "Ошибка при разборе ответа от сервера: " + ОписаниеОшибки());
			Иначе    // в РезультатКоманды вернулась ошибка строкой
				РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(, , , РезультатКоманды, РезультатКоманды);
			КонецЕсли;
		КонецПопытки;
		Если Не Отказ Тогда
			Checkparam = Неопределено;
			Если РезультатВыполнения.Свойство("error", РезультатОтвет) Тогда
				Отказ = Истина;
				РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(РезультатОтвет, Метод);
			ИначеЕсли Не РезультатВыполнения.Свойство("result", РезультатОтвет) Тогда
				Если	ДопПараметры.Свойство("ЕстьРезультат", Checkparam)
					И	Checkparam Тогда
					Отказ = Истина;
					РезультатОтвет = Кэш.ОбщиеФункции.СбисИсключение(, "API.сбисОтправитьИОбработатьКоманду", 775, "Не удалось получить ответ сервера", "Отсутствует результат выполнения метода " + Метод + "()");
				Иначе
					РезультатОтвет = РезультатВыполнения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОтвет;
КонецФункции

//Делает вызов команды и возвращает результат, либо ошибку
&НаКлиенте
Функция СбисВыполнитьКомандуНаКлиенте(Кэш, ПараметрыКоманды, ДопПараметры, Отказ)
	Заголовки	= Неопределено;
	Протокол	= "https";
	АдресСервера= СтрЗаменить(Кэш.СБИС.АдресСервера, Протокол + "://","");
	
	Если Не ПараметрыКоманды.Свойство("Заголовки", Заголовки) Тогда
		Заголовки = СбисСформироватьЗаголовкиНаКлиенте(Кэш.Парам, ДопПараметры);
	КонецЕсли;
	
	Прокси = СбисСформироватьПрокси(Кэш);
	
	Попытка
		Если Кэш.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда
			Попытка
				ИспользованиеBOM = Вычислить("ИспользованиеByteOrderMark.Авто"); 
			Исключение
				Отказ 			= Истина;
				СбисИсключение	= МодульОбъектаКлиент().НовыйСбисИсключение(,"API.СбисВыполнитьКомандуНаКлиенте",
						716, "Платформа не поддерживается. Используйте версию выше текущей", "Платформа не поддерживается. Используйте версию выше текущей");
				МодульОбъектаКлиент().СообщитьСбисИсключение(СбисИсключение);		
				Возврат СбисИсключение; 
			КонецПопытки;
			Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси, , Новый ЗащищенноеСоединениеOpenSSL());
			сбисHTTPЗапрос = Вычислить("Новый HTTPЗапрос(ПараметрыКоманды.АдресРесурса)");
			сбисHTTPЗапрос.Заголовки = Заголовки;
			сбисHTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.ТекстЗапроса, "UTF-8", ИспользованиеBOM);
			РезультатHTTP = Соединение.ОтправитьДляОбработки(сбисHTTPЗапрос);
			Если РезультатHTTP.КодСостояния = 503 Тогда
				
				Отказ = Истина; 
				Результат = Новый Структура("code,message,details", 302, "Невозможно соединиться с удаленным сервером", "Сервер " + АдресСервера + " временно не доступен");
				
			КонецЕсли;
			Результат = РезультатHTTP.ПолучитьТелоКакСтроку();
	
		Иначе
			//Формируем параметры к отправке
			ИмяФайлаЗапрос = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("txt");
			ИмяФайлаОтвет = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("txt");
			POSTПараметры = Новый ЗаписьТекста(ИмяФайлаЗапрос, КодировкаТекста.UTF8,, Истина, Символы.ПС);  
			POSTПараметры.Записать(ПараметрыКоманды.ТекстЗапроса);
			POSTПараметры.Закрыть();			
			
			сбисSSL = Истина;
			Если Кэш.СовместимостьМетодов.HTTPСоединение.OpenSSL Тогда 
				сбисSSL = Новый ЗащищенноеСоединениеOpenSSL();
			КонецЕсли;
			Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси, , сбисSSL);
			Попытка
				Соединение.ОтправитьДляОбработки(ИмяФайлаЗапрос, ПараметрыКоманды.АдресРесурса, ИмяФайлаОтвет, Заголовки);
			Исключение
				Отказ = Истина;
			КонецПопытки;		
			//Читаем ответ
			ЧтениеОтвета = Новый ЧтениеТекста(ИмяФайлаОтвет, КодировкаТекста.UTF8, Символы.ПС);
			Результат = ЧтениеОтвета.Прочитать();
			ЧтениеОтвета.Закрыть();
			Кэш.ОбщиеФункции.СбисОчиститьВременныйФайлКлиент(ИмяФайлаЗапрос);
			Кэш.ОбщиеФункции.СбисОчиститьВременныйФайлКлиент(ИмяФайлаОтвет);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке 	= ИнформацияОбОшибке();
		ОписаниеОшибки		= ОписаниеОшибки();
		Если Найти(ОписаниеОшибки, "Couldn't resolve host name") Или Найти(ОписаниеОшибки, НСтр("ru = 'Не могу установить соединение'")) Тогда
			Результат = Новый Структура("code, message, details", 756, "Не удалось отправить пакет на указанный сервер", "Сервер " + АдресСервера + " не доступен.");			
		ИначеЕсли	Найти(ОписаниеОшибки, "Failure when receiving data from the peer")
			Или		Найти(ОписаниеОшибки, НСтр("ru = 'Не могу установить соединение'"))
			Или		Найти(ОписаниеОшибки, НСтр("ru = 'Превышен таймаут'")) Тогда
			Результат = Новый Структура("code, message, details", 759, "Невозможно соединиться с удаленным сервером", "Сервер " + АдресСервера + " не доступен:" + ИнформацияОбОшибке.Причина.Описание);
		Иначе
			Результат = Новый Структура("code,message,details", 100, "Неизвестная ошибка HTTP соединения", ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;      
	
	Возврат Результат;
	
КонецФункции

//Получает данные файла вложения
&НаКлиенте
Функция ПолучитьДанныеФайлаНаКлиенте(ПараметрыПолучения, ПараметрыФайла, Отказ)
	РезультатЗапроса = СбисОтправитьИОбработатьКомандуGETНаКлиенте(ПараметрыПолучения, ПараметрыФайла, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	ИмяФайла = РезультатЗапроса;
	
	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	СтрокаТекст = СтрЗаменить(НРег(ТекстДок.ПрочитатьСтроку()),"'","""");
	СтрокаКодировка = ПараметрыПолучения.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех;
	//Проверим кодировки для принудительного чтения.	
	Для Каждого КодировкаДляЧтения Из ПараметрыПолучения.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять Цикл
		ПозицияКодировки = Найти(СтрокаТекст, "encoding");
		Если ПозицияКодировки И Найти(Сред(СтрокаТекст, ПозицияКодировки), КодировкаДляЧтения) Тогда
			СтрокаКодировка = КодировкаДляЧтения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//Переоткрываем файл в найденной кодировке
	ТекстДок.Открыть(ИмяФайла,СтрокаКодировка);
	РезультатТекст = ТекстДок.Прочитать();
	
	Если РезультатТекст = Неопределено Тогда
	//	Или	Лев(РезультатТекст,2) <> "<?" Тогда// для PDF, JPEG файлjd иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
		РезультатТекст = "";
	КонецЕсли;
	Возврат РезультатТекст;
КонецФункции

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаКлиенте
Функция ПолучитьHTMLВложенияНаКлиенте(Кэш, Вложение)
	Если Не ЗначениеЗаполнено(Вложение.СсылкаНаHTML) Тогда
		Возврат "";
	КонецЕсли;
	Отказ			= Ложь;
	ПараметрыФайла	= Новый Структура("АдресРесурса", Вложение.СсылкаНаHTML);
	Результат		= СбисОтправитьИОбработатьКомандуGETНаКлиенте(Кэш, ПараметрыФайла, Отказ);
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	Текст = Новый ЧтениеТекста(Результат);
	СбисСтрокаКодировка = Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех;
	//Проверим первые 3 строки на предмет наличия там строки с описанием кодировки файла
	Для СчетчикСтрок = 1 По 3 Цикл
		СтрокаРезультат = СокрЛП(Текст.ПрочитатьСтроку());
		Если Не Лев(СтрокаРезультат, 5) = "<META" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого КодировкаДляЧтения Из Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять Цикл
			Если Найти(СтрокаРезультат, "charset=" + КодировкаДляЧтения) Тогда
				СбисСтрокаКодировка = КодировкаДляЧтения;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	Текст = Новый ЧтениеТекста(Результат, СбисСтрокаКодировка);
	Результат = Текст.Прочитать();
	Если Лев(Результат, 9) = "<!DOCTYPE" Тогда  // для PDF, JPEG
		Возврат "";
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
//Формирует Прокси по параметрам
&НаКлиентеНаСервереБезКонтекста
Функция СбисСформироватьПрокси(Кэш, Протокол=Неопределено) Экспорт
	Перем СовместимостьМетодов;
	
	МестныйКэшПарам = Кэш.Парам;
	Если МестныйКэшПарам.ТипПрокси = "Вручную" Тогда
		
		// Ручные настройки прокси-сервера.
		ТипЧисло			= Новый ОписаниеТипов("Число");
		ПроксиПорт			= ТипЧисло.ПривестиЗначение(МестныйКэшПарам.ПроксиПорт);
		ПротоколыПрописать	= Новый Массив;
		
		Если Протокол = Неопределено Тогда
			
			ПротоколыПрописать.Добавить("ftp");
			ПротоколыПрописать.Добавить("http");
			ПротоколыПрописать.Добавить("https");
			
		Иначе
			
			ПротоколыПрописать.Добавить(Протокол);
			
		КонецЕсли;
		
		Прокси = Новый ИнтернетПрокси;
			
		Для Каждого ПротоколПрописать Из ПротоколыПрописать Цикл 
			
			Если Кэш.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда 
				
				Прокси.Установить(ПротоколПрописать, МестныйКэшПарам.ПроксиСервер, ПроксиПорт, МестныйКэшПарам.ПроксиЛогин, МестныйКэшПарам.ПроксиПароль, Ложь);
				
			Иначе
				
				Прокси.Установить(ПротоколПрописать, МестныйКэшПарам.ПроксиСервер, ПроксиПорт);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Прокси.Пользователь								= МестныйКэшПарам.ПроксиЛогин;
		Прокси.Пароль									= МестныйКэшПарам.ПроксиПароль;
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов	= Истина;
		
	ИначеЕсли МестныйКэшПарам.ТипПрокси = "Автоматически" Тогда
		
		// Системные настройки прокси-сервера.
		Прокси = Новый ИнтернетПрокси(Истина);
		
	Иначе
		
		// Не использовать прокси-сервер.
		Прокси = Новый ИнтернетПрокси(Ложь);
		
	КонецЕсли;
	Возврат Прокси;
КонецФункции

//Функция формирует заголовки для выполнения запроса, аналогично старой, но с измененной структурой
//КэшПарам:
//	Аналогичные параметры из Кэш.
//ДополнительныеПараметры: 
//	ИдСессии	- (Необязательный) ид активной сессии
//	ТаймАут		- (Необязательный) таймаут для заголовка в секундах.
&НаКлиенте
Функция СбисСформироватьЗаголовкиНаКлиенте(КэшПарам, ДополнительныеПараметры)
	Заголовки = Новый Соответствие;
	Если	ДополнительныеПараметры.Свойство("ИдСессии")
		И	ЗначениеЗаполнено(ДополнительныеПараметры.ИдСессии) Тогда
		Заголовки.Вставить("X-SBISSessionID", ДополнительныеПараметры.ИдСессии);
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ТаймАут") Тогда
		Заголовки.Вставить("X-Timeout", Формат(ДополнительныеПараметры.ТаймАут * 1000, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	Если КэшПарам.Свойство("UserAgent") Тогда
		Заголовки.Вставить("User-Agent",	КэшПарам.UserAgent);
	Иначе
		Заголовки.Вставить("User-Agent",	КэшПарам.ПолнаяВерсияПродукта);  
	КонецЕсли;

	Возврат Заголовки;
КонецФункции

//Новая версия сбисОтправитьИОбработатьКомандуGET Выполяет чтение файла по ссылке и запись во временный файл.
//ПараметрыПолучения:
//	СБИС, парам - аналогичные параметры из Кэш.
//ПараметрыЗапроса: 
//	АдресРесурса	- (Обязательный)ссылка на данные
//	ПутьКФайлу		- (Обязательный)ссылка на выбранный адрес для записи.
&НаКлиенте
Функция СбисОтправитьИОбработатьКомандуGETНаКлиенте(Кэш, ПараметрыЗапроса, Отказ) Экспорт
	Перем ПутьКФайлу, Заголовки, ПараметрПроверить, АдресРесурсаВЗапрос, ТекстАнализОшибки;	
    ДопПараметрыКоманды = Новый Структура("X_Timeout, Timeout", 10, 60);
	
	Если НРег(Лев(ПараметрыЗапроса.АдресРесурса, 4)) = "http" Тогда
		ПолныйАдресСервера = Лев(ПараметрыЗапроса.АдресРесурса, Найти(нрег(ПараметрыЗапроса.АдресРесурса), ".sbis.ru/")+8);
	Иначе
		ПолныйАдресСервера = Кэш.СБИС.АдресСервера;
	КонецЕсли;
	
	Если Не ПараметрыЗапроса.Свойство("АдресСервера") Тогда
		АдресСервераСтр	= СтрЗаменить(ПолныйАдресСервера, ":", Символы.ПС);
		ПараметрыЗапроса.Вставить("Протокол", СтрПолучитьСтроку(АдресСервераСтр, 1));
		ПараметрыЗапроса.Вставить("АдресСервера",	СтрЗаменить(СтрПолучитьСтроку(АдресСервераСтр, 2), "/", ""));
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("Прокси") Тогда
		
		ПараметрыЗапроса.Вставить("Прокси", СбисСформироватьПрокси(Кэш));
		
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("АдресРесурсаВЗапрос") Тогда
		ПараметрыЗапроса.Вставить("АдресРесурсаВЗапрос", СтрЗаменить(ПараметрыЗапроса.АдресРесурса, ПолныйАдресСервера,""));
	КонецЕсли;
	Если 	Не ПараметрыЗапроса.Свойство("ПутьКФайлу", ПутьКФайлу)
		Или	Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ПараметрыЗапроса.Вставить("ПутьКФайлу", Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("tmp"));
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("Заголовки", Заголовки) Тогда
		Session_ID = "";
		Если	Не	ПараметрыЗапроса.Свойство("УстановитьSID", ПараметрПроверить)
			Или		ПараметрПроверить Тогда
			Session_ID	= Кэш.Парам.ИдентификаторСессии;
		КонецЕсли;
		ПараметрыЗаголовки = Новый Структура("ИдСессии, ТаймАут", Session_ID, ДопПараметрыКоманды.X_Timeout);
		Заголовки	= СбисСформироватьЗаголовкиНаКлиенте(Кэш.Парам, ПараметрыЗаголовки);
		ПараметрыЗапроса.Вставить("Заголовки", Заголовки);
	КонецЕсли;

	Возврат HTTPСоединение_Получить_Клиент(Кэш, ПараметрыЗапроса, ДопПараметрыКоманды, Отказ);
	
КонецФункции
	
&НаКлиенте
Функция HTTPСоединение_Получить_Клиент(Кэш, ПараметрыЗапроса, ДопПараметры, Отказ)
	Перем HTTPСоединение;
	ВремяНачалаЗапроса = ТекущаяДата();
	AnswerType = "message";
	Если Не ПараметрыЗапроса.Свойство("ВремяНачала") Тогда
		ПараметрыЗапроса.Вставить("ВремяНачала", ВремяНачалаЗапроса);
	ИначеЕсли ПараметрыЗапроса.ВремяНачала + ДопПараметры.Timeout < ВремяНачалаЗапроса Тогда
		Отказ = Истина;//Для избежания зацикливания при формировании файлов, рекурсивно вызываем определенное время.
		Возврат Новый Структура("code, message,details", 100, "Ошибка получения файла", "Превышено время ожидания");
	КонецЕсли;
	СбисАдресСервера = ПараметрыЗапроса.АдресСервера;
	Если ПараметрыЗапроса.Свойство("Таймаут") Тогда
		Таймаут = ПараметрыЗапроса.Таймаут;
	Иначе
		Таймаут = 0;
	КонецЕсли;
	СтрокаСоединения = "Новый HTTPСоединение(СбисАдресСервера,,,,ПараметрыЗапроса.Прокси,Таймаут";
	//Параметры защищенного соединения
	Если ПараметрыЗапроса.Протокол = "https" Тогда
		Если Кэш.СовместимостьМетодов.HTTPСоединение.OpenSSL Тогда
			СтрокаСоединения = СтрокаСоединения + ",Новый ЗащищенноеСоединениеOpenSSL())";
		Иначе
			СтрокаСоединения = СтрокаСоединения + "Истина)";
		КонецЕсли;
	Иначе
		СтрокаСоединения = СтрокаСоединения + ")"
	КонецЕсли;
	//В случае переадресации, или ожидания запроса может придти готовое подключение
	Если Не ДопПараметры.Свойство("Соединение", HTTPСоединение) Тогда
		Если Кэш.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда
			СбисАдресСервера = СтрЗаменить(СбисАдресСервера, ".sbis.ru", ".saby.ru");
		КонецЕсли;
		HTTPСоединение = Вычислить(СтрокаСоединения);
	КонецЕсли;
	//Для старых платформ механизм читеения ответа с проверкой переадресацией отличается
	Если Кэш.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда 
		HTTPЗапрос		= Вычислить("Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурсаВЗапрос)");
		HTTPЗапрос.Заголовки = ПараметрыЗапроса.Заголовки;
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ПараметрыЗапроса.ПутьКФайлу);
		Исключение
			СбисОшибка = ИнформацияОбОшибке();
			Отказ = Истина;
			Возврат Новый Структура("code, message,details", 100, "Ошибка получения файла", ОписаниеОшибки());
		КонецПопытки;
		AnswerType = HTTPОтвет.Заголовки.Получить("X-ExceptionType");
		Если	HTTPОтвет.КодСостояния = 500
			Или	AnswerType = "error"
			Или AnswerType = "warning" Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Попытка
			HTTPСоединение.Получить(ПараметрыЗапроса.АдресРесурсаВЗапрос, ПараметрыЗапроса.ПутьКФайлу, ПараметрыЗапроса.Заголовки);
		Исключение
			СбисОшибка = ИнформацияОбОшибке();
			Отказ = Истина;
		КонецПопытки;
		Если Отказ Тогда
			HTTPОтвет = СбисОшибка;
			Пока Не HTTPОтвет.Причина = Неопределено Цикл
				HTTPОтвет = HTTPОтвет.Причина;
			КонецЦикла;
			ПричинаОшибки = HTTPОтвет.Описание;
			КодОшибки = СтрЗаменить(СтрЗаменить(ПричинаОшибки,"(",Символы.ПС), ")", Символы.ПС);
			Попытка
				КодОшибки = Число(СтрПолучитьСтроку(КодОшибки, СтрЧислоСтрок(КодОшибки)));
			Исключение
				Возврат Новый Структура("code,message,details", 100, "Ошибка получения файла", ПричинаОшибки);
			КонецПопытки;
			HTTPОтвет = Новый Структура("КодСостояния", КодОшибки);			
		Иначе	
			//Проверим переадресацию
			СбисПереадресация = Новый ЧтениеТекста(ПараметрыЗапроса.ПутьКФайлу);
			СбисПереадресация = СбисПереадресация.ПрочитатьСтроку();
			Если Найти(СбисПереадресация, "Found. Redirecting to") Тогда
				HTTPОтвет = Новый Структура("КодСостояния, Заголовки", 302, Новый Соответствие);
				HTTPОтвет.Заголовки.Вставить("Location", СокрЛП(СтрПолучитьСтроку(СтрЗаменить(СбисПереадресация, "Redirecting to", Символы.ПС),2)));
			Иначе
				HTTPОтвет = Новый Структура("КодСостояния", 200);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ДопПараметры.Вставить("Соединение", HTTPСоединение);
	Если Отказ Тогда
		//Смотрим ответ, если пришла ошибка
		ЧтениеТекст = Новый ЧтениеТекста(ПараметрыЗапроса.ПутьКФайлу, "utf-8");
		Попытка
			ТекстАнализОшибки = ЧтениеТекст.Прочитать();
		Исключение
			ТекстАнализОшибки = "Не удалось прочитать ответ: " + ОписаниеОшибки();
		КонецПопытки;
		ЧтениеТекст = Неопределено;
		//Читаем файл, чтоб понять что за ошибка нам пришла.
		Если		Найти(ТекстАнализОшибки, "{00000000-0000-0000-0000-1aa0000f1002}") Тогда
			Отказ = Ложь;
			Пока ВремяНачалаЗапроса + ДопПараметры.X_Timeout > ТекущаяДата() Цикл
				//Ожидание по задержке, после чего повторяем запрос.
			КонецЦикла;
			СбисРезультат = HTTPСоединение_Получить_Клиент(Кэш, ПараметрыЗапроса, ДопПараметры, Отказ);
		ИначеЕсли	Найти(ТекстАнализОшибки, "{00000000-0000-0000-0000-1fa0000a0001}") Тогда
			СбисРезультат = Новый Структура("code,message,details", 786, "Ошибка генерации PDF", "Файл невозможно преобразовать в PDF");
		Иначе
			СбисРезультат = Новый Структура("code,message,details", 100, "Ошибка получения файла", ТекстАнализОшибки);
		КонецЕсли;
	ИначеЕсли HTTPОтвет.КодСостояния = 302 Тогда
		//Делаем переадресацию
		СбисАдресСервера = СтрЗаменить(СтрЗаменить(СтрЗаменить(HTTPОтвет.Заголовки.Получить("Location")	, ПараметрыЗапроса.АдресРесурсаВЗапрос,		"")
																										, ПараметрыЗапроса.Протокол,	"")
																										, "://",		"");
		ДопПараметры.Вставить("Соединение", Вычислить(СтрокаСоединения));
		СбисРезультат = HTTPСоединение_Получить_Клиент(Кэш, ПараметрыЗапроса, ДопПараметры, Отказ);
	ИначеЕсли HTTPОтвет.КодСостояния = 404 Тогда	
		Отказ = Истина;
		СбисРезультат = Новый Структура("code,message,details", 735, "Данная операция недоступна", "URL """ + ПараметрыЗапроса.АдресСервера + ПараметрыЗапроса.АдресРесурсаВЗапрос + """ не найден.");
	Иначе
		HTTPСоединение = Неопределено;
		СбисРезультат = ПараметрыЗапроса.ПутьКФайлу;
	КонецЕсли;
	Возврат СбисРезультат;
КонецФункции

#КонецЕсли

//Новая версия сбисОтправитьИОбработатьКомандуGET Выполяет чтение файла по ссылке и запись во временный файл.
//ПараметрыПолучения:
//	СБИС, парам - аналогичные параметры из Кэш.
//ПараметрыЗапроса: 
//	АдресРесурса	- (Обязательный)ссылка на данные
//	ПутьКФайлу		- (Обязательный)ссылка на выбранный адрес для записи.
&НаСервереБезКонтекста
Функция СбисОтправитьИОбработатьКомандуGETНаСервере(КэшСервер, ПараметрыЗапроса, Отказ) Экспорт
	Перем ПутьКФайлу, Заголовки, ПараметрПроверить, АдресРесурсаВЗапрос, ТекстАнализОшибки;	
    ДопПараметрыКоманды = Новый Структура("X_Timeout, Timeout", 10, 60);
	
	Если НРег(Лев(ПараметрыЗапроса.АдресРесурса, 4)) = "http" Тогда
		ПолныйАдресСервера = Лев(ПараметрыЗапроса.АдресРесурса, Найти(НРег(ПараметрыЗапроса.АдресРесурса), ".sbis.ru/")+8);
	Иначе
		ПолныйАдресСервера = КэшСервер.СБИС.АдресСервера;
	КонецЕсли;
	
	Если Не ПараметрыЗапроса.Свойство("АдресСервера") Тогда
		АдресСервераСтр	= СтрЗаменить(ПолныйАдресСервера, ":", Символы.ПС);
		ПараметрыЗапроса.Вставить("Протокол", СтрПолучитьСтроку(АдресСервераСтр, 1));
		ПараметрыЗапроса.Вставить("АдресСервера",	СтрЗаменить(СтрПолучитьСтроку(АдресСервераСтр, 2), "/", ""));
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("Прокси") Тогда
		
		ПараметрыЗапроса.Вставить("Прокси", СбисСформироватьПрокси(КэшСервер));
		
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("АдресРесурсаВЗапрос") Тогда
		ПараметрыЗапроса.Вставить("АдресРесурсаВЗапрос", СтрЗаменить(ПараметрыЗапроса.АдресРесурса, ПолныйАдресСервера,""));
	КонецЕсли;
	Если 	Не ПараметрыЗапроса.Свойство("ПутьКФайлу", ПутьКФайлу)
		Или	Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ПараметрыЗапроса.Вставить("ПутьКФайлу", КаталогВременныхФайлов() + строка(Новый УникальныйИдентификатор())+".tmp");
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("Заголовки", Заголовки) Тогда
		Session_ID = "";
		Если	Не	ПараметрыЗапроса.Свойство("УстановитьSID", ПараметрПроверить)
			Или		ПараметрПроверить Тогда
			Session_ID	= КэшСервер.Парам.ИдентификаторСессии;
		КонецЕсли;
		ПараметрыЗаголовки = Новый Структура("ИдСессии, ТаймАут", Session_ID, ДопПараметрыКоманды.X_Timeout);
		Заголовки	= СбисСформироватьЗаголовкиНаСервере(КэшСервер.Парам, ПараметрыЗаголовки);
		ПараметрыЗапроса.Вставить("Заголовки", Заголовки);
	КонецЕсли;

	Возврат HTTPСоединение_Получить_Сервер(КэшСервер, ПараметрыЗапроса, ДопПараметрыКоманды, Отказ);
	
КонецФункции

&НаСервереБезКонтекста
Функция HTTPСоединение_Получить_Сервер(Знач КэшСервер, Знач ПараметрыЗапроса, Знач ДопПараметры, Отказ)
	Перем HTTPСоединение;
	ВремяНачалаЗапроса = ТекущаяДата();
	AnswerType = "message";
	Если Не ПараметрыЗапроса.Свойство("ВремяНачала") Тогда
		ПараметрыЗапроса.Вставить("ВремяНачала", ВремяНачалаЗапроса);
	ИначеЕсли ПараметрыЗапроса.ВремяНачала + ДопПараметры.Timeout < ВремяНачалаЗапроса Тогда
		Отказ = Истина;//Для избежания зацикливания при формировании файлов, рекурсивно вызываем определенное время.
		Возврат Новый Структура("code, message,details", 100, "Ошибка получения файла", "Превышено время ожидания");
	КонецЕсли;
	СбисАдресСервера = ПараметрыЗапроса.АдресСервера;
	СтрокаСоединения = "Новый HTTPСоединение(СбисАдресСервера,,,,ПараметрыЗапроса.Прокси,";
	//Параметры защищенного соединения
	Если ПараметрыЗапроса.Протокол = "https" Тогда
		Если КэшСервер.СовместимостьМетодов.HTTPСоединение.OpenSSL Тогда
			СтрокаСоединения = СтрокаСоединения + ",Новый ЗащищенноеСоединениеOpenSSL())";
		Иначе
			СтрокаСоединения = СтрокаСоединения + "Истина)";
		КонецЕсли;
	Иначе
		СтрокаСоединения = СтрокаСоединения + ")"
	КонецЕсли;
	//В случае переадресации, или ожидания запроса может придти готовое подключение
	Если Не ДопПараметры.Свойство("Соединение", HTTPСоединение) Тогда
		Если КэшСервер.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда
			СбисАдресСервера = СтрЗаменить(СбисАдресСервера, ".sbis.ru", ".saby.ru");
		КонецЕсли;
		HTTPСоединение = Вычислить(СтрокаСоединения);
	КонецЕсли;
	//Для старых платформ механизм читеения ответа с проверкой переадресацией отличается
	Если КэшСервер.СовместимостьМетодов.HTTPСоединение.ФункцияПолучить Тогда 
		HTTPЗапрос = Вычислить("Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурсаВЗапрос)");
		HTTPЗапрос.Заголовки = ПараметрыЗапроса.Заголовки;
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ПараметрыЗапроса.ПутьКФайлу);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message,details", 100, "Ошибка получения файла", ОписаниеОшибки());
		КонецПопытки;
		AnswerType = HTTPОтвет.Заголовки.Получить("X-ExceptionType");
		Если	HTTPОтвет.КодСостояния = 500
			Или	AnswerType = "error"
			Или AnswerType = "warning" Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Попытка
			HTTPСоединение.Получить(ПараметрыЗапроса.АдресРесурсаВЗапрос, ПараметрыЗапроса.ПутьКФайлу, ПараметрыЗапроса.Заголовки);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			Отказ = Истина;
		КонецПопытки;
		Если Отказ Тогда
			HTTPОтвет = Ошибка;
			Пока Не HTTPОтвет.Причина = Неопределено Цикл
				HTTPОтвет = HTTPОтвет.Причина;
			КонецЦикла;
			ПричинаОшибки = HTTPОтвет.Описание;
			КодОшибки = СтрЗаменить(СтрЗаменить(ПричинаОшибки,"(",Символы.ПС), ")", Символы.ПС);
			Попытка
				КодОшибки = Число(СтрПолучитьСтроку(КодОшибки, СтрЧислоСтрок(КодОшибки)));
			Исключение
				Возврат Новый Структура("code,message,details", 100, "Ошибка получения файла", ПричинаОшибки);
			КонецПопытки;
			HTTPОтвет = Новый Структура("КодСостояния", КодОшибки);			
		Иначе	
			//Проверим переадресацию
			СбисПереадресация = Новый ЧтениеТекста(ПараметрыЗапроса.ПутьКФайлу);
			СбисПереадресация = СбисПереадресация.ПрочитатьСтроку();
			Если Найти(СбисПереадресация, "Found. Redirecting to") Тогда
				HTTPОтвет = Новый Структура("КодСостояния, Заголовки", 302, Новый Соответствие);
				HTTPОтвет.Заголовки.Вставить("Location", СокрЛП(СтрПолучитьСтроку(СтрЗаменить(СбисПереадресация, "Redirecting to", Символы.ПС),2)));
			Иначе
				HTTPОтвет = Новый Структура("КодСостояния", 200);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ДопПараметры.Вставить("Соединение", HTTPСоединение);
	Если Отказ Тогда
		//Смотрим ответ, если пришла ошибка
		ЧтениеТекст = Новый ЧтениеТекста(ПараметрыЗапроса.ПутьКФайлу, "utf-8");
		Попытка
			ТекстАнализОшибки = ЧтениеТекст.Прочитать();
		Исключение
			ТекстАнализОшибки = "Не удалось прочитать ответ: " + ОписаниеОшибки();
		КонецПопытки;
		ЧтениеТекст = Неопределено;
		
		//Читаем файл, чтоб понять что за ошибка нам пришла.
		Если		Найти(ТекстАнализОшибки, "{00000000-0000-0000-0000-1aa0000f1002}") Тогда
			Отказ = Ложь;
			Пока ВремяНачалаЗапроса + ДопПараметры.X_Timeout > ТекущаяДата() Цикл
				//Ожидание по задержке, после чего повторяем запрос.
			КонецЦикла;
			СбисРезультат = HTTPСоединение_Получить_Сервер(КэшСервер, ПараметрыЗапроса, ДопПараметры, Отказ);
		ИначеЕсли	Найти(ТекстАнализОшибки, "{00000000-0000-0000-0000-1fa0000a0001}") Тогда
			СбисРезультат = Новый Структура("code,message,details", 786, "Ошибка генерации PDF", "Файл невозможно преобразовать в PDF");
		Иначе
			СбисРезультат = Новый Структура("code,message,details", 100, "Ошибка получения файла", ТекстАнализОшибки);
		КонецЕсли;
		
	ИначеЕсли HTTPОтвет.КодСостояния = 302 Тогда
		//Делаем переадресацию
		СбисАдресСервера = СтрЗаменить(СтрЗаменить(СтрЗаменить(HTTPОтвет.Заголовки.Получить("Location")	, ПараметрыЗапроса.АдресРесурсаВЗапрос,		"")
																										, ПараметрыЗапроса.Протокол,	"")
																										, "://",		"");
		ДопПараметры.Вставить("Соединение", Вычислить(СтрокаСоединения));
		СбисРезультат = HTTPСоединение_Получить_Сервер(КэшСервер, ПараметрыЗапроса, ДопПараметры, Отказ);
	ИначеЕсли HTTPОтвет.КодСостояния = 404 Тогда	
		Отказ = Истина;
		СбисРезультат = Новый Структура("code,message,details", 735, "Данная операция недоступна", "URL """ + ПараметрыЗапроса.АдресСервера + ПараметрыЗапроса.АдресРесурсаВЗапрос + """ не найден.");
	Иначе
		HTTPСоединение = Неопределено;
		СбисРезультат = ПараметрыЗапроса.ПутьКФайлу;
	КонецЕсли;
	Возврат СбисРезультат
КонецФункции

//Функция формирует заголовки для выполнения запроса, аналогично старой, но с измененной структурой
//КэшПарам:
//	Аналогичные параметры из Кэш.
//ДополнительныеПараметры: 
//	ИдСессии	- (Необязательный) ид активной сессии
//	ТаймАут		- (Необязательный) таймаут для заголовка в секундах.
&НаСервереБезКонтекста
Функция СбисСформироватьЗаголовкиНаСервере(Знач КэшПарам, Знач ДополнительныеПараметры)
	Заголовки = Новый Соответствие;
	Если	ДополнительныеПараметры.Свойство("ИдСессии")
		И	ЗначениеЗаполнено(ДополнительныеПараметры.ИдСессии) Тогда
		Заголовки.Вставить("X-SBISSessionID",	ДополнительныеПараметры.ИдСессии);
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ТаймАут") Тогда
		Заголовки.Вставить("X-Timeout",			Формат(ДополнительныеПараметры.ТаймАут*1000, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8"); 
	Если КэшПарам.Свойство("UserAgent") Тогда
		Заголовки.Вставить("User-Agent",	КэшПарам.UserAgent);
	Иначе
		Заголовки.Вставить("User-Agent",	КэшПарам.ПолнаяВерсияПродукта);  
	КонецЕсли;
	Возврат Заголовки;
КонецФункции

////////////////////////////////////////////////////
//////////////////Работа с файлами//////////////////
////////////////////////////////////////////////////

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаКлиенте
Функция ПолучитьHTMLВложения(Кэш, ИдДок, Вложение) Экспорт
	Если Вложение.Свойство("Зашифрован") И Вложение.Зашифрован = "Да" тогда
		Возврат "<HTML><BODY scroll=no>Документ зашифрован.</br>Для работы с зашифрованными документами выберите способ обмена ""extSDK2"" на вкладке Настройки.</BODY></HTML>";
	КонецЕсли;
	#Если ВебКлиент Тогда
		Возврат ПолучитьHTMLВложенияНаСервере(КэшДляЗапросаНаСервере(Кэш), Вложение);
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ПолучитьHTMLВложенияНаКлиенте(Кэш, Вложение);
	#Иначе
		Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			Возврат ПолучитьHTMLВложенияНаКлиенте(Кэш, Вложение);
		Иначе
			Возврат ПолучитьHTMLВложенияНаСервере(КэшДляЗапросаНаСервере(Кэш), Вложение);
		КонецЕсли;
	#КонецЕсли
КонецФункции

//Получает данные файла вложения	
&НаКлиенте
Функция ПолучитьДанныеФайла(Кэш, Ссылка, Отказ=Ложь) Экспорт
	ПараметрыФайла = Новый Структура("АдресРесурса", Ссылка);
	#Если ВебКлиент Тогда
		
		Результат = ПолучитьДанныеФайлаНаСервере(КэшДляЗапросаНаСервере(Кэш), ПараметрыФайла, Отказ);
		
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ПолучитьДанныеФайлаНаКлиенте(Кэш, ПараметрыФайла, Отказ);
		
	#Иначе
		
		Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			
			Результат = ПолучитьДанныеФайлаНаКлиенте(Кэш, ПараметрыФайла, Отказ);
			
		Иначе
			
			Результат = ПолучитьДанныеФайлаНаСервере(КэшДляЗапросаНаСервере(Кэш), ПараметрыФайла, Отказ);
			
		КонецЕсли;
	#КонецЕсли	
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
		Возврат "";
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Получает указанный по ссылке файл и сохраняет его по выбранному пути
&НаКлиенте
Функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла="",Отказ=Ложь) Экспорт	
	Результат = СБИС_СохранитьПоСсылкеВФайл(Кэш, Новый Структура("Ссылка, ИмяФайла", Ссылка, ИмяФайла), Новый Структура, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
		Возврат Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СбисПолучитьФайлНаКлиент(Кэш, ИмяФайлаНаКлиенте, ХранениеНаСервере, Отказ)
	Попытка
		ПолучаемыйФайл	= Новый ОписаниеПередаваемогоФайла(ИмяФайлаНаКлиенте, ХранениеНаСервере);
		ПолучаемыеФайлы	= Новый Массив;
		ПолученныеФайлы = Новый Массив;
		
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		Возврат ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы,,Ложь);
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "API.СбисПолучитьФайлНаКлиент", 100, "Неизвестная ошибка передачи файла", ОписаниеОшибки());
	КонецПопытки;
КонецФункции

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаСервереБезКонтекста
Функция ПолучитьHTMLВложенияНаСервере(Знач КэшСервер, Знач Вложение)
	Если Не ЗначениеЗаполнено(Вложение.СсылкаНаHTML) Тогда
		Возврат "";
	КонецЕсли;
	Отказ = Ложь;
	ПараметрыФайла = Новый Структура("АдресРесурса", Вложение.СсылкаНаHTML);
	Результат = сбисОтправитьИОбработатьКомандуGETНаСервере(КэшСервер, ПараметрыФайла, Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	Текст = Новый ЧтениеТекста(Результат);
	Результат = Текст.Прочитать();
	Если Лев(Результат, 9) = "<!DOCTYPE" Тогда  // для PDF, JPEG
		Возврат "";
	КонецЕсли;
	Возврат Результат;
КонецФункции
// << alo Меркурий

&НаКлиенте
Функция СБИСЗаписатьВложения(Кэш,СоставПакета, Вложение) Экспорт
	Попытка
		Кэш.СБИС.МодульОбъектаКлиент.ЗаписатьВложенияСБИС(СоставПакета, Вложение, Новый Структура, Новый Структура("Кэш", Кэш));
	Исключение  
		
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ИнформацияОбОшибке());
		Возврат Ложь;  
		
	КонецПопытки;   
	
	Возврат Истина;
КонецФункции		// alo Меркурий >>   

//Функция записи по ссылке в файл в серверном контексте с возвратом ошибки.
//ПараметрыПолучения:
//	СБИС, парам - аналогичные параметры из Кэш.
//ПараметрыЗапроса: 
//	АдресРесурса	- ссылка на дданные
//	ПутьКФайлу		- ссылка на выбранный адрес для записи. Если не указан, пишем во временный каталог
//Возвращает Строку пути к файлу при успехе, структуру ошибки при неудаче. Неудача отслеживается по флагу Отказа.
&НаСервереБезКонтекста
Функция СохранитьВложениеПоСсылкеВФайлНаСервере(Знач Кэш, Знач ПараметрыЗапроса, Отказ)
	Результат = сбисОтправитьИОбработатьКомандуGETНаСервере(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда//Возвращаем структуру ошибки
		Возврат Результат;
	КонецЕсли;
	//Файл сохранен, помещаем в хранилище для возврата с клиента на сервер.
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Результат));
КонецФункции

// Функция - Получает данные файла вложения
//
// Параметры:
//  Кэш				 - Структура - Кэш обработки
//  ПараметрыФайла	 - Структура - Данные для получения файла вложения
//  Отказ			 - Булево	 - Флаг ошибки
// 
// Возвращаемое значение:
//  Строка - Результат чтения файла вложения
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Знач Кэш, Знач ПараметрыФайла, Отказ)
	РезультатЗапроса = сбисОтправитьИОбработатьКомандуGETНаСервере(Кэш, ПараметрыФайла, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	ИмяФайла = РезультатЗапроса;
	
	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	СтрокаТекст = СтрЗаменить(НРег(ТекстДок.ПрочитатьСтроку()), "'", """");
	СтрокаКодировка = Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех;
	// Проверим кодировки для принудительного чтения.	
	Для Каждого КодировкаДляЧтения Из Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять Цикл
		ПозицияКодировки = Найти(СтрокаТекст, "encoding");
		Если ПозицияКодировки И Найти(Сред(СтрокаТекст, ПозицияКодировки), КодировкаДляЧтения) Тогда
			СтрокаКодировка = КодировкаДляЧтения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// Переоткрываем файл в найденной кодировке
	ТекстДок.Открыть(ИмяФайла, СтрокаКодировка);
	РезультатТекст = ТекстДок.Прочитать();
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Если	РезультатТекст = Неопределено
		Или	Лев(РезультатТекст, 4) = "%PDF" Тогда // для PDF, JPEG файлов иногда возвращается кракозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
		РезультатТекст = "";
	КонецЕсли;
    Возврат РезультатТекст;
КонецФункции

////////////////////////////////////////////////////
////////////////////base64//////////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция СериализоватьИзСтроки_ВBase64(Кэш, ИсходнаяСтрока, Кодировка="windows-1251", Отказ)
	#Если ВебКлиент Тогда
		Попытка
			РезультатОтвет = сбисСтрокаВBASE64(ИсходнаяСтрока, Кодировка);
		Исключение
			Отказ = Истина;
			РезультатОтвет = Кэш.ОбщиеФункции.сбисИсключение(ОписаниеОшибки(), "API.сбисСтрокаВBASE64");
		КонецПопытки;
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		РезультатОтвет = СбисСтрокаВBASE64Клиент(Кэш, ИсходнаяСтрока, Кодировка, Отказ);
	#Иначе
		Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			РезультатОтвет = СбисСтрокаВBASE64Клиент(Кэш, ИсходнаяСтрока, Кодировка, Отказ);
		Иначе
			Попытка
				РезультатОтвет = сбисСтрокаВBASE64(ИсходнаяСтрока, Кодировка);
			Исключение
				Отказ = Истина;
				РезультатОтвет = Кэш.ОбщиеФункции.сбисИсключение(ОписаниеОшибки(), "API.сбисСтрокаВBASE64");
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатОтвет, "API.СериализоватьИзСтроки_ВBase64");
	КонецЕсли;
	Возврат РезультатОтвет;
КонецФункции

&НаКлиенте
Функция СериализоватьИзBase64_ВСтроку(Кэш, СтрокаBase64, Кодировка="windows-1251", Отказ)
	#Если ВебКлиент Тогда
		Попытка
			РезультатОтвет = сбисBASE64ВСтроку(СтрокаBase64, Кодировка);
		Исключение
			Отказ = Истина;
			РезультатОтвет = Кэш.ОбщиеФункции.сбисИсключение(ОписаниеОшибки(), "API.сбисBASE64ВСтроку");
		КонецПопытки;
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		РезультатОтвет = сбисBASE64ВСтрокуКлиент(Кэш, СтрокаBase64, Кодировка, Отказ);
	#Иначе
		Если Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте Тогда
			РезультатОтвет = сбисBASE64ВСтрокуКлиент(Кэш, СтрокаBase64, Кодировка, Отказ);
		Иначе
			Попытка
				РезультатОтвет = сбисBASE64ВСтроку(СтрокаBase64, Кодировка);
			Исключение
				Отказ = Истина;
				РезультатОтвет = Кэш.ОбщиеФункции.сбисИсключение(ОписаниеОшибки(), "API.сбисBASE64ВСтроку");
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатОтвет, "API.СериализоватьИзBase64_ВСтроку");
	КонецЕсли;
	Возврат РезультатОтвет;
КонецФункции

&НаСервереБезКонтекста
Функция СбисФайлВBASE64(ПолноеИмяФайла) Экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции

&НаСервереБезКонтекста
Функция СбисСтрокаВBASE64(строка, кодировка = "windows-1251") Экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяВрФ);  
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции

&НаКлиенте
Функция СбисСтрокаВBASE64Клиент(Кэш, ИсходнаяСтрока, КодировкаСтроки="windows-1251", Отказ)
	ДвоичныеДанныеXML = СбисСтрокаВДвоичныеДанныеКлиент(Кэш, ИсходнаяСтрока, КодировкаСтроки, Отказ);
	Если Отказ = Истина Тогда
		Возврат ДвоичныеДанныеXML;		
	КонецЕсли;
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");
	Возврат ТекстXMLBase64;
КонецФункции 

&НаКлиенте
Функция СбисСтрокаВДвоичныеДанныеКлиент(Кэш, ИсходнаяСтрока, КодировкаСтроки="windows-1251", Отказ)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ИсходнаяСтрока);
	ИмяВрФ = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("xml");
	Попытка 
		ТекстДок.Записать(ИмяВрФ, КодировкаСтроки);
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(772, "API.СбисСтрокаВBASE64Клиент",,,ОписаниеОшибки());
	КонецПопытки;
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ИмяВрФ);
	Кэш.ОбщиеФункции.СбисОчиститьВременныйФайлКлиент(ИмяВрФ);
	Возврат ДвоичныеДанныеXML;
КонецФункции

&НаСервереБезКонтекста
Функция сбисBASE64ВСтроку(ТекстXMLBase64, Кодировка) Экспорт
	ДвоичныеДанныеXML = Base64Значение(ТекстXMLBase64);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ДвоичныеДанныеXML.Записать(ИмяВрФ);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВрФ, Кодировка);
	html_text = ТекстДок.ПолучитьТекст();
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;
	Возврат html_text;
КонецФункции

&НаКлиенте
Функция сбисBASE64ВСтрокуКлиент(Кэш, Строка_Base64, Кодировка, Отказ) Экспорт
	ИмяВрФ = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("xml");
	Попытка
		ДвоичныеДанныеXML = Base64Значение(Строка_Base64);
		ДвоичныеДанныеXML.Записать(ИмяВрФ);
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ИмяВрФ, Кодировка);
		СбисРезультат = ТекстДок.ПолучитьТекст();
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(772, "API.сбисBASE64ВСтрокуКлиент",,,ОписаниеОшибки());
	КонецПопытки;
	Кэш.ОбщиеФункции.СбисОчиститьВременныйФайлКлиент(ИмяВрФ);
	Возврат СбисРезультат;
КонецФункции

////////////////////////////////////////////////////
//////////////Серверные настройки вызов/////////////
////////////////////////////////////////////////////


// Функция для переопределения видимости настроек для способа интеграции
// 
// Возвращаемое значение: Структура
//   - 
//
&НаКлиенте
Функция ВидимостьНастроек() Экспорт
	
	Настройки = МодульОбъектаКлиент().ВидимостьНастроекПоУмолчанию();	
	Настройки.ИспользоватьГенератор 	= Истина;
	Настройки.НастройкаЭП				= Истина;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьXslt(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	
	ПараметрыЗапроса = Новый Структура();
	Если ТипЗнч(ПараметрыМетода) = Тип("Структура")	И ПараметрыМетода.Свойство("НазваниеXSLT") Тогда
		ПараметрыЗапроса.Вставить("mask", ПараметрыМетода.НазваниеXSLT	+ ".sbis3.xslt");
	ИначеЕсли ТипЗнч(ПараметрыМетода) = Тип("Строка") Тогда
		ПараметрыЗапроса.Вставить("mask", ПараметрыМетода				+ ".sbis3.xslt");
	Иначе
		// Оставляем пустым и получаем весь список XSLT
		ПараметрыЗапроса.Вставить("mask", "*.xslt");
	КонецЕсли;
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "API301.FindXSLT", ПараметрыЗапроса, ДопПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Кэш.РаботаСJson.СбисПрочитатьJSON(Результат);
	Если Результат.Свойство("error") Тогда
		Отказ = Истина;
		ИнтеграцияИмя  = МодульОбъектаКлиент().ПолучитьЗначениеПараметраСбис("ИнтеграцияИмя");
		Результат = МодульОбъектаКлиент().НовыйСбисИсключение(Результат,  ИнтеграцияИмя + " (API301.FindXSLT)", 770, Результат.error.message);
	ИначеЕсли Результат.Свойство("data") Тогда
		Результат = Результат.data;
	Иначе
		// Возвращаем, как есть
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИни(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса",	"/integration_config/service/");
	ДопПараметрыЗапроса.Вставить("РежимКонвертации","Стандарт");
	сбисСервис = "IntegrationConnection";
	Если ИмяМетода = "ReadConfig" Тогда                                     
		сбисСервис = "IntegrationConfig";
	КонецЕсли;
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, сбисСервис + "." + ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьИни");
	ИначеЕсли Результат = Null Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.сбисИсключение(,"API.ПолучитьИни", 756, "Подключение недоступно", "Возможно оно недоступно для выбранного пользователя, либо было удалено.");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗаписатьConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConnection.WriteConnection", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса",	"/integration_config/service/");
	ДопПараметрыЗапроса.Вставить("РежимКонвертации","Стандарт");
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConnection.ReadConnectionList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConfig(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("АдресРесурса", "/integration_config/service/");
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "IntegrationConfig.ReadConfigList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	Возврат сбисRecordSet_to_1C(РезультатЗапроса, Отказ);
	
КонецФункции

&НаКлиенте
Функция сбисRecordSet_to_1C(сбисСписокЗаписей, Отказ) Экспорт 
	сбисДанные		= Неопределено;
	сбисКлючи		= Неопределено;
	сбисРезультат	= Новый Массив;
	Если Не ТипЗнч(сбисСписокЗаписей) = Тип("Структура")
		Или	Не сбисСписокЗаписей.Свойство("d", сбисДанные)
		Или Не сбисСписокЗаписей.Свойство("s", сбисКлючи)Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Переданая структура не имеет формат RecordSet");
	КонецЕсли;
	Для Каждого СтрокаДанных Из сбисДанные Цикл
		сбисСтрокаРезультат = Новый Структура;
		Для ИндексКлюча = 0 По сбисКлючи.Количество()-1 Цикл
			Попытка
				сбисСтрокаРезультат.Вставить(сбисКлючи[ИндексКлюча]["n"], СтрокаДанных[ИндексКлюча]);
			Исключение
				//Некорректные ключи не обрабатываются
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		сбисРезультат.Добавить(сбисСтрокаРезультат);
	КонецЦикла;
	Возврат сбисРезультат;
	
КонецФункции

////////////////////////////////////////////////////
//////////////////Статистика вызов//////////////////
////////////////////////////////////////////////////

//Отправляет собщение о статистике на online
//СообщениеСтатистики: генерируется функцией сбисСтатистика_СформироватьДанныеСообщений
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт 
	сбисДополнительныеПараметрыОшибки = Новый Структура("АдресРесурса, ВернутьОшибку", "/integration_config/service/", Истина);
	СтруктураПараметровЗапроса = Новый Структура("stat", СообщениеСтатистики);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "API3.WriteStat", СтруктураПараметровЗапроса, сбисДополнительныеПараметрыОшибки, Отказ);
КонецФункции

//Отправляет собщение о ошибке на online
//СообщениеОбОшибке: генерируется функцией сбисСтатистика_СформироватьДанныеСообщений
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	сбисДополнительныеПараметрыОшибки = Новый Структура("АдресРесурса, СообщатьПриОшибке, ВернутьОшибку", "/integration_config/service/", Ложь, Истина);
	СообщениеОбОшибке.data = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(СообщениеОбОшибке.data);
	
	СтруктураПараметровЗапроса = Новый Структура("error", СообщениеОбОшибке);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "API3.WriteError", СтруктураПараметровЗапроса, сбисДополнительныеПараметрыОшибки, Отказ);
КонецФункции

&НаКлиенте
Функция сбисПроверкаОбновления(Кэш, ИнформацияОТекущейВерсии, Отказ) Экспорт
	ДопПараметры = Новый Структура("АдресРесурса, СообщатьПриОшибке, ВернутьОшибку", "/integration_config/service/", Ложь, Истина); 
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "API3.GetProductVersionStatus", ИнформацияОТекущейВерсии, ДопПараметры, Отказ);
КонецФункции

////////////////////////////////////////////////////
////////////////VII  API объекты////////////////////
////////////////////////////////////////////////////


//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция Connector_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат, АдресРесурса, РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "Connector.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПодготовитьПосылкуСОбъектами");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Получение объекта на загрузку в 1С
&НаКлиенте
Функция ExtSyncDoc_GetObjectForExecute(Кэш,ИдентификаторПосылки, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.GetObjectForExecute", Новый Структура("SyncDocId", ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.ПолучитьОбъектНаЗагрузку");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Рассчет объекта на сервисе
&НаКлиенте
Функция ExtSyncDoc_CalcObjectForExecute(Кэш, СтруктураОбъекта, ИдентификаторПосылки, ИмяИни, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.CalcObjectForExecute", Новый Структура("ObjectData,IniName,SyncDocId", СтруктураОбъекта, ИмяИни, ИдентификаторПосылки), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Обертка метода ExtSyncDoc.Write
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Write(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат, АдресРесурса, РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");

	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Write", ПараметрыМетода, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Write()

// Обертка метода ExtSyncDoc.Execute
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ExtSyncDoc_Execute(Кэш, ПараметрыМетода, Отказ = Ложь) Экспорт 
	
	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Execute", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат;

КонецФункции // ExtSyncDoc_Execute()

// Обертка метода API3.GetSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте     
Функция API3_GetSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт   
	
	ДопПараметры = Новый Структура("АдресРесурса", "/service/?srv=1");
	
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "API3.GetSbisObject", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ПрочитатьАПИОбъектСБИС");
	КонецЕсли;  
	
	Возврат Результат;

КонецФункции // API3_GetSbisObject()

//Подготовка данных по загружаемым в 1С объектам на сервисе IntegrationConfig порционно
&НаКлиенте
Функция ExtSyncDoc_Prepare(Кэш, ПараметрыВызова, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExtSyncDoc.Prepare", ПараметрыВызова, ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSyncDoc.Prepare");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

// API3.ExtSyncDocRead
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_ExtSyncDocRead(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "API3.ExtSyncDocRead", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API.ОбновитьОбъектСБИСИзОбъекта1С");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // API3.ExtSyncDocRead()

// API3.FindSbisObject
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция API3_FindSbisObject(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/service/");

	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "API3.FindSbisObject", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "API3.FindSbisObject");
	КонецЕсли;        
	
	Возврат Результат["result"]; 

КонецФункции // API3.FindSbisObject() 

// MappingObject.UpdateFromData
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция MappingObject_UpdateFromData(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт 

	ДопПараметры = Новый Структура("ЕстьРезультат,АдресРесурса", Истина, "/integration_config/service/");

	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "MappingObject.UpdateFromData", ПараметрыМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "MappingObject.UpdateFromData");
	КонецЕсли;        
	
	Возврат Результат; 

КонецФункции // MappingObject.UpdateFromData() 

&НаКлиенте
Функция ZakupkiGovAPI_GetContractInfo(Кэш, ПараметрыМетода, ДопПараметры, Отказ = Ложь) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;

	ДопПараметры.Вставить("АдресРесурса", "/service/?srv=1");
	
	АргументМетода = Новый Структура("data", ПараметрыМетода);
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ZakupkiGovAPI.GetContractInfo", АргументМетода, ДопПараметры, Отказ);
	
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, "ZakupkiGovAPI.GetContractInfo");
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

//Обновление записи Маппинга объекта на сервисе
&НаКлиенте
Функция ОбновитьЗаписьСопоставления(Кэш, Фильтр, Данные, Отказ) Экспорт
	ДопПараметрыВызова = Новый Структура("ЕстьРезультат,АдресРесурса,РежимКонвертации", Истина, "/integration_config/service/", "Стандарт");
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "MappingObject.FindAndUpdate", Новый Структура("Filter,Data", Фильтр, Данные), ДопПараметрыВызова, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.сбисИсключение(Результат, "API.РассчитатьОбъектыНаЗапись");
	КонецЕсли;
	Возврат Результат;
КонецФункции

#Область include_core2_vo2_СпособыОбмена_API_ВнешниеВызовы
#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_API_ВнешниеОбертки
#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_API_ВнешниеОбертки_АсинхроннаяОтправка
#КонецОбласти 

#Область include_core2_vo2_СпособыОбмена_API_ВнешниеОбертки_АсинхронноеВыполнениеДействия
#КонецОбласти

#Область include_core2_vo2_СпособыОбмена_API_ВнешниеОбертки_СопоставлениеНоменклатуры
#КонецОбласти